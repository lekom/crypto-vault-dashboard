{
  "version": 3,
  "sources": ["../../@metamask/delegation-toolkit/dist/chunk-E2SEJZTC.mjs", "../../@metamask/delegation-deployments/src/contractAddresses.ts", "../../@metamask/delegation-deployments/src/index.ts", "../../@metamask/delegation-abis/src/formatted/Address.ts", "../../@metamask/delegation-abis/src/formatted/AllowedMethodsEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/AllowedTargetsEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/Base64.ts", "../../@metamask/delegation-abis/src/formatted/Base64URL.ts", "../../@metamask/delegation-abis/src/formatted/ArgsEqualityCheckEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/Context.ts", "../../@metamask/delegation-abis/src/formatted/Create2.ts", "../../@metamask/delegation-abis/src/formatted/CaveatEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/DeleGatorCore.ts", "../../@metamask/delegation-abis/src/formatted/DelegationMetaSwapAdapter.ts", "../../@metamask/delegation-abis/src/formatted/BlockNumberEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/DeployedEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/BitMaps.ts", "../../@metamask/delegation-abis/src/formatted/EIP7702DeleGatorCore.ts", "../../@metamask/delegation-abis/src/formatted/ERC1155BalanceChangeEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/DelegationManager.ts", "../../@metamask/delegation-abis/src/formatted/ECDSA.ts", "../../@metamask/delegation-abis/src/formatted/EIP712.ts", "../../@metamask/delegation-abis/src/formatted/ERC1967Proxy.ts", "../../@metamask/delegation-abis/src/formatted/AllowedCalldataEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/ERC1271Lib.ts", "../../@metamask/delegation-abis/src/formatted/ERC20TransferAmountEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/ERC20PeriodTransferEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/ERC165.ts", "../../@metamask/delegation-abis/src/formatted/EncoderLib.ts", "../../@metamask/delegation-abis/src/formatted/ERC1967Utils.ts", "../../@metamask/delegation-abis/src/formatted/EIP7702StatelessDeleGator.ts", "../../@metamask/delegation-abis/src/formatted/ERC20BalanceChangeEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/Exec.ts", "../../@metamask/delegation-abis/src/formatted/ERC721BalanceChangeEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/ExecutionLib.ts", "../../@metamask/delegation-abis/src/formatted/ERC721TransferEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/ERC20StreamingEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/IAccount.ts", "../../@metamask/delegation-abis/src/formatted/ExactCalldataEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/IAggregator.ts", "../../@metamask/delegation-abis/src/formatted/ExactExecutionEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/IBeacon.ts", "../../@metamask/delegation-abis/src/formatted/IDelegationManager.ts", "../../@metamask/delegation-abis/src/formatted/EntryPoint.ts", "../../@metamask/delegation-abis/src/formatted/IAccountExecute.ts", "../../@metamask/delegation-abis/src/formatted/IERC1155Receiver.ts", "../../@metamask/delegation-abis/src/formatted/IERC1155.ts", "../../@metamask/delegation-abis/src/formatted/ICaveatEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/IERC1363.ts", "../../@metamask/delegation-abis/src/formatted/IERC173.ts", "../../@metamask/delegation-abis/src/formatted/IERC165.ts", "../../@metamask/delegation-abis/src/formatted/ExactCalldataBatchEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/IERC1271.ts", "../../@metamask/delegation-abis/src/formatted/IDeleGatorCore.ts", "../../@metamask/delegation-abis/src/formatted/ExactExecutionBatchEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/ExecutionHelper.ts", "../../@metamask/delegation-abis/src/formatted/IERC5267.ts", "../../@metamask/delegation-abis/src/formatted/IERC20.ts", "../../@metamask/delegation-abis/src/formatted/IERC721.ts", "../../@metamask/delegation-abis/src/formatted/IERC7579Account.ts", "../../@metamask/delegation-abis/src/formatted/IPaymaster.ts", "../../@metamask/delegation-abis/src/formatted/IStakeManager.ts", "../../@metamask/delegation-abis/src/formatted/IEntryPoint.ts", "../../@metamask/delegation-abis/src/formatted/IMetaSwap.ts", "../../@metamask/delegation-abis/src/formatted/HybridDeleGator.ts", "../../@metamask/delegation-abis/src/formatted/MessageHashUtils.ts", "../../@metamask/delegation-abis/src/formatted/IdEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/LimitedCallsEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/INonceManager.ts", "../../@metamask/delegation-abis/src/formatted/ModeLib.ts", "../../@metamask/delegation-abis/src/formatted/NativeTokenStreamingEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/MockFailureCaveatEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/Math.ts", "../../@metamask/delegation-abis/src/formatted/LogicalOrWrapperEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/MockCaveatEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/NativeTokenPaymentEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/NativeTokenPeriodTransferEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/NonceManager.ts", "../../@metamask/delegation-abis/src/formatted/NonceEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/MultiTokenPeriodEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/NativeBalanceChangeEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/Ownable.ts", "../../@metamask/delegation-abis/src/formatted/P256VerifierLib.ts", "../../@metamask/delegation-abis/src/formatted/IERC721Receiver.ts", "../../@metamask/delegation-abis/src/formatted/Initializable.ts", "../../@metamask/delegation-abis/src/formatted/Ownable2Step.ts", "../../@metamask/delegation-abis/src/formatted/IERC7821.ts", "../../@metamask/delegation-abis/src/formatted/Pausable.ts", "../../@metamask/delegation-abis/src/formatted/NativeTokenTransferAmountEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/P256SCLVerifierLib.ts", "../../@metamask/delegation-abis/src/formatted/SCL_Wrapper.ts", "../../@metamask/delegation-abis/src/formatted/OwnershipTransferEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/SafeERC20.ts", "../../@metamask/delegation-abis/src/formatted/SenderCreator.ts", "../../@metamask/delegation-abis/src/formatted/ReentrancyGuard.ts", "../../@metamask/delegation-abis/src/formatted/SafeCast.ts", "../../@metamask/delegation-abis/src/formatted/SignedMath.ts", "../../@metamask/delegation-abis/src/formatted/ShortStrings.ts", "../../@metamask/delegation-abis/src/formatted/SimpleFactory.ts", "../../@metamask/delegation-abis/src/formatted/RedeemerEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/StorageSlot.ts", "../../@metamask/delegation-abis/src/formatted/SpecificActionERC20TransferBatchEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/StakeManager.ts", "../../@metamask/delegation-abis/src/formatted/Strings.ts", "../../@metamask/delegation-abis/src/formatted/WebAuthn.ts", "../../@metamask/delegation-abis/src/formatted/IERC1822Proxiable.ts", "../../@metamask/delegation-abis/src/formatted/ValueLteEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/UserOperationLib.ts", "../../@metamask/delegation-abis/src/formatted/UUPSUpgradeable.ts", "../../@metamask/delegation-abis/src/formatted/TimestampEnforcer.ts", "../../@metamask/delegation-abis/src/formatted/Proxy.ts", "../../@metamask/delegation-abis/src/formatted/Panic.ts", "../../@metamask/delegation-abis/src/formatted/MultiSigDeleGator.ts", "../../@metamask/delegation-abis/src/formatted/SCL_RIP7212.ts", "../../viem/utils/getAction.ts", "../../viem/errors/log.ts", "../../viem/utils/abi/encodeEventTopics.ts", "../../viem/utils/filters/createFilterRequestScope.ts", "../../viem/actions/public/createContractEventFilter.ts", "../../viem/utils/errors/getContractError.ts", "../../viem/accounts/utils/publicKeyToAddress.ts", "../../viem/utils/signature/recoverPublicKey.ts", "../../viem/utils/signature/recoverAddress.ts", "../../viem/utils/encoding/toRlp.ts", "../../viem/utils/authorization/hashAuthorization.ts", "../../viem/utils/authorization/recoverAuthorizationAddress.ts", "../../viem/errors/estimateGas.ts", "../../viem/utils/errors/getEstimateGasError.ts", "../../viem/errors/fee.ts", "../../viem/errors/block.ts", "../../viem/utils/formatters/transaction.ts", "../../viem/utils/formatters/block.ts", "../../viem/actions/public/getBlock.ts", "../../viem/actions/public/getGasPrice.ts", "../../viem/actions/public/estimateMaxPriorityFeePerGas.ts", "../../viem/actions/public/estimateFeesPerGas.ts", "../../viem/actions/public/getTransactionCount.ts", "../../viem/utils/blob/blobsToCommitments.ts", "../../viem/utils/blob/blobsToProofs.ts", "../../@noble/hashes/src/sha256.ts", "../../viem/utils/hash/sha256.ts", "../../viem/utils/blob/commitmentToVersionedHash.ts", "../../viem/utils/blob/commitmentsToVersionedHashes.ts", "../../viem/constants/blob.ts", "../../viem/constants/kzg.ts", "../../viem/errors/blob.ts", "../../viem/utils/blob/toBlobs.ts", "../../viem/utils/blob/toBlobSidecars.ts", "../../viem/utils/transaction/getTransactionType.ts", "../../viem/actions/public/getChainId.ts", "../../viem/actions/wallet/prepareTransactionRequest.ts", "../../viem/actions/public/estimateGas.ts", "../../viem/actions/public/estimateContractGas.ts", "../../viem/utils/abi/decodeEventLog.ts", "../../viem/utils/abi/parseEventLogs.ts", "../../viem/utils/formatters/log.ts", "../../viem/actions/public/getLogs.ts", "../../viem/actions/public/getContractEvents.ts", "../../viem/actions/public/readContract.ts", "../../viem/actions/public/simulateContract.ts", "../../viem/utils/observe.ts", "../../viem/utils/wait.ts", "../../viem/utils/poll.ts", "../../viem/utils/promise/withCache.ts", "../../viem/actions/public/getBlockNumber.ts", "../../viem/actions/public/getFilterChanges.ts", "../../viem/actions/public/uninstallFilter.ts", "../../viem/actions/public/watchContractEvent.ts", "../../viem/errors/account.ts", "../../viem/utils/chain/assertCurrentChain.ts", "../../viem/utils/errors/getTransactionError.ts", "../../viem/actions/wallet/sendRawTransaction.ts", "../../viem/actions/wallet/sendTransaction.ts", "../../viem/actions/wallet/writeContract.ts", "../../viem/actions/getContract.ts", "../../viem/errors/calls.ts", "../../viem/utils/promise/withRetry.ts", "../../viem/utils/formatters/transactionReceipt.ts", "../../viem/actions/wallet/sendCalls.ts", "../../viem/actions/wallet/getCallsStatus.ts", "../../viem/actions/wallet/waitForCallsStatus.ts", "../../viem/utils/uid.ts", "../../viem/clients/createClient.ts", "../../viem/utils/ens/errors.ts", "../../viem/utils/ens/encodedLabelToLabelhash.ts", "../../viem/utils/ens/namehash.ts", "../../viem/utils/ens/encodeLabelhash.ts", "../../viem/utils/ens/labelhash.ts", "../../viem/utils/ens/packetToBytes.ts", "../../viem/actions/ens/getEnsAddress.ts", "../../viem/errors/ens.ts", "../../viem/utils/ens/avatar/utils.ts", "../../viem/utils/ens/avatar/parseAvatarRecord.ts", "../../viem/actions/ens/getEnsText.ts", "../../viem/actions/ens/getEnsAvatar.ts", "../../viem/actions/ens/getEnsName.ts", "../../viem/actions/ens/getEnsResolver.ts", "../../viem/actions/public/createAccessList.ts", "../../viem/actions/public/createBlockFilter.ts", "../../viem/actions/public/createEventFilter.ts", "../../viem/actions/public/createPendingTransactionFilter.ts", "../../viem/actions/public/getBalance.ts", "../../viem/actions/public/getBlobBaseFee.ts", "../../viem/actions/public/getBlockTransactionCount.ts", "../../viem/actions/public/getCode.ts", "../../viem/errors/eip712.ts", "../../viem/actions/public/getEip712Domain.ts", "../../viem/utils/formatters/feeHistory.ts", "../../viem/actions/public/getFeeHistory.ts", "../../viem/actions/public/getFilterLogs.ts", "../../viem/utils/abi/encodePacked.ts", "../../viem/utils/data/isBytes.ts", "../../viem/utils/address/getContractAddress.ts", "../../viem/utils/transaction/assertTransaction.ts", "../../viem/utils/transaction/serializeAccessList.ts", "../../viem/utils/transaction/serializeTransaction.ts", "../../viem/utils/authorization/serializeAuthorizationList.ts", "../../viem/utils/authorization/verifyAuthorization.ts", "../../viem/utils/promise/withDedupe.ts", "../../viem/utils/buildRequest.ts", "../../viem/utils/chain/defineChain.ts", "../../viem/utils/hash/isHash.ts", "../../@noble/hashes/src/legacy.ts", "../../viem/utils/nonceManager.ts", "../../viem/utils/promise/withTimeout.ts", "../../viem/utils/rpc/id.ts", "../../viem/utils/rpc/http.ts", "../../viem/utils/rpc/socket.ts", "../../viem/utils/rpc/webSocket.ts", "../../viem/utils/rpc/compat.ts", "../../viem/constants/strings.ts", "../../viem/utils/signature/toPrefixedMessage.ts", "../../viem/utils/signature/hashMessage.ts", "../../viem/errors/typedData.ts", "../../viem/utils/typedData.ts", "../../viem/utils/signature/hashTypedData.ts", "../../viem/constants/bytes.ts", "../../ox/erc8010/SignatureErc8010.ts", "../../ox/core/internal/lru.ts", "../../ox/core/Caches.ts", "../../ox/core/Hash.ts", "../../ox/core/PublicKey.ts", "../../ox/core/Address.ts", "../../ox/core/Solidity.ts", "../../ox/core/internal/abiParameters.ts", "../../ox/core/internal/cursor.ts", "../../ox/core/AbiParameters.ts", "../../ox/core/Rlp.ts", "../../ox/core/Signature.ts", "../../ox/core/Authorization.ts", "../../ox/core/Secp256k1.ts", "../../viem/utils/signature/serializeErc6492Signature.ts", "../../viem/utils/formatters/proof.ts", "../../viem/actions/public/getProof.ts", "../../viem/actions/public/getStorageAt.ts", "../../viem/actions/public/getTransaction.ts", "../../viem/actions/public/getTransactionConfirmations.ts", "../../viem/actions/public/getTransactionReceipt.ts", "../../viem/actions/public/multicall.ts", "../../viem/actions/public/simulateBlocks.ts", "../../ox/core/internal/abiItem.ts", "../../ox/core/AbiItem.ts", "../../ox/core/AbiConstructor.ts", "../../ox/core/AbiFunction.ts", "../../viem/constants/address.ts", "../../viem/actions/public/simulateCalls.ts", "../../ox/erc6492/SignatureErc6492.ts", "../../viem/utils/signature/serializeSignature.ts", "../../viem/actions/public/verifyHash.ts", "../../viem/actions/public/verifyMessage.ts", "../../viem/actions/public/verifyTypedData.ts", "../../viem/actions/public/watchBlockNumber.ts", "../../viem/actions/public/waitForTransactionReceipt.ts", "../../viem/actions/public/watchBlocks.ts", "../../viem/actions/public/watchEvent.ts", "../../viem/actions/public/watchPendingTransactions.ts", "../../viem/utils/siwe/parseSiweMessage.ts", "../../viem/utils/siwe/validateSiweMessage.ts", "../../viem/actions/siwe/verifySiweMessage.ts", "../../viem/actions/wallet/sendRawTransactionSync.ts", "../../viem/clients/decorators/public.ts", "../../viem/clients/createPublicClient.ts", "../../viem/actions/wallet/addChain.ts", "../../viem/actions/wallet/deployContract.ts", "../../viem/actions/wallet/getAddresses.ts", "../../viem/actions/wallet/getCapabilities.ts", "../../viem/actions/wallet/getPermissions.ts", "../../viem/actions/wallet/prepareAuthorization.ts", "../../viem/actions/wallet/requestAddresses.ts", "../../viem/actions/wallet/requestPermissions.ts", "../../viem/actions/wallet/sendCallsSync.ts", "../../viem/actions/wallet/sendTransactionSync.ts", "../../viem/actions/wallet/showCallsStatus.ts", "../../viem/actions/wallet/signAuthorization.ts", "../../viem/actions/wallet/signMessage.ts", "../../viem/actions/wallet/signTransaction.ts", "../../viem/actions/wallet/signTypedData.ts", "../../viem/actions/wallet/switchChain.ts", "../../viem/actions/wallet/watchAsset.ts", "../../viem/actions/wallet/writeContractSync.ts", "../../viem/clients/decorators/wallet.ts", "../../viem/clients/createWalletClient.ts", "../../viem/clients/transports/createTransport.ts", "../../viem/clients/transports/custom.ts", "../../viem/clients/transports/fallback.ts", "../../viem/errors/transport.ts", "../../viem/clients/transports/http.ts", "../../viem/clients/transports/webSocket.ts", "../../viem/utils/signature/parseSignature.ts", "../../ox/core/Base64.ts", "../../@noble/curves/src/nist.ts", "../../@noble/curves/src/p256.ts", "../../ox/core/WebAuthnP256.ts", "../../viem/account-abstraction/constants/abis.ts", "../../viem/account-abstraction/utils/userOperation/getInitCode.ts", "../../viem/account-abstraction/utils/userOperation/toPackedUserOperation.ts", "../../viem/account-abstraction/utils/userOperation/getUserOperationTypedData.ts", "../../viem/account-abstraction/utils/userOperation/getUserOperationHash.ts", "../../viem/account-abstraction/accounts/toSmartAccount.ts", "../../@scure/base/index.ts", "../../@scure/bip32/index.ts", "../../viem/accounts/toAccount.ts", "../../@scure/bip39/esm/wordlists/czech.js", "../../@scure/bip39/esm/wordlists/english.js", "../../@scure/bip39/esm/wordlists/french.js", "../../@scure/bip39/esm/wordlists/italian.js", "../../@scure/bip39/esm/wordlists/japanese.js", "../../@scure/bip39/esm/wordlists/korean.js", "../../@scure/bip39/esm/wordlists/portuguese.js", "../../@scure/bip39/esm/wordlists/simplified-chinese.js", "../../@scure/bip39/esm/wordlists/spanish.js", "../../@scure/bip39/esm/wordlists/traditional-chinese.js", "../../viem/account-abstraction/errors/bundler.ts", "../../viem/account-abstraction/constants/address.ts", "../../ox/erc4337/UserOperation.ts", "../../ox/core/TypedData.ts", "../../viem/account-abstraction/utils/userOperation/toUserOperation.ts", "../../webauthn-p256/utils.ts", "../../webauthn-p256/credential.ts", "../../webauthn-p256/sign.ts", "../../@metamask/delegation-utils/src/index.ts", "../../@metamask/delegation-utils/src/executions.ts", "../../@metamask/delegation-utils/src/blockchain.ts", "../../@metamask/delegation-utils/src/caveats.ts", "../../@metamask/delegation-utils/src/constants.ts", "../../@metamask/delegation-utils/src/data.ts", "../../@metamask/delegation-utils/src/delegation.ts", "../../@metamask/delegation-utils/src/caveatBuilder/allowedMethodsBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/allowedTargetsBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/caveatBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/deployedBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/allowedCalldataBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/erc20BalanceChangeBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/types.ts", "../../@metamask/delegation-utils/src/caveatBuilder/valueLteBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/limitedCallsBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/idBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/nonceBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/timestampBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/shared.ts", "../../@metamask/delegation-utils/src/caveatBuilder/blockNumberBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/erc20TransferAmountBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/erc20StreamingBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/nativeTokenStreamingBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/nativeTokenTransferAmountBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/nativeBalanceChangeBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/redeemerBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/nativeTokenPaymentBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/argsEqualityCheckBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/erc1155BalanceChangeBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/erc721BalanceChangeBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/erc721TransferBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/specificActionERC20TransferBatchBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/erc20PeriodTransferBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/nativeTokenPeriodTransferBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/exactCalldataBatchBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/exactCalldataBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/exactExecutionBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/exactExecutionBatchBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/multiTokenPeriodBuilder.ts", "../../@metamask/delegation-utils/src/caveatBuilder/index.ts", "../../@metamask/delegation-utils/src/delegatorEnvironment.ts", "../../@metamask/delegation-utils/src/write.ts", "../../@metamask/delegation-utils/src/rpcError.ts", "../../@metamask/delegation-utils/src/userOp.ts", "../../@metamask/delegation-utils/src/webAuthn.ts", "../../@metamask/delegation-utils/src/signatures.ts", "../../@metamask/delegation-toolkit/src/index.ts", "../../@metamask/delegation-toolkit/src/toMetaMaskSmartAccount.ts", "../../@metamask/delegation-toolkit/src/signatory.ts", "../../@metamask/delegation-toolkit/src/counterfactualAccountData.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/HybridDeleGator/encode.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/HybridDeleGator/methods/addKey.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/HybridDeleGator/methods/initialize.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/HybridDeleGator/methods/reinitialize.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/HybridDeleGator/methods/removeKey.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/HybridDeleGator/methods/updateSigners.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/MultiSigDeleGator/encode.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/MultiSigDeleGator/methods/addSigner.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/MultiSigDeleGator/methods/initialize.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/MultiSigDeleGator/methods/reinitialize.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/MultiSigDeleGator/methods/removeSigner.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/MultiSigDeleGator/methods/replaceSigner.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/MultiSigDeleGator/methods/updateThreshold.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/MultiSigDeleGator/methods/updateMultiSigParameters.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/SimpleFactory/encode.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/SimpleFactory/methods/create2Deploy.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/utils.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DeleGatorCore/read.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DeleGatorCore/methods/getDelegationManager.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DeleGatorCore/methods/getDeposit.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DeleGatorCore/methods/getEntryPoint.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DeleGatorCore/methods/getNonce.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DeleGatorCore/methods/getProxyImplementation.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DeleGatorCore/methods/getProxyVersion.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DeleGatorCore/methods/isValidSignature.ts", "../../@metamask/delegation-toolkit/src/encodeCalls.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DeleGatorCore/encode.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DeleGatorCore/methods/disableDelegation.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DeleGatorCore/methods/enableDelegation.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DeleGatorCore/methods/execute.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DeleGatorCore/methods/executeWithMode.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DeleGatorCore/methods/upgradeToAndCall.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/EntryPoint/read.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/EntryPoint/methods/getNonce.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DelegationManager/encode.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DelegationManager/methods/disableDelegation.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DelegationManager/methods/enableDelegation.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DelegationManager/methods/redeemDelegations.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DelegationManager/execute.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DelegationManager/read.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DelegationManager/methods/getAnyDelegate.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DelegationManager/methods/getRootAuthority.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DelegationManager/simulate.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DelegationManager/constants.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DeleGatorCore/execute.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/DeleGatorCore/simulate.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/EIP712/read.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/EIP712/methods/getContractName.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/EIP712/methods/getContractVersion.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/EIP712/methods/getDomainVersion.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/HybridDeleGator/read.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/HybridDeleGator/methods/getKey.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/HybridDeleGator/methods/getKeyIdHashes.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/HybridDeleGator/methods/getKeyIdHashesCount.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/HybridDeleGator/simulate.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/HybridDeleGator/constants.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/MultiSigDeleGator/read.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/MultiSigDeleGator/methods/getSigners.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/MultiSigDeleGator/methods/getSignersCount.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/MultiSigDeleGator/methods/getThreshold.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/MultiSigDeleGator/methods/isSigner.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/MultiSigDeleGator/methods/getMaxNumberOfSigners.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/MultiSigDeleGator/simulate.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/MultiSigDeleGator/constants.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/Ownable2Step/read.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/Ownable2Step/methods/getPendingOwner.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/Ownable2Step/methods/getOwner.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/Ownable2Step/execute.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/Ownable2Step/methods/transferOwnership.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/Ownable2Step/methods/renounceOwnership.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/Ownable2Step/methods/acceptOwnership.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/Ownable2Step/encode.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/Ownable2Step/simulate.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/Pausable/read.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/Pausable/methods/isPaused.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/Pausable/execute.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/Pausable/methods/pause.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/Pausable/methods/unpause.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/Pausable/encode.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/Pausable/simulate.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/SimpleFactory/read.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/SimpleFactory/methods/getCreate2Address.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/SimpleFactory/simulate.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/SimpleFactory/execute.ts", "../../@metamask/delegation-toolkit/src/DelegationFramework/index.ts"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\nexport {\n  __export\n};\n//# sourceMappingURL=chunk-E2SEJZTC.mjs.map", "export const deployment_1_3_0 = {\n  DelegationManager: '0xdb9B1e94B5b69Df7e401DDbedE43491141047dB3',\n  EntryPoint: '0x0000000071727De22E5E9d8BAf0edAc6f37da032',\n  SimpleFactory: '0x69Aa2f9fe1572F1B640E1bbc512f5c3a734fc77c',\n  // Implementations\n  MultiSigDeleGatorImpl: '0x56a9EdB16a0105eb5a4C54f4C062e2868844f3A7',\n  HybridDeleGatorImpl: '0x48dBe696A4D990079e039489bA2053B36E8FFEC4',\n  EIP7702StatelessDeleGatorImpl: '0x63c0c19a282a1B52b07dD5a65b58948A07DAE32B',\n  // Caveat Enforcers\n  AllowedCalldataEnforcer: '0xc2b0d624c1c4319760C96503BA27C347F3260f55',\n  AllowedMethodsEnforcer: '0x2c21fD0Cb9DC8445CB3fb0DC5E7Bb0Aca01842B5',\n  AllowedTargetsEnforcer: '0x7F20f61b1f09b08D970938F6fa563634d65c4EeB',\n  BlockNumberEnforcer: '0x5d9818dF0AE3f66e9c3D0c5029DAF99d1823ca6c',\n  DeployedEnforcer: '0x24ff2AA430D53a8CD6788018E902E098083dcCd2',\n  ERC20BalanceChangeEnforcer: '0xcdF6aB796408598Cea671d79506d7D48E97a5437',\n  ERC20TransferAmountEnforcer: '0xf100b0819427117EcF76Ed94B358B1A5b5C6D2Fc',\n  ERC20PeriodTransferEnforcer: '0x474e3Ae7E169e940607cC624Da8A15Eb120139aB',\n  ERC20StreamingEnforcer: '0x56c97aE02f233B29fa03502Ecc0457266d9be00e',\n  ERC721BalanceChangeEnforcer: '0x8aFdf96eDBbe7e1eD3f5Cd89C7E084841e12A09e',\n  ERC721TransferEnforcer: '0x3790e6B7233f779b09DA74C72b6e94813925b9aF',\n  ERC1155BalanceChangeEnforcer: '0x63c322732695cAFbbD488Fc6937A0A7B66fC001A',\n  ExactCalldataBatchEnforcer: '0x982FD5C86BBF425d7d1451f974192d4525113DfD',\n  ExactCalldataEnforcer: '0x99F2e9bF15ce5eC84685604836F71aB835DBBdED',\n  ExactExecutionBatchEnforcer: '0x1e141e455d08721Dd5BCDA1BaA6Ea5633Afd5017',\n  ExactExecutionEnforcer: '0x146713078D39eCC1F5338309c28405ccf85Abfbb',\n  IdEnforcer: '0xC8B5D93463c893401094cc70e66A206fb5987997',\n  LimitedCallsEnforcer: '0x04658B29F6b82ed55274221a06Fc97D318E25416',\n  NativeBalanceChangeEnforcer: '0xbD7B277507723490Cd50b12EaaFe87C616be6880',\n  ArgsEqualityCheckEnforcer: '0x44B8C6ae3C304213c3e298495e12497Ed3E56E41',\n  NativeTokenPaymentEnforcer: '0x4803a326ddED6dDBc60e659e5ed12d85c7582811',\n  NativeTokenTransferAmountEnforcer:\n    '0xF71af580b9c3078fbc2BBF16FbB8EEd82b330320',\n  NativeTokenStreamingEnforcer: '0xD10b97905a320b13a0608f7E9cC506b56747df19',\n  NativeTokenPeriodTransferEnforcer:\n    '0x9BC0FAf4Aca5AE429F4c06aEEaC517520CB16BD9',\n  NonceEnforcer: '0xDE4f2FAC4B3D87A1d9953Ca5FC09FCa7F366254f',\n  OwnershipTransferEnforcer: '0x7EEf9734E7092032B5C56310Eb9BbD1f4A524681',\n  RedeemerEnforcer: '0xE144b0b2618071B4E56f746313528a669c7E65c5',\n  SpecificActionERC20TransferBatchEnforcer:\n    '0x00e0251aaA263dfE3B3541B758A82D1CBA1c3B6D',\n  TimestampEnforcer: '0x1046bb45C8d673d4ea75321280DB34899413c069',\n  ValueLteEnforcer: '0x92Bf12322527cAA612fd31a0e810472BBB106A8F',\n  MultiTokenPeriodEnforcer: '0xFB2f1a9BD76d3701B730E5d69C3219D42D80eBb7',\n} as const;\n\nexport const deployments_1_1_0 = {\n  DelegationManager: '0x56D56e07e3d6Ee5a24e30203A37a0a460f42D7A3',\n  EntryPoint: '0x0000000071727De22E5E9d8BAf0edAc6f37da032',\n  SimpleFactory: '0x6ff518884f21168c30c58CB21184D6AdBC18Ad90',\n  // Implementations\n  MultiSigDeleGatorImpl: '0xd1f421EDbA5e3FA9efe3874827114b20C5BEC40C',\n  HybridDeleGatorImpl: '0x941f3a016F8726d5643Ce62452d0D78492D42b42',\n  // Caveat Enforcers\n  AllowedCalldataEnforcer: '0xff71d60f3208469cBCE0859717B5198042DCB3F3',\n  AllowedMethodsEnforcer: '0xe32C2561792e8446Abe73B9f557B881C13906186',\n  AllowedTargetsEnforcer: '0x06aaE4c67EEA95277c46Bf79b1583d4a01772D22',\n  BlockNumberEnforcer: '0x8E470D2Ae278457b42d2405E0B8Cd4BE21Ed9045',\n  DeployedEnforcer: '0xf9088f013dBD9ebb7Cebd66fEB48253c6Ac5a820',\n  ERC20BalanceGteEnforcer: '0xB7B6f32ec6343261D814e55Ed8C5925d91Cab861',\n  ERC20TransferAmountEnforcer: '0x9A069b18032B31429A363AeCFb1B6A0564b44471',\n  IdEnforcer: '0x91015c3b9D9523966eD2399885e5Df7A567f916c',\n  LimitedCallsEnforcer: '0xe694bFfffEA3E85923b1210b37e6a0175e910863',\n  NonceEnforcer: '0xE83BCFD8bBE672A96747e831050a91cf44F4F87A',\n  TimestampEnforcer: '0x550FdD13eEBC1f22ea2a2480024BacBF0Ad7e5CE',\n  ValueLteEnforcer: '0xBE32a6DB7471F63BB168C088c57Db01AfAe87967',\n  NativeTokenTransferAmountEnforcer:\n    '0x5eD3833d7B957A8DB8A461c3AF2d668Ec25382E0',\n  NativeBalanceGteEnforcer: '0x376a98860E210DdEda3689fb39565592c563cB0A',\n  ArgsEqualityCheckEnforcer: '0x7378dE585998d3E18Ce147867C335C25B3dB8Ee5',\n  NativeTokenPaymentEnforcer: '0x87Fe18EbF99e42fcE8A03a25F1d20E119407f8e7',\n  RedeemerEnforcer: '0x926672b130D1EF60A9d6b11D2048d121b30f40C1',\n} as const;\n\nexport const deployments_1_0_0 = {\n  DelegationManager: '0xbe4138886cb096bdc1b930f2f0ca7892aa234d78',\n  EntryPoint: '0x0000000071727De22E5E9d8BAf0edAc6f37da032',\n  SimpleFactory: '0x6ff518884f21168c30c58CB21184D6AdBC18Ad90',\n  // Implementations\n  MultiSigDeleGatorImpl: '0x11f555af5844d85bfcf5d61d2a22866527eb585a',\n  HybridDeleGatorImpl: '0xd6edd1256deccb2b06bdecef92dc16bcf26e531b',\n  // Caveat Enforcers\n  AllowedCalldataEnforcer: '0x48db3835a873d64a4af2c09f014052407c003bd7',\n  AllowedMethodsEnforcer: '0xfd731951bf1c52afccee3e6f14ab656475b76dd4',\n  AllowedTargetsEnforcer: '0xbc8673c0afa52d86d991c06881e55b2966920564',\n  BlockNumberEnforcer: '0xc15faffa0d879b9263c15a46ce31eacfa2e0e8ae',\n  DeployedEnforcer: '0x5accb9559b56a6c1e3f90e342c85c42d93720d43',\n  ERC20BalanceGteEnforcer: '0xb5d6b1ec6d868a3bae5b7f48178eaa2686a7a087',\n  ERC20TransferAmountEnforcer: '0x92ac423b9c111962179a6242e1adb58d02c103be',\n  IdEnforcer: '0x34152d9f3f8f74338d50703e780389e829b4abac',\n  LimitedCallsEnforcer: '0x4b3adad4a328bee8ba17b86074d92fe7372180cd',\n  NonceEnforcer: '0x2f32ff3fc3086d7f63f16fe8d0065390d460b40d',\n  TimestampEnforcer: '0x78e05f779490c24bf3bfa135b4112e7003b321cd',\n  ValueLteEnforcer: '0xfc20ede0a1132e839fbda9d7ed3904ff3c89540f',\n} as const;\n", "import {\n  deployment_1_3_0,\n  deployments_1_1_0,\n  deployments_1_0_0,\n} from './contractAddresses';\n\nexport const CHAIN_ID = {\n  // Mainnets\n  mainnet: 1,\n  polygon: 137,\n  bsc: 56,\n  optimism: 10,\n  arbitrum: 42161,\n  linea: 59144,\n  base: 8453,\n  gnosis: 100,\n  // Testnets\n  sepolia: 11155111,\n  lineaSepolia: 59141,\n  baseSepolia: 84532,\n  megaEthTestnet: 6342,\n  chiado: 10200,\n  // decommissioned\n  lineaGoerli: 59140,\n};\n\ntype DeployedContracts = Record<\n  string,\n  Record<number, Record<string, `0x${string}`>>\n>;\n\nexport const DELEGATOR_CONTRACTS: DeployedContracts = {\n  '1.0.0': {\n    // Mainnets\n    [CHAIN_ID.optimism]: deployments_1_0_0,\n    [CHAIN_ID.polygon]: deployments_1_0_0,\n    [CHAIN_ID.base]: deployments_1_0_0,\n    [CHAIN_ID.arbitrum]: deployments_1_0_0,\n    [CHAIN_ID.linea]: deployments_1_0_0,\n    // Testnets\n    [CHAIN_ID.sepolia]: {\n      ...deployments_1_0_0,\n      HybridDeleGatorImpl: '0x5989F5D13DF8fc818EdA65e417AED90459fD67F7',\n    },\n    [CHAIN_ID.lineaSepolia]: {\n      ...deployments_1_0_0,\n      HybridDeleGatorImpl: '0x5989F5D13DF8fc818EdA65e417AED90459fD67F7',\n    },\n  },\n  '1.1.0': {\n    // Mainnets\n    [CHAIN_ID.arbitrum]: deployments_1_1_0,\n    [CHAIN_ID.base]: deployments_1_1_0,\n    [CHAIN_ID.linea]: deployments_1_1_0,\n    [CHAIN_ID.optimism]: deployments_1_1_0,\n    [CHAIN_ID.polygon]: deployments_1_1_0,\n    // Testnets\n    [CHAIN_ID.sepolia]: deployments_1_1_0,\n    [CHAIN_ID.lineaSepolia]: deployments_1_1_0,\n    [CHAIN_ID.baseSepolia]: {\n      ...deployments_1_1_0,\n      SimpleFactory: '0xE8eA1DE8D6AfE400B7C8C1A81B7C29B7876b4d02',\n    },\n  },\n  '1.3.0': {\n    // Mainnets\n    [CHAIN_ID.mainnet]: deployment_1_3_0,\n    [CHAIN_ID.polygon]: deployment_1_3_0,\n    [CHAIN_ID.bsc]: deployment_1_3_0,\n    [CHAIN_ID.optimism]: deployment_1_3_0,\n    [CHAIN_ID.arbitrum]: deployment_1_3_0,\n    [CHAIN_ID.linea]: deployment_1_3_0,\n    [CHAIN_ID.base]: deployment_1_3_0,\n    [CHAIN_ID.gnosis]: deployment_1_3_0,\n    // Testnets\n    [CHAIN_ID.sepolia]: deployment_1_3_0,\n    [CHAIN_ID.lineaSepolia]: deployment_1_3_0,\n    [CHAIN_ID.baseSepolia]: deployment_1_3_0,\n    [CHAIN_ID.megaEthTestnet]: deployment_1_3_0,\n    [CHAIN_ID.chiado]: deployment_1_3_0,\n  },\n};\n", "export const abi = [\n  {\n    \"type\": \"error\",\n    \"name\": \"AddressEmptyCode\",\n    \"inputs\": [\n      {\n        \"name\": \"target\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AddressInsufficientBalance\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"FailedInnerCall\",\n    \"inputs\": []\n  }\n] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204a050c4fa34153d3fae9d282b8c08f593842bb7e1d0caa440348574559167b6a64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"allowedMethods_\",\n        \"type\": \"bytes4[]\",\n        \"internalType\": \"bytes4[]\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b506107fc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063414c3e331461005c578063a145832a14610078578063b99deb0e1461008b578063d3eddcc51461005c578063ed4633671461005c575b600080fd5b61007661006a366004610512565b50505050505050505050565b005b610076610086366004610512565b6100b4565b61009e6100993660046105df565b610197565b6040516100ab9190610621565b60405180910390f35b856100c08160006102e5565b6101115760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d7479706560448201526064015b60405180910390fd5b86600881901b6101228160006102e5565b61017c5760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b6064820152608401610108565b506101898c8c89896102fc565b505050505050505050505050565b60606000826101a7600482610685565b1580156101b357508015155b6102135760405162461bcd60e51b815260206004820152602b60248201527f416c6c6f7765644d6574686f6473456e666f726365723a696e76616c69642d7460448201526a0cae4dae65ad8cadccee8d60ab1b6064820152608401610108565b61021e6004826106af565b67ffffffffffffffff811115610236576102366106c3565b60405190808252806020026020018201604052801561025f578160200160208202803683370190505b50925060005b818110156102dc5785818661027b8260046106d9565b92610288939291906106ec565b61029191610716565b8484815181106102a3576102a3610746565b6001600160e01b031990921660209283029190910190910152826102c68161075c565b93506102d590506004826106d9565b9050610265565b50505092915050565b6001600160f81b0319828116908216145b92915050565b366000610309848461045c565b90945092505050600481101561037e5760405162461bcd60e51b815260206004820152603460248201527f416c6c6f7765644d6574686f6473456e666f726365723a696e76616c69642d656044820152730f0cac6eae8d2dedc5ac8c2e8c25ad8cadccee8d60631b6064820152608401610108565b600061038d60048284866106ec565b61039691610716565b905060006103a48888610197565b805190915060005b818110156103fb578281815181106103c6576103c6610746565b60200260200101516001600160e01b031916846001600160e01b031916036103f357505050505050610456565b6001016103ac565b5060405162461bcd60e51b815260206004820152602960248201527f416c6c6f7765644d6574686f6473456e666f726365723a6d6574686f642d6e6f6044820152681d0b585b1b1bddd95960ba1b6064820152608401610108565b50505050565b600080368161046e60148287896106ec565b61047791610775565b60601c935061048a6034601487896106ec565b610493916107a8565b92506104a285603481896106ec565b949793965094505050565b60008083601f8401126104bf57600080fd5b50813567ffffffffffffffff8111156104d757600080fd5b6020830191508360208285010111156104ef57600080fd5b9250929050565b80356001600160a01b038116811461050d57600080fd5b919050565b60008060008060008060008060008060e08b8d03121561053157600080fd5b8a3567ffffffffffffffff8082111561054957600080fd5b6105558e838f016104ad565b909c509a5060208d013591508082111561056e57600080fd5b61057a8e838f016104ad565b909a50985060408d0135975060608d013591508082111561059a57600080fd5b506105a78d828e016104ad565b90965094505060808b013592506105c060a08c016104f6565b91506105ce60c08c016104f6565b90509295989b9194979a5092959850565b600080602083850312156105f257600080fd5b823567ffffffffffffffff81111561060957600080fd5b610615858286016104ad565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156106635783516001600160e01b0319168352928401929184019160010161063d565b50909695505050505050565b634e487b7160e01b600052601260045260246000fd5b6000826106945761069461066f565b500690565b634e487b7160e01b600052601160045260246000fd5b6000826106be576106be61066f565b500490565b634e487b7160e01b600052604160045260246000fd5b808201808211156102f6576102f6610699565b600080858511156106fc57600080fd5b8386111561070957600080fd5b5050820193919092039150565b6001600160e01b0319813581811691600485101561073e5780818660040360031b1b83161692505b505092915050565b634e487b7160e01b600052603260045260246000fd5b60006001820161076e5761076e610699565b5060010190565b6bffffffffffffffffffffffff19813581811691601485101561073e5760149490940360031b84901b1690921692915050565b803560208310156102f657600019602084900360031b1b169291505056fea26469706673582212200b708c0be5e7b588370a3a50ea4c9e1f7cb79f4e1abc8d9c979a4f6d6867e5ae64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"allowedTargets_\",\n        \"type\": \"address[]\",\n        \"internalType\": \"address[]\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b50610736806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063414c3e331461005c578063a145832a14610078578063b99deb0e1461008b578063d3eddcc51461005c578063ed4633671461005c575b600080fd5b61007661006a36600461047b565b50505050505050505050565b005b61007661008636600461047b565b6100b4565b61009e610099366004610548565b61025e565b6040516100ab919061058a565b60405180910390f35b856100c08160006103ae565b6101115760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d7479706560448201526064015b60405180910390fd5b86600881901b6101228160006103ae565b61017c5760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b6064820152608401610108565b50600061018988886103c5565b5050509050600061019a8e8e61025e565b805190915060005b818110156101ed578281815181106101bc576101bc6105d7565b60200260200101516001600160a01b0316846001600160a01b0316036101e55750505050610250565b6001016101a2565b5060405162461bcd60e51b815260206004820152603160248201527f416c6c6f77656454617267657473456e666f726365723a7461726765742d6164604482015270191c995cdccb5b9bdd0b585b1b1bddd959607a1b6064820152608401610108565b505050505050505050505050565b606060008261026e601482610603565b15801561027a57508015155b6102da5760405162461bcd60e51b815260206004820152602b60248201527f416c6c6f77656454617267657473456e666f726365723a696e76616c69642d7460448201526a0cae4dae65ad8cadccee8d60ab1b6064820152608401610108565b6102e560148261062d565b67ffffffffffffffff8111156102fd576102fd610641565b604051908082528060200260200182016040528015610326578160200160208202803683370190505b50925060005b818110156103a557858186610342826014610657565b9261034f9392919061066a565b61035891610694565b60601c84848151811061036d5761036d6105d7565b6001600160a01b03909216602092830291909101909101528261038f816106c9565b935061039e9050601482610657565b905061032c565b50505092915050565b6001600160f81b0319828116908216145b92915050565b60008036816103d7601482878961066a565b6103e091610694565b60601c93506103f360346014878961066a565b6103fc916106e2565b925061040b856034818961066a565b949793965094505050565b60008083601f84011261042857600080fd5b50813567ffffffffffffffff81111561044057600080fd5b60208301915083602082850101111561045857600080fd5b9250929050565b80356001600160a01b038116811461047657600080fd5b919050565b60008060008060008060008060008060e08b8d03121561049a57600080fd5b8a3567ffffffffffffffff808211156104b257600080fd5b6104be8e838f01610416565b909c509a5060208d01359150808211156104d757600080fd5b6104e38e838f01610416565b909a50985060408d0135975060608d013591508082111561050357600080fd5b506105108d828e01610416565b90965094505060808b0135925061052960a08c0161045f565b915061053760c08c0161045f565b90509295989b9194979a5092959850565b6000806020838503121561055b57600080fd5b823567ffffffffffffffff81111561057257600080fd5b61057e85828601610416565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156105cb5783516001600160a01b0316835292840192918401916001016105a6565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082610612576106126105ed565b500690565b634e487b7160e01b600052601160045260246000fd5b60008261063c5761063c6105ed565b500490565b634e487b7160e01b600052604160045260246000fd5b808201808211156103bf576103bf610617565b6000808585111561067a57600080fd5b8386111561068757600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156106c15780818660140360031b1b83161692505b505092915050565b6000600182016106db576106db610617565b5060010190565b803560208310156103bf57600019602084900360031b1b169291505056fea2646970667358221220192854344f7cbe5e3a46630068ff1c57d1382d110f4c7dae36ce8f18206bd1c864736f6c63430008170033\" as const;", "export const abi = [] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122088f05df9a321ebbfd15b9ae491704455fd55c5a0ef490ba4f3111c5cd7aa944764736f6c63430008170033\" as const;", "export const abi = [] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ba35151db75ea04dd32865d4b2bd18ac453d87dfd60b81ec325260f801c1709564736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_args\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"DifferentArgsAndTerms\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"redeemer\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"terms\",\n        \"type\": \"bytes\",\n        \"indexed\": false,\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"args\",\n        \"type\": \"bytes\",\n        \"indexed\": false,\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b506103b7806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063414c3e3314610051578063a145832a1461006d578063d3eddcc514610051578063ed46336714610051575b600080fd5b61006b61005f366004610249565b50505050505050505050565b005b61006b61007b366004610249565b85600881901b6001600160f81b03198116156100ec5760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b60648201526084015b60405180910390fd5b5088886040516100fd929190610316565b60405180910390208b8b604051610115929190610316565b6040518091039020146101d75783826001600160a01b0316336001600160a01b03167f07fc5f2898fc1f1cf9d6012177b7abb8d010b9e64055979af3a5bcd274e2a11a8e8e8e8e60405161016c949392919061034f565b60405180910390a460405162461bcd60e51b815260206004820152603260248201527f41726773457175616c697479436865636b456e666f726365723a646966666572604482015271656e742d617267732d616e642d7465726d7360701b60648201526084016100e3565b5050505050505050505050565b60008083601f8401126101f657600080fd5b50813567ffffffffffffffff81111561020e57600080fd5b60208301915083602082850101111561022657600080fd5b9250929050565b80356001600160a01b038116811461024457600080fd5b919050565b60008060008060008060008060008060e08b8d03121561026857600080fd5b8a3567ffffffffffffffff8082111561028057600080fd5b61028c8e838f016101e4565b909c509a5060208d01359150808211156102a557600080fd5b6102b18e838f016101e4565b909a50985060408d0135975060608d01359150808211156102d157600080fd5b506102de8d828e016101e4565b90965094505060808b013592506102f760a08c0161022d565b915061030560c08c0161022d565b90509295989b9194979a5092959850565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000610363604083018688610326565b8281036020840152610376818587610326565b97965050505050505056fea264697066735822122078e67ed2011e86335117ad2962f5a7ffbe2179a19bda7b4e0f3c3beff2ca893c64736f6c63430008170033\" as const;", "export const abi = [] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"error\",\n    \"name\": \"Create2EmptyBytecode\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"Create2FailedDeployment\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"Create2InsufficientBalance\",\n    \"inputs\": [\n      {\n        \"name\": \"balance\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"needed\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122010c6b66ba2fc3a92f070bf47f6d02e68772a73d44eed07c73bca1c9f7fab44e964736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"receive\",\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"PACKED_USER_OP_TYPEHASH\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"UPGRADE_INTERFACE_VERSION\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"addDeposit\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"delegationManager\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IDelegationManager\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"disableDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegation\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"eip712Domain\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"fields\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"bytes1\"\n      },\n      {\n        \"name\": \"name\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"version\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"chainId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"verifyingContract\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"salt\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"extensions\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"enableDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegation\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"entryPoint\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IEntryPoint\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"execute\",\n    \"inputs\": [\n      {\n        \"name\": \"_execution\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Execution\",\n        \"components\": [\n          {\n            \"name\": \"target\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"value\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"execute\",\n    \"inputs\": [\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"executeFromExecutor\",\n    \"inputs\": [\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"returnData_\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDeposit\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDomainHash\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getImplementation\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getInitializedVersion\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint64\",\n        \"internalType\": \"uint64\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getNonce\",\n    \"inputs\": [\n      {\n        \"name\": \"_key\",\n        \"type\": \"uint192\",\n        \"internalType\": \"uint192\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getNonce\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getPackedUserOperationHash\",\n    \"inputs\": [\n      {\n        \"name\": \"_userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getPackedUserOperationTypedDataHash\",\n    \"inputs\": [\n      {\n        \"name\": \"_userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isDelegationDisabled\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isValidSignature\",\n    \"inputs\": [\n      {\n        \"name\": \"_hash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_signature\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"magicValue_\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC1155BatchReceived\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC1155Received\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC721Received\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"proxiableUUID\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"redeemDelegations\",\n    \"inputs\": [\n      {\n        \"name\": \"_permissionContexts\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      },\n      {\n        \"name\": \"_modes\",\n        \"type\": \"bytes32[]\",\n        \"internalType\": \"ModeCode[]\"\n      },\n      {\n        \"name\": \"_executionCallDatas\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsInterface\",\n    \"inputs\": [\n      {\n        \"name\": \"_interfaceId\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"upgradeToAndCall\",\n    \"inputs\": [\n      {\n        \"name\": \"_newImplementation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"upgradeToAndCallAndRetainStorage\",\n    \"inputs\": [\n      {\n        \"name\": \"_newImplementation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"validateUserOp\",\n    \"inputs\": [\n      {\n        \"name\": \"_userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_missingAccountFunds\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"validationData_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"withdrawDeposit\",\n    \"inputs\": [\n      {\n        \"name\": \"_withdrawAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address payable\"\n      },\n      {\n        \"name\": \"_withdrawAmount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"ClearedStorage\",\n    \"inputs\": [],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"EIP712DomainChanged\",\n    \"inputs\": [],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Initialized\",\n    \"inputs\": [\n      {\n        \"name\": \"version\",\n        \"type\": \"uint64\",\n        \"indexed\": false,\n        \"internalType\": \"uint64\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SentPrefund\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"success\",\n        \"type\": \"bool\",\n        \"indexed\": false,\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SetDelegationManager\",\n    \"inputs\": [\n      {\n        \"name\": \"newDelegationManager\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"contract IDelegationManager\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SetEntryPoint\",\n    \"inputs\": [\n      {\n        \"name\": \"entryPoint\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"contract IEntryPoint\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"TryExecuteUnsuccessful\",\n    \"inputs\": [\n      {\n        \"name\": \"batchExecutionindex\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"result\",\n        \"type\": \"bytes\",\n        \"indexed\": false,\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Upgraded\",\n    \"inputs\": [\n      {\n        \"name\": \"implementation\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AddressEmptyCode\",\n    \"inputs\": [\n      {\n        \"name\": \"target\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1967InvalidImplementation\",\n    \"inputs\": [\n      {\n        \"name\": \"implementation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1967NonPayable\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ExecutionFailed\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"FailedInnerCall\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidInitialization\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidShortString\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotDelegationManager\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotEntryPoint\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotEntryPointOrSelf\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotInitializing\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotSelf\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"StringTooLong\",\n    \"inputs\": [\n      {\n        \"name\": \"str\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UUPSUnauthorizedCallContext\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UUPSUnsupportedProxiableUUID\",\n    \"inputs\": [\n      {\n        \"name\": \"slot\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UnsupportedCallType\",\n    \"inputs\": [\n      {\n        \"name\": \"callType\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"CallType\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UnsupportedExecType\",\n    \"inputs\": [\n      {\n        \"name\": \"execType\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"ExecType\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"constructor\",\n    \"inputs\": [\n      {\n        \"name\": \"_owner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_swapApiSigner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IDelegationManager\"\n      },\n      {\n        \"name\": \"_metaSwap\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IMetaSwap\"\n      },\n      {\n        \"name\": \"_argsEqualityCheckEnforcer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"receive\",\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"WHITELIST_ENFORCED\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"WHITELIST_NOT_ENFORCED\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"acceptOwnership\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"argsEqualityCheckEnforcer\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"delegationManager\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IDelegationManager\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"executeFromExecutor\",\n    \"inputs\": [\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"returnData_\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isAggregatorAllowed\",\n    \"inputs\": [\n      {\n        \"name\": \"aggregatorIdHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"allowed\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isTokenAllowed\",\n    \"inputs\": [\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IERC20\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"allowed\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"metaSwap\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IMetaSwap\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"owner\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"pendingOwner\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"renounceOwnership\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"setSwapApiSigner\",\n    \"inputs\": [\n      {\n        \"name\": \"_newSigner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"swapApiSigner\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"swapByDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"_signatureData\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct DelegationMetaSwapAdapter.SignatureData\",\n        \"components\": [\n          {\n            \"name\": \"apiData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"expiration\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      },\n      {\n        \"name\": \"_delegations\",\n        \"type\": \"tuple[]\",\n        \"internalType\": \"struct Delegation[]\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      },\n      {\n        \"name\": \"_useTokenWhitelist\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"swapTokens\",\n    \"inputs\": [\n      {\n        \"name\": \"_aggregatorId\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"_tokenFrom\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IERC20\"\n      },\n      {\n        \"name\": \"_tokenTo\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IERC20\"\n      },\n      {\n        \"name\": \"_recipient\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_amountFrom\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"_balanceFromBefore\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"_swapData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transferOwnership\",\n    \"inputs\": [\n      {\n        \"name\": \"newOwner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"updateAllowedAggregatorIds\",\n    \"inputs\": [\n      {\n        \"name\": \"_aggregatorIds\",\n        \"type\": \"string[]\",\n        \"internalType\": \"string[]\"\n      },\n      {\n        \"name\": \"_statuses\",\n        \"type\": \"bool[]\",\n        \"internalType\": \"bool[]\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"updateAllowedTokens\",\n    \"inputs\": [\n      {\n        \"name\": \"_tokens\",\n        \"type\": \"address[]\",\n        \"internalType\": \"contract IERC20[]\"\n      },\n      {\n        \"name\": \"_statuses\",\n        \"type\": \"bool[]\",\n        \"internalType\": \"bool[]\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"withdraw\",\n    \"inputs\": [\n      {\n        \"name\": \"_token\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IERC20\"\n      },\n      {\n        \"name\": \"_amount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"_recipient\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"ChangedAggregatorIdStatus\",\n    \"inputs\": [\n      {\n        \"name\": \"aggregatorIdHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"aggregatorId\",\n        \"type\": \"string\",\n        \"indexed\": false,\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"status\",\n        \"type\": \"bool\",\n        \"indexed\": false,\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"ChangedTokenStatus\",\n    \"inputs\": [\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"contract IERC20\"\n      },\n      {\n        \"name\": \"status\",\n        \"type\": \"bool\",\n        \"indexed\": false,\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"OwnershipTransferStarted\",\n    \"inputs\": [\n      {\n        \"name\": \"previousOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"newOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"OwnershipTransferred\",\n    \"inputs\": [\n      {\n        \"name\": \"previousOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"newOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SentTokens\",\n    \"inputs\": [\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"contract IERC20\"\n      },\n      {\n        \"name\": \"recipient\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SetArgsEqualityCheckEnforcer\",\n    \"inputs\": [\n      {\n        \"name\": \"newArgsEqualityCheckEnforcer\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SetDelegationManager\",\n    \"inputs\": [\n      {\n        \"name\": \"newDelegationManager\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"contract IDelegationManager\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SetMetaSwap\",\n    \"inputs\": [\n      {\n        \"name\": \"newMetaSwap\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"contract IMetaSwap\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SwapApiSignerUpdated\",\n    \"inputs\": [\n      {\n        \"name\": \"newSigner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"TryExecuteUnsuccessful\",\n    \"inputs\": [\n      {\n        \"name\": \"batchExecutionindex\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"result\",\n        \"type\": \"bytes\",\n        \"indexed\": false,\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AddressEmptyCode\",\n    \"inputs\": [\n      {\n        \"name\": \"target\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AddressInsufficientBalance\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AggregatorIdIsNotAllowed\",\n    \"inputs\": [\n      {\n        \"name\": \"aggregatorId\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AmountFromMismatch\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignature\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignatureLength\",\n    \"inputs\": [\n      {\n        \"name\": \"length\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignatureS\",\n    \"inputs\": [\n      {\n        \"name\": \"s\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ExecutionFailed\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"FailedInnerCall\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"FailedNativeTokenTransfer\",\n    \"inputs\": [\n      {\n        \"name\": \"recipient\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InputLengthsMismatch\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InsufficientTokens\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidApiSignature\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidEmptyDelegations\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidIdenticalTokens\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidSwapFunctionSelector\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidZeroAddress\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"MissingArgsEqualityCheckEnforcer\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotDelegationManager\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotLeafDelegator\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotSelf\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"OwnableInvalidOwner\",\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"OwnableUnauthorizedAccount\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"SafeERC20FailedOperation\",\n    \"inputs\": [\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"SignatureExpired\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"TokenFromIsNotAllowed\",\n    \"inputs\": [\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IERC20\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"TokenFromMismatch\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"TokenToIsNotAllowed\",\n    \"inputs\": [\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IERC20\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UnsupportedCallType\",\n    \"inputs\": [\n      {\n        \"name\": \"callType\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"CallType\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UnsupportedExecType\",\n    \"inputs\": [\n      {\n        \"name\": \"execType\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"ExecType\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"blockAfterThreshold_\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      },\n      {\n        \"name\": \"blockBeforeThreshold_\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b506104ed806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063414c3e331461005c578063a145832a14610078578063b99deb0e1461008b578063d3eddcc51461005c578063ed4633671461005c575b600080fd5b61007661006a366004610345565b50505050505050505050565b005b610076610086366004610345565b6100c2565b61009e610099366004610412565b61023e565b604080516001600160801b0393841681529290911660208301520160405180910390f35b85600881901b6001600160f81b03198116156101335760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b60648201526084015b60405180910390fd5b506000806101418d8d61023e565b90925090506001600160801b038216156101b957816001600160801b031643116101b95760405162461bcd60e51b8152602060048201526024808201527f426c6f636b4e756d626572456e666f726365723a6561726c792d64656c6567616044820152633a34b7b760e11b606482015260840161012a565b6001600160801b0381161561022f57806001600160801b0316431061022f5760405162461bcd60e51b815260206004820152602660248201527f426c6f636b4e756d626572456e666f726365723a657870697265642d64656c6560448201526533b0ba34b7b760d11b606482015260840161012a565b50505050505050505050505050565b600080602083146102a25760405162461bcd60e51b815260206004820152602860248201527f426c6f636b4e756d626572456e666f726365723a696e76616c69642d7465726d6044820152670e65ad8cadccee8d60c31b606482015260840161012a565b6102b0601060008587610454565b6102b99161047e565b60801c91506102cb8360108187610454565b6102d49161047e565b60801c90509250929050565b60008083601f8401126102f257600080fd5b50813567ffffffffffffffff81111561030a57600080fd5b60208301915083602082850101111561032257600080fd5b9250929050565b80356001600160a01b038116811461034057600080fd5b919050565b60008060008060008060008060008060e08b8d03121561036457600080fd5b8a3567ffffffffffffffff8082111561037c57600080fd5b6103888e838f016102e0565b909c509a5060208d01359150808211156103a157600080fd5b6103ad8e838f016102e0565b909a50985060408d0135975060608d01359150808211156103cd57600080fd5b506103da8d828e016102e0565b90965094505060808b013592506103f360a08c01610329565b915061040160c08c01610329565b90509295989b9194979a5092959850565b6000806020838503121561042557600080fd5b823567ffffffffffffffff81111561043c57600080fd5b610448858286016102e0565b90969095509350505050565b6000808585111561046457600080fd5b8386111561047157600080fd5b5050820193919092039150565b6fffffffffffffffffffffffffffffffff1981358181169160108510156104af5780818660100360031b1b83161692505b50509291505056fea2646970667358221220e786ddc75b5e54c089f23ff0a2c6c7b67417725b5021ebc3aa3b2726c852e6cb64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"computeAddress\",\n    \"inputs\": [\n      {\n        \"name\": \"_bytecodeHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_salt\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"addr_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"expectedAddress_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"salt_\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"bytecode_\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"DeployedContract\",\n    \"inputs\": [\n      {\n        \"name\": \"contractAddress\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SkippedDeployment\",\n    \"inputs\": [\n      {\n        \"name\": \"contractAddress\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"Create2EmptyBytecode\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"Create2FailedDeployment\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"Create2InsufficientBalance\",\n    \"inputs\": [\n      {\n        \"name\": \"balance\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"needed\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"DeployedEmptyContract\",\n    \"inputs\": [\n      {\n        \"name\": \"contractAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b50610748806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063414c3e3314610067578063481286e614610083578063a145832a146100b3578063b99deb0e146100c6578063d3eddcc514610067578063ed46336714610067575b600080fd5b6100816100753660046104fe565b50505050505050505050565b005b6100966100913660046105cb565b6100e8565b6040516001600160a01b0390911681526020015b60405180910390f35b6100816100c13660046104fe565b6100fd565b6100d96100d43660046105ed565b61026d565b6040516100aa9392919061062f565b60006100f48284610353565b90505b92915050565b85600881901b6001600160f81b031981161561016e5760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b60648201526084015b60405180910390fd5b50600080600061017e8e8e61026d565b919450925090506001600160a01b0383163b156101d9576040516001600160a01b03841681527f641dafeb23238fae3ef71c64fced975da90c34dede63890507f3dda6b1e0dfef9060200160405180910390a1505050610260565b60006101e58284610360565b9050836001600160a01b0316816001600160a01b03161461025b5760405162461bcd60e51b815260206004820152602a60248201527f4465706c6f796564456e666f726365723a6465706c6f7965642d6164647265736044820152690e65adad2e6dac2e8c6d60b31b6064820152608401610165565b505050505b5050505050505050505050565b6000806060603484116102d05760405162461bcd60e51b815260206004820152602560248201527f4465706c6f796564456e666f726365723a696e76616c69642d7465726d732d6c6044820152640cadccee8d60db1b6064820152608401610165565b6102de601460008688610695565b6102e7916106bf565b60601c92506102fa603460148688610695565b610303916106f4565b91506103128460348188610695565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509598949750919550929350505050565b60006100f48383306103e8565b600061036e60008385610412565b9050806001600160a01b03163b6000036103a6576040516352c7cd4960e11b81526001600160a01b0382166004820152602401610165565b6040516001600160a01b03821681527faf3c4b03f515b5a38f3c238fdc24abf10854a2f27f2a85743a71de17e9bc7e7f9060200160405180910390a192915050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b60008347101561043e5760405163392efb2b60e21b815247600482015260248101859052604401610165565b815160000361046057604051631328927760e21b815260040160405180910390fd5b8282516020840186f590506001600160a01b03811661049257604051633a0ba96160e11b815260040160405180910390fd5b9392505050565b60008083601f8401126104ab57600080fd5b50813567ffffffffffffffff8111156104c357600080fd5b6020830191508360208285010111156104db57600080fd5b9250929050565b80356001600160a01b03811681146104f957600080fd5b919050565b60008060008060008060008060008060e08b8d03121561051d57600080fd5b8a3567ffffffffffffffff8082111561053557600080fd5b6105418e838f01610499565b909c509a5060208d013591508082111561055a57600080fd5b6105668e838f01610499565b909a50985060408d0135975060608d013591508082111561058657600080fd5b506105938d828e01610499565b90965094505060808b013592506105ac60a08c016104e2565b91506105ba60c08c016104e2565b90509295989b9194979a5092959850565b600080604083850312156105de57600080fd5b50508035926020909101359150565b6000806020838503121561060057600080fd5b823567ffffffffffffffff81111561061757600080fd5b61062385828601610499565b90969095509350505050565b60018060a01b03841681526000602084602084015260606040840152835180606085015260005b8181101561067257858101830151858201608001528201610656565b506000608082860101526080601f19601f83011685010192505050949350505050565b600080858511156106a557600080fd5b838611156106b257600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156106ec5780818660140360031b1b83161692505b505092915050565b803560208310156100f757600019602084900360031b1b169291505056fea264697066735822122012632a27b82f8f9b4b083a1f26c705dcd1ceb840e52519ff7902232eb956870464736f6c63430008170033\" as const;", "export const abi = [] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201124664c489cae3f1f240552ace1b72f497b65d8c9bdbce66e0c2b36268dcd2c64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"receive\",\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"PACKED_USER_OP_TYPEHASH\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"addDeposit\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"delegationManager\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IDelegationManager\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"disableDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegation\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"eip712Domain\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"fields\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"bytes1\"\n      },\n      {\n        \"name\": \"name\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"version\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"chainId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"verifyingContract\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"salt\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"extensions\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"enableDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegation\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"entryPoint\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IEntryPoint\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"execute\",\n    \"inputs\": [\n      {\n        \"name\": \"_execution\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Execution\",\n        \"components\": [\n          {\n            \"name\": \"target\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"value\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"execute\",\n    \"inputs\": [\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"executeFromExecutor\",\n    \"inputs\": [\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"returnData_\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDeposit\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDomainHash\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getNonce\",\n    \"inputs\": [\n      {\n        \"name\": \"_key\",\n        \"type\": \"uint192\",\n        \"internalType\": \"uint192\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getNonce\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getPackedUserOperationHash\",\n    \"inputs\": [\n      {\n        \"name\": \"_userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getPackedUserOperationTypedDataHash\",\n    \"inputs\": [\n      {\n        \"name\": \"_userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isDelegationDisabled\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isValidSignature\",\n    \"inputs\": [\n      {\n        \"name\": \"_hash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_signature\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"magicValue_\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC1155BatchReceived\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC1155Received\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC721Received\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"redeemDelegations\",\n    \"inputs\": [\n      {\n        \"name\": \"_permissionContexts\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      },\n      {\n        \"name\": \"_modes\",\n        \"type\": \"bytes32[]\",\n        \"internalType\": \"ModeCode[]\"\n      },\n      {\n        \"name\": \"_executionCallDatas\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsExecutionMode\",\n    \"inputs\": [\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsInterface\",\n    \"inputs\": [\n      {\n        \"name\": \"_interfaceId\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"validateUserOp\",\n    \"inputs\": [\n      {\n        \"name\": \"_userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_missingAccountFunds\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"validationData_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"withdrawDeposit\",\n    \"inputs\": [\n      {\n        \"name\": \"_withdrawAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address payable\"\n      },\n      {\n        \"name\": \"_withdrawAmount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"EIP712DomainChanged\",\n    \"inputs\": [],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SentPrefund\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"success\",\n        \"type\": \"bool\",\n        \"indexed\": false,\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SetDelegationManager\",\n    \"inputs\": [\n      {\n        \"name\": \"newDelegationManager\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"contract IDelegationManager\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SetEntryPoint\",\n    \"inputs\": [\n      {\n        \"name\": \"entryPoint\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"contract IEntryPoint\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"TryExecuteUnsuccessful\",\n    \"inputs\": [\n      {\n        \"name\": \"batchExecutionindex\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"result\",\n        \"type\": \"bytes\",\n        \"indexed\": false,\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ExecutionFailed\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidEIP712NameLength\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidEIP712VersionLength\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidShortString\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotDelegationManager\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotEntryPoint\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotEntryPointOrSelf\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotSelf\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"StringTooLong\",\n    \"inputs\": [\n      {\n        \"name\": \"str\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UnauthorizedCallContext\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UnsupportedCallType\",\n    \"inputs\": [\n      {\n        \"name\": \"callType\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"CallType\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UnsupportedExecType\",\n    \"inputs\": [\n      {\n        \"name\": \"execType\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"ExecType\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"balanceCache\",\n    \"inputs\": [\n      {\n        \"name\": \"hashKey\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"balance\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getHashKey\",\n    \"inputs\": [\n      {\n        \"name\": \"_caller\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_token\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_recipient\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_tokenId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"enforceDecrease_\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      },\n      {\n        \"name\": \"token_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"recipient_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"tokenId_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"amount_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isLocked\",\n    \"inputs\": [\n      {\n        \"name\": \"hashKey\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"lock\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b506109cb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b99deb0e1161005b578063b99deb0e14610122578063d0a3529f1461016b578063d3eddcc51461017e578063ed463367146100c557600080fd5b806332a16f4e1461008d578063414c3e33146100c5578063a145832a146100e1578063b5e54492146100f4575b600080fd5b6100b061009b3660046106cb565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100df6100d3366004610749565b50505050505050505050565b005b6100df6100ef366004610749565b610191565b6101146101023660046106cb565b60006020819052908152604090205481565b6040519081526020016100bc565b610135610130366004610816565b610350565b6040805195151586526001600160a01b03948516602087015292909316918401919091526060830152608082015260a0016100bc565b610114610179366004610858565b61045d565b6100df61018c366004610749565b610476565b85600881901b6101a2816000610661565b6102015760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b60648201526084015b60405180910390fd5b5060008060006102118e8e610350565b50935093509350506000610228338585858c610678565b60008181526001602052604090205490915060ff16156102a25760405162461bcd60e51b815260206004820152602f60248201527f4552433131353542616c616e63654368616e6765456e666f726365723a656e6660448201526e1bdc98d95c8b5a5ccb5b1bd8dad959608a1b60648201526084016101f8565b6000818152600160208190526040808320805460ff191690921790915551627eeac760e11b81526001600160a01b0385811660048301526024820185905286169062fdd58e90604401602060405180830381865afa158015610308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032c91906108ad565b60009283526020839052604090922091909155505050505050505050505050505050565b600080808080606986146103c05760405162461bcd60e51b815260206004820152603160248201527f4552433131353542616c616e63654368616e6765456e666f726365723a696e766044820152700c2d8d2c85ae8cae4dae65ad8cadccee8d607b1b60648201526084016101f8565b868660008181106103d3576103d36108c6565b909101356001600160f81b031916151595506103f5905060156001888a6108dc565b6103fe91610906565b60601c935061041160296015888a6108dc565b61041a91610906565b60601c925061042d60496029888a6108dc565b6104369161093b565b9150610445866049818a6108dc565b61044e9161093b565b60001c90509295509295909350565b600061046c8686868686610678565b9695505050505050565b60008060008060006104888f8f610350565b9450945094509450945060006104a1338686868d610678565b600081815260016020526040808220805460ff1916905551627eeac760e11b81526001600160a01b03878116600483015260248201879052929350909187169062fdd58e90604401602060405180830381865afa158015610506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052a91906108ad565b905086156105bf5760008281526020819052604090205461054c90849061096f565b8110156105ba5760405162461bcd60e51b815260206004820152603660248201527f4552433131353542616c616e63654368616e6765456e666f726365723a65786360448201527565656465642d62616c616e63652d646563726561736560501b60648201526084016101f8565b61064e565b6000828152602081905260409020546105d9908490610982565b81101561064e5760405162461bcd60e51b815260206004820152603a60248201527f4552433131353542616c616e63654368616e6765456e666f726365723a696e7360448201527f756666696369656e742d62616c616e63652d696e63726561736500000000000060648201526084016101f8565b5050505050505050505050505050505050565b6001600160f81b0319828116908216145b92915050565b604080516001600160a01b0396871660208083019190915295871681830152939095166060840152608083019190915260a0808301919091528351808303909101815260c0909101909252815191012090565b6000602082840312156106dd57600080fd5b5035919050565b60008083601f8401126106f657600080fd5b50813567ffffffffffffffff81111561070e57600080fd5b60208301915083602082850101111561072657600080fd5b9250929050565b80356001600160a01b038116811461074457600080fd5b919050565b60008060008060008060008060008060e08b8d03121561076857600080fd5b8a3567ffffffffffffffff8082111561078057600080fd5b61078c8e838f016106e4565b909c509a5060208d01359150808211156107a557600080fd5b6107b18e838f016106e4565b909a50985060408d0135975060608d01359150808211156107d157600080fd5b506107de8d828e016106e4565b90965094505060808b013592506107f760a08c0161072d565b915061080560c08c0161072d565b90509295989b9194979a5092959850565b6000806020838503121561082957600080fd5b823567ffffffffffffffff81111561084057600080fd5b61084c858286016106e4565b90969095509350505050565b600080600080600060a0868803121561087057600080fd5b6108798661072d565b94506108876020870161072d565b93506108956040870161072d565b94979396509394606081013594506080013592915050565b6000602082840312156108bf57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600080858511156108ec57600080fd5b838611156108f957600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156109335780818660140360031b1b83161692505b505092915050565b8035602083101561067257600019602084900360031b1b1692915050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561067257610672610959565b808201808211156106725761067261095956fea264697066735822122095ab63871cc701b6845065f3118822a1bb1778b7d93ba045a40145ebc06f19af64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"constructor\",\n    \"inputs\": [\n      {\n        \"name\": \"_owner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"ANY_DELEGATE\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"DOMAIN_VERSION\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"NAME\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"ROOT_AUTHORITY\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"VERSION\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"acceptOwnership\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"disableDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegation\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"disabledDelegations\",\n    \"inputs\": [\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"isDisabled\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"eip712Domain\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"fields\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"bytes1\"\n      },\n      {\n        \"name\": \"name\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"version\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"chainId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"verifyingContract\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"salt\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"extensions\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"enableDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegation\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDelegationHash\",\n    \"inputs\": [\n      {\n        \"name\": \"_input\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDomainHash\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"owner\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"pause\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"paused\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"pendingOwner\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"redeemDelegations\",\n    \"inputs\": [\n      {\n        \"name\": \"_permissionContexts\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      },\n      {\n        \"name\": \"_modes\",\n        \"type\": \"bytes32[]\",\n        \"internalType\": \"ModeCode[]\"\n      },\n      {\n        \"name\": \"_executionCallDatas\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"renounceOwnership\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transferOwnership\",\n    \"inputs\": [\n      {\n        \"name\": \"newOwner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"unpause\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"DisabledDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"delegator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegate\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegation\",\n        \"type\": \"tuple\",\n        \"indexed\": false,\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"EIP712DomainChanged\",\n    \"inputs\": [],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"EnabledDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"delegator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegate\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegation\",\n        \"type\": \"tuple\",\n        \"indexed\": false,\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"OwnershipTransferStarted\",\n    \"inputs\": [\n      {\n        \"name\": \"previousOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"newOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"OwnershipTransferred\",\n    \"inputs\": [\n      {\n        \"name\": \"previousOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"newOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Paused\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"RedeemedDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"rootDelegator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"redeemer\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegation\",\n        \"type\": \"tuple\",\n        \"indexed\": false,\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SetDomain\",\n    \"inputs\": [\n      {\n        \"name\": \"domainHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"name\",\n        \"type\": \"string\",\n        \"indexed\": false,\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"domainVersion\",\n        \"type\": \"string\",\n        \"indexed\": false,\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"chainId\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"contractAddress\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Unpaused\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AlreadyDisabled\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AlreadyEnabled\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"BatchDataLengthMismatch\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"CannotUseADisabledDelegation\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignature\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignatureLength\",\n    \"inputs\": [\n      {\n        \"name\": \"length\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignatureS\",\n    \"inputs\": [\n      {\n        \"name\": \"s\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"EmptySignature\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"EnforcedPause\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ExpectedPause\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidAuthority\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidDelegate\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidDelegator\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidEOASignature\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidERC1271Signature\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidShortString\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"OwnableInvalidOwner\",\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"OwnableUnauthorizedAccount\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"StringTooLong\",\n    \"inputs\": [\n      {\n        \"name\": \"str\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x6101606040523480156200001257600080fd5b506040516200334f3803806200334f833981016040819052620000359162000384565b60408051808201825260118152702232b632b3b0ba34b7b726b0b730b3b2b960791b602080830191909152825180840190935260018352603160f81b9083015290826001600160a01b038116620000a757604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b620000b28162000204565b506001805460ff60a01b19169055620000cd82600262000222565b61012052620000de81600362000222565b61014052815160208084019190912060e052815190820120610100524660a0526200015b60e05161010051604080516000805160206200332f83398151915260208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c0526000620001706200025b565b9050306001600160a01b0316817f04a46d9007577c7ff1e513b900545162ec25d25991ae3dc60cf26ec01a84806d604051806040016040528060118152602001702232b632b3b0ba34b7b726b0b730b3b2b960791b815250604051806040016040528060018152602001603160f81b81525046604051620001f493929190620003fe565b60405180910390a35050620005e5565b600180546001600160a01b03191690556200021f81620002f1565b50565b600060208351101562000242576200023a8362000341565b905062000255565b816200024f8482620004df565b5060ff90505b92915050565b600060c0516001600160a01b0316306001600160a01b031614801562000282575060a05146145b156200028f575060805190565b620002ec60e05161010051604080516000805160206200332f83398151915260208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b905090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080829050601f815111156200036f578260405163305a27a960e01b81526004016200009e9190620005ab565b80516200037c82620005c0565b179392505050565b6000602082840312156200039757600080fd5b81516001600160a01b0381168114620003af57600080fd5b9392505050565b6000815180845260005b81811015620003de57602081850181015186830182015201620003c0565b506000602082860101526020601f19601f83011685010191505092915050565b606081526000620004136060830186620003b6565b8281036020840152620004278186620003b6565b915050826040830152949350505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200046357607f821691505b6020821081036200048457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004da576000816000526020600020601f850160051c81016020861015620004b55750805b601f850160051c820191505b81811015620004d657828155600101620004c1565b5050505b505050565b81516001600160401b03811115620004fb57620004fb62000438565b62000513816200050c84546200044e565b846200048a565b602080601f8311600181146200054b5760008415620005325750858301515b600019600386901b1c1916600185901b178555620004d6565b600085815260208120601f198616915b828110156200057c578886015182559484019460019091019084016200055b565b50858210156200059b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b602081526000620003af6020830184620003b6565b80516020808301519190811015620004845760001960209190910360031b1b16919050565b60805160a05160c05160e051610100516101205161014051612cef620006406000396000611bda01526000611bad01526000611b1201526000611aea01526000611a4501526000611a6f01526000611a990152612cef6000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806383ebb771116100ad578063acb8cc4911610071578063acb8cc491461027f578063cef6d2091461029f578063e30c3978146102b2578063f2fde38b146102c3578063ffa1ad74146102d657600080fd5b806383ebb771146102065780638456cb591461020e57806384b0196e146102165780638da5cb5b14610231578063a3f4df7e1461024257600080fd5b806358909ebc116100f457806358909ebc146101b05780635c975abb146101d157806366134607146101e3578063715018a6146101f657806379ba5097146101fe57600080fd5b80631b13cac2146101315780632d40d0521461014d5780633ed01015146101805780633f4ba83a14610195578063499340471461019d575b600080fd5b61013a60001981565b6040519081526020015b60405180910390f35b61017061015b3660046120e6565b60046020526000908152604090205460ff1681565b6040519015158152602001610144565b61019361018e3660046120ff565b6102fa565b005b6101936103f4565b6101936101ab3660046120ff565b610406565b6101b9610a1181565b6040516001600160a01b039091168152602001610144565b600154600160a01b900460ff16610170565b61013a6101f13660046120ff565b6104f6565b61019361050f565b610193610521565b61013a61056a565b610193610579565b61021e610589565b6040516101449796959493929190612190565b6000546001600160a01b03166101b9565b610272604051806040016040528060118152602001702232b632b3b0ba34b7b726b0b730b3b2b960791b81525081565b6040516101449190612229565b610272604051806040016040528060018152602001603160f81b81525081565b6101936102ad366004612287565b6105cf565b6001546001600160a01b03166101b9565b6101936102d136600461233c565b611891565b610272604051806040016040528060058152602001640312e332e360dc1b81525081565b61030a604082016020830161233c565b6001600160a01b03811633146103335760405163b9f0f17160e01b815260040160405180910390fd5b600061033e836104f6565b60008181526004602052604090205490915060ff1661037057604051637952fbad60e11b815260040160405180910390fd5b6000818152600460209081526040909120805460ff191690556103959084018461233c565b6001600160a01b03166103ae604085016020860161233c565b6001600160a01b0316827f3feadce88fc1b49db633a56fd5307ed6ee18734df83bcc4011daa720c9cd95f1866040516103e79190612484565b60405180910390a4505050565b6103fc611902565b61040461192f565b565b610416604082016020830161233c565b6001600160a01b038116331461043f5760405163b9f0f17160e01b815260040160405180910390fd5b600061044a836104f6565b60008181526004602052604090205490915060ff161561047c57604051625ecddb60e01b815260040160405180910390fd5b6000818152600460209081526040909120805460ff191660011790556104a49084018461233c565b6001600160a01b03166104bd604085016020860161233c565b6001600160a01b0316827fea589ba9473ee1fe77d352c7ed919747715a5d22931b972de9b02a907c66d5dd866040516103e79190612484565b600061050961050483612823565b611984565b92915050565b610517611902565b6104046000611a1f565b60015433906001600160a01b0316811461055e5760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b61056781611a1f565b50565b6000610574611a38565b905090565b610581611902565b610404611b63565b60006060806000806000606061059d611ba6565b6105a5611bd3565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6105d7611c00565b8481811415806105e75750808414155b1561060557604051631bcaf69f60e01b815260040160405180910390fd5b6000816001600160401b0381111561061f5761061f612555565b60405190808252806020026020018201604052801561065257816020015b606081526020019060019003908161063d5790505b5090506000826001600160401b0381111561066f5761066f612555565b6040519080825280602002602001820160405280156106a257816020015b606081526020019060019003908161068d5790505b50905060005b83811015610c815760008a8a838181106106c4576106c461282f565b90506020028101906106d69190612845565b8101906106e3919061288b565b905080516000036107d1576040805160008082526020820190925290610765565b6107526040518060c0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016060815260200160008152602001606081525090565b8152602001906001900390816107045790505b508483815181106107785761077861282f565b602090810291909101015260006040519080825280602002602001820160405280156107ae578160200160208202803683370190505b508383815181106107c1576107c161282f565b6020026020010181905250610c78565b808483815181106107e4576107e461282f565b6020026020010181905250600081516001600160401b0381111561080a5761080a612555565b604051908082528060200260200182016040528015610833578160200160208202803683370190505b509050808484815181106108495761084961282f565b6020026020010181905250336001600160a01b0316826000815181106108715761087161282f565b6020026020010151600001516001600160a01b0316141580156108c65750610a116001600160a01b0316826000815181106108ae576108ae61282f565b6020026020010151600001516001600160a01b031614155b156108e457604051632d618d8160e21b815260040160405180910390fd5b60005b8251811015610ab55760008382815181106109045761090461282f565b6020026020010151905061091781611984565b8383815181106109295761092961282f565b60200260200101818152505080602001516001600160a01b03163b6000036109dc57600061099e61099461095b61056a565b86868151811061096d5761096d61282f565b602002602001015160405161190160f01b8152600281019290925260228201526042902090565b8360a00151611c2b565b905081602001516001600160a01b0316816001600160a01b0316146109d657604051630f6d9e4760e21b815260040160405180910390fd5b50610aac565b60006109fb6109e961056a565b85858151811061096d5761096d61282f565b9050600082602001516001600160a01b0316631626ba7e838560a001516040518363ffffffff1660e01b8152600401610a3592919061293b565b602060405180830381865afa158015610a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a76919061295c565b6001600160e01b0319169050630b135d3f60e11b8114610aa95760405163155ff42760e01b815260040160405180910390fd5b50505b506001016108e7565b5060005b8251811015610c755760046000838381518110610ad857610ad861282f565b60209081029190910181015182528101919091526040016000205460ff1615610b14576040516302dd502960e11b815260040160405180910390fd5b60018351610b22919061299c565b8114610c2b5781610b348260016129af565b81518110610b4457610b4461282f565b6020026020010151838281518110610b5e57610b5e61282f565b60200260200101516040015114610b8857604051636f6a1b8760e11b815260040160405180910390fd5b600083610b968360016129af565b81518110610ba657610ba661282f565b6020026020010151600001519050610a116001600160a01b0316816001600160a01b031614158015610c075750806001600160a01b0316848381518110610bef57610bef61282f565b6020026020010151602001516001600160a01b031614155b15610c2557604051632d618d8160e21b815260040160405180910390fd5b50610c6d565b60001960001b838281518110610c4357610c4361282f565b60200260200101516040015114610c6d57604051636f6a1b8760e11b815260040160405180910390fd5b600101610ab9565b50505b506001016106a8565b5060005b83811015610ea6576000838281518110610ca157610ca161282f565b6020026020010151511115610e9e5760005b838281518110610cc557610cc561282f565b602002602001015151811015610e9c576000848381518110610ce957610ce961282f565b60200260200101518281518110610d0257610d0261282f565b602002602001015160600151905060005b8151811015610e92576000828281518110610d3057610d3061282f565b6020026020010151600001519050806001600160a01b031663414c3e33848481518110610d5f57610d5f61282f565b602002602001015160200151858581518110610d7d57610d7d61282f565b6020026020010151604001518f8f8a818110610d9b57610d9b61282f565b905060200201358e8e8b818110610db457610db461282f565b9050602002810190610dc69190612845565b8c8c81518110610dd857610dd861282f565b60200260200101518b81518110610df157610df161282f565b60200260200101518e8d81518110610e0b57610e0b61282f565b60200260200101518c81518110610e2457610e2461282f565b602002602001015160200151336040518963ffffffff1660e01b8152600401610e549897969594939291906129c2565b600060405180830381600087803b158015610e6e57600080fd5b505af1158015610e82573d6000803e3d6000fd5b5050505050806001019050610d13565b5050600101610cb3565b505b600101610c85565b5060005b838110156114ca57828181518110610ec457610ec461282f565b602002602001015151600003610f82573363d691c964898984818110610eec57610eec61282f565b90506020020135888885818110610f0557610f0561282f565b9050602002810190610f179190612845565b6040518463ffffffff1660e01b8152600401610f3593929190612a2d565b6000604051808303816000875af1158015610f54573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f7c9190810190612a50565b506114c2565b60005b838281518110610f9757610f9761282f565b60200260200101515181101561116e576000848381518110610fbb57610fbb61282f565b60200260200101518281518110610fd457610fd461282f565b602002602001015160600151905060005b81518110156111645760008282815181106110025761100261282f565b6020026020010151600001519050806001600160a01b031663a145832a8484815181106110315761103161282f565b60200260200101516020015185858151811061104f5761104f61282f565b6020026020010151604001518f8f8a81811061106d5761106d61282f565b905060200201358e8e8b8181106110865761108661282f565b90506020028101906110989190612845565b8c8c815181106110aa576110aa61282f565b60200260200101518b815181106110c3576110c361282f565b60200260200101518e8d815181106110dd576110dd61282f565b60200260200101518c815181106110f6576110f661282f565b602002602001015160200151336040518963ffffffff1660e01b81526004016111269897969594939291906129c2565b600060405180830381600087803b15801561114057600080fd5b505af1158015611154573d6000803e3d6000fd5b5050505050806001019050610fe5565b5050600101610f85565b508281815181106111815761118161282f565b6020026020010151600184838151811061119d5761119d61282f565b6020026020010151516111b0919061299c565b815181106111c0576111c061282f565b6020026020010151602001516001600160a01b031663d691c9648989848181106111ec576111ec61282f565b905060200201358888858181106112055761120561282f565b90506020028101906112179190612845565b6040518463ffffffff1660e01b815260040161123593929190612a2d565b6000604051808303816000875af1158015611254573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261127c9190810190612a50565b5060008382815181106112915761129161282f565b60200260200101515190505b80156114c05760008483815181106112b7576112b761282f565b60200260200101516001836112cc919061299c565b815181106112dc576112dc61282f565b60200260200101516060015190506000815190505b80156114ad5760008261130560018461299c565b815181106113155761131561282f565b6020026020010151600001519050806001600160a01b031663d3eddcc584600185611340919061299c565b815181106113505761135061282f565b6020026020010151602001518560018661136a919061299c565b8151811061137a5761137a61282f565b6020026020010151604001518f8f8a8181106113985761139861282f565b905060200201358e8e8b8181106113b1576113b161282f565b90506020028101906113c39190612845565b8c8c815181106113d5576113d561282f565b602002602001015160018c6113ea919061299c565b815181106113fa576113fa61282f565b60200260200101518e8d815181106114145761141461282f565b602002602001015160018d611429919061299c565b815181106114395761143961282f565b602002602001015160200151336040518963ffffffff1660e01b81526004016114699897969594939291906129c2565b600060405180830381600087803b15801561148357600080fd5b505af1158015611497573d6000803e3d6000fd5b5050505050806114a690612b2f565b90506112f1565b5050806114b990612b2f565b905061129d565b505b600101610eaa565b5060005b838110156117465760008382815181106114ea576114ea61282f565b602002602001015151111561173e57600083828151811061150d5761150d61282f565b60200260200101515190505b801561173c5760008483815181106115335761153361282f565b6020026020010151600183611548919061299c565b815181106115585761155861282f565b60200260200101516060015190506000815190505b80156117295760008261158160018461299c565b815181106115915761159161282f565b6020026020010151600001519050806001600160a01b031663ed463367846001856115bc919061299c565b815181106115cc576115cc61282f565b602002602001015160200151856001866115e6919061299c565b815181106115f6576115f661282f565b6020026020010151604001518f8f8a8181106116145761161461282f565b905060200201358e8e8b81811061162d5761162d61282f565b905060200281019061163f9190612845565b8c8c815181106116515761165161282f565b602002602001015160018c611666919061299c565b815181106116765761167661282f565b60200260200101518e8d815181106116905761169061282f565b602002602001015160018d6116a5919061299c565b815181106116b5576116b561282f565b602002602001015160200151336040518963ffffffff1660e01b81526004016116e59897969594939291906129c2565b600060405180830381600087803b1580156116ff57600080fd5b505af1158015611713573d6000803e3d6000fd5b50505050508061172290612b2f565b905061156d565b50508061173590612b2f565b9050611519565b505b6001016114ce565b5060005b838110156118855760008382815181106117665761176661282f565b602002602001015151111561187d5760005b83828151811061178a5761178a61282f565b60200260200101515181101561187b57336001600160a01b03168483815181106117b6576117b661282f565b602002602001015160018685815181106117d2576117d261282f565b6020026020010151516117e5919061299c565b815181106117f5576117f561282f565b6020026020010151602001516001600160a01b03167f40dadaa36c6c2e3d7317e24757451ffb2d603d875f0ad5e92c5dd156573b187386858151811061183d5761183d61282f565b602002602001015184815181106118565761185661282f565b602002602001015160405161186b9190612b46565b60405180910390a3600101611778565b505b60010161174a565b50505050505050505050565b611899611902565b600180546001600160a01b0383166001600160a01b031990911681179091556118ca6000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000546001600160a01b031633146104045760405163118cdaa760e01b8152336004820152602401610555565b611937611c55565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000807f88c1d2ecf185adf710588203a5f263f0ff61be0d33da39792cde19ba9aa4331e8360000151846020015185604001516119c48760600151611c7f565b6080808901516040805160208101989098526001600160a01b03968716908801529490931660608601529184015260a083015260c082015260e0015b60408051601f1981840301815291905280516020909101209392505050565b600180546001600160a01b031916905561056781611d4a565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015611a9157507f000000000000000000000000000000000000000000000000000000000000000046145b15611abb57507f000000000000000000000000000000000000000000000000000000000000000090565b610574604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b611b6b611c00565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586119673390565b60606105747f00000000000000000000000000000000000000000000000000000000000000006002611d9a565b60606105747f00000000000000000000000000000000000000000000000000000000000000006003611d9a565b600154600160a01b900460ff16156104045760405163d93c066560e01b815260040160405180910390fd5b600080600080611c3b8686611e45565b925092509250611c4b8282611e92565b5090949350505050565b600154600160a01b900460ff1661040457604051638dfc202b60e01b815260040160405180910390fd5b60008082516001600160401b03811115611c9b57611c9b612555565b604051908082528060200260200182016040528015611cc4578160200160208202803683370190505b50905060005b8351811015611d1a57611cf5848281518110611ce857611ce861282f565b6020026020010151611f4f565b828281518110611d0757611d0761282f565b6020908102919091010152600101611cca565b5080604051602001611d2c9190612c33565b60405160208183030381529060405280519060200120915050919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060ff8314611db457611dad83611fb0565b9050610509565b818054611dc090612c69565b80601f0160208091040260200160405190810160405280929190818152602001828054611dec90612c69565b8015611e395780601f10611e0e57610100808354040283529160200191611e39565b820191906000526020600020905b815481529060010190602001808311611e1c57829003601f168201915b50505050509050610509565b60008060008351604103611e7f5760208401516040850151606086015160001a611e7188828585611fef565b955095509550505050611e8b565b50508151600091506002905b9250925092565b6000826003811115611ea657611ea6612ca3565b03611eaf575050565b6001826003811115611ec357611ec3612ca3565b03611ee15760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115611ef557611ef5612ca3565b03611f165760405163fce698f760e01b815260048101829052602401610555565b6003826003811115611f2a57611f2a612ca3565b03611f4b576040516335e2f38360e21b815260048101829052602401610555565b5050565b6000807f80ad7e1b04ee6d994a125f4714ca0720908bd80ed16063ec8aee4b88e9253e2d8360000151846020015180519060200120604051602001611a00939291909283526001600160a01b03919091166020830152604082015260600190565b60606000611fbd836120be565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561202a57506000915060039050826120b4565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561207e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166120aa575060009250600191508290506120b4565b9250600091508190505b9450945094915050565b600060ff8216601f81111561050957604051632cd44ac360e21b815260040160405180910390fd5b6000602082840312156120f857600080fd5b5035919050565b60006020828403121561211157600080fd5b81356001600160401b0381111561212757600080fd5b820160c0818503121561213957600080fd5b9392505050565b60005b8381101561215b578181015183820152602001612143565b50506000910152565b6000815180845261217c816020860160208601612140565b601f01601f19169290920160200192915050565b60ff60f81b881681526000602060e060208401526121b160e084018a612164565b83810360408501526121c3818a612164565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b81811015612217578351835292840192918401916001016121fb565b50909c9b505050505050505050505050565b6020815260006121396020830184612164565b60008083601f84011261224e57600080fd5b5081356001600160401b0381111561226557600080fd5b6020830191508360208260051b850101111561228057600080fd5b9250929050565b600080600080600080606087890312156122a057600080fd5b86356001600160401b03808211156122b757600080fd5b6122c38a838b0161223c565b909850965060208901359150808211156122dc57600080fd5b6122e88a838b0161223c565b9096509450604089013591508082111561230157600080fd5b5061230e89828a0161223c565b979a9699509497509295939492505050565b80356001600160a01b038116811461233757600080fd5b919050565b60006020828403121561234e57600080fd5b61213982612320565b6000808335601e1984360301811261236e57600080fd5b83016020810192503590506001600160401b0381111561238d57600080fd5b80360382131561228057600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008383855260208086019550808560051b830101846000805b8881101561247657858403601f19018a52823536899003605e19018112612404578283fd5b880160606001600160a01b0361241983612320565b16865261242887830183612357565b828989015261243a838901828461239c565b92505050604061244c81840184612357565b93508783038289015261246083858361239c565b9d89019d975050509386019350506001016123df565b509198975050505050505050565b6020815260006001600160a01b038061249c85612320565b166020840152806124af60208601612320565b16604084015250604083013560608301526060830135601e198436030181126124d757600080fd5b83016020810190356001600160401b038111156124f357600080fd5b8060051b360382131561250557600080fd5b60c0608085015261251a60e0850182846123c5565b915050608084013560a084015261253460a0850185612357565b848303601f190160c086015261254b83828461239c565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171561258d5761258d612555565b60405290565b60405160c081016001600160401b038111828210171561258d5761258d612555565b604051601f8201601f191681016001600160401b03811182821017156125dd576125dd612555565b604052919050565b60006001600160401b038211156125fe576125fe612555565b5060051b60200190565b60006001600160401b0382111561262157612621612555565b50601f01601f191660200190565b600082601f83011261264057600080fd5b813561265361264e82612608565b6125b5565b81815284602083860101111561266857600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261269657600080fd5b813560206126a661264e836125e5565b82815260059290921b840181019181810190868411156126c557600080fd5b8286015b848110156127745780356001600160401b03808211156126e95760008081fd5b908801906060828b03601f19018113156127035760008081fd5b61270b61256b565b612716888501612320565b81526040808501358481111561272c5760008081fd5b61273a8e8b8389010161262f565b838b0152509184013591838311156127525760008081fd5b6127608d8a8588010161262f565b9082015286525050509183019183016126c9565b509695505050505050565b600060c0828403121561279157600080fd5b612799612593565b90506127a482612320565b81526127b260208301612320565b60208201526040820135604082015260608201356001600160401b03808211156127db57600080fd5b6127e785838601612685565b60608401526080840135608084015260a084013591508082111561280a57600080fd5b506128178482850161262f565b60a08301525092915050565b6000610509368361277f565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261285c57600080fd5b8301803591506001600160401b0382111561287657600080fd5b60200191503681900382131561228057600080fd5b6000602080838503121561289e57600080fd5b82356001600160401b03808211156128b557600080fd5b818501915085601f8301126128c957600080fd5b81356128d761264e826125e5565b81815260059190911b830184019084810190888311156128f657600080fd5b8585015b8381101561292e578035858111156129125760008081fd5b6129208b89838a010161277f565b8452509186019186016128fa565b5098975050505050505050565b8281526040602082015260006129546040830184612164565b949350505050565b60006020828403121561296e57600080fd5b81516001600160e01b03198116811461213957600080fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561050957610509612986565b8082018082111561050957610509612986565b60e0815260006129d560e083018b612164565b82810360208401526129e7818b612164565b90508860408401528281036060840152612a0281888a61239c565b608084019690965250506001600160a01b0392831660a0820152911660c09091015295945050505050565b838152604060208201526000612a4760408301848661239c565b95945050505050565b60006020808385031215612a6357600080fd5b82516001600160401b0380821115612a7a57600080fd5b818501915085601f830112612a8e57600080fd5b8151612a9c61264e826125e5565b81815260059190911b83018401908481019088831115612abb57600080fd5b8585015b8381101561292e57805185811115612ad75760008081fd5b8601603f81018b13612ae95760008081fd5b878101516040612afb61264e83612608565b8281528d82848601011115612b105760008081fd5b612b1f838c8301848701612140565b8652505050918601918601612abf565b600081612b3e57612b3e612986565b506000190190565b602080825282516001600160a01b0390811683830152838201518116604080850191909152808501516060808601919091528086015160c06080870152805160e0870181905260009594610100600583901b8901810195919493870193919290890190885b81811015612c055760ff198b8903018352855187815116895289810151858b8b0152612bd9868b0182612164565b918701518a83038b890152919050612bf18183612164565b995050509488019491880191600101612bab565b50505050505050608085015160a085015260a08501519150601f198482030160c0850152612a478183612164565b815160009082906020808601845b83811015612c5d57815185529382019390820190600101612c41565b50929695505050505050565b600181811c90821680612c7d57607f821691505b602082108103612c9d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220ca409e8c9582544b3b8d8c05ed7b77fb8b148a77f098b1aea58f1517227de31d64736f6c634300081700338b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\" as const;", "export const abi = [\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignature\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignatureLength\",\n    \"inputs\": [\n      {\n        \"name\": \"length\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignatureS\",\n    \"inputs\": [\n      {\n        \"name\": \"s\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204f453c45fd8890597438ba3740ed042994be373737c9bd8ac833ff249df3eaab64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"eip712Domain\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"fields\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"bytes1\"\n      },\n      {\n        \"name\": \"name\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"version\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"chainId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"verifyingContract\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"salt\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"extensions\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"EIP712DomainChanged\",\n    \"inputs\": [],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidShortString\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"StringTooLong\",\n    \"inputs\": [\n      {\n        \"name\": \"str\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"constructor\",\n    \"inputs\": [\n      {\n        \"name\": \"implementation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"fallback\",\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Upgraded\",\n    \"inputs\": [\n      {\n        \"name\": \"implementation\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AddressEmptyCode\",\n    \"inputs\": [\n      {\n        \"name\": \"target\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1967InvalidImplementation\",\n    \"inputs\": [\n      {\n        \"name\": \"implementation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1967NonPayable\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"FailedInnerCall\",\n    \"inputs\": []\n  }\n] as const;\n\n\nexport const bytecode = \"0x60806040526040516103f03803806103f08339810160408190526100229161025e565b61002c8282610033565b5050610341565b61003c82610091565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a280511561008557610080828261010c565b505050565b61008d61017f565b5050565b806001600160a01b03163b5f036100cb57604051634c9c8ce360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b60605f80846001600160a01b0316846040516101289190610326565b5f60405180830381855af49150503d805f8114610160576040519150601f19603f3d011682016040523d82523d5f602084013e610165565b606091505b5090925090506101768583836101a0565b95945050505050565b341561019e5760405163b398979f60e01b815260040160405180910390fd5b565b6060826101b5576101b0826101ff565b6101f8565b81511580156101cc57506001600160a01b0384163b155b156101f557604051639996b31560e01b81526001600160a01b03851660048201526024016100c2565b50805b9392505050565b80511561020f5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b5f52604160045260245ffd5b5f5b8381101561025657818101518382015260200161023e565b50505f910152565b5f806040838503121561026f575f80fd5b82516001600160a01b0381168114610285575f80fd5b60208401519092506001600160401b03808211156102a1575f80fd5b818501915085601f8301126102b4575f80fd5b8151818111156102c6576102c6610228565b604051601f8201601f19908116603f011681019083821181831017156102ee576102ee610228565b81604052828152886020848701011115610306575f80fd5b61031783602083016020880161023c565b80955050505050509250929050565b5f825161033781846020870161023c565b9190910192915050565b60a38061034d5f395ff3fe6080604052600a600c565b005b60186014601a565b6050565b565b5f604b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b365f80375f80365f845af43d5f803e8080156069573d5ff35b3d5ffdfea2646970667358221220fd2cc92935c943d341edacaf5318a0b9ab0185ce62ef72e95ab393ef358730c464736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"dataStart_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"value_\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b506106dc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063414c3e331461005c578063a145832a14610078578063b99deb0e1461008b578063d3eddcc51461005c578063ed4633671461005c575b600080fd5b61007661006a3660046104a2565b50505050505050505050565b005b6100766100863660046104a2565b6100b5565b61009e61009936600461056f565b610198565b6040516100ac9291906105b1565b60405180910390f35b856100c1816000610265565b6101125760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d7479706560448201526064015b60405180910390fd5b86600881901b610123816000610265565b61017d5760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b6064820152608401610109565b5061018a8c8c898961027c565b505050505050505050505050565b6000606060218310156102005760405162461bcd60e51b815260206004820152602a60248201527f416c6c6f77656443616c6c64617461456e666f726365723a696e76616c69642d6044820152697465726d732d73697a6560b01b6064820152608401610109565b61020e602060008587610608565b61021791610632565b91506102268360208187610608565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250949792965091945050505050565b6001600160f81b0319828116908216145b92915050565b6000606036600061028d86866103d6565b93509350505061029d8888610198565b80519195509350816102af8287610650565b11156103155760405162461bcd60e51b815260206004820152602f60248201527f416c6c6f77656443616c6c64617461456e666f726365723a696e76616c69642d60448201526e0c6c2d8d8c8c2e8c25ad8cadccee8d608b1b6064820152608401610109565b61036e8386846103258583610650565b9261033293929190610608565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250610427915050565b6103cb5760405162461bcd60e51b815260206004820152602860248201527f416c6c6f77656443616c6c64617461456e666f726365723a696e76616c69642d60448201526763616c6c6461746160c01b6064820152608401610109565b505050505050505050565b60008036816103e86014828789610608565b6103f191610671565b60601c9350610404603460148789610608565b61040d91610632565b925061041c8560348189610608565b949793965094505050565b8051602091820120825192909101919091201490565b60008083601f84011261044f57600080fd5b50813567ffffffffffffffff81111561046757600080fd5b60208301915083602082850101111561047f57600080fd5b9250929050565b80356001600160a01b038116811461049d57600080fd5b919050565b60008060008060008060008060008060e08b8d0312156104c157600080fd5b8a3567ffffffffffffffff808211156104d957600080fd5b6104e58e838f0161043d565b909c509a5060208d01359150808211156104fe57600080fd5b61050a8e838f0161043d565b909a50985060408d0135975060608d013591508082111561052a57600080fd5b506105378d828e0161043d565b90965094505060808b0135925061055060a08c01610486565b915061055e60c08c01610486565b90509295989b9194979a5092959850565b6000806020838503121561058257600080fd5b823567ffffffffffffffff81111561059957600080fd5b6105a58582860161043d565b90969095509350505050565b8281526000602060406020840152835180604085015260005b818110156105e6578581018301518582016060015282016105ca565b506000606082860101526060601f19601f830116850101925050509392505050565b6000808585111561061857600080fd5b8386111561062557600080fd5b5050820193919092039150565b8035602083101561027657600019602084900360031b1b1692915050565b8082018082111561027657634e487b7160e01b600052601160045260246000fd5b6bffffffffffffffffffffffff19813581811691601485101561069e5780818660140360031b1b83161692505b50509291505056fea2646970667358221220040ece6946150f16c5413920be7d1b9c5d49d2aae2b6945d7da6faa6f92f5ef664736f6c63430008170033\" as const;", "export const abi = [] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e387e66c46ba5a334fec27a4edf89a8be9952b587b8297dbf10cb57e8c1726d964736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"allowedContract_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"maxTokens_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"spentMap\",\n    \"inputs\": [\n      {\n        \"name\": \"delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"IncreasedSpentMap\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"redeemer\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"limit\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"spent\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b5061081e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063414c3e33146100675780639dd5d9ab14610083578063a145832a146100be578063b99deb0e146100d1578063d3eddcc514610067578063ed46336714610067575b600080fd5b6100816100753660046105c3565b50505050505050505050565b005b6100ab610091366004610690565b600060208181529281526040808220909352908152205481565b6040519081526020015b60405180910390f35b6100816100cc3660046105c3565b610103565b6100e46100df3660046106ba565b610247565b604080516001600160a01b0390931683526020830191909152016100b5565b8561010f8160006102df565b6101605760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d7479706560448201526064015b60405180910390fd5b86600881901b6101718160006102df565b6101cb5760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b6064820152608401610157565b506000806101dc8e8e8b8b8b6102f6565b9150915086856001600160a01b0316336001600160a01b03167fc026e493323d526061a052b5dd562495120e2f648797a48be61966d3a6beec8d858560405161022f929190918252602082015260400190565b60405180910390a45050505050505050505050505050565b600080603483146102a15760405162461bcd60e51b815260206004820152603060248201526000805160206107c983398151915260448201526f0d8d2c85ae8cae4dae65ad8cadccee8d60831b6064820152608401610157565b6102af6014600085876106fc565b6102b891610726565b60601c91506102ca83601481876106fc565b6102d39161075b565b60001c90509250929050565b6001600160f81b0319828116908216145b92915050565b6000806000366000610308888861050d565b9295509350909150506044811461036c5760405162461bcd60e51b815260206004820152603460248201526000805160206107c98339815191526044820152730d8d2c85acaf0cac6eae8d2dedc5ad8cadccee8d60631b6064820152608401610157565b60006103788b8b610247565b965090506001600160a01b03808216908516146103da5760405162461bcd60e51b815260206004820152602c60248201526000805160206107c983398151915260448201526b1b1a590b58dbdb9d1c9858dd60a21b6064820152608401610157565b63a9059cbb60e01b6103f06004600085876106fc565b6103f991610779565b6001600160e01b031916146104515760405162461bcd60e51b815260206004820152602a60248201526000805160206107c98339815191526044820152691b1a590b5b595d1a1bd960b21b6064820152608401610157565b61045f6044602484866106fc565b6104689161075b565b336000908152602081815260408083208b8452909152812080549091906104909084906107a7565b9250508190559450858511156104ff5760405162461bcd60e51b815260206004820152602e60248201527f45524332305472616e73666572416d6f756e74456e666f726365723a616c6c6f60448201526d1dd85b98d94b595e18d95959195960921b6064820152608401610157565b505050509550959350505050565b600080368161051f60148287896106fc565b61052891610726565b60601c935061053b6034601487896106fc565b6105449161075b565b925061055385603481896106fc565b949793965094505050565b60008083601f84011261057057600080fd5b50813567ffffffffffffffff81111561058857600080fd5b6020830191508360208285010111156105a057600080fd5b9250929050565b80356001600160a01b03811681146105be57600080fd5b919050565b60008060008060008060008060008060e08b8d0312156105e257600080fd5b8a3567ffffffffffffffff808211156105fa57600080fd5b6106068e838f0161055e565b909c509a5060208d013591508082111561061f57600080fd5b61062b8e838f0161055e565b909a50985060408d0135975060608d013591508082111561064b57600080fd5b506106588d828e0161055e565b90965094505060808b0135925061067160a08c016105a7565b915061067f60c08c016105a7565b90509295989b9194979a5092959850565b600080604083850312156106a357600080fd5b6106ac836105a7565b946020939093013593505050565b600080602083850312156106cd57600080fd5b823567ffffffffffffffff8111156106e457600080fd5b6106f08582860161055e565b90969095509350505050565b6000808585111561070c57600080fd5b8386111561071957600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156107535780818660140360031b1b83161692505b505092915050565b803560208310156102f057600019602084900360031b1b1692915050565b6001600160e01b031981358181169160048510156107535760049490940360031b84901b1690921692915050565b808201808211156102f057634e487b7160e01b600052601160045260246000fdfe45524332305472616e73666572416d6f756e74456e666f726365723a696e7661a2646970667358221220936350618a5001f34797bf97c50cd107709e028340c60e13df9fe9a2d10d7fb364736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getAvailableAmount\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"availableAmount_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"isNewPeriod_\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      },\n      {\n        \"name\": \"currentPeriod_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"token_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"periodAmount_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"periodDuration_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"startDate_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"periodicAllowances\",\n    \"inputs\": [\n      {\n        \"name\": \"delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"periodAmount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"periodDuration\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"startDate\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"lastTransferPeriod\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"transferredInCurrentPeriod\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"TransferredInPeriod\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"redeemer\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"periodAmount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"periodDuration\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"startDate\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"transferredInCurrentPeriod\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"transferTimestamp\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b50610d12806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a145832a1161005b578063a145832a1461013e578063b99deb0e14610151578063d3eddcc514610082578063ed4633671461008257600080fd5b8063414c3e33146100825780636a9843f61461009e5780637b91dc78146100d1575b600080fd5b61009c610090366004610a20565b50505050505050505050565b005b6100b16100ac366004610aed565b61018e565b604080519384529115156020840152908201526060015b60405180910390f35b6101166100df366004610b47565b6000602081815292815260408082209093529081522080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0016100c8565b61009c61014c366004610a20565b610265565b61016461015f366004610b71565b61034a565b604080516001600160a01b03909516855260208501939093529183015260608201526080016100c8565b6001600160a01b0383166000908152602081815260408083208784528252808320815160a081018352815481526001820154938101939093526002810154918301829052600381015460608401526004015460808301528291829115610203576101f781610416565b9350935093505061025b565b6000806000610212898961034a565b9350935093505060006040518060a00160405280858152602001848152602001838152602001600081526020016000815250905061024f81610416565b97509750975050505050505b9450945094915050565b856102718160006104aa565b6102c25760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d7479706560448201526064015b60405180910390fd5b86600881901b6102d38160006104aa565b61032d5760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b60648201526084016102b9565b5061033c8c8c898989886104c1565b505050505050505050505050565b6000808080607485146103a65760405162461bcd60e51b81526020600482015260306024820152600080516020610cbd83398151915260448201526f0d8d2c85ae8cae4dae65ad8cadccee8d60831b60648201526084016102b9565b6103b4601460008789610bb3565b6103bd91610bdd565b60601c93506103d0603460148789610bb3565b6103d991610c12565b92506103e9605460348789610bb3565b6103f291610c12565b9150610402607460548789610bb3565b61040b91610c12565b939692955090935050565b60008060008360400151421015610435575060009150819050806104a3565b602084015160408501516104499042610c46565b6104539190610c59565b61045e906001610c7b565b90508084606001511415915060008261047b57846080015161047e565b60005b90508085600001511161049257600061049f565b845161049f908290610c46565b9350505b9193909250565b6001600160f81b0319828116908216145b92915050565b60003660006104d0878761096a565b929550935090915050604481146105345760405162461bcd60e51b81526020600482015260346024820152600080516020610cbd8339815191526044820152730d8d2c85acaf0cac6eae8d2dedc5ad8cadccee8d60631b60648201526084016102b9565b6000806000806105448d8d61034a565b9350935093509350866001600160a01b0316846001600160a01b0316146105b05760405162461bcd60e51b815260206004820152602c6024820152600080516020610cbd83398151915260448201526b1b1a590b58dbdb9d1c9858dd60a21b60648201526084016102b9565b63a9059cbb60e01b6105c660046000888a610bb3565b6105cf91610c8e565b6001600160e01b031916146106275760405162461bcd60e51b815260206004820152602a6024820152600080516020610cbd8339815191526044820152691b1a590b5b595d1a1bd960b21b60648201526084016102b9565b336000908152602081815260408083208c8452909152812060028101549091036107e157600082116106a55760405162461bcd60e51b81526020600482015260336024820152600080516020610cbd8339815191526044820152726c69642d7a65726f2d73746172742d6461746560681b60648201526084016102b9565b600084116107025760405162461bcd60e51b81526020600482015260366024820152600080516020610cbd8339815191526044820152751b1a590b5e995c9bcb5c195c9a5bd90b585b5bdd5b9d60521b60648201526084016102b9565b600083116107665760405162461bcd60e51b81526020600482015260386024820152600080516020610cbd83398151915260448201527f6c69642d7a65726f2d706572696f642d6475726174696f6e000000000000000060648201526084016102b9565b814210156107cf5760405162461bcd60e51b815260206004820152603060248201527f4552433230506572696f645472616e73666572456e666f726365723a7472616e60448201526f1cd9995c8b5b9bdd0b5cdd185c9d195960821b60648201526084016102b9565b83815560018101839055600281018290555b600080600061082c846040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050610416565b919450925090506000610843604460248c8e610bb3565b61084c91610c12565b9050838111156108bb5760405162461bcd60e51b815260206004820152603460248201527f4552433230506572696f645472616e73666572456e666f726365723a7472616e6044820152731cd9995c8b585b5bdd5b9d0b595e18d95959195960621b60648201526084016102b9565b82156108d05760038501829055600060048601555b808560040160008282546108e49190610c7b565b90915550506004850154604080516001600160a01b038c81168252602082018c90529181018a90526060810189905260808101929092524260a08301528f91908f169033907fb2a345c7f80b4be490c405f4a994faf85384dd05da7d70be0801dc31a8c253af9060c00160405180910390a4505050505050505050505050505050505050565b600080368161097c6014828789610bb3565b61098591610bdd565b60601c9350610998603460148789610bb3565b6109a191610c12565b92506109b08560348189610bb3565b949793965094505050565b60008083601f8401126109cd57600080fd5b50813567ffffffffffffffff8111156109e557600080fd5b6020830191508360208285010111156109fd57600080fd5b9250929050565b80356001600160a01b0381168114610a1b57600080fd5b919050565b60008060008060008060008060008060e08b8d031215610a3f57600080fd5b8a3567ffffffffffffffff80821115610a5757600080fd5b610a638e838f016109bb565b909c509a5060208d0135915080821115610a7c57600080fd5b610a888e838f016109bb565b909a50985060408d0135975060608d0135915080821115610aa857600080fd5b50610ab58d828e016109bb565b90965094505060808b01359250610ace60a08c01610a04565b9150610adc60c08c01610a04565b90509295989b9194979a5092959850565b60008060008060608587031215610b0357600080fd5b84359350610b1360208601610a04565b9250604085013567ffffffffffffffff811115610b2f57600080fd5b610b3b878288016109bb565b95989497509550505050565b60008060408385031215610b5a57600080fd5b610b6383610a04565b946020939093013593505050565b60008060208385031215610b8457600080fd5b823567ffffffffffffffff811115610b9b57600080fd5b610ba7858286016109bb565b90969095509350505050565b60008085851115610bc357600080fd5b83861115610bd057600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff198135818116916014851015610c0a5780818660140360031b1b83161692505b505092915050565b803560208310156104bb57600019602084900360031b1b1692915050565b634e487b7160e01b600052601160045260246000fd5b818103818111156104bb576104bb610c30565b600082610c7657634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156104bb576104bb610c30565b6001600160e01b03198135818116916004851015610c0a5760049490940360031b84901b169092169291505056fe4552433230506572696f645472616e73666572456e666f726365723a696e7661a264697066735822122078259b929dc2fea71614ebe238bd74e88ff3ea3542e0d11a18122c300122d3f664736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsInterface\",\n    \"inputs\": [\n      {\n        \"name\": \"interfaceId\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ac220b672ee89e055a56513b249d66df06ecb6da367b913fa0b7b7f3f838634764736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"event\",\n    \"name\": \"AdminChanged\",\n    \"inputs\": [\n      {\n        \"name\": \"previousAdmin\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"newAdmin\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"BeaconUpgraded\",\n    \"inputs\": [\n      {\n        \"name\": \"beacon\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Upgraded\",\n    \"inputs\": [\n      {\n        \"name\": \"implementation\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1967InvalidAdmin\",\n    \"inputs\": [\n      {\n        \"name\": \"admin\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1967InvalidBeacon\",\n    \"inputs\": [\n      {\n        \"name\": \"beacon\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1967InvalidImplementation\",\n    \"inputs\": [\n      {\n        \"name\": \"implementation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1967NonPayable\",\n    \"inputs\": []\n  }\n] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bf999523a2735d33a4f148563c82738a41cc465257ff9df9a8912b831ab5af9564736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"constructor\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IDelegationManager\"\n      },\n      {\n        \"name\": \"_entryPoint\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IEntryPoint\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"receive\",\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"DOMAIN_VERSION\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"NAME\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"PACKED_USER_OP_TYPEHASH\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"VERSION\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"addDeposit\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"delegationManager\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IDelegationManager\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"disableDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegation\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"eip712Domain\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"fields\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"bytes1\"\n      },\n      {\n        \"name\": \"name\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"version\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"chainId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"verifyingContract\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"salt\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"extensions\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"enableDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegation\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"entryPoint\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IEntryPoint\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"execute\",\n    \"inputs\": [\n      {\n        \"name\": \"_execution\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Execution\",\n        \"components\": [\n          {\n            \"name\": \"target\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"value\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"execute\",\n    \"inputs\": [\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"executeFromExecutor\",\n    \"inputs\": [\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"returnData_\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDeposit\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDomainHash\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getNonce\",\n    \"inputs\": [\n      {\n        \"name\": \"_key\",\n        \"type\": \"uint192\",\n        \"internalType\": \"uint192\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getNonce\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getPackedUserOperationHash\",\n    \"inputs\": [\n      {\n        \"name\": \"_userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getPackedUserOperationTypedDataHash\",\n    \"inputs\": [\n      {\n        \"name\": \"_userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isDelegationDisabled\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isValidSignature\",\n    \"inputs\": [\n      {\n        \"name\": \"_hash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_signature\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"magicValue_\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC1155BatchReceived\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC1155Received\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC721Received\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"redeemDelegations\",\n    \"inputs\": [\n      {\n        \"name\": \"_permissionContexts\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      },\n      {\n        \"name\": \"_modes\",\n        \"type\": \"bytes32[]\",\n        \"internalType\": \"ModeCode[]\"\n      },\n      {\n        \"name\": \"_executionCallDatas\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsExecutionMode\",\n    \"inputs\": [\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsInterface\",\n    \"inputs\": [\n      {\n        \"name\": \"_interfaceId\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"validateUserOp\",\n    \"inputs\": [\n      {\n        \"name\": \"_userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_missingAccountFunds\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"validationData_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"withdrawDeposit\",\n    \"inputs\": [\n      {\n        \"name\": \"_withdrawAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address payable\"\n      },\n      {\n        \"name\": \"_withdrawAmount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"EIP712DomainChanged\",\n    \"inputs\": [],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SentPrefund\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"success\",\n        \"type\": \"bool\",\n        \"indexed\": false,\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SetDelegationManager\",\n    \"inputs\": [\n      {\n        \"name\": \"newDelegationManager\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"contract IDelegationManager\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SetEntryPoint\",\n    \"inputs\": [\n      {\n        \"name\": \"entryPoint\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"contract IEntryPoint\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"TryExecuteUnsuccessful\",\n    \"inputs\": [\n      {\n        \"name\": \"batchExecutionindex\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"result\",\n        \"type\": \"bytes\",\n        \"indexed\": false,\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignature\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignatureLength\",\n    \"inputs\": [\n      {\n        \"name\": \"length\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignatureS\",\n    \"inputs\": [\n      {\n        \"name\": \"s\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ExecutionFailed\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidEIP712NameLength\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidEIP712VersionLength\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidShortString\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotDelegationManager\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotEntryPoint\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotEntryPointOrSelf\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotSelf\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"StringTooLong\",\n    \"inputs\": [\n      {\n        \"name\": \"str\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UnauthorizedCallContext\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UnsupportedCallType\",\n    \"inputs\": [\n      {\n        \"name\": \"callType\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"CallType\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UnsupportedExecType\",\n    \"inputs\": [\n      {\n        \"name\": \"execType\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"ExecType\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x6101c060405230610160523480156200001757600080fd5b50604051620031b0380380620031b08339810160408190526200003a91620002b3565b81816040518060400160405280601981526020017f4549503737303253746174656c65737344656c654761746f7200000000000000815250604051806040016040528060018152602001603160f81b8152508181620000a46000836200021560201b90919060201c565b61012052620000b581600162000215565b61014052815160208084019190912060e052815190820120610100524660a0526200014360e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c0528151601f10156200017057604051631ad9af3960e21b815260040160405180910390fd5b601f8151111562000194576040516309203c9d60e41b815260040160405180910390fd5b6001600160a01b038085166101808190529084166101a0526040517fb2e8eb88b584ae71ef4e854c10847f4d39bd93e52599f147bfb4dcc8de52014d90600090a26040516001600160a01b038416907fee8699dc0e27105da2653bdba54be0edcaadc3e33890a3ad705517ffe9bf0a9990600090a2505050505050620004db565b600060208351101562000235576200022d836200024e565b905062000248565b8162000242848262000399565b5060ff90505b92915050565b600080829050601f8151111562000285578260405163305a27a960e01b81526004016200027c919062000465565b60405180910390fd5b80516200029282620004b6565b179392505050565b6001600160a01b0381168114620002b057600080fd5b50565b60008060408385031215620002c757600080fd5b8251620002d4816200029a565b6020840151909250620002e7816200029a565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200031d57607f821691505b6020821081036200033e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000394576000816000526020600020601f850160051c810160208610156200036f5750805b601f850160051c820191505b8181101562000390578281556001016200037b565b5050505b505050565b81516001600160401b03811115620003b557620003b5620002f2565b620003cd81620003c6845462000308565b8462000344565b602080601f831160018114620004055760008415620003ec5750858301515b600019600386901b1c1916600185901b17855562000390565b600085815260208120601f198616915b82811015620004365788860151825594840194600190910190840162000415565b5085821015620004555787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020808352835180602085015260005b81811015620004955785810183015185820160400152820162000477565b506000604082860101526040601f19601f8301168501019250505092915050565b805160208083015191908110156200033e5760001960209190910360031b1b16919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a051612bb1620005ff60003960008181610471015281816107f7015281816108c20152818161094001528181610aa401528181610b9a01528181610bf201528181610c7401528181610ce601528181610e1001528181610e8f01528181611015015281816112cd01526115ce01526000818161057a015281816109a301528181610a2601528181610b0701528181610ef201526110590152600081816106190152818161073a015281816107960152818161083f01528181610b4601528181610da7015261162101526000611960015260006119330152600061174c015260006117240152600061167f015260006116a9015260006116d30152612bb16000f3fe6080604052600436106101c65760003560e01c806384b0196e116100f7578063d03c791411610095578063ea4d3c9b11610064578063ea4d3c9b14610568578063ed8101b51461059c578063f23a6e61146105bc578063ffa1ad74146105dc57600080fd5b8063d03c791414610500578063d087d28814610520578063d691c96414610535578063e9ae5c531461055557600080fd5b8063b0d691fe116100d1578063b0d691fe1461045f578063bc197c81146104ab578063c399ec88146104cb578063cef6d209146104e057600080fd5b806384b0196e146103b4578063a3f4df7e146103dc578063acb8cc491461043257600080fd5b80633ed01015116101645780634a58db191161013e5780634a58db19146103645780635c1c6dcd1461036c5780637f07bfdc1461037f57806383ebb7711461039f57600080fd5b80633ed0101514610302578063445140b814610324578063499340471461034457600080fd5b80631626ba7e116101a05780631626ba7e1461026e57806319822f7c1461028e5780632b3afd99146102ae5780633e1b0812146102e257600080fd5b806301ffc9a7146101d257806306394d6714610207578063150b7a021461023557600080fd5b366101cd57005b600080fd5b3480156101de57600080fd5b506101f26101ed366004611fb2565b61060d565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b50610227610222366004611ff5565b6106f9565b6040519081526020016101fe565b34801561024157600080fd5b506102556102503660046120fb565b61072e565b6040516001600160e01b031990911681526020016101fe565b34801561027a57600080fd5b506102556102893660046121ae565b61078a565b34801561029a57600080fd5b506102276102a93660046121f9565b6107ea565b3480156102ba57600080fd5b506102277fbc37962d8bd1d319c95199bdfda6d3f92baa8903a61b32d5f4ec1f4b36a3bc1881565b3480156102ee57600080fd5b506102276102fd366004612246565b61089b565b34801561030e57600080fd5b5061032261031d36600461226f565b610935565b005b34801561033057600080fd5b506101f261033f3660046122a9565b610a0d565b34801561035057600080fd5b5061032261035f36600461226f565b610a99565b610322610b3c565b61032261037a3660046122c2565b610be7565b34801561038b57600080fd5b5061032261039a3660046122fc565b610c69565b3480156103ab57600080fd5b50610227610d46565b3480156103c057600080fd5b506103c9610d55565b6040516101fe979695949392919061236e565b3480156103e857600080fd5b506104256040518060400160405280601981526020017f4549503737303253746174656c65737344656c654761746f720000000000000081525081565b6040516101fe9190612407565b34801561043e57600080fd5b50610425604051806040016040528060018152602001603160f81b81525081565b34801561046b57600080fd5b506104937f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101fe565b3480156104b757600080fd5b506102556104c6366004612499565b610d9b565b3480156104d757600080fd5b50610227610df8565b3480156104ec57600080fd5b506103226104fb36600461258a565b610e84565b34801561050c57600080fd5b506101f261051b3660046122a9565b610f6b565b34801561052c57600080fd5b50610227610ff6565b6105486105433660046121ae565b61104c565b6040516101fe9190612623565b6103226105633660046121ae565b6112c2565b34801561057457600080fd5b506104937f000000000000000000000000000000000000000000000000000000000000000081565b3480156105a857600080fd5b506102276105b7366004611ff5565b6114d3565b3480156105c857600080fd5b506102556105d7366004612687565b611615565b3480156105e857600080fd5b50610425604051806040016040528060058152602001640312e332e360dc1b81525081565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361065857604051634f81d01360e11b815260040160405180910390fd5b6001600160e01b031982166335a4725960e21b148061068757506001600160e01b03198216630a85bd0160e11b145b806106a257506001600160e01b03198216630271189760e51b145b806106bd57506001600160e01b031982166301ffc9a760e01b145b806106d857506001600160e01b03198216630b135d3f60e11b145b806106f357506001600160e01b03198216633992254760e01b145b92915050565b60006106f3610706611672565b61070f846114d3565b60405161190160f01b8152600281019290925260228201526042902090565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361077957604051634f81d01360e11b815260040160405180910390fd5b50630a85bd0160e11b949350505050565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107d557604051634f81d01360e11b815260040160405180910390fd5b6107e084848461179d565b90505b9392505050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461083557604051636b31ba1560e11b815260040160405180910390fd5b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361087e57604051634f81d01360e11b815260040160405180910390fd5b6108908461088b866106f9565b611816565b90506107e38261185e565b604051631aab3f0d60e11b81523060048201526001600160c01b03821660248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906335567e1a90604401602060405180830381865afa158015610911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f391906126ef565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061096e5750333014155b1561098c57604051630796d94560e01b815260040160405180910390fd5b604051633ed0101560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633ed01015906109d8908490600401612837565b600060405180830381600087803b1580156109f257600080fd5b505af1158015610a06573d6000803e3d6000fd5b5050505050565b6040516316a0682960e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632d40d05290602401602060405180830381865afa158015610a75573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f39190612908565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590610ad25750333014155b15610af057604051630796d94560e01b815260040160405180910390fd5b604051634993404760e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906349934047906109d8908490600401612837565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b8557604051634f81d01360e11b815260040160405180910390fd5b60405163b760faf960e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b760faf99034906024016000604051808303818588803b1580156109f257600080fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590610c205750333014155b15610c3e57604051630796d94560e01b815260040160405180910390fd5b610c65610c4e602083018361292a565b6020830135610c606040850185612947565b6118f6565b5050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590610ca25750333014155b15610cc057604051630796d94560e01b815260040160405180910390fd5b60405163040b850f60e31b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063205c287890604401600060405180830381600087803b158015610d2a57600080fd5b505af1158015610d3e573d6000803e3d6000fd5b505050505050565b6000610d50611672565b905090565b600060608060008060006060610d6961192c565b610d71611959565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610de657604051634f81d01360e11b815260040160405180910390fd5b5063bc197c8160e01b95945050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a08231906024015b602060405180830381865afa158015610e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5091906126ef565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590610ebd5750333014155b15610edb57604051630796d94560e01b815260040160405180910390fd5b60405163cef6d20960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cef6d20990610f31908990899089908990899089906004016129ee565b600060405180830381600087803b158015610f4b57600080fd5b505af1158015610f5f573d6000803e3d6000fd5b50505050505050505050565b600081600881901b603082901b605083901b610f878486611986565b80610f9b5750610f9b84600160f81b611986565b8015610fc15750610fad836000611986565b80610fc15750610fc183600160f81b611986565b8015610fd557506001600160e01b03198216155b8015610fec575069ffffffffffffffffffff198116155b9695505050505050565b604051631aab3f0d60e11b8152306004820152600060248201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906335567e1a90604401610e43565b6060336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461109757604051630692ce8160e21b815260040160405180910390fd5b83600881901b6110ab82600160f81b611986565b15611131573660006110bd8787611998565b90925090506110cd836000611986565b156110e3576110dc8282611a31565b945061112a565b6110f183600160f81b611986565b15611100576110dc8282611af2565b6040516308c3ee0360e11b81526001600160f81b0319841660048201526024015b60405180910390fd5b50506112b9565b61113c826000611986565b15611294576000803660006111518989611c1f565b6040805160018082528183019092529498509296509094509250816020015b606081526020019060019003908161117057905050965060006111938682611986565b156111c7576111a4858585856118f6565b886000815181106111b7576111b7612a57565b602002602001018190525061128a565b6111d586600160f81b611986565b15611265576111e685858585611c70565b896000815181106111f9576111f9612a57565b6020908102919091010152905080611260577fe723f28f104e46b47fd3531f3608374ac226bcf3ddda334a23a266453e0efdb760008960008151811061124157611241612a57565b6020026020010151604051611257929190612a6d565b60405180910390a15b61128a565b6040516308c3ee0360e11b81526001600160f81b031987166004820152602401611121565b50505050506112b9565b604051632e5bf3f960e21b81526001600160f81b031983166004820152602401611121565b50509392505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906112fb5750333014155b1561131957604051630796d94560e01b815260040160405180910390fd5b82600881901b61132d82600160f81b611986565b156113885736600061133f8686611998565b909250905061134f836000611986565b156113645761135e8282611a31565b50611381565b61137283600160f81b611986565b156111005761135e8282611af2565b5050610a06565b611393826000611986565b15611294576000803660006113a88888611c1f565b93509350935093506113be85600060f81b611986565b156113d5576113cf848484846118f6565b506114ca565b6113e385600160f81b611986565b156114a557604080516001808252818301909252600091816020015b60608152602001906001900390816113ff579050509050600061142486868686611c70565b8360008151811061143757611437612a57565b602090810291909101015290508061149e577fe723f28f104e46b47fd3531f3608374ac226bcf3ddda334a23a266453e0efdb760008360008151811061147f5761147f612a57565b6020026020010151604051611495929190612a6d565b60405180910390a15b50506114ca565b6040516308c3ee0360e11b81526001600160f81b031986166004820152602401611121565b50505050610a06565b60007fbc37962d8bd1d319c95199bdfda6d3f92baa8903a61b32d5f4ec1f4b36a3bc18611503602084018461292a565b60208401356115156040860186612947565b604051611523929190612a86565b6040519081900390206115396060870187612947565b604051611547929190612a86565b604051908190039020608087013560a088013560c089013561156c60e08b018b612947565b60405161157a929190612a86565b60408051918290038220602083019a909a526001600160a01b03988916908201526060810196909652608086019490945260a085019290925260c084015260e08301526101008201526101208101929092527f00000000000000000000000000000000000000000000000000000000000000001661014082015261016001604051602081830303815290604052805190602001209050919050565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361166057604051634f81d01360e11b815260040160405180910390fd5b5063f23a6e6160e01b95945050505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156116cb57507f000000000000000000000000000000000000000000000000000000000000000046145b156116f557507f000000000000000000000000000000000000000000000000000000000000000090565b610d50604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b6000306001600160a01b03166117e98585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ca192505050565b6001600160a01b0316036118055750630b135d3f60e11b6107e3565b506001600160e01b03199392505050565b6000806118308361182b610100870187612947565b61179d565b90506374eca2c160e11b6001600160e01b03198216016118545760009150506106f3565b5060019392505050565b80156118f357604051600090339060001990849084818181858888f193505050503d80600081146118ab576040519150601f19603f3d011682016040523d82523d6000602084013e6118b0565b606091505b505060408051848152821515602082015291925033917fa427c7d47f24d01b170779a7600b1d4c0d7cdbabaa0f19c4f0e6182053ffc931910160405180910390a2505b50565b60405181838237600038838387895af1611913573d6000823e3d81fd5b3d8152602081013d6000823e3d01604052949350505050565b6060610d507f00000000000000000000000000000000000000000000000000000000000000006000611ccb565b6060610d507f00000000000000000000000000000000000000000000000000000000000000006001611ccb565b6001600160f81b031990811691161490565b366000833580850160208587010360208201945081359350808460051b8301118360401c17156119d05763ba597e7e6000526004601cfd5b8315611a27578392505b6001830392508260051b850135915081850160408101358082018381358201118460408501111782861782351760401c1715611a1e5763ba597e7e6000526004601cfd5b505050826119da575b5050509250929050565b606081806001600160401b03811115611a4c57611a4c612046565b604051908082528060200260200182016040528015611a7f57816020015b6060815260200190600190039081611a6a5790505b50915060005b81811015611aea5736858583818110611aa057611aa0612a57565b9050602002810190611ab29190612a96565b9050611ac4610c4e602083018361292a565b848381518110611ad657611ad6612a57565b602090810291909101015250600101611a85565b505092915050565b606081806001600160401b03811115611b0d57611b0d612046565b604051908082528060200260200182016040528015611b4057816020015b6060815260200190600190039081611b2b5790505b50915060005b81811015611aea5736858583818110611b6157611b61612a57565b9050602002810190611b739190612a96565b90506000611b9e611b87602084018461292a565b6020840135611b996040860186612947565b611c70565b868581518110611bb057611bb0612a57565b6020908102919091010152905080611c15577fe723f28f104e46b47fd3531f3608374ac226bcf3ddda334a23a266453e0efdb783868581518110611bf657611bf6612a57565b6020026020010151604051611c0c929190612a6d565b60405180910390a15b5050600101611b46565b6000803681611c316014828789612ab6565b611c3a91612ae0565b60601c9350611c4d603460148789612ab6565b611c5691612b13565b9250611c658560348189612ab6565b949793965094505050565b604051600090828482376000388483888a5af191503d8152602081013d6000823e3d81016040525094509492505050565b600080600080611cb18686611d76565b925092509250611cc18282611dc3565b5090949350505050565b606060ff8314611ce557611cde83611e7c565b90506106f3565b818054611cf190612b31565b80601f0160208091040260200160405190810160405280929190818152602001828054611d1d90612b31565b8015611d6a5780601f10611d3f57610100808354040283529160200191611d6a565b820191906000526020600020905b815481529060010190602001808311611d4d57829003601f168201915b505050505090506106f3565b60008060008351604103611db05760208401516040850151606086015160001a611da288828585611ebb565b955095509550505050611dbc565b50508151600091506002905b9250925092565b6000826003811115611dd757611dd7612b65565b03611de0575050565b6001826003811115611df457611df4612b65565b03611e125760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115611e2657611e26612b65565b03611e475760405163fce698f760e01b815260048101829052602401611121565b6003826003811115611e5b57611e5b612b65565b03610c65576040516335e2f38360e21b815260048101829052602401611121565b60606000611e8983611f8a565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611ef65750600091506003905082611f80565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611f4a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611f7657506000925060019150829050611f80565b9250600091508190505b9450945094915050565b600060ff8216601f8111156106f357604051632cd44ac360e21b815260040160405180910390fd5b600060208284031215611fc457600080fd5b81356001600160e01b0319811681146107e357600080fd5b60006101208284031215611fef57600080fd5b50919050565b60006020828403121561200757600080fd5b81356001600160401b0381111561201d57600080fd5b61202984828501611fdc565b949350505050565b6001600160a01b03811681146118f357600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561208457612084612046565b604052919050565b600082601f83011261209d57600080fd5b81356001600160401b038111156120b6576120b6612046565b6120c9601f8201601f191660200161205c565b8181528460208386010111156120de57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561211157600080fd5b843561211c81612031565b9350602085013561212c81612031565b92506040850135915060608501356001600160401b0381111561214e57600080fd5b61215a8782880161208c565b91505092959194509250565b60008083601f84011261217857600080fd5b5081356001600160401b0381111561218f57600080fd5b6020830191508360208285010111156121a757600080fd5b9250929050565b6000806000604084860312156121c357600080fd5b8335925060208401356001600160401b038111156121e057600080fd5b6121ec86828701612166565b9497909650939450505050565b60008060006060848603121561220e57600080fd5b83356001600160401b0381111561222457600080fd5b61223086828701611fdc565b9660208601359650604090950135949350505050565b60006020828403121561225857600080fd5b81356001600160c01b03811681146107e357600080fd5b60006020828403121561228157600080fd5b81356001600160401b0381111561229757600080fd5b820160c081850312156107e357600080fd5b6000602082840312156122bb57600080fd5b5035919050565b6000602082840312156122d457600080fd5b81356001600160401b038111156122ea57600080fd5b8201606081850312156107e357600080fd5b6000806040838503121561230f57600080fd5b823561231a81612031565b946020939093013593505050565b6000815180845260005b8181101561234e57602081850181015186830182015201612332565b506000602082860101526020601f19601f83011685010191505092915050565b60ff60f81b881681526000602060e0602084015261238f60e084018a612328565b83810360408501526123a1818a612328565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b818110156123f5578351835292840192918401916001016123d9565b50909c9b505050505050505050505050565b6020815260006107e36020830184612328565b600082601f83011261242b57600080fd5b813560206001600160401b0382111561244657612446612046565b8160051b61245582820161205c565b928352848101820192828101908785111561246f57600080fd5b83870192505b8483101561248e57823582529183019190830190612475565b979650505050505050565b600080600080600060a086880312156124b157600080fd5b85356124bc81612031565b945060208601356124cc81612031565b935060408601356001600160401b03808211156124e857600080fd5b6124f489838a0161241a565b9450606088013591508082111561250a57600080fd5b61251689838a0161241a565b9350608088013591508082111561252c57600080fd5b506125398882890161208c565b9150509295509295909350565b60008083601f84011261255857600080fd5b5081356001600160401b0381111561256f57600080fd5b6020830191508360208260051b85010111156121a757600080fd5b600080600080600080606087890312156125a357600080fd5b86356001600160401b03808211156125ba57600080fd5b6125c68a838b01612546565b909850965060208901359150808211156125df57600080fd5b6125eb8a838b01612546565b9096509450604089013591508082111561260457600080fd5b5061261189828a01612546565b979a9699509497509295939492505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b8281101561267a57603f19888603018452612668858351612328565b9450928501929085019060010161264c565b5092979650505050505050565b600080600080600060a0868803121561269f57600080fd5b85356126aa81612031565b945060208601356126ba81612031565b9350604086013592506060860135915060808601356001600160401b038111156126e357600080fd5b6125398882890161208c565b60006020828403121561270157600080fd5b5051919050565b6000808335601e1984360301811261271f57600080fd5b83016020810192503590506001600160401b0381111561273e57600080fd5b8036038213156121a757600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008383855260208086019550808560051b830101846000805b8881101561282957858403601f19018a52823536899003605e190181126127b5578283fd5b8801606081356127c481612031565b6001600160a01b031686526127db82880183612708565b82898901526127ed838901828461274d565b9250505060406127ff81840184612708565b93508783038289015261281383858361274d565b9d89019d97505050938601935050600101612790565b509198975050505050505050565b602081526000823561284881612031565b6001600160a01b039081166020848101919091528401359061286982612031565b80821660408501525050604083013560608301526060830135601e1984360301811261289457600080fd5b83016020810190356001600160401b038111156128b057600080fd5b8060051b36038213156128c257600080fd5b60c060808501526128d760e085018284612776565b915050608084013560a08401526128f160a0850185612708565b848303601f190160c0860152610fec83828461274d565b60006020828403121561291a57600080fd5b815180151581146107e357600080fd5b60006020828403121561293c57600080fd5b81356107e381612031565b6000808335601e1984360301811261295e57600080fd5b8301803591506001600160401b0382111561297857600080fd5b6020019150368190038213156121a757600080fd5b6000838385526020808601955060208560051b8301018460005b878110156129e157848303601f190189526129c28288612708565b6129cd85828461274d565b9a86019a94505050908301906001016129a7565b5090979650505050505050565b606081526000612a0260608301888a61298d565b8281036020848101919091528682528791810160005b88811015612a3457833582529282019290820190600101612a18565b508481036040860152612a4881878961298d565b9b9a5050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b8281526040602082015260006107e06040830184612328565b8183823760009101908152919050565b60008235605e19833603018112612aac57600080fd5b9190910192915050565b60008085851115612ac657600080fd5b83861115612ad357600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff198135818116916014851015611aea5760149490940360031b84901b1690921692915050565b803560208310156106f357600019602084900360031b1b1692915050565b600181811c90821680612b4557607f821691505b602082108103611fef57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052602160045260246000fdfea26469706673582212202a8fc88ef923739742bc7ec1685cd9198a7251cfb58c7e873c821a7e716b2ca664736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"balanceCache\",\n    \"inputs\": [\n      {\n        \"name\": \"hashKey\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"balance\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getHashKey\",\n    \"inputs\": [\n      {\n        \"name\": \"_caller\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_token\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"enforceDecrease_\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      },\n      {\n        \"name\": \"token_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"recipient_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isLocked\",\n    \"inputs\": [\n      {\n        \"name\": \"hashKey\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"lock\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b5061095e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b5e544921161005b578063b5e5449214610115578063b99deb0e14610135578063d3eddcc51461017a578063ed463367146100c557600080fd5b806332a16f4e1461008d578063414c3e33146100c55780638678d6ef146100e1578063a145832a14610102575b600080fd5b6100b061009b366004610677565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100df6100d33660046106f5565b50505050505050505050565b005b6100f46100ef3660046107c2565b61018d565b6040519081526020016100bc565b6100df6101103660046106f5565b6101a2565b6100f4610123366004610677565b60006020819052908152604090205481565b6101486101433660046107fe565b610353565b6040516100bc949392919093151584526001600160a01b03928316602085015291166040830152606082015260800190565b6100df6101883660046106f5565b610440565b600061019a84848461061d565b949350505050565b85600881901b6101b3816000610660565b6102125760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b60648201526084015b60405180910390fd5b506000806102208d8d610353565b509250925050600061023333848961061d565b60008181526001602052604090205490915060ff16156102ab5760405162461bcd60e51b815260206004820152602d60248201527f455243323042616c616e63654368616e6765456e666f726365723a656e666f7260448201526c18d95c8b5a5ccb5b1bd8dad959609a1b6064820152608401610209565b6000818152600160208190526040808320805460ff1916909217909155516370a0823160e01b81526001600160a01b0384811660048301528516906370a0823190602401602060405180830381865afa15801561030c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103309190610840565b600092835260208390526040909220919091555050505050505050505050505050565b6000808080604985146103c05760405162461bcd60e51b815260206004820152602f60248201527f455243323042616c616e63654368616e6765456e666f726365723a696e76616c60448201526e0d2c85ae8cae4dae65ad8cadccee8d608b1b6064820152608401610209565b858560008181106103d3576103d3610859565b909101356001600160f81b031916151594506103f5905060156001878961086f565b6103fe91610899565b60601c925061041160296015878961086f565b61041a91610899565b60601c915061042c856029818961086f565b610435916108ce565b939692955090935050565b6000806000806104508e8e610353565b9350935093509350600061046533858a61061d565b600081815260016020526040808220805460ff19169055516370a0823160e01b81526001600160a01b03868116600483015292935090918616906370a0823190602401602060405180830381865afa1580156104c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e99190610840565b9050851561057c5760008281526020819052604090205461050b908490610902565b8110156105775760405162461bcd60e51b815260206004820152603460248201527f455243323042616c616e63654368616e6765456e666f726365723a65786365656044820152736465642d62616c616e63652d646563726561736560601b6064820152608401610209565b61060b565b600082815260208190526040902054610596908490610915565b81101561060b5760405162461bcd60e51b815260206004820152603860248201527f455243323042616c616e63654368616e6765456e666f726365723a696e73756660448201527f66696369656e742d62616c616e63652d696e63726561736500000000000000006064820152608401610209565b50505050505050505050505050505050565b604080516001600160a01b039485166020808301919091529390941684820152606080850192909252805180850390920182526080909301909252815191012090565b6001600160f81b0319828116908216145b92915050565b60006020828403121561068957600080fd5b5035919050565b60008083601f8401126106a257600080fd5b50813567ffffffffffffffff8111156106ba57600080fd5b6020830191508360208285010111156106d257600080fd5b9250929050565b80356001600160a01b03811681146106f057600080fd5b919050565b60008060008060008060008060008060e08b8d03121561071457600080fd5b8a3567ffffffffffffffff8082111561072c57600080fd5b6107388e838f01610690565b909c509a5060208d013591508082111561075157600080fd5b61075d8e838f01610690565b909a50985060408d0135975060608d013591508082111561077d57600080fd5b5061078a8d828e01610690565b90965094505060808b013592506107a360a08c016106d9565b91506107b160c08c016106d9565b90509295989b9194979a5092959850565b6000806000606084860312156107d757600080fd5b6107e0846106d9565b92506107ee602085016106d9565b9150604084013590509250925092565b6000806020838503121561081157600080fd5b823567ffffffffffffffff81111561082857600080fd5b61083485828601610690565b90969095509350505050565b60006020828403121561085257600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000808585111561087f57600080fd5b8386111561088c57600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156108c65780818660140360031b1b83161692505b505092915050565b8035602083101561067157600019602084900360031b1b1692915050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610671576106716108ec565b80820180821115610671576106716108ec56fea26469706673582212202ee065285e6d78b8f4f72189bef225cff106ed6fed2f250af767e847d4faa24364736f6c63430008170033\" as const;", "export const abi = [] as const;\n\n\nexport const bytecode = \"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212201dfea0fb90d440a56b093020135bfa0529382b21cf5681ce6bf65b9ef384b15664736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"balanceCache\",\n    \"inputs\": [\n      {\n        \"name\": \"hashKey\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"balance\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getHashKey\",\n    \"inputs\": [\n      {\n        \"name\": \"_caller\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_token\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_recipient\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"enforceDecrease_\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      },\n      {\n        \"name\": \"token_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"recipient_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isLocked\",\n    \"inputs\": [\n      {\n        \"name\": \"hashKey\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"lock\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b5061097c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b5e544921161005b578063b5e5449214610115578063b99deb0e14610135578063d3eddcc51461017a578063ed463367146100c557600080fd5b806332a16f4e1461008d578063414c3e33146100c55780635f6f02e0146100e1578063a145832a14610102575b600080fd5b6100b061009b366004610686565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100df6100d3366004610704565b50505050505050505050565b005b6100f46100ef3660046107d1565b61018d565b6040519081526020016100bc565b6100df610110366004610704565b6101a4565b6100f4610123366004610686565b60006020819052908152604090205481565b61014861014336600461081c565b610357565b6040516100bc949392919093151584526001600160a01b03928316602085015291166040830152606082015260800190565b6100df610188366004610704565b610445565b600061019b85858585610624565b95945050505050565b85600881901b6101b581600061066f565b6102145760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b60648201526084015b60405180910390fd5b506000806102228d8d610357565b50925092505060006102363384848a610624565b60008181526001602052604090205490915060ff16156102af5760405162461bcd60e51b815260206004820152602e60248201527f45524337323142616c616e63654368616e6765456e666f726365723a656e666f60448201526d1c98d95c8b5a5ccb5b1bd8dad95960921b606482015260840161020b565b6000818152600160208190526040808320805460ff1916909217909155516370a0823160e01b81526001600160a01b0384811660048301528516906370a0823190602401602060405180830381865afa158015610310573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610334919061085e565b600092835260208390526040909220919091555050505050505050505050505050565b6000808080604985146103c55760405162461bcd60e51b815260206004820152603060248201527f45524337323142616c616e63654368616e6765456e666f726365723a696e766160448201526f0d8d2c85ae8cae4dae65ad8cadccee8d60831b606482015260840161020b565b858560008181106103d8576103d8610877565b909101356001600160f81b031916151594506103fa905060156001878961088d565b610403916108b7565b60601c925061041660296015878961088d565b61041f916108b7565b60601c9150610431856029818961088d565b61043a916108ec565b939692955090935050565b6000806000806104558e8e610357565b9350935093509350600061046b3385858b610624565b600081815260016020526040808220805460ff19169055516370a0823160e01b81526001600160a01b03868116600483015292935090918616906370a0823190602401602060405180830381865afa1580156104cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ef919061085e565b9050851561058357600082815260208190526040902054610511908490610920565b81101561057e5760405162461bcd60e51b815260206004820152603560248201527f45524337323142616c616e63654368616e6765456e666f726365723a65786365604482015274656465642d62616c616e63652d646563726561736560581b606482015260840161020b565b610612565b60008281526020819052604090205461059d908490610933565b8110156106125760405162461bcd60e51b815260206004820152603960248201527f45524337323142616c616e63654368616e6765456e666f726365723a696e737560448201527f6666696369656e742d62616c616e63652d696e63726561736500000000000000606482015260840161020b565b50505050505050505050505050505050565b604080516001600160a01b03958616602080830191909152948616818301529290941660608301526080808301919091528351808303909101815260a0909101909252815191012090565b6001600160f81b0319828116908216145b92915050565b60006020828403121561069857600080fd5b5035919050565b60008083601f8401126106b157600080fd5b50813567ffffffffffffffff8111156106c957600080fd5b6020830191508360208285010111156106e157600080fd5b9250929050565b80356001600160a01b03811681146106ff57600080fd5b919050565b60008060008060008060008060008060e08b8d03121561072357600080fd5b8a3567ffffffffffffffff8082111561073b57600080fd5b6107478e838f0161069f565b909c509a5060208d013591508082111561076057600080fd5b61076c8e838f0161069f565b909a50985060408d0135975060608d013591508082111561078c57600080fd5b506107998d828e0161069f565b90965094505060808b013592506107b260a08c016106e8565b91506107c060c08c016106e8565b90509295989b9194979a5092959850565b600080600080608085870312156107e757600080fd5b6107f0856106e8565b93506107fe602086016106e8565b925061080c604086016106e8565b9396929550929360600135925050565b6000806020838503121561082f57600080fd5b823567ffffffffffffffff81111561084657600080fd5b6108528582860161069f565b90969095509350505050565b60006020828403121561087057600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000808585111561089d57600080fd5b838611156108aa57600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156108e45780818660140360031b1b83161692505b505092915050565b8035602083101561068057600019602084900360031b1b1692915050565b634e487b7160e01b600052601160045260246000fd5b818103818111156106805761068061090a565b808201808211156106805761068061090a56fea26469706673582212201a908643c89c30b103124ac1346de2de7964be6fc4c537dea357364db407b9ad64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC7579DecodingError\",\n    \"inputs\": []\n  }\n] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e31e42482ef7832f3e446f04f27415313e49db77c6e6717169033c8535b19d3764736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"permittedContract_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"permittedTokenId_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b50610821806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063414c3e331461005c578063a145832a14610078578063b99deb0e1461008b578063d3eddcc51461005c578063ed4633671461005c575b600080fd5b61007661006a3660046105ea565b50505050505050505050565b005b6100766100863660046105ea565b6100c1565b61009e6100993660046106bd565b61047c565b604080516001600160a01b03909316835260208301919091520160405180910390f35b856100cd816000610521565b61011e5760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d7479706560448201526064015b60405180910390fd5b86600881901b61012f816000610521565b6101895760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b6064820152608401610115565b506000806101978e8e61047c565b9150915060003660006101aa8c8c610538565b929550935090915050606481101561021b5760405162461bcd60e51b815260206004820152602e60248201527f4552433732315472616e73666572456e666f726365723a696e76616c69642d6360448201526d0c2d8d8c8c2e8c25ad8cadccee8d60931b6064820152608401610115565b6000808061022c84600481886106ff565b8101906102399190610729565b919450925090506001600160a01b038316158061025d57506001600160a01b038216155b156102b95760405162461bcd60e51b815260206004820152602660248201527f4552433732315472616e73666572456e666f726365723a696e76616c69642d6160448201526564647265737360d01b6064820152608401610115565b60006102c860048287896106ff565b6102d19161076a565b9050886001600160a01b0316876001600160a01b0316146103505760405162461bcd60e51b815260206004820152603360248201527f4552433732315472616e73666572456e666f726365723a756e617574686f72696044820152721e99590b58dbdb9d1c9858dd0b5d185c99d95d606a1b6064820152608401610115565b6001600160e01b031981166323b872dd60e01b1480159061038257506001600160e01b03198116632142170760e11b14155b801561039f57506001600160e01b03198116635c46a7ef60e11b14155b156104015760405162461bcd60e51b815260206004820152602c60248201527f4552433732315472616e73666572456e666f726365723a756e617574686f726960448201526b3d32b216b9b2b632b1ba37b960a11b6064820152608401610115565b8782146104655760405162461bcd60e51b815260206004820152602c60248201527f4552433732315472616e73666572456e666f726365723a756e617574686f726960448201526b1e99590b5d1bdad95b8b5a5960a21b6064820152608401610115565b505050505050505050505050505050505050505050565b600080603483146104e35760405162461bcd60e51b815260206004820152602b60248201527f4552433732315472616e73666572456e666f726365723a696e76616c69642d7460448201526a0cae4dae65ad8cadccee8d60ab1b6064820152608401610115565b6104f16014600085876106ff565b6104fa9161079a565b60601c915061050c83601481876106ff565b610515916107cd565b60001c90509250929050565b6001600160f81b0319828116908216145b92915050565b600080368161054a60148287896106ff565b6105539161079a565b60601c93506105666034601487896106ff565b61056f916107cd565b925061057e85603481896106ff565b949793965094505050565b60008083601f84011261059b57600080fd5b50813567ffffffffffffffff8111156105b357600080fd5b6020830191508360208285010111156105cb57600080fd5b9250929050565b6001600160a01b03811681146105e757600080fd5b50565b60008060008060008060008060008060e08b8d03121561060957600080fd5b8a3567ffffffffffffffff8082111561062157600080fd5b61062d8e838f01610589565b909c509a5060208d013591508082111561064657600080fd5b6106528e838f01610589565b909a50985060408d0135975060608d013591508082111561067257600080fd5b5061067f8d828e01610589565b90965094505060808b0135925060a08b013561069a816105d2565b915060c08b01356106aa816105d2565b809150509295989b9194979a5092959850565b600080602083850312156106d057600080fd5b823567ffffffffffffffff8111156106e757600080fd5b6106f385828601610589565b90969095509350505050565b6000808585111561070f57600080fd5b8386111561071c57600080fd5b5050820193919092039150565b60008060006060848603121561073e57600080fd5b8335610749816105d2565b92506020840135610759816105d2565b929592945050506040919091013590565b6001600160e01b031981358181169160048510156107925780818660040360031b1b83161692505b505092915050565b6bffffffffffffffffffffffff1981358181169160148510156107925760149490940360031b84901b1690921692915050565b8035602083101561053257600019602084900360031b1b169291505056fea264697066735822122059baae7c286b09a388772bb8a0feea8851f9a4fec98691fdc00e38b6eb1a59b964736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getAvailableAmount\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"availableAmount_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"token_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"initialAmount_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"maxAmount_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"amountPerSecond_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"startTime_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"streamingAllowances\",\n    \"inputs\": [\n      {\n        \"name\": \"delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"initialAmount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"maxAmount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"amountPerSecond\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"startTime\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"spent\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"IncreasedSpentMap\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"redeemer\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"initialAmount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"maxAmount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"amountPerSecond\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"startTime\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"spent\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"lastUpdateTimestamp\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b50610b7d806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063d3eddcc51161005b578063d3eddcc514610082578063ed46336714610082578063ee73d772146100fb578063fb7d2c5b1461011c57600080fd5b8063414c3e3314610082578063a145832a1461009e578063b99deb0e146100b1575b600080fd5b61009c610090366004610910565b50505050505050505050565b005b61009c6100ac366004610910565b610189565b6100c46100bf3660046109dd565b61026e565b604080516001600160a01b0390961686526020860194909452928401919091526060830152608082015260a0015b60405180910390f35b61010e610109366004610a1f565b610365565b6040519081526020016100f2565b61016161012a366004610a1f565b6000602081815292815260408082209093529081522080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0016100f2565b856101958160006103d0565b6101e65760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d7479706560448201526064015b60405180910390fd5b86600881901b6101f78160006103d0565b6102515760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b60648201526084016101dd565b506102608c8c898989886103e7565b505050505050505050505050565b600080808080609486146102d85760405162461bcd60e51b815260206004820152602b60248201527f455243323053747265616d696e67456e666f726365723a696e76616c69642d7460448201526a0cae4dae65ad8cadccee8d60ab1b60648201526084016101dd565b6102e660146000888a610a49565b6102ef91610a73565b60601c945061030260346014888a610a49565b61030b91610aa8565b935061031b60546034888a610a49565b61032491610aa8565b925061033460746054888a610a49565b61033d91610aa8565b915061034d60946074888a610a49565b61035691610aa8565b60001c90509295509295909350565b6001600160a01b0382166000908152602081815260408083208484528252808320815160a081018352815481526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152906103c8906107d9565b949350505050565b6001600160f81b0319828116908216145b92915050565b60003660006103f6878761085a565b929550935090915050604481146104675760405162461bcd60e51b815260206004820152602f60248201527f455243323053747265616d696e67456e666f726365723a696e76616c69642d6560448201526e0f0cac6eae8d2dedc5ad8cadccee8d608b1b60648201526084016101dd565b60008060008060006104798e8e61026e565b94509450945094509450838310156104e55760405162461bcd60e51b815260206004820152602960248201527f455243323053747265616d696e67456e666f726365723a696e76616c69642d6d604482015268185e0b585b5bdd5b9d60ba1b60648201526084016101dd565b6000811161054c5760405162461bcd60e51b815260206004820152602e60248201527f455243323053747265616d696e67456e666f726365723a696e76616c69642d7a60448201526d65726f2d73746172742d74696d6560901b60648201526084016101dd565b876001600160a01b0316856001600160a01b0316146105bd5760405162461bcd60e51b815260206004820152602760248201527f455243323053747265616d696e67456e666f726365723a696e76616c69642d636044820152661bdb9d1c9858dd60ca1b60648201526084016101dd565b63a9059cbb60e01b6105d360046000898b610a49565b6105dc91610ac6565b6001600160e01b031916146106415760405162461bcd60e51b815260206004820152602560248201527f455243323053747265616d696e67456e666f726365723a696e76616c69642d6d604482015264195d1a1bd960da1b60648201526084016101dd565b336000908152602081815260408083208d84529091528120600481015490910361067e578481556001810184905560028101839055600381018290555b600061068e604460248a8c610a49565b61069791610aa8565b6040805160a081018252845481526001850154602082015260028501549181019190915260038401546060820152600484015460808201529091506106db906107d9565b81111561073c5760405162461bcd60e51b815260206004820152602960248201527f455243323053747265616d696e67456e666f726365723a616c6c6f77616e63656044820152680b595e18d95959195960ba1b60648201526084016101dd565b808260040160008282546107509190610b0a565b90915550506004820154604080516001600160a01b038a81168252602082018a9052818301899052606082018890526080820187905260a08201939093524260c082015290518e928e169133917f30ceca901166c86cac9d1024230d7f5740b26cce6bdd9bad7b1d6e616904ea639181900360e00190a450505050505050505050505050505050565b600081606001514210156107ef57506000919050565b60008260600151426108019190610b1d565b905060008184604001516108159190610b30565b84516108219190610b0a565b90508360200151811115610836575060208301515b8084608001511061084b575060009392505050565b60808401516103c89082610b1d565b600080368161086c6014828789610a49565b61087591610a73565b60601c9350610888603460148789610a49565b61089191610aa8565b92506108a08560348189610a49565b949793965094505050565b60008083601f8401126108bd57600080fd5b50813567ffffffffffffffff8111156108d557600080fd5b6020830191508360208285010111156108ed57600080fd5b9250929050565b80356001600160a01b038116811461090b57600080fd5b919050565b60008060008060008060008060008060e08b8d03121561092f57600080fd5b8a3567ffffffffffffffff8082111561094757600080fd5b6109538e838f016108ab565b909c509a5060208d013591508082111561096c57600080fd5b6109788e838f016108ab565b909a50985060408d0135975060608d013591508082111561099857600080fd5b506109a58d828e016108ab565b90965094505060808b013592506109be60a08c016108f4565b91506109cc60c08c016108f4565b90509295989b9194979a5092959850565b600080602083850312156109f057600080fd5b823567ffffffffffffffff811115610a0757600080fd5b610a13858286016108ab565b90969095509350505050565b60008060408385031215610a3257600080fd5b610a3b836108f4565b946020939093013593505050565b60008085851115610a5957600080fd5b83861115610a6657600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff198135818116916014851015610aa05780818660140360031b1b83161692505b505092915050565b803560208310156103e157600019602084900360031b1b1692915050565b6001600160e01b03198135818116916004851015610aa05760049490940360031b84901b1690921692915050565b634e487b7160e01b600052601160045260246000fd5b808201808211156103e1576103e1610af4565b818103818111156103e1576103e1610af4565b80820281158282048414176103e1576103e1610af456fea2646970667358221220d9282c553e448eac7b4631259f5a457c28077fd4d88ef08db72ec3df532e99ed64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"validateUserOp\",\n    \"inputs\": [\n      {\n        \"name\": \"userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      },\n      {\n        \"name\": \"userOpHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"missingAccountFunds\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"validationData\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"callData_\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b50610559806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063414c3e331461005c578063a145832a14610078578063b99deb0e1461008b578063d3eddcc51461005c578063ed4633671461005c575b600080fd5b61007661006a366004610338565b50505050505050505050565b005b610076610086366004610338565b6100b4565b61009e610099366004610405565b61022b565b6040516100ab9190610447565b60405180910390f35b856100c081600061026b565b6101115760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d7479706560448201526064015b60405180910390fd5b86600881901b61012281600061026b565b61017c5760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b6064820152608401610108565b5036600061018a8989610282565b935093505050600061019c8f8f61022b565b905082826040516101ae929190610496565b604051809103902081805190602001201461021a5760405162461bcd60e51b815260206004820152602660248201527f457861637443616c6c64617461456e666f726365723a696e76616c69642d63616044820152656c6c6461746160d01b6064820152608401610108565b505050505050505050505050505050565b606082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929695505050505050565b6001600160f81b0319828116908216145b92915050565b600080368161029460148287896104a6565b61029d916104d0565b60601c93506102b06034601487896104a6565b6102b991610505565b92506102c885603481896104a6565b949793965094505050565b60008083601f8401126102e557600080fd5b50813567ffffffffffffffff8111156102fd57600080fd5b60208301915083602082850101111561031557600080fd5b9250929050565b80356001600160a01b038116811461033357600080fd5b919050565b60008060008060008060008060008060e08b8d03121561035757600080fd5b8a3567ffffffffffffffff8082111561036f57600080fd5b61037b8e838f016102d3565b909c509a5060208d013591508082111561039457600080fd5b6103a08e838f016102d3565b909a50985060408d0135975060608d01359150808211156103c057600080fd5b506103cd8d828e016102d3565b90965094505060808b013592506103e660a08c0161031c565b91506103f460c08c0161031c565b90509295989b9194979a5092959850565b6000806020838503121561041857600080fd5b823567ffffffffffffffff81111561042f57600080fd5b61043b858286016102d3565b90969095509350505050565b60006020808352835180602085015260005b8181101561047557858101830151858201604001528201610459565b506000604082860101526040601f19601f8301168501019250505092915050565b8183823760009101908152919050565b600080858511156104b657600080fd5b838611156104c357600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156104fd5780818660140360031b1b83161692505b505092915050565b8035602083101561027c57600019602084900360031b1b169291505056fea26469706673582212207ea2be587c5142bd07609ab1e9e3d82af76502619dbab0e88f14c164094d01e564736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"aggregateSignatures\",\n    \"inputs\": [\n      {\n        \"name\": \"userOps\",\n        \"type\": \"tuple[]\",\n        \"internalType\": \"struct PackedUserOperation[]\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"aggregatedSignature\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"validateSignatures\",\n    \"inputs\": [\n      {\n        \"name\": \"userOps\",\n        \"type\": \"tuple[]\",\n        \"internalType\": \"struct PackedUserOperation[]\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      },\n      {\n        \"name\": \"signature\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"validateUserOpSignature\",\n    \"inputs\": [\n      {\n        \"name\": \"userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"sigForUserOp\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"execution_\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Execution\",\n        \"components\": [\n          {\n            \"name\": \"target\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"value\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b5061062f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063414c3e331461005c578063a145832a14610078578063b99deb0e1461008b578063d3eddcc51461005c578063ed4633671461005c575b600080fd5b61007661006a3660046103e9565b50505050505050505050565b005b6100766100863660046103e9565b6100b4565b61009e6100993660046104b6565b610197565b6040516100ab91906104f8565b60405180910390f35b856100c0816000610210565b6101115760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d7479706560448201526064015b60405180910390fd5b86600881901b610122816000610210565b61017c5760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b6064820152608401610108565b506101898c8c8989610227565b505050505050505050505050565b604080516060808201835260008083526020830152918101919091526101bd8383610333565b81818080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506040860152505060208301526001600160a01b0316815292915050565b6001600160f81b0319828116908216145b92915050565b6000803660006102378686610333565b929650909450925090506001600160a01b038416610259601460008a8c61056c565b61026291610596565b60601c14801561028757508261027c603460148a8c61056c565b610285916105cb565b145b80156102cc5750818160405161029e9291906105e9565b6040519081900390206102b4886034818c61056c565b6040516102c29291906105e9565b6040518091039020145b6103295760405162461bcd60e51b815260206004820152602860248201527f4578616374457865637574696f6e456e666f726365723a696e76616c69642d656044820152673c32b1baba34b7b760c11b6064820152608401610108565b5050505050505050565b6000803681610345601482878961056c565b61034e91610596565b60601c935061036160346014878961056c565b61036a916105cb565b9250610379856034818961056c565b949793965094505050565b60008083601f84011261039657600080fd5b50813567ffffffffffffffff8111156103ae57600080fd5b6020830191508360208285010111156103c657600080fd5b9250929050565b80356001600160a01b03811681146103e457600080fd5b919050565b60008060008060008060008060008060e08b8d03121561040857600080fd5b8a3567ffffffffffffffff8082111561042057600080fd5b61042c8e838f01610384565b909c509a5060208d013591508082111561044557600080fd5b6104518e838f01610384565b909a50985060408d0135975060608d013591508082111561047157600080fd5b5061047e8d828e01610384565b90965094505060808b0135925061049760a08c016103cd565b91506104a560c08c016103cd565b90509295989b9194979a5092959850565b600080602083850312156104c957600080fd5b823567ffffffffffffffff8111156104e057600080fd5b6104ec85828601610384565b90969095509350505050565b6000602080835260018060a01b038451166020840152602084015160408401526040840151606080850152805180608086015260005b8181101561054a5782810184015186820160a00152830161052e565b50600060a0828701015260a0601f19601f830116860101935050505092915050565b6000808585111561057c57600080fd5b8386111561058957600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156105c35780818660140360031b1b83161692505b505092915050565b8035602083101561022157600019602084900360031b1b1692915050565b818382376000910190815291905056fea2646970667358221220e961f8992a129634c5841f6f8ff7eac208b6822d2646363c613c0f46bcd65a0b64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"implementation\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"disableDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegation\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"disabledDelegations\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"enableDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegation\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDelegationHash\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegation\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDomainHash\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"pause\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"redeemDelegations\",\n    \"inputs\": [\n      {\n        \"name\": \"_permissionContexts\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      },\n      {\n        \"name\": \"_modes\",\n        \"type\": \"bytes32[]\",\n        \"internalType\": \"ModeCode[]\"\n      },\n      {\n        \"name\": \"_executionCallDatas\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"unpause\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"DisabledDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"delegator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegate\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegation\",\n        \"type\": \"tuple\",\n        \"indexed\": false,\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"EnabledDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"delegator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegate\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegation\",\n        \"type\": \"tuple\",\n        \"indexed\": false,\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"RedeemedDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"rootDelegator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"redeemer\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegation\",\n        \"type\": \"tuple\",\n        \"indexed\": false,\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SetDomain\",\n    \"inputs\": [\n      {\n        \"name\": \"domainHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"name\",\n        \"type\": \"string\",\n        \"indexed\": false,\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"domainVersion\",\n        \"type\": \"string\",\n        \"indexed\": false,\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"chainId\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"contractAddress\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AlreadyDisabled\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AlreadyEnabled\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"BatchDataLengthMismatch\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"CannotUseADisabledDelegation\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"EmptySignature\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidAuthority\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidDelegate\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidDelegator\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidEOASignature\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidERC1271Signature\",\n    \"inputs\": []\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"receive\",\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"addStake\",\n    \"inputs\": [\n      {\n        \"name\": \"unstakeDelaySec\",\n        \"type\": \"uint32\",\n        \"internalType\": \"uint32\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"balanceOf\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"delegateAndRevert\",\n    \"inputs\": [\n      {\n        \"name\": \"target\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"depositTo\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"deposits\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"deposit\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"staked\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      },\n      {\n        \"name\": \"stake\",\n        \"type\": \"uint112\",\n        \"internalType\": \"uint112\"\n      },\n      {\n        \"name\": \"unstakeDelaySec\",\n        \"type\": \"uint32\",\n        \"internalType\": \"uint32\"\n      },\n      {\n        \"name\": \"withdrawTime\",\n        \"type\": \"uint48\",\n        \"internalType\": \"uint48\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDepositInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"info\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct IStakeManager.DepositInfo\",\n        \"components\": [\n          {\n            \"name\": \"deposit\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"staked\",\n            \"type\": \"bool\",\n            \"internalType\": \"bool\"\n          },\n          {\n            \"name\": \"stake\",\n            \"type\": \"uint112\",\n            \"internalType\": \"uint112\"\n          },\n          {\n            \"name\": \"unstakeDelaySec\",\n            \"type\": \"uint32\",\n            \"internalType\": \"uint32\"\n          },\n          {\n            \"name\": \"withdrawTime\",\n            \"type\": \"uint48\",\n            \"internalType\": \"uint48\"\n          }\n        ]\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getNonce\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"key\",\n        \"type\": \"uint192\",\n        \"internalType\": \"uint192\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"nonce\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getSenderAddress\",\n    \"inputs\": [\n      {\n        \"name\": \"initCode\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getUserOpHash\",\n    \"inputs\": [\n      {\n        \"name\": \"userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"handleAggregatedOps\",\n    \"inputs\": [\n      {\n        \"name\": \"opsPerAggregator\",\n        \"type\": \"tuple[]\",\n        \"internalType\": \"struct IEntryPoint.UserOpsPerAggregator[]\",\n        \"components\": [\n          {\n            \"name\": \"userOps\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct PackedUserOperation[]\",\n            \"components\": [\n              {\n                \"name\": \"sender\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"nonce\",\n                \"type\": \"uint256\",\n                \"internalType\": \"uint256\"\n              },\n              {\n                \"name\": \"initCode\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"callData\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"accountGasLimits\",\n                \"type\": \"bytes32\",\n                \"internalType\": \"bytes32\"\n              },\n              {\n                \"name\": \"preVerificationGas\",\n                \"type\": \"uint256\",\n                \"internalType\": \"uint256\"\n              },\n              {\n                \"name\": \"gasFees\",\n                \"type\": \"bytes32\",\n                \"internalType\": \"bytes32\"\n              },\n              {\n                \"name\": \"paymasterAndData\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"signature\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"aggregator\",\n            \"type\": \"address\",\n            \"internalType\": \"contract IAggregator\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      },\n      {\n        \"name\": \"beneficiary\",\n        \"type\": \"address\",\n        \"internalType\": \"address payable\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"handleOps\",\n    \"inputs\": [\n      {\n        \"name\": \"ops\",\n        \"type\": \"tuple[]\",\n        \"internalType\": \"struct PackedUserOperation[]\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      },\n      {\n        \"name\": \"beneficiary\",\n        \"type\": \"address\",\n        \"internalType\": \"address payable\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"incrementNonce\",\n    \"inputs\": [\n      {\n        \"name\": \"key\",\n        \"type\": \"uint192\",\n        \"internalType\": \"uint192\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"innerHandleOp\",\n    \"inputs\": [\n      {\n        \"name\": \"callData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"opInfo\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct EntryPoint.UserOpInfo\",\n        \"components\": [\n          {\n            \"name\": \"mUserOp\",\n            \"type\": \"tuple\",\n            \"internalType\": \"struct EntryPoint.MemoryUserOp\",\n            \"components\": [\n              {\n                \"name\": \"sender\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"nonce\",\n                \"type\": \"uint256\",\n                \"internalType\": \"uint256\"\n              },\n              {\n                \"name\": \"verificationGasLimit\",\n                \"type\": \"uint256\",\n                \"internalType\": \"uint256\"\n              },\n              {\n                \"name\": \"callGasLimit\",\n                \"type\": \"uint256\",\n                \"internalType\": \"uint256\"\n              },\n              {\n                \"name\": \"paymasterVerificationGasLimit\",\n                \"type\": \"uint256\",\n                \"internalType\": \"uint256\"\n              },\n              {\n                \"name\": \"paymasterPostOpGasLimit\",\n                \"type\": \"uint256\",\n                \"internalType\": \"uint256\"\n              },\n              {\n                \"name\": \"preVerificationGas\",\n                \"type\": \"uint256\",\n                \"internalType\": \"uint256\"\n              },\n              {\n                \"name\": \"paymaster\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"maxFeePerGas\",\n                \"type\": \"uint256\",\n                \"internalType\": \"uint256\"\n              },\n              {\n                \"name\": \"maxPriorityFeePerGas\",\n                \"type\": \"uint256\",\n                \"internalType\": \"uint256\"\n              }\n            ]\n          },\n          {\n            \"name\": \"userOpHash\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"prefund\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"contextOffset\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"preOpGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          }\n        ]\n      },\n      {\n        \"name\": \"context\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"actualGasCost\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"nonceSequenceNumber\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint192\",\n        \"internalType\": \"uint192\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsInterface\",\n    \"inputs\": [\n      {\n        \"name\": \"interfaceId\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"unlockStake\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"withdrawStake\",\n    \"inputs\": [\n      {\n        \"name\": \"withdrawAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address payable\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"withdrawTo\",\n    \"inputs\": [\n      {\n        \"name\": \"withdrawAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address payable\"\n      },\n      {\n        \"name\": \"withdrawAmount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"AccountDeployed\",\n    \"inputs\": [\n      {\n        \"name\": \"userOpHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"factory\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"paymaster\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"BeforeExecution\",\n    \"inputs\": [],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Deposited\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"totalDeposit\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"PostOpRevertReason\",\n    \"inputs\": [\n      {\n        \"name\": \"userOpHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"nonce\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"revertReason\",\n        \"type\": \"bytes\",\n        \"indexed\": false,\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SignatureAggregatorChanged\",\n    \"inputs\": [\n      {\n        \"name\": \"aggregator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"StakeLocked\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"totalStaked\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"unstakeDelaySec\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"StakeUnlocked\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"withdrawTime\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"StakeWithdrawn\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"withdrawAddress\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"UserOperationEvent\",\n    \"inputs\": [\n      {\n        \"name\": \"userOpHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"paymaster\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"nonce\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"success\",\n        \"type\": \"bool\",\n        \"indexed\": false,\n        \"internalType\": \"bool\"\n      },\n      {\n        \"name\": \"actualGasCost\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"actualGasUsed\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"UserOperationPrefundTooLow\",\n    \"inputs\": [\n      {\n        \"name\": \"userOpHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"nonce\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"UserOperationRevertReason\",\n    \"inputs\": [\n      {\n        \"name\": \"userOpHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"nonce\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"revertReason\",\n        \"type\": \"bytes\",\n        \"indexed\": false,\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Withdrawn\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"withdrawAddress\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"DelegateAndRevert\",\n    \"inputs\": [\n      {\n        \"name\": \"success\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      },\n      {\n        \"name\": \"ret\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"FailedOp\",\n    \"inputs\": [\n      {\n        \"name\": \"opIndex\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"reason\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"FailedOpWithRevert\",\n    \"inputs\": [\n      {\n        \"name\": \"opIndex\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"reason\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"inner\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"PostOpReverted\",\n    \"inputs\": [\n      {\n        \"name\": \"returnData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ReentrancyGuardReentrantCall\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"SenderAddressResult\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"SignatureValidationFailed\",\n    \"inputs\": [\n      {\n        \"name\": \"aggregator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x60a0604052604051620000129062000051565b604051809103905ff0801580156200002c573d5f803e3d5ffd5b506001600160a01b031660805234801562000045575f80fd5b5060016002556200005f565b6101ff806200374883390190565b6080516136c96200007f5f395f8181610de0015261271501526136c95ff3fe608060405260043610610107575f3560e01c806370a0823111610092578063b760faf911610062578063b760faf914610425578063bb9fe6bf14610438578063c23a5cea1461044c578063dbed18e01461046b578063fc7e286d1461048a575f80fd5b806370a0823114610394578063765e827f146103c8578063850aaf62146103e75780639b249f6914610406575f80fd5b80631b2e01b8116100d85780631b2e01b8146101ae578063205c2878146101e457806322cdde4c1461020357806335567e1a146102225780635287ce1214610280575f80fd5b806242dc531461011b57806301ffc9a71461014d5780630396cb601461017c5780630bd28e3b1461018f575f80fd5b366101175761011533610530565b005b5f80fd5b348015610126575f80fd5b5061013a610135366004612c4f565b610584565b6040519081526020015b60405180910390f35b348015610158575f80fd5b5061016c610167366004612d06565b610702565b6040519015158152602001610144565b61011561018a366004612d2d565b610789565b34801561019a575f80fd5b506101156101a9366004612d66565b610a14565b3480156101b9575f80fd5b5061013a6101c8366004612d7f565b600160209081525f928352604080842090915290825290205481565b3480156101ef575f80fd5b506101156101fe366004612db2565b610a4a565b34801561020e575f80fd5b5061013a61021d366004612ddc565b610b96565b34801561022d575f80fd5b5061013a61023c366004612d7f565b6001600160a01b0382165f9081526001602090815260408083206001600160c01b038516845290915290819020549082901b67ffffffffffffffff19161792915050565b34801561028b575f80fd5b5061033a61029a366004612e13565b6040805160a0810182525f80825260208201819052918101829052606081018290526080810191909152506001600160a01b03165f9081526020818152604091829020825160a0810184528154815260019091015460ff811615159282019290925261010082046001600160701b031692810192909252600160781b810463ffffffff166060830152600160981b900465ffffffffffff16608082015290565b60405161014491905f60a082019050825182526020830151151560208301526001600160701b03604084015116604083015263ffffffff606084015116606083015265ffffffffffff608084015116608083015292915050565b34801561039f575f80fd5b5061013a6103ae366004612e13565b6001600160a01b03165f9081526020819052604090205490565b3480156103d3575f80fd5b506101156103e2366004612e6e565b610bd7565b3480156103f2575f80fd5b50610115610401366004612ec0565b610d4c565b348015610411575f80fd5b50610115610420366004612f10565b610dc7565b610115610433366004612e13565b610530565b348015610443575f80fd5b50610115610e7e565b348015610457575f80fd5b50610115610466366004612e13565b610fa8565b348015610476575f80fd5b50610115610485366004612e6e565b6111c7565b348015610495575f80fd5b506104ed6104a4366004612e13565b5f602081905290815260409020805460019091015460ff81169061010081046001600160701b031690600160781b810463ffffffff1690600160981b900465ffffffffffff1685565b6040805195865293151560208601526001600160701b039092169284019290925263ffffffff909116606083015265ffffffffffff16608082015260a001610144565b5f61053b82346115ce565b9050816001600160a01b03167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c48260405161057891815260200190565b60405180910390a25050565b5f805a90503330146105dd5760405162461bcd60e51b815260206004820152601760248201527f4141393220696e7465726e616c2063616c6c206f6e6c7900000000000000000060448201526064015b60405180910390fd5b8451606081015160a082015181016127100160405a603f028161060257610602612f4e565b0410156106185763deaddead60e01b5f5260205ffd5b87515f90156106a6575f610631845f01515f8c86611600565b9050806106a4575f610644610800611616565b80519091501561069e57845f01516001600160a01b03168a602001517f1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a201876020015184604051610695929190612faf565b60405180910390a35b60019250505b505b5f88608001515a86030190506106f4828a8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250879250611641915050565b9a9950505050505050505050565b5f6001600160e01b0319821663307e35b760e11b148061073257506001600160e01b0319821663122a0e9b60e31b145b8061074d57506001600160e01b0319821663cf28ef9760e01b145b8061076857506001600160e01b03198216633e84f02160e01b145b8061078357506301ffc9a760e01b6001600160e01b03198316145b92915050565b335f90815260208190526040902063ffffffff82166107ea5760405162461bcd60e51b815260206004820152601a60248201527f6d757374207370656369667920756e7374616b652064656c617900000000000060448201526064016105d4565b600181015463ffffffff600160781b9091048116908316101561084f5760405162461bcd60e51b815260206004820152601c60248201527f63616e6e6f7420646563726561736520756e7374616b652074696d650000000060448201526064016105d4565b60018101545f9061086f90349061010090046001600160701b0316612fdb565b90505f81116108b55760405162461bcd60e51b81526020600482015260126024820152711b9bc81cdd185ad9481cdc1958da599a595960721b60448201526064016105d4565b6001600160701b038111156108fd5760405162461bcd60e51b815260206004820152600e60248201526d7374616b65206f766572666c6f7760901b60448201526064016105d4565b6040805160a08101825283548152600160208083018281526001600160701b0386811685870190815263ffffffff8a8116606088018181525f60808a0181815233808352828a52918c90209a518b55965199909801805494519151965165ffffffffffff16600160981b0265ffffffffffff60981b1997909416600160781b029690961669ffffffffffffffffffff60781b1991909516610100026effffffffffffffffffffffffffff0019991515999099166effffffffffffffffffffffffffffff1990941693909317979097179190911691909117179055835185815290810192909252917fa5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c01910160405180910390a2505050565b335f9081526001602090815260408083206001600160c01b03851684529091528120805491610a4283612fee565b919050555050565b335f9081526020819052604090208054821115610aa95760405162461bcd60e51b815260206004820152601960248201527f576974686472617720616d6f756e7420746f6f206c617267650000000000000060448201526064016105d4565b8054610ab6908390613006565b8155604080516001600160a01b03851681526020810184905233917fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb910160405180910390a25f836001600160a01b0316836040515f6040518083038185875af1925050503d805f8114610b45576040519150601f19603f3d011682016040523d82523d5f602084013e610b4a565b606091505b5050905080610b905760405162461bcd60e51b81526020600482015260126024820152716661696c656420746f20776974686472617760701b60448201526064016105d4565b50505050565b5f610ba0826117f9565b6040805160208101929092523090820152466060820152608001604051602081830303815290604052805190602001209050919050565b610bdf611811565b815f816001600160401b03811115610bf957610bf9612a5a565b604051908082528060200260200182016040528015610c3257816020015b610c1f6129d0565b815260200190600190039081610c175790505b5090505f5b82811015610ca7575f828281518110610c5257610c52613019565b602002602001015190505f80610c8c848a8a87818110610c7457610c74613019565b9050602002810190610c86919061302d565b85611839565b91509150610c9c8483835f611a3b565b505050600101610c37565b506040515f907fbb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972908290a15f5b83811015610d2f57610d2381888884818110610cf257610cf2613019565b9050602002810190610d04919061302d565b858481518110610d1657610d16613019565b6020026020010151611bd5565b90910190600101610cd4565b50610d3a8482611e83565b505050610d476001600255565b505050565b5f80846001600160a01b03168484604051610d6892919061304c565b5f60405180830381855af49150503d805f8114610da0576040519150601f19603f3d011682016040523d82523d5f602084013e610da5565b606091505b50915091508181604051632650415560e21b81526004016105d492919061305b565b604051632b870d1b60e11b81525f906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063570e1a3690610e17908690869060040161309d565b6020604051808303815f875af1158015610e33573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e5791906130b0565b604051633653dc0360e11b81526001600160a01b03821660048201529091506024016105d4565b335f90815260208190526040812060018101549091600160781b90910463ffffffff169003610edc5760405162461bcd60e51b815260206004820152600a6024820152691b9bdd081cdd185ad95960b21b60448201526064016105d4565b600181015460ff16610f245760405162461bcd60e51b8152602060048201526011602482015270616c726561647920756e7374616b696e6760781b60448201526064016105d4565b60018101545f90610f4290600160781b900463ffffffff16426130cb565b60018301805460ff65ffffffffffff60981b011916600160981b65ffffffffffff841690810260ff19169190911790915560405190815290915033907ffa9b3c14cc825c412c9ed81b3ba365a5b459439403f18829e572ed53a4180f0a90602001610578565b335f908152602081905260409020600181015461010090046001600160701b03168061100d5760405162461bcd60e51b81526020600482015260146024820152734e6f207374616b6520746f20776974686472617760601b60448201526064016105d4565b6001820154600160981b900465ffffffffffff1661106d5760405162461bcd60e51b815260206004820152601d60248201527f6d7573742063616c6c20756e6c6f636b5374616b65282920666972737400000060448201526064016105d4565b600182015442600160981b90910465ffffffffffff1611156110d15760405162461bcd60e51b815260206004820152601b60248201527f5374616b65207769746864726177616c206973206e6f7420647565000000000060448201526064016105d4565b600182018054610100600160c81b0319169055604080516001600160a01b03851681526020810183905233917fb7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3910160405180910390a25f836001600160a01b0316826040515f6040518083038185875af1925050503d805f8114611171576040519150601f19603f3d011682016040523d82523d5f602084013e611176565b606091505b5050905080610b905760405162461bcd60e51b815260206004820152601860248201527f6661696c656420746f207769746864726177207374616b65000000000000000060448201526064016105d4565b6111cf611811565b815f805b8281101561133657368686838181106111ee576111ee613019565b905060200281019061120091906130f1565b9050365f61120e8380613105565b90925090505f6112246040850160208601612e13565b90505f196001600160a01b0382160161127f5760405162461bcd60e51b815260206004820152601760248201527f4141393620696e76616c69642061676772656761746f7200000000000000000060448201526064016105d4565b6001600160a01b0381161561131a576001600160a01b038116632dd8113384846112ac604089018961314a565b6040518563ffffffff1660e01b81526004016112cb94939291906132ab565b5f6040518083038186803b1580156112e1575f80fd5b505afa9250505080156112f2575060015b61131a5760405163086a9f7560e41b81526001600160a01b03821660048201526024016105d4565b6113248287612fdb565b955050600190930192506111d3915050565b505f816001600160401b0381111561135057611350612a5a565b60405190808252806020026020018201604052801561138957816020015b6113766129d0565b81526020019060019003908161136e5790505b5090505f805b8481101561146057368888838181106113aa576113aa613019565b90506020028101906113bc91906130f1565b9050365f6113ca8380613105565b90925090505f6113e06040850160208601612e13565b9050815f5b8181101561144e575f89898151811061140057611400613019565b602002602001015190505f806114228b898987818110610c7457610c74613019565b9150915061143284838389611a3b565b8a61143c81612fee565b9b5050600190930192506113e5915050565b50506001909401935061138f92505050565b506040517fbb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972905f90a1505f80805b8581101561158a57368989838181106114a9576114a9613019565b90506020028101906114bb91906130f1565b90506114cd6040820160208301612e13565b6001600160a01b03167f575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d60405160405180910390a2365f61150e8380613105565b9092509050805f5b81811015611579576115588885858481811061153457611534613019565b9050602002810190611546919061302d565b8b8b81518110610d1657610d16613019565b6115629088612fdb565b96508761156e81612fee565b985050600101611516565b50506001909301925061148e915050565b506040515f907f575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d908290a26115bf8682611e83565b5050505050610d476001600255565b6001600160a01b0382165f908152602081905260408120805482906115f4908590612fdb565b91829055509392505050565b5f805f845160208601878987f195945050505050565b60603d828111156116245750815b604051602082018101604052818152815f602083013e9392505050565b5f805a85519091505f908161165582611f78565b60e08301519091506001600160a01b038116611674578251935061172b565b8093505f8851111561172b57868202955060028a600281111561169957611699613325565b1461172b5760a0830151604051637c627b2160e01b81526001600160a01b03831691637c627b21916116d5908e908d908c908990600401613339565b5f604051808303815f88803b1580156116ec575f80fd5b5087f1935050505080156116fe575060015b61172b575f61170e610800611616565b905080604051632b5e552f60e21b81526004016105d49190613380565b5a60a0840151606085015160808c01519288039990990198019088038082111561175e576064600a828403020498909801975b505060408901518783029650868110156117b75760028b600281111561178657611786613325565b036117a8578096506117978a611fa9565b6117a38a5f898b611ff8565b6117eb565b63deadaa5160e01b5f5260205ffd5b8681036117c486826115ce565b505f808d60028111156117d9576117d9613325565b1490506117e88c828b8d611ff8565b50505b505050505050949350505050565b5f61180382612073565b805190602001209050919050565b600280540361183357604051633ee5aeb560e01b815260040160405180910390fd5b60028055565b5f805f5a845190915061184c8682612128565b61185586610b96565b6020860152604081015161012082015161010083015160a08401516080850151606086015160c0870151861717171717176effffffffffffffffffffffffffffff8111156118e55760405162461bcd60e51b815260206004820152601860248201527f41413934206761732076616c756573206f766572666c6f77000000000000000060448201526064016105d4565b5f6119138460c081015160a08201516080830151606084015160408501516101009095015194010101010290565b90506119228a8a8a8487612234565b9650611935845f015185602001516123c5565b61198b5789604051631101335b60e11b81526004016105d4918152604060208201819052601a908201527f4141323520696e76616c6964206163636f756e74206e6f6e6365000000000000606082015260800190565b825a860311156119e75789604051631101335b60e11b81526004016105d4918152604060208201819052601e908201527f41413236206f76657220766572696669636174696f6e4761734c696d69740000606082015260800190565b60e08401516060906001600160a01b031615611a0e57611a098b8b8b85612411565b975090505b604089018290528060608a015260a08a01355a870301896080018181525050505050505050935093915050565b5f80611a46856125c8565b91509150816001600160a01b0316836001600160a01b031614611aac5785604051631101335b60e11b81526004016105d49181526040602082018190526014908201527320a0991a1039b4b3b730ba3ab9329032b93937b960611b606082015260800190565b8015611b045785604051631101335b60e11b81526004016105d49181526040602082018190526017908201527f414132322065787069726564206f72206e6f7420647565000000000000000000606082015260800190565b5f611b0e856125c8565b925090506001600160a01b03811615611b6a5786604051631101335b60e11b81526004016105d49181526040602082018190526014908201527320a0999a1039b4b3b730ba3ab9329032b93937b960611b606082015260800190565b8115611bcc5786604051631101335b60e11b81526004016105d49181526040602082018190526021908201527f41413332207061796d61737465722065787069726564206f72206e6f742064756060820152606560f81b608082015260a00190565b50505050505050565b5f805a90505f611be6846060015190565b6040519091505f903682611bfd60608a018a61314a565b9150915060605f826003811115611c1357843591505b506372288ed160e01b6001600160e01b0319821601611cc0575f8b8b60200151604051602401611c44929190613392565b60408051601f198184030181529181526020820180516001600160e01b0316638dd7712f60e01b1790525190915030906242dc5390611c8b9084908f908d9060240161345d565b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050925050611d15565b306001600160a01b03166242dc5385858d8b604051602401611ce5949392919061349c565b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505091505b60205f8351602085015f305af195505f51985084604052505050505080611e79575f3d80602003611d4a5760205f803e5f5191505b5063deaddead60e01b8103611d9d5787604051631101335b60e11b81526004016105d4918152604060208201819052600f908201526e41413935206f7574206f662067617360881b606082015260800190565b63deadaa5160e01b8103611dec575f86608001515a611dbc9087613006565b611dc69190612fdb565b6040880151909150611dd788611fa9565b611de3885f8385611ff8565b9550611e779050565b855180516020808901519201516001600160a01b0390911691907ff62676f440ff169a3a9afdbf812e89e7f95975ee8e5c31214ffdef631c5f479290611e33610800611616565b604051611e41929190612faf565b60405180910390a35f86608001515a611e5a9087613006565b611e649190612fdb565b9050611e736002888684611641565b9550505b505b5050509392505050565b6001600160a01b038216611ed95760405162461bcd60e51b815260206004820152601860248201527f4141393020696e76616c69642062656e6566696369617279000000000000000060448201526064016105d4565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114611f22576040519150601f19603f3d011682016040523d82523d5f602084013e611f27565b606091505b5050905080610d475760405162461bcd60e51b815260206004820152601f60248201527f41413931206661696c65642073656e6420746f2062656e65666963696172790060448201526064016105d4565b6101008101516101208201515f9190808203611f95575092915050565b611fa182488301612617565b949350505050565b80518051602080840151928101516040519081526001600160a01b0390921692917f67b4fa9642f42120bf031f3051d1824b0fe25627945b27b8a6a65d5761d5482e910160405180910390a350565b835160e081015181516020808801519301516040516001600160a01b039384169492909316927f49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f916120659189908990899093845291151560208401526040830152606082015260800190565b60405180910390a450505050565b6060813560208301355f61209261208d604087018761314a565b61262e565b90505f6120a561208d606088018861314a565b9050608086013560a087013560c08801355f6120c761208d60e08c018c61314a565b604080516001600160a01b039a909a1660208b015289810198909852606089019690965250608087019390935260a086019190915260c085015260e08401526101008084019190915281518084039091018152610120909201905292915050565b6121356020830183612e13565b6001600160a01b03168152602082810135908201526001600160801b036080808401358281166060850152811c604084015260a084013560c0808501919091528401359182166101008401521c610120820152365f61219760e085018561314a565b9092509050801561221a5760348110156121f35760405162461bcd60e51b815260206004820152601d60248201527f4141393320696e76616c6964207061796d6173746572416e644461746100000060448201526064016105d4565b6121fd8282612640565b60a086015260808501526001600160a01b031660e0840152610b90565b5f60e084018190526080840181905260a084015250505050565b825180515f9190612252888761224d60408b018b61314a565b6126a7565b60e08201515f6001600160a01b038216612293576001600160a01b0383165f9081526020819052604090205487811161228d5780880361228f565b5f5b9150505b60208801516040516306608bdf60e21b81526001600160a01b038516916319822f7c9189916122c9918e919087906004016134d2565b6020604051808303815f8887f193505050508015612304575060408051601f3d908101601f19168201909252612301918101906134f6565b60015b61232f5789612314610800611616565b6040516365c8fd4d60e01b81526004016105d492919061350d565b94506001600160a01b0382166123b8576001600160a01b0383165f9081526020819052604090208054808911156123b2578b604051631101335b60e11b81526004016105d49181526040602082018190526017908201527f41413231206469646e2774207061792070726566756e64000000000000000000606082015260800190565b88900390555b5050505095945050505050565b6001600160a01b0382165f90815260016020908152604080832084821c80855292528220805484916001600160401b03831691908561240383612fee565b909155501495945050505050565b60605f805a855160e08101516001600160a01b0381165f9081526020819052604090208054939450919290919087811015612498578a604051631101335b60e11b81526004016105d4918152604060208201819052601e908201527f41413331207061796d6173746572206465706f73697420746f6f206c6f770000606082015260800190565b878103825f01819055505f84608001519050836001600160a01b03166352b7512c828d8d602001518d6040518563ffffffff1660e01b81526004016124df939291906134d2565b5f604051808303815f8887f19350505050801561251d57506040513d5f823e601f3d908101601f1916820160405261251a9190810190613549565b60015b612548578b61252d610800611616565b6040516365c8fd4d60e01b81526004016105d49291906135c4565b9098509650805a870311156125b9578b604051631101335b60e11b81526004016105d49181526040602082018190526027908201527f41413336206f766572207061796d6173746572566572696669636174696f6e47606082015266185cd31a5b5a5d60ca1b608082015260a00190565b50505050505094509492505050565b5f80825f036125db57505f928392509050565b5f6125e584612961565b9050806040015165ffffffffffff1642118061260c5750806020015165ffffffffffff1642105b905194909350915050565b5f8183106126255781612627565b825b9392505050565b5f604051828085833790209392505050565b5f80806126506014828688613600565b61265991613627565b60601c61266a602460148789613600565b6126739161365c565b60801c61268460346024888a613600565b61268d9161365c565b9194506001600160801b0316925060801c90509250925092565b8015610b90578251516001600160a01b0381163b156127125784604051631101335b60e11b81526004016105d4918152604060208201819052601f908201527f414131302073656e64657220616c726561647920636f6e737472756374656400606082015260800190565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570e1a36865f01516040015186866040518463ffffffff1660e01b815260040161276992919061309d565b6020604051808303815f8887f1158015612785573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906127aa91906130b0565b90506001600160a01b03811661280c5785604051631101335b60e11b81526004016105d4918152604060208201819052601b908201527f4141313320696e6974436f6465206661696c6564206f72204f4f470000000000606082015260800190565b816001600160a01b0316816001600160a01b0316146128765785604051631101335b60e11b81526004016105d491815260406020808301829052908201527f4141313420696e6974436f6465206d7573742072657475726e2073656e646572606082015260800190565b806001600160a01b03163b5f036128d85785604051631101335b60e11b81526004016105d491815260406020808301829052908201527f4141313520696e6974436f6465206d757374206372656174652073656e646572606082015260800190565b5f6128e66014828688613600565b6128ef91613627565b60601c9050826001600160a01b031686602001517fd51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d83895f015160e001516040516129509291906001600160a01b0392831681529116602082015260400190565b60405180910390a350505050505050565b604080516060810182525f80825260208201819052918101919091528160a081901c65ffffffffffff81165f0361299b575065ffffffffffff5b604080516060810182526001600160a01b03909316835260d09490941c602083015265ffffffffffff16928101929092525090565b6040518060a00160405280612a396040518061014001604052805f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f6001600160a01b031681526020015f81526020015f81525090565b81526020015f80191681526020015f81526020015f81526020015f81525090565b634e487b7160e01b5f52604160045260245ffd5b60405160a081016001600160401b0381118282101715612a9057612a90612a5a565b60405290565b60405161014081016001600160401b0381118282101715612a9057612a90612a5a565b604051601f8201601f191681016001600160401b0381118282101715612ae157612ae1612a5a565b604052919050565b5f6001600160401b03821115612b0157612b01612a5a565b50601f01601f191660200190565b6001600160a01b0381168114612b23575f80fd5b50565b8035612b3181612b0f565b919050565b5f8183036101c0811215612b48575f80fd5b612b50612a6e565b915061014080821215612b61575f80fd5b612b69612a96565b9150612b7484612b26565b82526020840135602083015260408401356040830152606084013560608301526080840135608083015260a084013560a083015260c084013560c0830152612bbe60e08501612b26565b60e0830152610100848101359083015261012080850135908301529082528201356020820152610160820135604082015261018082013560608201526101a0909101356080820152919050565b5f8083601f840112612c1b575f80fd5b5081356001600160401b03811115612c31575f80fd5b602083019150836020828501011115612c48575f80fd5b9250929050565b5f805f806102008587031215612c63575f80fd5b84356001600160401b0380821115612c79575f80fd5b818701915087601f830112612c8c575f80fd5b8135612c9f612c9a82612ae9565b612ab9565b818152896020838601011115612cb3575f80fd5b816020850160208301375f602083830101528097505050612cd78860208901612b36565b94506101e0870135915080821115612ced575f80fd5b50612cfa87828801612c0b565b95989497509550505050565b5f60208284031215612d16575f80fd5b81356001600160e01b031981168114612627575f80fd5b5f60208284031215612d3d575f80fd5b813563ffffffff81168114612627575f80fd5b80356001600160c01b0381168114612b31575f80fd5b5f60208284031215612d76575f80fd5b61262782612d50565b5f8060408385031215612d90575f80fd5b8235612d9b81612b0f565b9150612da960208401612d50565b90509250929050565b5f8060408385031215612dc3575f80fd5b8235612dce81612b0f565b946020939093013593505050565b5f60208284031215612dec575f80fd5b81356001600160401b03811115612e01575f80fd5b82016101208185031215612627575f80fd5b5f60208284031215612e23575f80fd5b813561262781612b0f565b5f8083601f840112612e3e575f80fd5b5081356001600160401b03811115612e54575f80fd5b6020830191508360208260051b8501011115612c48575f80fd5b5f805f60408486031215612e80575f80fd5b83356001600160401b03811115612e95575f80fd5b612ea186828701612e2e565b9094509250506020840135612eb581612b0f565b809150509250925092565b5f805f60408486031215612ed2575f80fd5b8335612edd81612b0f565b925060208401356001600160401b03811115612ef7575f80fd5b612f0386828701612c0b565b9497909650939450505050565b5f8060208385031215612f21575f80fd5b82356001600160401b03811115612f36575f80fd5b612f4285828601612c0b565b90969095509350505050565b634e487b7160e01b5f52601260045260245ffd5b5f5b83811015612f7c578181015183820152602001612f64565b50505f910152565b5f8151808452612f9b816020860160208601612f62565b601f01601f19169290920160200192915050565b828152604060208201525f611fa16040830184612f84565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561078357610783612fc7565b5f60018201612fff57612fff612fc7565b5060010190565b8181038181111561078357610783612fc7565b634e487b7160e01b5f52603260045260245ffd5b5f823561011e19833603018112613042575f80fd5b9190910192915050565b818382375f9101908152919050565b8215158152604060208201525f611fa16040830184612f84565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b602081525f611fa1602083018486613075565b5f602082840312156130c0575f80fd5b815161262781612b0f565b65ffffffffffff8181168382160190808211156130ea576130ea612fc7565b5092915050565b5f8235605e19833603018112613042575f80fd5b5f808335601e1984360301811261311a575f80fd5b8301803591506001600160401b03821115613133575f80fd5b6020019150600581901b3603821315612c48575f80fd5b5f808335601e1984360301811261315f575f80fd5b8301803591506001600160401b03821115613178575f80fd5b602001915036819003821315612c48575f80fd5b5f808335601e198436030181126131a1575f80fd5b83016020810192503590506001600160401b038111156131bf575f80fd5b803603821315612c48575f80fd5b5f6101206131eb846131de85612b26565b6001600160a01b03169052565b60208301356020850152613202604084018461318c565b8260408701526132158387018284613075565b92505050613226606084018461318c565b8583036060870152613239838284613075565b925050506080830135608085015260a083013560a085015260c083013560c085015261326860e084018461318c565b85830360e087015261327b838284613075565b9250505061010061328e8185018561318c565b868403838801526132a0848284613075565b979650505050505050565b604080825281018490525f6060600586901b8301810190830187835b8881101561330f57858403605f190183528135368b900361011e190181126132ed575f80fd5b6132f9858c83016131cd565b94505060209283019291909101906001016132c7565b50505082810360208401526132a0818587613075565b634e487b7160e01b5f52602160045260245ffd5b5f6003861061335657634e487b7160e01b5f52602160045260245ffd5b8582526080602083015261336d6080830186612f84565b6040830194909452506060015292915050565b602081525f6126276020830184612f84565b604081525f6133a460408301856131cd565b90508260208301529392505050565b805180516001600160a01b031683526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c084015260e081015161341860e08501826001600160a01b03169052565b5061010081810151908401526101209081015190830152602081015161014083015260408101516101608301526060810151610180830152608001516101a090910152565b5f61020080835261347081840187612f84565b905061347f60208401866133b3565b8281036101e08401526134928185612f84565b9695505050505050565b5f6102008083526134b08184018789613075565b90506134bf60208401866133b3565b8281036101e08401526132a08185612f84565b606081525f6134e460608301866131cd565b60208301949094525060400152919050565b5f60208284031215613506575f80fd5b5051919050565b82815260606020820152600d60608201526c10504c8cc81c995d995c9d1959609a1b608082015260a060408201525f611fa160a0830184612f84565b5f806040838503121561355a575f80fd5b82516001600160401b0381111561356f575f80fd5b8301601f8101851361357f575f80fd5b805161358d612c9a82612ae9565b8181528660208385010111156135a1575f80fd5b6135b2826020830160208601612f62565b60209590950151949694955050505050565b82815260606020820152600d60608201526c10504cccc81c995d995c9d1959609a1b608082015260a060408201525f611fa160a0830184612f84565b5f808585111561360e575f80fd5b8386111561361a575f80fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156136545780818660140360031b1b83161692505b505092915050565b6fffffffffffffffffffffffffffffffff1981358181169160108510156136545760109490940360031b84901b169092169291505056fea2646970667358221220397996f36f516bad9951ba1f23ade372bdd0ef7639623362f57652a7762031c164736f6c63430008170033608060405234801561000f575f80fd5b506101e28061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063570e1a361461002d575b5f80fd5b61004061003b3660046100e4565b61005c565b6040516001600160a01b03909116815260200160405180910390f35b5f8061006b6014828587610150565b61007491610177565b60601c90505f6100878460148188610150565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92018290525084519495509360209350849250905082850182875af190505f519350806100db575f93505b50505092915050565b5f80602083850312156100f5575f80fd5b823567ffffffffffffffff8082111561010c575f80fd5b818501915085601f83011261011f575f80fd5b81358181111561012d575f80fd5b86602082850101111561013e575f80fd5b60209290920196919550909350505050565b5f808585111561015e575f80fd5b8386111561016a575f80fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156101a45780818660140360031b1b83161692505b50509291505056fea264697066735822122078c1aaa9f040f8c523cf2b642dd06415593eec30d2e75021458af7e0c704e6fb64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"executeUserOp\",\n    \"inputs\": [\n      {\n        \"name\": \"userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      },\n      {\n        \"name\": \"userOpHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC1155BatchReceived\",\n    \"inputs\": [\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"ids\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"values\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC1155Received\",\n    \"inputs\": [\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"id\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsInterface\",\n    \"inputs\": [\n      {\n        \"name\": \"interfaceId\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"balanceOf\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"id\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"balanceOfBatch\",\n    \"inputs\": [\n      {\n        \"name\": \"accounts\",\n        \"type\": \"address[]\",\n        \"internalType\": \"address[]\"\n      },\n      {\n        \"name\": \"ids\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isApprovedForAll\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"safeBatchTransferFrom\",\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"ids\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"values\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"safeTransferFrom\",\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"id\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"setApprovalForAll\",\n    \"inputs\": [\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"approved\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsInterface\",\n    \"inputs\": [\n      {\n        \"name\": \"interfaceId\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"ApprovalForAll\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"approved\",\n        \"type\": \"bool\",\n        \"indexed\": false,\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"TransferBatch\",\n    \"inputs\": [\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"ids\",\n        \"type\": \"uint256[]\",\n        \"indexed\": false,\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"values\",\n        \"type\": \"uint256[]\",\n        \"indexed\": false,\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"TransferSingle\",\n    \"inputs\": [\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"id\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"URI\",\n    \"inputs\": [\n      {\n        \"name\": \"value\",\n        \"type\": \"string\",\n        \"indexed\": false,\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"id\",\n        \"type\": \"uint256\",\n        \"indexed\": true,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_args\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_delegator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_args\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_delegator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_args\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_delegator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_args\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_delegator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"allowance\",\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"spender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"approve\",\n    \"inputs\": [\n      {\n        \"name\": \"spender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"approveAndCall\",\n    \"inputs\": [\n      {\n        \"name\": \"spender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"approveAndCall\",\n    \"inputs\": [\n      {\n        \"name\": \"spender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"balanceOf\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsInterface\",\n    \"inputs\": [\n      {\n        \"name\": \"interfaceId\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"totalSupply\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transfer\",\n    \"inputs\": [\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transferAndCall\",\n    \"inputs\": [\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transferAndCall\",\n    \"inputs\": [\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transferFrom\",\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transferFromAndCall\",\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transferFromAndCall\",\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Approval\",\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"spender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Transfer\",\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"owner\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transferOwnership\",\n    \"inputs\": [\n      {\n        \"name\": \"_newOwner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"OwnershipTransferred\",\n    \"inputs\": [\n      {\n        \"name\": \"previousOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"newOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsInterface\",\n    \"inputs\": [\n      {\n        \"name\": \"interfaceId\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"executions_\",\n        \"type\": \"tuple[]\",\n        \"internalType\": \"struct Execution[]\",\n        \"components\": [\n          {\n            \"name\": \"target\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"value\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b5061083a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063414c3e331461005c578063a145832a14610078578063b99deb0e1461008b578063d3eddcc51461005c578063ed4633671461005c575b600080fd5b61007661006a366004610417565b50505050505050505050565b005b610076610086366004610417565b6100b4565b61009e6100993660046104e4565b6102fd565b6040516100ab9190610526565b60405180910390f35b85600160f81b6001600160f81b03198216146101175760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d7479706560448201526064015b60405180910390fd5b86600881901b6001600160f81b03198116156101835760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b606482015260840161010e565b503660006101918989610319565b9150915060006101a18f8f6102fd565b8051909150821461020a5760405162461bcd60e51b815260206004820152602d60248201527f457861637443616c6c646174614261746368456e666f726365723a696e76616c60448201526c69642d62617463682d73697a6560981b606482015260840161010e565b60005b828110156102eb57838382818110610227576102276105e8565b905060200281019061023991906105fe565b61024790604081019061061e565b604051610255929190610665565b604051809103902082828151811061026f5761026f6105e8565b60200260200101516040015180519060200120146102e35760405162461bcd60e51b815260206004820152602b60248201527f457861637443616c6c646174614261746368456e666f726365723a696e76616c60448201526a69642d63616c6c6461746160a81b606482015260840161010e565b60010161020d565b50505050505050505050505050505050565b60606103098383610319565b610312916106e5565b9392505050565b366000833580850160208587010360208201945081359350808460051b8301118360401c17156103515763ba597e7e6000526004601cfd5b83156103a8578392505b6001830392508260051b850135915081850160408101358082018381358201118460408501111782861782351760401c171561039f5763ba597e7e6000526004601cfd5b5050508261035b575b5050509250929050565b60008083601f8401126103c457600080fd5b50813567ffffffffffffffff8111156103dc57600080fd5b6020830191508360208285010111156103f457600080fd5b9250929050565b80356001600160a01b038116811461041257600080fd5b919050565b60008060008060008060008060008060e08b8d03121561043657600080fd5b8a3567ffffffffffffffff8082111561044e57600080fd5b61045a8e838f016103b2565b909c509a5060208d013591508082111561047357600080fd5b61047f8e838f016103b2565b909a50985060408d0135975060608d013591508082111561049f57600080fd5b506104ac8d828e016103b2565b90965094505060808b013592506104c560a08c016103fb565b91506104d360c08c016103fb565b90509295989b9194979a5092959850565b600080602083850312156104f757600080fd5b823567ffffffffffffffff81111561050e57600080fd5b61051a858286016103b2565b90969095509350505050565b600060208083018184528085518083526040925060408601915060408160051b8701018488016000805b848110156105d957898403603f19018652825180516001600160a01b0316855288810151898601528701516060888601819052815190860181905283905b808210156105ac578282018b015187830160800152908a019061058e565b8681016080908101869052988b0198601f909101601f191690960190950194505091870191600101610550565b50919998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008235605e1983360301811261061457600080fd5b9190910192915050565b6000808335601e1984360301811261063557600080fd5b83018035915067ffffffffffffffff82111561065057600080fd5b6020019150368190038213156103f457600080fd5b8183823760009101908152919050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156106ae576106ae610675565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156106dd576106dd610675565b604052919050565b600067ffffffffffffffff8084111561070057610700610675565b8360051b60206107118183016106b4565b86815291850191818101903684111561072957600080fd5b865b848110156107f8578035868111156107435760008081fd5b880160603682900312156107575760008081fd5b61075f61068b565b610768826103fb565b81528582013586820152604080830135898111156107865760008081fd5b9290920191601f368185011261079c5760008081fd5b83358a8111156107ae576107ae610675565b6107bf818301601f19168a016106b4565b915080825236898287010111156107d65760008081fd5b808986018a84013760009082018901529082015284525091830191830161072b565b5097965050505050505056fea26469706673582212208d28ccd8e989ae016d34ead1b420bc19b8be9eaa747049c2602c587d0a44891264736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"isValidSignature\",\n    \"inputs\": [\n      {\n        \"name\": \"hash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"signature\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"magicValue\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"executeFromExecutor\",\n    \"inputs\": [\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"returnData\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isValidSignature\",\n    \"inputs\": [\n      {\n        \"name\": \"hash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"signature\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"magicValue\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"executions_\",\n        \"type\": \"tuple[]\",\n        \"internalType\": \"struct Execution[]\",\n        \"components\": [\n          {\n            \"name\": \"target\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"value\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b50610870806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063414c3e331461005c578063a145832a14610078578063b99deb0e1461008b578063d3eddcc51461005c578063ed4633671461005c575b600080fd5b61007661006a3660046103e9565b50505050505050505050565b005b6100766100863660046103e9565b6100b4565b61009e6100993660046104b6565b6102cf565b6040516100ab91906104f8565b60405180910390f35b85600160f81b6001600160f81b03198216146101175760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d7479706560448201526064015b60405180910390fd5b86600881901b6001600160f81b03198116156101835760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b606482015260840161010e565b5036600061019189896102eb565b9150915060006101a18f8f6102cf565b8051909150821461020b5760405162461bcd60e51b815260206004820152602e60248201527f4578616374457865637574696f6e4261746368456e666f726365723a696e766160448201526d6c69642d62617463682d73697a6560901b606482015260840161010e565b8060405160200161021c91906104f8565b6040516020818303038152906040528051906020012083836040516020016102459291906105ba565b60405160208183030381529060405280519060200120146102be5760405162461bcd60e51b815260206004820152602d60248201527f4578616374457865637574696f6e4261746368456e666f726365723a696e766160448201526c3634b216b2bc32b1baba34b7b760991b606482015260840161010e565b505050505050505050505050505050565b60606102db83836102eb565b6102e49161071b565b9392505050565b366000833580850160208587010360208201945081359350808460051b8301118360401c17156103235763ba597e7e6000526004601cfd5b831561037a578392505b6001830392508260051b850135915081850160408101358082018381358201118460408501111782861782351760401c17156103715763ba597e7e6000526004601cfd5b5050508261032d575b5050509250929050565b60008083601f84011261039657600080fd5b50813567ffffffffffffffff8111156103ae57600080fd5b6020830191508360208285010111156103c657600080fd5b9250929050565b80356001600160a01b03811681146103e457600080fd5b919050565b60008060008060008060008060008060e08b8d03121561040857600080fd5b8a3567ffffffffffffffff8082111561042057600080fd5b61042c8e838f01610384565b909c509a5060208d013591508082111561044557600080fd5b6104518e838f01610384565b909a50985060408d0135975060608d013591508082111561047157600080fd5b5061047e8d828e01610384565b90965094505060808b0135925061049760a08c016103cd565b91506104a560c08c016103cd565b90509295989b9194979a5092959850565b600080602083850312156104c957600080fd5b823567ffffffffffffffff8111156104e057600080fd5b6104ec85828601610384565b90969095509350505050565b600060208083018184528085518083526040925060408601915060408160051b8701018488016000805b848110156105ab57898403603f19018652825180516001600160a01b0316855288810151898601528701516060888601819052815190860181905283905b8082101561057e578282018b015187830160800152908a0190610560565b8681016080908101869052988b0198601f909101601f191690960190950194505091870191600101610522565b50919998505050505050505050565b60208082528181018390526000906040808401600586901b8501820187855b8881101561069d57878303603f190184528135368b9003605e190181126105ff57600080fd5b8a0160606001600160a01b03610614836103cd565b168552878201358886015286820135601e1983360301811261063557600080fd5b90910187810191903567ffffffffffffffff81111561065357600080fd5b80360383131561066257600080fd5b8188870152808287015260809150808383880137600086820183015295880195601f01601f19169094019093019250908501906001016105d9565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156106e4576106e46106ab565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610713576107136106ab565b604052919050565b600067ffffffffffffffff80841115610736576107366106ab565b8360051b60206107478183016106ea565b86815291850191818101903684111561075f57600080fd5b865b8481101561082e578035868111156107795760008081fd5b8801606036829003121561078d5760008081fd5b6107956106c1565b61079e826103cd565b81528582013586820152604080830135898111156107bc5760008081fd5b9290920191601f36818501126107d25760008081fd5b83358a8111156107e4576107e46106ab565b6107f5818301601f19168a016106ea565b9150808252368982870101111561080c5760008081fd5b808986018a840137600090820189015290820152845250918301918301610761565b5097965050505050505056fea26469706673582212205e0b91ba43666d3d9ebd5eb11438023697fc7df67dea03687ac126f13d8d464564736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"event\",\n    \"name\": \"TryExecuteUnsuccessful\",\n    \"inputs\": [\n      {\n        \"name\": \"batchExecutionindex\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"result\",\n        \"type\": \"bytes\",\n        \"indexed\": false,\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ExecutionFailed\",\n    \"inputs\": []\n  }\n] as const;\n\n\nexport const bytecode = \"0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122070e8319b78da08f58cb6bf69f50e33c8c919ae6c2113f3ef3b34f1da6bf44c5f64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"eip712Domain\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"fields\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"bytes1\"\n      },\n      {\n        \"name\": \"name\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"version\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"chainId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"verifyingContract\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"salt\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"extensions\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"EIP712DomainChanged\",\n    \"inputs\": [],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"allowance\",\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"spender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"approve\",\n    \"inputs\": [\n      {\n        \"name\": \"spender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"balanceOf\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"totalSupply\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transfer\",\n    \"inputs\": [\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transferFrom\",\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Approval\",\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"spender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Transfer\",\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"approve\",\n    \"inputs\": [\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"balanceOf\",\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"balance\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getApproved\",\n    \"inputs\": [\n      {\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isApprovedForAll\",\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"ownerOf\",\n    \"inputs\": [\n      {\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"safeTransferFrom\",\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"safeTransferFrom\",\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"setApprovalForAll\",\n    \"inputs\": [\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"approved\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsInterface\",\n    \"inputs\": [\n      {\n        \"name\": \"interfaceId\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transferFrom\",\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Approval\",\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"approved\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\",\n        \"indexed\": true,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"ApprovalForAll\",\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"approved\",\n        \"type\": \"bool\",\n        \"indexed\": false,\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Transfer\",\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\",\n        \"indexed\": true,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"accountId\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"accountImplementationId\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"execute\",\n    \"inputs\": [\n      {\n        \"name\": \"mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"executeFromExecutor\",\n    \"inputs\": [\n      {\n        \"name\": \"mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"returnData\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"installModule\",\n    \"inputs\": [\n      {\n        \"name\": \"moduleTypeId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"module\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"initData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isModuleInstalled\",\n    \"inputs\": [\n      {\n        \"name\": \"moduleTypeId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"module\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"additionalContext\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isValidSignature\",\n    \"inputs\": [\n      {\n        \"name\": \"hash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsExecutionMode\",\n    \"inputs\": [\n      {\n        \"name\": \"encodedMode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsModule\",\n    \"inputs\": [\n      {\n        \"name\": \"moduleTypeId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"uninstallModule\",\n    \"inputs\": [\n      {\n        \"name\": \"moduleTypeId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"module\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"deInitData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"ModuleInstalled\",\n    \"inputs\": [\n      {\n        \"name\": \"moduleTypeId\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"module\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"ModuleUninstalled\",\n    \"inputs\": [\n      {\n        \"name\": \"moduleTypeId\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"module\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"postOp\",\n    \"inputs\": [\n      {\n        \"name\": \"mode\",\n        \"type\": \"uint8\",\n        \"internalType\": \"enum IPaymaster.PostOpMode\"\n      },\n      {\n        \"name\": \"context\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"actualGasCost\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"actualUserOpFeePerGas\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"validatePaymasterUserOp\",\n    \"inputs\": [\n      {\n        \"name\": \"userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      },\n      {\n        \"name\": \"userOpHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"maxCost\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"context\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"validationData\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"addStake\",\n    \"inputs\": [\n      {\n        \"name\": \"_unstakeDelaySec\",\n        \"type\": \"uint32\",\n        \"internalType\": \"uint32\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"balanceOf\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"depositTo\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDepositInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"info\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct IStakeManager.DepositInfo\",\n        \"components\": [\n          {\n            \"name\": \"deposit\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"staked\",\n            \"type\": \"bool\",\n            \"internalType\": \"bool\"\n          },\n          {\n            \"name\": \"stake\",\n            \"type\": \"uint112\",\n            \"internalType\": \"uint112\"\n          },\n          {\n            \"name\": \"unstakeDelaySec\",\n            \"type\": \"uint32\",\n            \"internalType\": \"uint32\"\n          },\n          {\n            \"name\": \"withdrawTime\",\n            \"type\": \"uint48\",\n            \"internalType\": \"uint48\"\n          }\n        ]\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"unlockStake\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"withdrawStake\",\n    \"inputs\": [\n      {\n        \"name\": \"withdrawAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address payable\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"withdrawTo\",\n    \"inputs\": [\n      {\n        \"name\": \"withdrawAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address payable\"\n      },\n      {\n        \"name\": \"withdrawAmount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Deposited\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"totalDeposit\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"StakeLocked\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"totalStaked\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"unstakeDelaySec\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"StakeUnlocked\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"withdrawTime\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"StakeWithdrawn\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"withdrawAddress\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Withdrawn\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"withdrawAddress\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"addStake\",\n    \"inputs\": [\n      {\n        \"name\": \"_unstakeDelaySec\",\n        \"type\": \"uint32\",\n        \"internalType\": \"uint32\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"balanceOf\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"delegateAndRevert\",\n    \"inputs\": [\n      {\n        \"name\": \"target\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"depositTo\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDepositInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"info\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct IStakeManager.DepositInfo\",\n        \"components\": [\n          {\n            \"name\": \"deposit\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"staked\",\n            \"type\": \"bool\",\n            \"internalType\": \"bool\"\n          },\n          {\n            \"name\": \"stake\",\n            \"type\": \"uint112\",\n            \"internalType\": \"uint112\"\n          },\n          {\n            \"name\": \"unstakeDelaySec\",\n            \"type\": \"uint32\",\n            \"internalType\": \"uint32\"\n          },\n          {\n            \"name\": \"withdrawTime\",\n            \"type\": \"uint48\",\n            \"internalType\": \"uint48\"\n          }\n        ]\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getNonce\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"key\",\n        \"type\": \"uint192\",\n        \"internalType\": \"uint192\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"nonce\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getSenderAddress\",\n    \"inputs\": [\n      {\n        \"name\": \"initCode\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getUserOpHash\",\n    \"inputs\": [\n      {\n        \"name\": \"userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"handleAggregatedOps\",\n    \"inputs\": [\n      {\n        \"name\": \"opsPerAggregator\",\n        \"type\": \"tuple[]\",\n        \"internalType\": \"struct IEntryPoint.UserOpsPerAggregator[]\",\n        \"components\": [\n          {\n            \"name\": \"userOps\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct PackedUserOperation[]\",\n            \"components\": [\n              {\n                \"name\": \"sender\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"nonce\",\n                \"type\": \"uint256\",\n                \"internalType\": \"uint256\"\n              },\n              {\n                \"name\": \"initCode\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"callData\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"accountGasLimits\",\n                \"type\": \"bytes32\",\n                \"internalType\": \"bytes32\"\n              },\n              {\n                \"name\": \"preVerificationGas\",\n                \"type\": \"uint256\",\n                \"internalType\": \"uint256\"\n              },\n              {\n                \"name\": \"gasFees\",\n                \"type\": \"bytes32\",\n                \"internalType\": \"bytes32\"\n              },\n              {\n                \"name\": \"paymasterAndData\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"signature\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"aggregator\",\n            \"type\": \"address\",\n            \"internalType\": \"contract IAggregator\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      },\n      {\n        \"name\": \"beneficiary\",\n        \"type\": \"address\",\n        \"internalType\": \"address payable\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"handleOps\",\n    \"inputs\": [\n      {\n        \"name\": \"ops\",\n        \"type\": \"tuple[]\",\n        \"internalType\": \"struct PackedUserOperation[]\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      },\n      {\n        \"name\": \"beneficiary\",\n        \"type\": \"address\",\n        \"internalType\": \"address payable\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"incrementNonce\",\n    \"inputs\": [\n      {\n        \"name\": \"key\",\n        \"type\": \"uint192\",\n        \"internalType\": \"uint192\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"unlockStake\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"withdrawStake\",\n    \"inputs\": [\n      {\n        \"name\": \"withdrawAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address payable\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"withdrawTo\",\n    \"inputs\": [\n      {\n        \"name\": \"withdrawAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address payable\"\n      },\n      {\n        \"name\": \"withdrawAmount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"AccountDeployed\",\n    \"inputs\": [\n      {\n        \"name\": \"userOpHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"factory\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"paymaster\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"BeforeExecution\",\n    \"inputs\": [],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Deposited\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"totalDeposit\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"PostOpRevertReason\",\n    \"inputs\": [\n      {\n        \"name\": \"userOpHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"nonce\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"revertReason\",\n        \"type\": \"bytes\",\n        \"indexed\": false,\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SignatureAggregatorChanged\",\n    \"inputs\": [\n      {\n        \"name\": \"aggregator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"StakeLocked\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"totalStaked\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"unstakeDelaySec\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"StakeUnlocked\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"withdrawTime\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"StakeWithdrawn\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"withdrawAddress\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"UserOperationEvent\",\n    \"inputs\": [\n      {\n        \"name\": \"userOpHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"paymaster\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"nonce\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"success\",\n        \"type\": \"bool\",\n        \"indexed\": false,\n        \"internalType\": \"bool\"\n      },\n      {\n        \"name\": \"actualGasCost\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"actualGasUsed\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"UserOperationPrefundTooLow\",\n    \"inputs\": [\n      {\n        \"name\": \"userOpHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"nonce\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"UserOperationRevertReason\",\n    \"inputs\": [\n      {\n        \"name\": \"userOpHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"nonce\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"revertReason\",\n        \"type\": \"bytes\",\n        \"indexed\": false,\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Withdrawn\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"withdrawAddress\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"DelegateAndRevert\",\n    \"inputs\": [\n      {\n        \"name\": \"success\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      },\n      {\n        \"name\": \"ret\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"FailedOp\",\n    \"inputs\": [\n      {\n        \"name\": \"opIndex\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"reason\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"FailedOpWithRevert\",\n    \"inputs\": [\n      {\n        \"name\": \"opIndex\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"reason\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"inner\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"PostOpReverted\",\n    \"inputs\": [\n      {\n        \"name\": \"returnData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"SenderAddressResult\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"SignatureValidationFailed\",\n    \"inputs\": [\n      {\n        \"name\": \"aggregator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"adapters\",\n    \"inputs\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct IMetaSwap.Adapter\",\n        \"components\": [\n          {\n            \"name\": \"addr\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"selector\",\n            \"type\": \"bytes4\",\n            \"internalType\": \"bytes4\"\n          },\n          {\n            \"name\": \"data\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"removeAdapter\",\n    \"inputs\": [\n      {\n        \"name\": \"aggregatorId\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"setAdapter\",\n    \"inputs\": [\n      {\n        \"name\": \"aggregatorId\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"addr\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"selector\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"swap\",\n    \"inputs\": [\n      {\n        \"name\": \"aggregatorId\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"tokenFrom\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IERC20\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"constructor\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IDelegationManager\"\n      },\n      {\n        \"name\": \"_entryPoint\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IEntryPoint\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"receive\",\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"DOMAIN_VERSION\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"NAME\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"PACKED_USER_OP_TYPEHASH\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"UPGRADE_INTERFACE_VERSION\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"VERSION\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"addDeposit\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"addKey\",\n    \"inputs\": [\n      {\n        \"name\": \"_keyId\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"_x\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"_y\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"delegationManager\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IDelegationManager\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"disableDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegation\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"eip712Domain\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"fields\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"bytes1\"\n      },\n      {\n        \"name\": \"name\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"version\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"chainId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"verifyingContract\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"salt\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"extensions\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"enableDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegation\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"entryPoint\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IEntryPoint\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"execute\",\n    \"inputs\": [\n      {\n        \"name\": \"_execution\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Execution\",\n        \"components\": [\n          {\n            \"name\": \"target\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"value\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"execute\",\n    \"inputs\": [\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"executeFromExecutor\",\n    \"inputs\": [\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"returnData_\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDeposit\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDomainHash\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getImplementation\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getInitializedVersion\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint64\",\n        \"internalType\": \"uint64\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getKey\",\n    \"inputs\": [\n      {\n        \"name\": \"_keyId\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"x_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"y_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getKeyIdHashes\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32[]\",\n        \"internalType\": \"bytes32[]\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getKeyIdHashesCount\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getNonce\",\n    \"inputs\": [\n      {\n        \"name\": \"_key\",\n        \"type\": \"uint192\",\n        \"internalType\": \"uint192\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getNonce\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getPackedUserOperationHash\",\n    \"inputs\": [\n      {\n        \"name\": \"_userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getPackedUserOperationTypedDataHash\",\n    \"inputs\": [\n      {\n        \"name\": \"_userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"initialize\",\n    \"inputs\": [\n      {\n        \"name\": \"_owner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_keyIds\",\n        \"type\": \"string[]\",\n        \"internalType\": \"string[]\"\n      },\n      {\n        \"name\": \"_xValues\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"_yValues\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isDelegationDisabled\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isValidSignature\",\n    \"inputs\": [\n      {\n        \"name\": \"_hash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_signature\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"magicValue_\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC1155BatchReceived\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC1155Received\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC721Received\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"owner\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"proxiableUUID\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"redeemDelegations\",\n    \"inputs\": [\n      {\n        \"name\": \"_permissionContexts\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      },\n      {\n        \"name\": \"_modes\",\n        \"type\": \"bytes32[]\",\n        \"internalType\": \"ModeCode[]\"\n      },\n      {\n        \"name\": \"_executionCallDatas\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"reinitialize\",\n    \"inputs\": [\n      {\n        \"name\": \"_version\",\n        \"type\": \"uint8\",\n        \"internalType\": \"uint8\"\n      },\n      {\n        \"name\": \"_owner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_keyIds\",\n        \"type\": \"string[]\",\n        \"internalType\": \"string[]\"\n      },\n      {\n        \"name\": \"_xValues\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"_yValues\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"_deleteP256Keys\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"removeKey\",\n    \"inputs\": [\n      {\n        \"name\": \"_keyId\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"renounceOwnership\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsInterface\",\n    \"inputs\": [\n      {\n        \"name\": \"_interfaceId\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transferOwnership\",\n    \"inputs\": [\n      {\n        \"name\": \"_newOwner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"updateSigners\",\n    \"inputs\": [\n      {\n        \"name\": \"_owner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_keyIds\",\n        \"type\": \"string[]\",\n        \"internalType\": \"string[]\"\n      },\n      {\n        \"name\": \"_xValues\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"_yValues\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"upgradeToAndCall\",\n    \"inputs\": [\n      {\n        \"name\": \"_newImplementation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"upgradeToAndCallAndRetainStorage\",\n    \"inputs\": [\n      {\n        \"name\": \"_newImplementation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"validateUserOp\",\n    \"inputs\": [\n      {\n        \"name\": \"_userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_missingAccountFunds\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"validationData_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"withdrawDeposit\",\n    \"inputs\": [\n      {\n        \"name\": \"_withdrawAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address payable\"\n      },\n      {\n        \"name\": \"_withdrawAmount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"AddedP256Key\",\n    \"inputs\": [\n      {\n        \"name\": \"keyIdHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"keyId\",\n        \"type\": \"string\",\n        \"indexed\": false,\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"x\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"y\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"ClearedStorage\",\n    \"inputs\": [],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"EIP712DomainChanged\",\n    \"inputs\": [],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Initialized\",\n    \"inputs\": [\n      {\n        \"name\": \"version\",\n        \"type\": \"uint64\",\n        \"indexed\": false,\n        \"internalType\": \"uint64\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"OwnershipTransferred\",\n    \"inputs\": [\n      {\n        \"name\": \"previousOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"newOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"RemovedP256Key\",\n    \"inputs\": [\n      {\n        \"name\": \"keyIdHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"x\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"y\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SentPrefund\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"success\",\n        \"type\": \"bool\",\n        \"indexed\": false,\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SetDelegationManager\",\n    \"inputs\": [\n      {\n        \"name\": \"newDelegationManager\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"contract IDelegationManager\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SetEntryPoint\",\n    \"inputs\": [\n      {\n        \"name\": \"entryPoint\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"contract IEntryPoint\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"TryExecuteUnsuccessful\",\n    \"inputs\": [\n      {\n        \"name\": \"batchExecutionindex\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"result\",\n        \"type\": \"bytes\",\n        \"indexed\": false,\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Upgraded\",\n    \"inputs\": [\n      {\n        \"name\": \"implementation\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AddressEmptyCode\",\n    \"inputs\": [\n      {\n        \"name\": \"target\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"CannotRemoveLastSigner\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignature\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignatureLength\",\n    \"inputs\": [\n      {\n        \"name\": \"length\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignatureS\",\n    \"inputs\": [\n      {\n        \"name\": \"s\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1967InvalidImplementation\",\n    \"inputs\": [\n      {\n        \"name\": \"implementation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1967NonPayable\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ExecutionFailed\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"FailedInnerCall\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InputLengthsMismatch\",\n    \"inputs\": [\n      {\n        \"name\": \"keyIdsLength\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"xValuesLength\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"yValuesLength\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidEmptyKey\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidInitialization\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidShortString\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"KeyAlreadyExists\",\n    \"inputs\": [\n      {\n        \"name\": \"keyIdHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"KeyDoesNotExist\",\n    \"inputs\": [\n      {\n        \"name\": \"keyIdHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"KeyNotOnCurve\",\n    \"inputs\": [\n      {\n        \"name\": \"x\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"y\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotDelegationManager\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotEntryPoint\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotEntryPointOrSelf\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotInitializing\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotSelf\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"SignersCannotBeEmpty\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"StringTooLong\",\n    \"inputs\": [\n      {\n        \"name\": \"str\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UUPSUnauthorizedCallContext\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UUPSUnsupportedProxiableUUID\",\n    \"inputs\": [\n      {\n        \"name\": \"slot\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UnsupportedCallType\",\n    \"inputs\": [\n      {\n        \"name\": \"callType\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"CallType\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UnsupportedExecType\",\n    \"inputs\": [\n      {\n        \"name\": \"execType\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"ExecType\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x6101c0604052306080523480156200001657600080fd5b506040516200556538038062005565833981016040819052620000399162000319565b81816040518060400160405280600f81526020016e243cb13934b22232b632a3b0ba37b960891b815250604051806040016040528060018152602001603160f81b815250818162000095600083620001ca60201b90919060201c565b61014052620000a6816001620001ca565b61016052815160208084019190912061010052815190820120610120524660c052620001366101005161012051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60a05250503060e0526200014962000203565b6001600160a01b038085166101808190529084166101a0526040517fb2e8eb88b584ae71ef4e854c10847f4d39bd93e52599f147bfb4dcc8de52014d90600090a26040516001600160a01b038416907fee8699dc0e27105da2653bdba54be0edcaadc3e33890a3ad705517ffe9bf0a9990600090a250505050505062000541565b6000602083511015620001ea57620001e283620002b7565b9050620001fd565b81620001f78482620003ff565b5060ff90505b92915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620002545760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620002b45780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b600080829050601f81511115620002ee578260405163305a27a960e01b8152600401620002e59190620004cb565b60405180910390fd5b8051620002fb826200051c565b179392505050565b6001600160a01b0381168114620002b457600080fd5b600080604083850312156200032d57600080fd5b82516200033a8162000303565b60208401519092506200034d8162000303565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200038357607f821691505b602082108103620003a457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003fa576000816000526020600020601f850160051c81016020861015620003d55750805b601f850160051c820191505b81811015620003f657828155600101620003e1565b5050505b505050565b81516001600160401b038111156200041b576200041b62000358565b62000433816200042c84546200036e565b84620003aa565b602080601f8311600181146200046b5760008415620004525750858301515b600019600386901b1c1916600185901b178555620003f6565b600085815260208120601f198616915b828110156200049c578886015182559484019460019091019084016200047b565b5085821015620004bb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020808352835180602085015260005b81811015620004fb57858101830151858201604001528201620004dd565b506000604082860101526040601f19601f8301168501019250505092915050565b80516020808301519190811015620003a45760001960209190910360031b1b16919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a051614eeb6200067a6000396000818161068c0152818161091e015281816109cb01528181610abe01528181610b3c01528181610ca001528181610d5501528181610de001528181610e5001528181610f3c01528181610ff701528181611069015281816112c301528181611342015281816113ab015281816114a60152818161156501528181611a1b01528181611d0e01528181611d7c0152612d4e0152600081816107ff01528181610b9f01528181610c2201528181610d030152818161140e01526117ac0152600061275a0152600061272d01526000611f3e01526000611f1601526000611e7101526000611e9b01526000611ec5015260008181612190015281816121b901526126100152614eeb6000f3fe6080604052600436106102765760003560e01c80638da5cb5b1161014f578063c8561e73116100c1578063e9ae5c531161007a578063e9ae5c53146107da578063ea4d3c9b146107ed578063ed8101b514610821578063f23a6e6114610841578063f2fde38b14610861578063ffa1ad741461088157600080fd5b8063c8561e7314610710578063cef6d20914610730578063d087d28814610750578063d37aec9214610765578063d5d33b551461079a578063d691c964146107ba57600080fd5b8063acb8cc4911610113578063acb8cc491461061c578063ad3cb1cc14610649578063b0d691fe1461067a578063b3c65015146106ae578063bc197c81146106db578063c399ec88146106fb57600080fd5b80638da5cb5b1461054d5780638ebf95331461058c578063a24c8f32146105ac578063a3f4df7e146105bf578063aaf10f421461060757600080fd5b8063445140b8116101e85780635c1c6dcd116101ac5780635c1c6dcd146104a8578063715018a6146104bb57806378a68ecf146104d05780637f07bfdc146104f057806383ebb7711461051057806384b0196e1461052557600080fd5b8063445140b81461043857806349934047146104585780634a58db19146104785780634f1ef2861461048057806352d1902d1461049357600080fd5b806319822f7c1161023a57806319822f7c146103605780631c03010a146103805780632b3afd99146103a25780632ffeaad6146103d65780633e1b0812146103f85780633ed010151461041857600080fd5b806301ffc9a71461028257806306394d67146102b7578063074feff3146102e5578063150b7a02146103075780631626ba7e1461034057600080fd5b3661027d57005b600080fd5b34801561028e57600080fd5b506102a261029d366004613d03565b6108b2565b60405190151581526020015b60405180910390f35b3480156102c357600080fd5b506102d76102d2366004613d46565b6108de565b6040519081526020016102ae565b3480156102f157600080fd5b50610305610300366004613ded565b610913565b005b34801561031357600080fd5b50610327610322366004613f5c565b610984565b6040516001600160e01b031990911681526020016102ae565b34801561034c57600080fd5b5061032761035b366004614008565b61099f565b34801561036c57600080fd5b506102d761037b366004614053565b6109be565b34801561038c57600080fd5b50600080516020614e36833981519152546102d7565b3480156103ae57600080fd5b506102d77fbc37962d8bd1d319c95199bdfda6d3f92baa8903a61b32d5f4ec1f4b36a3bc1881565b3480156103e257600080fd5b506103eb610a2e565b6040516102ae91906140a0565b34801561040457600080fd5b506102d76104133660046140d8565b610a97565b34801561042457600080fd5b50610305610433366004614101565b610b31565b34801561044457600080fd5b506102a261045336600461413b565b610c09565b34801561046457600080fd5b50610305610473366004614101565b610c95565b610305610d38565b61030561048e366004614154565b610da2565b34801561049f57600080fd5b506102d7610db8565b6103056104b63660046141a3565b610dd5565b3480156104c757600080fd5b50610305610e45565b3480156104dc57600080fd5b506103056104eb3660046141f6565b610ea8565b3480156104fc57600080fd5b5061030561050b3660046142c8565b610fec565b34801561051c57600080fd5b506102d76110c9565b34801561053157600080fd5b5061053a6110d8565b6040516102ae9796959493929190614344565b34801561055957600080fd5b50600080516020614e16833981519152546001600160a01b03165b6040516001600160a01b0390911681526020016102ae565b34801561059857600080fd5b506103056105a7366004613ded565b61111e565b6103056105ba366004614154565b610daa565b3480156105cb57600080fd5b506105fa6040518060400160405280600f81526020016e243cb13934b22232b632a3b0ba37b960891b81525081565b6040516102ae91906143dd565b34801561061357600080fd5b5061057461123a565b34801561062857600080fd5b506105fa604051806040016040528060018152602001603160f81b81525081565b34801561065557600080fd5b506105fa604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561068657600080fd5b506105747f000000000000000000000000000000000000000000000000000000000000000081565b3480156106ba57600080fd5b506106c361125b565b6040516001600160401b0390911681526020016102ae565b3480156106e757600080fd5b506103276106f636600461446f565b61128e565b34801561070757600080fd5b506102d76112ab565b34801561071c57600080fd5b5061030561072b36600461451c565b611337565b34801561073c57600080fd5b5061030561074b36600461456c565b6113a0565b34801561075c57600080fd5b506102d7611487565b34801561077157600080fd5b50610785610780366004614605565b6114dd565b604080519283526020830191909152016102ae565b3480156107a657600080fd5b506103056107b5366004614605565b61155a565b6107cd6107c8366004614008565b61179f565b6040516102ae9190614646565b6103056107e8366004614008565b611a10565b3480156107f957600080fd5b506105747f000000000000000000000000000000000000000000000000000000000000000081565b34801561082d57600080fd5b506102d761083c366004613d46565b611c13565b34801561084d57600080fd5b5061032761085c3660046146aa565b611d55565b34801561086d57600080fd5b5061030561087c366004614712565b611d71565b34801561088d57600080fd5b506105fa604051806040016040528060058152602001640312e332e360dc1b81525081565b60006108bd82611dd4565b806108d857506001600160e01b031982166307f5828d60e41b145b92915050565b60006108d86108eb611e64565b6108f484611c13565b60405161190160f01b8152600281019290925260228201526042902090565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061094c5750333014155b1561096a57604051630796d94560e01b815260040160405180910390fd5b61097b878787878787876001611f8f565b50505050505050565b600061098e612185565b50630a85bd0160e11b949350505050565b60006109a9612185565b6109b484848461222a565b90505b9392505050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a0957604051636b31ba1560e11b815260040160405180910390fd5b610a11612185565b610a2384610a1e866108de565b61244e565b90506109b782612496565b60606000600080516020614e1683398151915260028101805460408051602080840282018101909252828152939450830182828015610a8c57602002820191906000526020600020905b815481526020019060010190808311610a78575b505050505091505090565b604051631aab3f0d60e11b81523060048201526001600160c01b03821660248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906335567e1a90604401602060405180830381865afa158015610b0d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d8919061472f565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590610b6a5750333014155b15610b8857604051630796d94560e01b815260040160405180910390fd5b604051633ed0101560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633ed0101590610bd4908490600401614877565b600060405180830381600087803b158015610bee57600080fd5b505af1158015610c02573d6000803e3d6000fd5b5050505050565b6040516316a0682960e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632d40d05290602401602060405180830381865afa158015610c71573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d89190614953565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590610cce5750333014155b15610cec57604051630796d94560e01b815260040160405180910390fd5b604051634993404760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634993404790610bd4908490600401614877565b610d40612185565b60405163b760faf960e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b760faf99034906024016000604051808303818588803b158015610bee57600080fd5b610daa61252d565b610db482826125ea565b5050565b6000610dc2612605565b50600080516020614e5683398151915290565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e1e57604051636b31ba1560e11b815260040160405180910390fd5b610db4610e2e6020830183614712565b6020830135610e406040850185614970565b61264e565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590610e7e5750333014155b15610e9c57604051630796d94560e01b815260040160405180910390fd5b610ea66000612684565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805460ff8b81169291600160401b90041680610ef2575080546001600160401b03808416911610155b15610f105760405163f92ee8a960e01b815260040160405180910390fd5b805468ffffffffffffffffff19166001600160401b03831617600160401b178155336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590610f6a5750333014155b15610f8857604051630796d94560e01b815260040160405180910390fd5b610f988a8a8a8a8a8a8a8a611f8f565b805460ff60401b191681556040516001600160401b03831681527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15050505050505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906110255750333014155b1561104357604051630796d94560e01b815260040160405180910390fd5b60405163040b850f60e31b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063205c287890604401600060405180830381600087803b1580156110ad57600080fd5b505af11580156110c1573d6000803e3d6000fd5b505050505050565b60006110d3611e64565b905090565b6000606080600080600060606110ec612726565b6110f4612753565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156111635750825b90506000826001600160401b0316600114801561117f5750303b155b90508115801561118d575080155b156111ab5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156111d557845460ff60401b1916600160401b1785555b6111e68c8c8c8c8c8c8c6000611f8f565b831561122c57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050505050565b60006110d3600080516020614e56833981519152546001600160a01b031690565b60006110d37ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00546001600160401b031690565b6000611298612185565b5063bc197c8160e01b5b95945050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a08231906024015b602060405180830381865afa158015611313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d3919061472f565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906113705750333014155b1561138e57604051630796d94560e01b815260040160405180910390fd5b61139a84848484612780565b50505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906113d95750333014155b156113f757604051630796d94560e01b815260040160405180910390fd5b60405163cef6d20960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cef6d2099061144d90899089908990899089908990600401614a17565b600060405180830381600087803b15801561146757600080fd5b505af115801561147b573d6000803e3d6000fd5b50505050505050505050565b604051631aab3f0d60e11b8152306004820152600060248201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906335567e1a906044016112f6565b60008080600080516020614e1683398151915290506000816001016000878760405160200161150d929190614a80565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825180840190935280548084526001909101549290910182905297909650945050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906115935750333014155b156115b157604051630796d94560e01b815260040160405180910390fd5b604051600080516020614e16833981519152906000906115d79085908590602001614a80565b60408051601f198184030181528282528051602091820120600081815260018088018452908490208585019094528354808652930154918401829052935081158015611621575080155b1561164757604051631a36430d60e31b8152600481018590526024015b60405180910390fd5b6002850154600181148015611664575085546001600160a01b0316155b156116825760405163c4c8547360e01b815260040160405180910390fd5b60005b611690600183614aa6565b81101561171557858760020182815481106116ad576116ad614ab9565b90600052602060002001540361170d57600287016116cc600184614aa6565b815481106116dc576116dc614ab9565b90600052602060002001548760020182815481106116fc576116fc614ab9565b600091825260209091200155611715565b600101611685565b508560020180548061172957611729614acf565b60008281526020808220830160001990810183905590920190925586825260018881018252604080842084815590910192909255815185815290810184905286917facf0e8088062f44f734bbcb5223794fd8bb6f6db1c199cb6a72df119d002a71b910160405180910390a25050505050505050565b6060336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146117ea57604051630692ce8160e21b815260040160405180910390fd5b83600881901b6117fe82600160f81b6128fd565b1561187f57366000611810878761290f565b90925090506118208360006128fd565b156118365761182f82826129a8565b9450611878565b61184483600160f81b6128fd565b156118535761182f8282612a69565b6040516308c3ee0360e11b81526001600160f81b03198416600482015260240161163e565b5050611a07565b61188a8260006128fd565b156119e25760008036600061189f8989612b96565b6040805160018082528183019092529498509296509094509250816020015b60608152602001906001900390816118be57905050965060006118e186826128fd565b15611915576118f28585858561264e565b8860008151811061190557611905614ab9565b60200260200101819052506119d8565b61192386600160f81b6128fd565b156119b35761193485858585612be7565b8960008151811061194757611947614ab9565b60209081029190910101529050806119ae577fe723f28f104e46b47fd3531f3608374ac226bcf3ddda334a23a266453e0efdb760008960008151811061198f5761198f614ab9565b60200260200101516040516119a5929190614ae5565b60405180910390a15b6119d8565b6040516308c3ee0360e11b81526001600160f81b03198716600482015260240161163e565b5050505050611a07565b604051632e5bf3f960e21b81526001600160f81b03198316600482015260240161163e565b50509392505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a5957604051636b31ba1560e11b815260040160405180910390fd5b82600881901b611a6d82600160f81b6128fd565b15611ac857366000611a7f868661290f565b9092509050611a8f8360006128fd565b15611aa457611a9e82826129a8565b50611ac1565b611ab283600160f81b6128fd565b1561185357611a9e8282612a69565b5050610c02565b611ad38260006128fd565b156119e257600080366000611ae88888612b96565b9350935093509350611afe85600060f81b6128fd565b15611b1557611b0f8484848461264e565b50611c0a565b611b2385600160f81b6128fd565b15611be557604080516001808252818301909252600091816020015b6060815260200190600190039081611b3f5790505090506000611b6486868686612be7565b83600081518110611b7757611b77614ab9565b6020908102919091010152905080611bde577fe723f28f104e46b47fd3531f3608374ac226bcf3ddda334a23a266453e0efdb7600083600081518110611bbf57611bbf614ab9565b6020026020010151604051611bd5929190614ae5565b60405180910390a15b5050611c0a565b6040516308c3ee0360e11b81526001600160f81b03198616600482015260240161163e565b50505050610c02565b60007fbc37962d8bd1d319c95199bdfda6d3f92baa8903a61b32d5f4ec1f4b36a3bc18611c436020840184614712565b6020840135611c556040860186614970565b604051611c63929190614a80565b604051908190039020611c796060870187614970565b604051611c87929190614a80565b604051908190039020608087013560a088013560c0890135611cac60e08b018b614970565b604051611cba929190614a80565b60408051918290038220602083019a909a526001600160a01b03988916908201526060810196909652608086019490945260a085019290925260c084015260e08301526101008201526101208101929092527f00000000000000000000000000000000000000000000000000000000000000001661014082015261016001604051602081830303815290604052805190602001209050919050565b6000611d5f612185565b5063f23a6e6160e01b95945050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590611daa5750333014155b15611dc857604051630796d94560e01b815260040160405180910390fd5b611dd181612684565b50565b6000611dde612185565b6001600160e01b031982166335a4725960e21b1480611e0d57506001600160e01b03198216630a85bd0160e11b145b80611e2857506001600160e01b03198216630271189760e51b145b80611e4357506001600160e01b031982166301ffc9a760e01b145b806108d8575050630b135d3f60e11b6001600160e01b03198216145b919050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015611ebd57507f000000000000000000000000000000000000000000000000000000000000000046145b15611ee757507f000000000000000000000000000000000000000000000000000000000000000090565b6110d3604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b856001600160a01b038916158015611fa5575080155b8015611fae5750815b15611fcc576040516312da594d60e11b815260040160405180910390fd5b8085141580611fdb5750808314155b1561200a5760405163a297991b60e01b815260048101829052602481018690526044810184905260640161163e565b81156120ff57600080516020614e3683398151915254600080516020614e168339815191529080156120fc5760005b818110156120ed57600083600201828154811061205857612058614ab9565b6000918252602080832090910154808352600180880180845260408086208151808301835281548152938101805485880190815286895293909652869055949093558051925193519194509284927facf0e8088062f44f734bbcb5223794fd8bb6f6db1c199cb6a72df119d002a71b926120db9290918252602082015260400190565b60405180910390a25050600101612039565b506120fc600283016000613cd1565b50505b60005b818110156121705761216889898381811061211f5761211f614ab9565b90506020028101906121319190614970565b89898581811061214357612143614ab9565b9050602002013588888681811061215c5761215c614ab9565b90506020020135612780565b600101612102565b5061217a89612684565b505050505050505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061220c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612200600080516020614e56833981519152546001600160a01b031690565b6001600160a01b031614155b15610ea65760405163703e46dd60e11b815260040160405180910390fd5b60008160418190036122c757600080516020614e16833981519152546001600160a01b03166001600160a01b03166122988686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c1892505050565b6001600160a01b0316036122b65750630b135d3f60e11b90506109b7565b506001600160e01b031990506109b7565b60608110156122e157506001600160e01b031990506109b7565b600080516020614e1683398151915260006122ff6020828789614afe565b61230891614b28565b60008181526001808501602090815260409283902083518085019094528054808552920154908301529192509015801561234457506020810151155b1561235e57506001600160e01b031993506109b792505050565b8360601480156123b257506123b28888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050855160208701519092509050612c42565b156123cb5750630b135d3f60e11b93506109b792505050565b8360601415801561242057506124208888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050855160208701519092509050612ce0565b156124395750630b135d3f60e11b93506109b792505050565b506001600160e01b031993506109b792505050565b60008061246883612463610100870187614970565b61222a565b90506374eca2c160e11b6001600160e01b031982160161248c5760009150506108d8565b5060019392505050565b8015611dd157604051600090339060001990849084818181858888f193505050503d80600081146124e3576040519150601f19603f3d011682016040523d82523d6000602084013e6124e8565b606091505b505060408051848152821515602082015291925033917fa427c7d47f24d01b170779a7600b1d4c0d7cdbabaa0f19c4f0e6182053ffc931910160405180910390a25050565b600080516020614e3683398151915254600080516020614e168339815191529060005b818110156125a05782600101600084600201838154811061257357612573614ab9565b60009182526020808320909101548352820192909252604001812081815560019081019190915501612550565b506125af600283016000613cd1565b81546001600160a01b03191682556040517feb09d532980c3cc73dcad99b80e264204a667a54cbb7b63ec8d68dcb1c7096be90600090a15050565b6125f2612185565b6125fb82612d43565b610db48282612d9a565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ea65760405163703e46dd60e11b815260040160405180910390fd5b60405181838237600038838387895af161266b573d6000823e3d81fd5b3d8152602081013d6000823e3d01604052949350505050565b600080516020614e3683398151915254600080516020614e16833981519152901580156126b857506001600160a01b038216155b156126d65760405163c4c8547360e01b815260040160405180910390fd5b80546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60606110d37f00000000000000000000000000000000000000000000000000000000000000006000612e5c565b60606110d37f00000000000000000000000000000000000000000000000000000000000000006001612e5c565b61278a8282612f07565b6127b1576040516313c3d61f60e01b8152600481018390526024810182905260440161163e565b600084846040516020016127c6929190614a80565b6040516020818303038152906040528051906020012090508484905060000361280257604051637e25658160e11b815260040160405180910390fd5b60008181527fa2b1bcb5e16cee2a8898b49cb0c3605e70c16f429f6002ed8b1bc5612a694901602052604090208054600080516020614e1683398151915291901515806128525750600181015415155b15612873576040516361db108160e01b81526004810184905260240161163e565b604080518082018252868152602080820187815260008781526001808801845285822094518555915193820193909355600286018054918201815583529120018490555183907fd00539cb08a7c24166308150d64d603150c01baf89d3d3e4c6063d6db7c6983d906128ec908a908a908a908a90614b46565b60405180910390a250505050505050565b6001600160f81b031990811691161490565b366000833580850160208587010360208201945081359350808460051b8301118360401c17156129475763ba597e7e6000526004601cfd5b831561299e578392505b6001830392508260051b850135915081850160408101358082018381358201118460408501111782861782351760401c17156129955763ba597e7e6000526004601cfd5b50505082612951575b5050509250929050565b606081806001600160401b038111156129c3576129c3613e99565b6040519080825280602002602001820160405280156129f657816020015b60608152602001906001900390816129e15790505b50915060005b81811015612a615736858583818110612a1757612a17614ab9565b9050602002810190612a299190614b6d565b9050612a3b610e2e6020830183614712565b848381518110612a4d57612a4d614ab9565b6020908102919091010152506001016129fc565b505092915050565b606081806001600160401b03811115612a8457612a84613e99565b604051908082528060200260200182016040528015612ab757816020015b6060815260200190600190039081612aa25790505b50915060005b81811015612a615736858583818110612ad857612ad8614ab9565b9050602002810190612aea9190614b6d565b90506000612b15612afe6020840184614712565b6020840135612b106040860186614970565b612be7565b868581518110612b2757612b27614ab9565b6020908102919091010152905080612b8c577fe723f28f104e46b47fd3531f3608374ac226bcf3ddda334a23a266453e0efdb783868581518110612b6d57612b6d614ab9565b6020026020010151604051612b83929190614ae5565b60405180910390a15b5050600101612abd565b6000803681612ba86014828789614afe565b612bb191614b8d565b60601c9350612bc4603460148789614afe565b612bcd91614b28565b9250612bdc8560348189614afe565b949793965094505050565b604051600090828482376000388483888a5af191503d8152602081013d6000823e3d81016040525094509492505050565b600080600080612c288686612f6a565b925092509250612c388282612fb7565b5090949350505050565b6000806000612c5086613070565b915091506000600288604051602001612c6b91815260200190565b60408051601f1981840301815290829052612c8591614bc0565b602060405180830381855afa158015612ca2573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612cc5919061472f565b9050612cd48184848989613092565b98975050505050505050565b600080612cec85613241565b9050612d3986604051602001612d0491815260200190565b60408051601f198184030181529181528301516060840151608085015160a086015160c0870151875160208901518c8c6132bf565b9695505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590612d7c5750333014155b15611dd157604051630796d94560e01b815260040160405180910390fd5b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612df4575060408051601f3d908101601f19168201909252612df19181019061472f565b60015b612e1c57604051634c9c8ce360e01b81526001600160a01b038316600482015260240161163e565b600080516020614e568339815191528114612e4d57604051632a87526960e21b81526004810182905260240161163e565b612e57838361345d565b505050565b606060ff8314612e7657612e6f836134b3565b90506108d8565b818054612e8290614bd2565b80601f0160208091040260200160405190810160405280929190818152602001828054612eae90614bd2565b8015612efb5780601f10612ed057610100808354040283529160200191612efb565b820191906000526020600020905b815481529060010190602001808311612ede57829003601f168201915b505050505090506108d8565b60006109b76ffffffffeffffffffffffffffffffffff60601b197fffffffff00000001000000000000000000000000fffffffffffffffffffffffc7f5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b86866134f2565b60008060008351604103612fa45760208401516040850151606086015160001a612f968882858561359d565b955095509550505050612fb0565b50508151600091506002905b9250925092565b6000826003811115612fcb57612fcb614c06565b03612fd4575050565b6001826003811115612fe857612fe8614c06565b036130065760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561301a5761301a614c06565b0361303b5760405163fce698f760e01b81526004810182905260240161163e565b600382600381111561304f5761304f614c06565b03610db4576040516335e2f38360e21b81526004810182905260240161163e565b600080828060200190518101906130879190614c1c565b909590945092505050565b60006130bf60027fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551614c60565b8411156130ce575060006112a2565b6040805160208101889052908101869052606081018590526080810184905260a0810183905260009060c00160405160208183030381529060405290506000806101006001600160a01b0316836040516131289190614bc0565b600060405180830381855afa9150503d8060008114613163576040519150601f19603f3d011682016040523d82523d6000602084013e613168565b606091505b5080519193509150151582801561317c5750805b156131a35781806020019051810190613195919061472f565b6001149450505050506112a2565b60405163a1f3128160e01b8152600481018b9052602481018a905260448101899052606481018890526084810187905273__$b8f96b288d4d0429e38b8ed50fd423070f$__9063a1f312819060a401602060405180830381865af415801561320f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132339190614953565b9a9950505050505050505050565b6132836040518060e001604052806000815260200160008152602001606081526020016000151581526020016060815260200160608152602001600081525090565b818060200190518101906132979190614cc7565b60c089015260a088015260808701521515606086015260408501526020840152825250919050565b600060258a5110806132f957506132f78a6020815181106132e2576132e2614ab9565b01602001516001600160f81b0319168a61366c565b155b1561330657506000613233565b6000886133128d6136d2565b8960405160200161332593929190614d86565b60408051601f198184030181528282019091526015825274113a3cb832911d113bb2b130baba34371733b2ba1160591b6020830152915061336781838a6138df565b61337657600092505050613233565b60006002836040516133889190614bc0565b602060405180830381855afa1580156133a5573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906133c8919061472f565b9050600060028e836040516020016133e1929190614dc9565b60408051601f19818403018152908290526133fb91614bc0565b602060405180830381855afa158015613418573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061343b919061472f565b905061344a818a8a8a8a613092565b9f9e505050505050505050505050505050565b6134668261398e565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156134ab57612e5782826139f3565b610db4613a60565b606060006134c083613a7f565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600082158015613500575081155b8061350b5750858310155b806135165750858210155b15613523575060006112a2565b6000868061353357613533614c4a565b83840990506000878061354857613548614c4a565b888061355657613556614c4a565b888709898061356757613567614c4a565b878b8061357657613576614c4a565b898a0909089050878061358b5761358b614c4a565b86820891909114979650505050505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156135d85750600091506003905082613662565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561362c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661365857506000925060019150829050613662565b9250600091508190505b9450945094915050565b6000600160f81b83811614613683575060006108d8565b8180156136965750600160fa1b83811614155b156136a3575060006108d8565b600160fb1b838116146136c957600f60fc1b600160fc1b8416016136c9575060006108d8565b50600192915050565b606060006136df83613aa7565b9050600081905060006002825111801561372a575081600283516137039190614aa6565b8151811061371357613713614ab9565b6020910101516001600160f81b031916603d60f81b145b1561373757506002613782565b60018251118015613779575081600183516137529190614aa6565b8151811061376257613762614ab9565b6020910101516001600160f81b031916603d60f81b145b15613782575060015b60008183516137919190614aa6565b90506000816001600160401b038111156137ad576137ad613e99565b6040519080825280601f01601f1916602001820160405280156137d7576020820181803683370190505b50905060005b828110156138d4578481815181106137f7576137f7614ab9565b01602001516001600160f81b031916602b60f81b0361384357602d60f81b82828151811061382757613827614ab9565b60200101906001600160f81b031916908160001a9053506138cc565b84818151811061385557613855614ab9565b01602001516001600160f81b031916602f60f81b0361388557605f60f81b82828151811061382757613827614ab9565b84818151811061389757613897614ab9565b602001015160f81c60f81b8282815181106138b4576138b4614ab9565b60200101906001600160f81b031916908160001a9053505b6001016137dd565b509695505050505050565b825182516000918591859190845b8281101561397f57816139008289614deb565b10613913576000955050505050506109b7565b8361391e8289614deb565b8151811061392e5761392e614ab9565b602001015160f81c60f81b6001600160f81b03191685828151811061395557613955614ab9565b01602001516001600160f81b03191614613977576000955050505050506109b7565b6001016138ed565b50600198975050505050505050565b806001600160a01b03163b6000036139c457604051634c9c8ce360e01b81526001600160a01b038216600482015260240161163e565b600080516020614e5683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051613a109190614bc0565b600060405180830381855af49150503d8060008114613a4b576040519150601f19603f3d011682016040523d82523d6000602084013e613a50565b606091505b50915091506112a2858383613acd565b3415610ea65760405163b398979f60e01b815260040160405180910390fd5b600060ff8216601f8111156108d857604051632cd44ac360e21b815260040160405180910390fd5b60606108d882604051806060016040528060408152602001614e76604091396001613b29565b606082613ae257613add82613ca8565b6109b7565b8151158015613af957506001600160a01b0384163b155b15613b2257604051639996b31560e01b81526001600160a01b038516600482015260240161163e565b50806109b7565b60608351600003613b4957506040805160208101909152600081526109b7565b600082613b7a57600385516004613b609190614dfe565b613b6b906002614deb565b613b759190614c60565b613b9f565b600385516002613b8a9190614deb565b613b949190614c60565b613b9f906004614dfe565b90506000816001600160401b03811115613bbb57613bbb613e99565b6040519080825280601f01601f191660200182016040528015613be5576020820181803683370190505b50905060018501602082018788518901602081018051600082525b82841015613c5b576003840193508351603f8160121c168701518653600186019550603f81600c1c168701518653600186019550603f8160061c168701518653600186019550603f8116870151865350600185019450613c00565b905250508515613c9c57600388510660018114613c7f5760028114613c9257613c9a565b603d6001830353603d6002830353613c9a565b603d60018303535b505b50909695505050505050565b805115613cb85780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b5080546000825590600052602060002090810190611dd191905b80821115613cff5760008155600101613ceb565b5090565b600060208284031215613d1557600080fd5b81356001600160e01b0319811681146109b757600080fd5b60006101208284031215613d4057600080fd5b50919050565b600060208284031215613d5857600080fd5b81356001600160401b03811115613d6e57600080fd5b613d7a84828501613d2d565b949350505050565b6001600160a01b0381168114611dd157600080fd5b8035611e5f81613d82565b60008083601f840112613db457600080fd5b5081356001600160401b03811115613dcb57600080fd5b6020830191508360208260051b8501011115613de657600080fd5b9250929050565b60008060008060008060006080888a031215613e0857600080fd5b8735613e1381613d82565b965060208801356001600160401b0380821115613e2f57600080fd5b613e3b8b838c01613da2565b909850965060408a0135915080821115613e5457600080fd5b613e608b838c01613da2565b909650945060608a0135915080821115613e7957600080fd5b50613e868a828b01613da2565b989b979a50959850939692959293505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613ed757613ed7613e99565b604052919050565b60006001600160401b03821115613ef857613ef8613e99565b50601f01601f191660200190565b600082601f830112613f1757600080fd5b8135613f2a613f2582613edf565b613eaf565b818152846020838601011115613f3f57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215613f7257600080fd5b8435613f7d81613d82565b93506020850135613f8d81613d82565b92506040850135915060608501356001600160401b03811115613faf57600080fd5b613fbb87828801613f06565b91505092959194509250565b60008083601f840112613fd957600080fd5b5081356001600160401b03811115613ff057600080fd5b602083019150836020828501011115613de657600080fd5b60008060006040848603121561401d57600080fd5b8335925060208401356001600160401b0381111561403a57600080fd5b61404686828701613fc7565b9497909650939450505050565b60008060006060848603121561406857600080fd5b83356001600160401b0381111561407e57600080fd5b61408a86828701613d2d565b9660208601359650604090950135949350505050565b6020808252825182820181905260009190848201906040850190845b81811015613c9c578351835292840192918401916001016140bc565b6000602082840312156140ea57600080fd5b81356001600160c01b03811681146109b757600080fd5b60006020828403121561411357600080fd5b81356001600160401b0381111561412957600080fd5b820160c081850312156109b757600080fd5b60006020828403121561414d57600080fd5b5035919050565b6000806040838503121561416757600080fd5b823561417281613d82565b915060208301356001600160401b0381111561418d57600080fd5b61419985828601613f06565b9150509250929050565b6000602082840312156141b557600080fd5b81356001600160401b038111156141cb57600080fd5b8201606081850312156109b757600080fd5b8015158114611dd157600080fd5b8035611e5f816141dd565b600080600080600080600080600060c08a8c03121561421457600080fd5b893560ff8116811461422557600080fd5b985061423360208b01613d97565b975060408a01356001600160401b038082111561424f57600080fd5b61425b8d838e01613da2565b909950975060608c013591508082111561427457600080fd5b6142808d838e01613da2565b909750955060808c013591508082111561429957600080fd5b506142a68c828d01613da2565b90945092506142b9905060a08b016141eb565b90509295985092959850929598565b600080604083850312156142db57600080fd5b82356142e681613d82565b946020939093013593505050565b60005b8381101561430f5781810151838201526020016142f7565b50506000910152565b600081518084526143308160208601602086016142f4565b601f01601f19169290920160200192915050565b60ff60f81b881681526000602060e0602084015261436560e084018a614318565b8381036040850152614377818a614318565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b818110156143cb578351835292840192918401916001016143af565b50909c9b505050505050505050505050565b6020815260006109b76020830184614318565b600082601f83011261440157600080fd5b813560206001600160401b0382111561441c5761441c613e99565b8160051b61442b828201613eaf565b928352848101820192828101908785111561444557600080fd5b83870192505b848310156144645782358252918301919083019061444b565b979650505050505050565b600080600080600060a0868803121561448757600080fd5b853561449281613d82565b945060208601356144a281613d82565b935060408601356001600160401b03808211156144be57600080fd5b6144ca89838a016143f0565b945060608801359150808211156144e057600080fd5b6144ec89838a016143f0565b9350608088013591508082111561450257600080fd5b5061450f88828901613f06565b9150509295509295909350565b6000806000806060858703121561453257600080fd5b84356001600160401b0381111561454857600080fd5b61455487828801613fc7565b90989097506020870135966040013595509350505050565b6000806000806000806060878903121561458557600080fd5b86356001600160401b038082111561459c57600080fd5b6145a88a838b01613da2565b909850965060208901359150808211156145c157600080fd5b6145cd8a838b01613da2565b909650945060408901359150808211156145e657600080fd5b506145f389828a01613da2565b979a9699509497509295939492505050565b6000806020838503121561461857600080fd5b82356001600160401b0381111561462e57600080fd5b61463a85828601613fc7565b90969095509350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b8281101561469d57603f1988860301845261468b858351614318565b9450928501929085019060010161466f565b5092979650505050505050565b600080600080600060a086880312156146c257600080fd5b85356146cd81613d82565b945060208601356146dd81613d82565b9350604086013592506060860135915060808601356001600160401b0381111561470657600080fd5b61450f88828901613f06565b60006020828403121561472457600080fd5b81356109b781613d82565b60006020828403121561474157600080fd5b5051919050565b6000808335601e1984360301811261475f57600080fd5b83016020810192503590506001600160401b0381111561477e57600080fd5b803603821315613de657600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008383855260208086019550808560051b830101846000805b8881101561486957858403601f19018a52823536899003605e190181126147f5578283fd5b88016060813561480481613d82565b6001600160a01b0316865261481b82880183614748565b828989015261482d838901828461478d565b92505050604061483f81840184614748565b93508783038289015261485383858361478d565b9d89019d975050509386019350506001016147d0565b509198975050505050505050565b602081526000823561488881613d82565b6001600160a01b03908116602084810191909152840135906148a982613d82565b80821660408501525050604083013560608301526060830135601e198436030181126148d457600080fd5b83016020810190356001600160401b038111156148f057600080fd5b8060051b360382131561490257600080fd5b60c0608085015261491760e0850182846147b6565b915050608084013560a084015261493160a0850185614748565b848303601f190160c0860152612d3983828461478d565b8051611e5f816141dd565b60006020828403121561496557600080fd5b81516109b7816141dd565b6000808335601e1984360301811261498757600080fd5b8301803591506001600160401b038211156149a157600080fd5b602001915036819003821315613de657600080fd5b6000838385526020808601955060208560051b8301018460005b87811015614a0a57848303601f190189526149eb8288614748565b6149f685828461478d565b9a86019a94505050908301906001016149d0565b5090979650505050505050565b606081526000614a2b60608301888a6149b6565b8281036020848101919091528682528791810160005b88811015614a5d57833582529282019290820190600101614a41565b508481036040860152614a718187896149b6565b9b9a5050505050505050505050565b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156108d8576108d8614a90565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b8281526040602082015260006109b46040830184614318565b60008085851115614b0e57600080fd5b83861115614b1b57600080fd5b5050820193919092039150565b803560208310156108d857600019602084900360031b1b1692915050565b606081526000614b5a60608301868861478d565b6020830194909452506040015292915050565b60008235605e19833603018112614b8357600080fd5b9190910192915050565b6bffffffffffffffffffffffff198135818116916014851015612a615760149490940360031b84901b1690921692915050565b60008251614b838184602087016142f4565b600181811c90821680614be657607f821691505b602082108103613d4057634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b600080600060608486031215614c3157600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052601260045260246000fd5b600082614c7d57634e487b7160e01b600052601260045260246000fd5b500490565b600082601f830112614c9357600080fd5b8151614ca1613f2582613edf565b818152846020838601011115614cb657600080fd5b613d7a8260208301602087016142f4565b600080600080600080600080610100898b031215614ce457600080fd5b88519750602089015196506040890151955060608901516001600160401b0380821115614d1057600080fd5b614d1c8c838d01614c82565b9650614d2a60808c01614948565b955060a08b0151915080821115614d4057600080fd5b614d4c8c838d01614c82565b945060c08b0151915080821115614d6257600080fd5b50614d6f8b828c01614c82565b92505060e089015190509295985092959890939650565b60008451614d988184602089016142f4565b845190830190614dac8183602089016142f4565b8451910190614dbf8183602088016142f4565b0195945050505050565b60008351614ddb8184602088016142f4565b9190910191825250602001919050565b808201808211156108d8576108d8614a90565b80820281158282048414176108d8576108d8614a9056fea2b1bcb5e16cee2a8898b49cb0c3605e70c16f429f6002ed8b1bc5612a694900a2b1bcb5e16cee2a8898b49cb0c3605e70c16f429f6002ed8b1bc5612a694902360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220d641f685fbc825f5c1c752f10b46c0f81d9143a8b41e10871b92196f03c53fe864736f6c63430008170033\" as const;", "export const abi = [] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203d81846f7dee1e1b6ac5ec7facf37349f677e4fb70664eb5852e6414aa31b93064736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_delegator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getIsUsed\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_delegator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_id\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"id_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"UsedId\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"redeemer\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"id\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b50610518806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063414c3e3314610067578063595dce4814610083578063a145832a146100ab578063b99deb0e146100be578063d3eddcc514610067578063ed46336714610067575b600080fd5b610081610075366004610379565b50505050505050505050565b005b610096610091366004610446565b6100df565b60405190151581526020015b60405180910390f35b6100816100b9366004610379565b610116565b6100d16100cc366004610482565b61028c565b6040519081526020016100a2565b6001600160a01b03808416600090815260208181526040808320938616835292905290812061010e90836102ef565b949350505050565b85600881901b6001600160f81b03198116156101875760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b60648201526084015b60405180910390fd5b5060006101948c8c61028c565b90506101a13385836100df565b156101ee5760405162461bcd60e51b815260206004820152601a60248201527f4964456e666f726365723a69642d616c72656164792d75736564000000000000604482015260640161017e565b336000908152602081815260408083206001600160a01b03881684528252808320600885901c845290915290208054600160ff84161b179055826001600160a01b0316846001600160a01b0316336001600160a01b03167f6286af1aaf28b34723a53056e5608eabb40c823d1ce093ff371cf08c502431d68460405161027691815260200190565b60405180910390a4505050505050505050505050565b6000602082146102de5760405162461bcd60e51b815260206004820152601f60248201527f4964456e666f726365723a696e76616c69642d7465726d732d6c656e67746800604482015260640161017e565b6102e882846104c4565b9392505050565b600881901c600090815260208390526040902054600160ff83161b1615155b92915050565b60008083601f84011261032657600080fd5b50813567ffffffffffffffff81111561033e57600080fd5b60208301915083602082850101111561035657600080fd5b9250929050565b80356001600160a01b038116811461037457600080fd5b919050565b60008060008060008060008060008060e08b8d03121561039857600080fd5b8a3567ffffffffffffffff808211156103b057600080fd5b6103bc8e838f01610314565b909c509a5060208d01359150808211156103d557600080fd5b6103e18e838f01610314565b909a50985060408d0135975060608d013591508082111561040157600080fd5b5061040e8d828e01610314565b90965094505060808b0135925061042760a08c0161035d565b915061043560c08c0161035d565b90509295989b9194979a5092959850565b60008060006060848603121561045b57600080fd5b6104648461035d565b92506104726020850161035d565b9150604084013590509250925092565b6000806020838503121561049557600080fd5b823567ffffffffffffffff8111156104ac57600080fd5b6104b885828601610314565b90969095509350505050565b8035602083101561030e57600019602084900360031b1b169291505056fea26469706673582212204a96dd3b9054d6055c3a36da342d1ecb848915fb596c41cf0571e73299243bf864736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"callCounts\",\n    \"inputs\": [\n      {\n        \"name\": \"delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"count\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"limit_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"IncreasedCount\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"redeemer\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"limit\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"callCount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b506104e9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806319054d8914610067578063414c3e33146100a1578063a145832a146100bd578063b99deb0e146100d0578063d3eddcc5146100a1578063ed463367146100a1575b600080fd5b61008f6100753660046102ec565b600060208181529281526040808220909352908152205481565b60405190815260200160405180910390f35b6100bb6100af36600461035f565b50505050505050505050565b005b6100bb6100cb36600461035f565b6100e3565b61008f6100de36600461042c565b610244565b85600881901b6100f48160006102b9565b6101535760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b60648201526084015b60405180910390fd5b5060006101608c8c610244565b33600090815260208181526040808320898452909152812080549293509091829061018a9061046e565b91829055509050818111156101ed5760405162461bcd60e51b815260206004820152602360248201527f4c696d6974656443616c6c73456e666f726365723a6c696d69742d657863656560448201526219195960ea1b606482015260840161014a565b604080518381526020810183905287916001600160a01b0387169133917f449da07f2c06c9d1a6b19d2454ffe749e8cf991d22f686e076a1a4844c5ff370910160405180910390a450505050505050505050505050565b6000602082146102a85760405162461bcd60e51b815260206004820152602960248201527f4c696d6974656443616c6c73456e666f726365723a696e76616c69642d7465726044820152680dae65ad8cadccee8d60bb1b606482015260840161014a565b6102b28284610495565b9392505050565b6001600160f81b0319828116908216145b92915050565b80356001600160a01b03811681146102e757600080fd5b919050565b600080604083850312156102ff57600080fd5b610308836102d0565b946020939093013593505050565b60008083601f84011261032857600080fd5b50813567ffffffffffffffff81111561034057600080fd5b60208301915083602082850101111561035857600080fd5b9250929050565b60008060008060008060008060008060e08b8d03121561037e57600080fd5b8a3567ffffffffffffffff8082111561039657600080fd5b6103a28e838f01610316565b909c509a5060208d01359150808211156103bb57600080fd5b6103c78e838f01610316565b909a50985060408d0135975060608d01359150808211156103e757600080fd5b506103f48d828e01610316565b90965094505060808b0135925061040d60a08c016102d0565b915061041b60c08c016102d0565b90509295989b9194979a5092959850565b6000806020838503121561043f57600080fd5b823567ffffffffffffffff81111561045657600080fd5b61046285828601610316565b90969095509350505050565b60006001820161048e57634e487b7160e01b600052601160045260246000fd5b5060010190565b803560208310156102ca57600019602084900360031b1b169291505056fea264697066735822122058fb87f0b8e8aa4745b9ef395d8bd725c313f876828d7be4c479f4049d6644ac64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"getNonce\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"key\",\n        \"type\": \"uint192\",\n        \"internalType\": \"uint192\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"nonce\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"incrementNonce\",\n    \"inputs\": [\n      {\n        \"name\": \"key\",\n        \"type\": \"uint192\",\n        \"internalType\": \"uint192\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f3b6a0af2d4dff4702805c39f40ed768201654e38f4d05a5ef7ae0498666b77964736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getAvailableAmount\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"availableAmount_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"initialAmount_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"maxAmount_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"amountPerSecond_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"startTime_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"streamingAllowances\",\n    \"inputs\": [\n      {\n        \"name\": \"delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"initialAmount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"maxAmount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"amountPerSecond\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"startTime\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"spent\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"IncreasedSpentMap\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"redeemer\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"initialAmount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"maxAmount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"amountPerSecond\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"startTime\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"spent\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"lastUpdateTimestamp\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b506109a4806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063d3eddcc51161005b578063d3eddcc514610082578063ed46336714610082578063ee73d772146100e9578063fb7d2c5b1461010a57600080fd5b8063414c3e3314610082578063a145832a1461009e578063b99deb0e146100b1575b600080fd5b61009c610090366004610765565b50505050505050505050565b005b61009c6100ac366004610765565b610177565b6100c46100bf366004610832565b61025c565b6040805194855260208501939093529183015260608201526080015b60405180910390f35b6100fc6100f7366004610874565b610338565b6040519081526020016100e0565b61014f610118366004610874565b6000602081815292815260408082209093529081522080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0016100e0565b856101838160006103a3565b6101d45760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d7479706560448201526064015b60405180910390fd5b86600881901b6101e58160006103a3565b61023f5760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b60648201526084016101cb565b5061024e8c8c898989886103ba565b505050505050505050505050565b6000808080608085146102cb5760405162461bcd60e51b815260206004820152603160248201527f4e6174697665546f6b656e53747265616d696e67456e666f726365723a696e766044820152700c2d8d2c85ae8cae4dae65ad8cadccee8d607b1b60648201526084016101cb565b6102d960206000878961089e565b6102e2916108c8565b93506102f260406020878961089e565b6102fb916108c8565b925061030b60606040878961089e565b610314916108c8565b915061032460806060878961089e565b61032d916108c8565b939692955090935050565b6001600160a01b0382166000908152602081815260408083208484528252808320815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301529061039b9061062e565b949350505050565b6001600160f81b0319828116908216145b92915050565b60006103c685856106af565b50509150506000806000806103db8b8b61025c565b93509350935093508383101561044b5760405162461bcd60e51b815260206004820152602f60248201527f4e6174697665546f6b656e53747265616d696e67456e666f726365723a696e7660448201526e185b1a590b5b585e0b585b5bdd5b9d608a1b60648201526084016101cb565b600081116104b85760405162461bcd60e51b815260206004820152603460248201527f4e6174697665546f6b656e53747265616d696e67456e666f726365723a696e76604482015273616c69642d7a65726f2d73746172742d74696d6560601b60648201526084016101cb565b336000908152602081815260408083208a8452909152812060048101549091036104f5578481556001810184905560028101839055600381018290555b6040805160a081018252825481526001830154602082015260028301549181019190915260038201546060820152600482015460808201526105369061062e565b86111561059d5760405162461bcd60e51b815260206004820152602f60248201527f4e6174697665546f6b656e53747265616d696e67456e666f726365723a616c6c60448201526e1bddd85b98d94b595e18d959591959608a1b60648201526084016101cb565b858160040160008282546105b191906108fc565b9091555050600481015460408051878152602081018790529081018590526060810184905260808101919091524260a082015288906001600160a01b0389169033907fa4d5df1d290378aabb8f054b2f3100faf35e2266bb7fbe661f947dfc686704ae9060c00160405180910390a4505050505050505050505050565b6000816060015142101561064457506000919050565b6000826060015142610656919061090f565b9050600081846040015161066a9190610922565b845161067691906108fc565b9050836020015181111561068b575060208301515b808460800151106106a0575060009392505050565b608084015161039b908261090f565b60008036816106c1601482878961089e565b6106ca91610939565b60601c93506106dd60346014878961089e565b6106e6916108c8565b92506106f5856034818961089e565b949793965094505050565b60008083601f84011261071257600080fd5b50813567ffffffffffffffff81111561072a57600080fd5b60208301915083602082850101111561074257600080fd5b9250929050565b80356001600160a01b038116811461076057600080fd5b919050565b60008060008060008060008060008060e08b8d03121561078457600080fd5b8a3567ffffffffffffffff8082111561079c57600080fd5b6107a88e838f01610700565b909c509a5060208d01359150808211156107c157600080fd5b6107cd8e838f01610700565b909a50985060408d0135975060608d01359150808211156107ed57600080fd5b506107fa8d828e01610700565b90965094505060808b0135925061081360a08c01610749565b915061082160c08c01610749565b90509295989b9194979a5092959850565b6000806020838503121561084557600080fd5b823567ffffffffffffffff81111561085c57600080fd5b61086885828601610700565b90969095509350505050565b6000806040838503121561088757600080fd5b61089083610749565b946020939093013593505050565b600080858511156108ae57600080fd5b838611156108bb57600080fd5b5050820193919092039150565b803560208310156103b457600019602084900360031b1b1692915050565b634e487b7160e01b600052601160045260246000fd5b808201808211156103b4576103b46108e6565b818103818111156103b4576103b46108e6565b80820281158282048414176103b4576103b46108e6565b6bffffffffffffffffffffffff1981358181169160148510156109665780818660140360031b1b83161692505b50509291505056fea264697066735822122052704058a3717c34d4c81be20ba9801f9b76f6f0c65ef9abba014d246806f21f64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHookCallCount\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b50610263806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063414c3e331461005c578063a145832a14610078578063d3eddcc51461008b578063e38ad59014610099578063ed4633671461005c575b600080fd5b61007661006a366004610139565b50505050505050505050565b005b610076610086366004610139565b6100b4565b610076610057366004610139565b6100a260005481565b60405190815260200160405180910390f35b6000805490806100c383610206565b919050555050505050505050505050565b60008083601f8401126100e657600080fd5b50813567ffffffffffffffff8111156100fe57600080fd5b60208301915083602082850101111561011657600080fd5b9250929050565b80356001600160a01b038116811461013457600080fd5b919050565b60008060008060008060008060008060e08b8d03121561015857600080fd5b8a3567ffffffffffffffff8082111561017057600080fd5b61017c8e838f016100d4565b909c509a5060208d013591508082111561019557600080fd5b6101a18e838f016100d4565b909a50985060408d0135975060608d01359150808211156101c157600080fd5b506101ce8d828e016100d4565b90965094505060808b013592506101e760a08c0161011d565b91506101f560c08c0161011d565b90509295989b9194979a5092959850565b60006001820161022657634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220bcf0049f14343021d3eb32b64d949a39aec074b673cc386de61163856ad518a964736f6c63430008170033\" as const;", "export const abi = [] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122074ec8ae00f245173ca026cab4a450417e87849694c5e94ec4fdf9b92eee9682e64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"constructor\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IDelegationManager\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_args\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_delegator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_args\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_delegator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_args\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_delegator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_args\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_delegator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"delegationManager\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IDelegationManager\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AddressEmptyCode\",\n    \"inputs\": [\n      {\n        \"name\": \"target\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AddressInsufficientBalance\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"FailedInnerCall\",\n    \"inputs\": []\n  }\n] as const;\n\n\nexport const bytecode = \"0x60a060405234801561001057600080fd5b50604051610fa1380380610fa183398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610efc6100a560003960008181609c0152818160f8015281816102010152818161030201526103f60152610efc6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063414c3e331461005c578063a145832a14610071578063d3eddcc514610084578063ea4d3c9b14610097578063ed463367146100da575b600080fd5b61006f61006a36600461084c565b6100ed565b005b61006f61007f36600461084c565b6101c7565b61006f61009236600461084c565b6102c8565b6100be7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b61006f6100e836600461084c565b6103bc565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461013e5760405162461bcd60e51b815260040161013590610918565b60405180910390fd5b6101bb8a8a8a8a6040518060a001604052808c81526020018b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602081018a90526001600160a01b03808a166040830152881660609091015263414c3e3360e01b6104ac565b50505050505050505050565b85600881901b6001600160f81b03198116156101f55760405162461bcd60e51b815260040161013590610968565b50336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461023e5760405162461bcd60e51b815260040161013590610918565b6102bb8b8b8b8b6040518060a001604052808d81526020018c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602081018b90526001600160a01b03808b16604083015289166060909101526350a2c19560e11b6104ac565b5050505050505050505050565b85600881901b6001600160f81b03198116156102f65760405162461bcd60e51b815260040161013590610968565b50336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461033f5760405162461bcd60e51b815260040161013590610918565b6102bb8b8b8b8b6040518060a001604052808d81526020018c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602081018b90526001600160a01b03808b166040830152891660609091015263d3eddcc560e01b6104ac565b85600881901b6001600160f81b03198116156103ea5760405162461bcd60e51b815260040161013590610968565b50336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104335760405162461bcd60e51b815260040161013590610918565b6102bb8b8b8b8b6040518060a001604052808d81526020018c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602081018b90526001600160a01b03808b166040830152891660609091015263ed46336760e01b5b60006104ba86880188610af1565b905060006104ca85870187610cf3565b905081518160000151106105355760405162461bcd60e51b815260206004820152602c60248201527f4c6f676963616c4f7257726170706572456e666f726365723a696e76616c696460448201526b05acee4deeae05ad2dcc8caf60a31b6064820152608401610135565b60008282600001518151811061054d5761054d610ddb565b602002602001015190506000816000015151905080836020015151146105d15760405162461bcd60e51b815260206004820152603360248201527f4c6f676963616c4f7257726170706572456e666f726365723a696e76616c696460448201527205ac6c2eccac2e85ac2e4cee65ad8cadccee8d606b1b6064820152608401610135565b60005b818110156102bb576106a8836000015182815181106105f5576105f5610ddb565b602002602001015160000151878560000151848151811061061857610618610ddb565b6020026020010151602001518760200151858151811061063a5761063a610ddb565b60200260200101518b600001518c602001518d604001518e606001518f608001516040516024016106719796959493929190610e41565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526106b1565b506001016105d4565b60606106bf838360006106c6565b9392505050565b6060814710156106eb5760405163cd78605960e01b8152306004820152602401610135565b600080856001600160a01b031684866040516107079190610eaa565b60006040518083038185875af1925050503d8060008114610744576040519150601f19603f3d011682016040523d82523d6000602084013e610749565b606091505b5091509150610759868383610763565b9695505050505050565b60608261077857610773826107bf565b6106bf565b815115801561078f57506001600160a01b0384163b155b156107b857604051639996b31560e01b81526001600160a01b0385166004820152602401610135565b50806106bf565b8051156107cf5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60008083601f8401126107fa57600080fd5b5081356001600160401b0381111561081157600080fd5b60208301915083602082850101111561082957600080fd5b9250929050565b80356001600160a01b038116811461084757600080fd5b919050565b60008060008060008060008060008060e08b8d03121561086b57600080fd5b8a356001600160401b038082111561088257600080fd5b61088e8e838f016107e8565b909c509a5060208d01359150808211156108a757600080fd5b6108b38e838f016107e8565b909a50985060408d0135975060608d01359150808211156108d357600080fd5b506108e08d828e016107e8565b90965094505060808b013592506108f960a08c01610830565b915061090760c08c01610830565b90509295989b9194979a5092959850565b60208082526030908201527f4c6f676963616c4f7257726170706572456e666f726365723a6f6e6c792d646560408201526f3632b3b0ba34b7b716b6b0b730b3b2b960811b606082015260800190565b60208082526025908201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6040820152642d7479706560d81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b604051602081016001600160401b03811182821017156109e5576109e56109ad565b60405290565b604051606081016001600160401b03811182821017156109e5576109e56109ad565b604080519081016001600160401b03811182821017156109e5576109e56109ad565b604051601f8201601f191681016001600160401b0381118282101715610a5757610a576109ad565b604052919050565b60006001600160401b03821115610a7857610a786109ad565b5060051b60200190565b600082601f830112610a9357600080fd5b81356001600160401b03811115610aac57610aac6109ad565b610abf601f8201601f1916602001610a2f565b818152846020838601011115610ad457600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215610b0357600080fd5b6001600160401b0382351115610b1857600080fd5b8135820183601f820112610b2b57600080fd5b610b3d610b388235610a5f565b610a2f565b81358082526020808301929160051b840101861015610b5b57600080fd5b602083015b6020843560051b850101811015610ce9576001600160401b0381351115610b8657600080fd5b6020813585018803601f19011215610b9d57600080fd5b610ba56109c3565b6001600160401b0360208335870101351115610bc057600080fd5b81358501602081013501603f81018913610bd957600080fd5b610be9610b386020830135610a5f565b602082810135808352908201919060051b83016040018b1015610c0b57600080fd5b604083015b6040602085013560051b850101811015610cd6576001600160401b0381351115610c3957600080fd5b803584016060818e03603f19011215610c5157600080fd5b610c596109eb565b610c6560408301610830565b81526001600160401b0360608301351115610c7f57600080fd5b610c928e60406060850135850101610a82565b60208201526001600160401b0360808301351115610caf57600080fd5b610cc28e60406080850135850101610a82565b604082015284525060209283019201610c10565b5083525050835260209283019201610b60565b5095945050505050565b60006020808385031215610d0657600080fd5b82356001600160401b0380821115610d1d57600080fd5b9084019060408287031215610d3157600080fd5b610d39610a0d565b823581528383013582811115610d4e57600080fd5b80840193505086601f840112610d6357600080fd5b8235610d71610b3882610a5f565b81815260059190911b84018501908581019089831115610d9057600080fd5b8686015b83811015610dc857803586811115610dac5760008081fd5b610dba8c8a838b0101610a82565b845250918701918701610d94565b5095830195909552509695505050505050565b634e487b7160e01b600052603260045260246000fd5b60005b83811015610e0c578181015183820152602001610df4565b50506000910152565b60008151808452610e2d816020860160208601610df1565b601f01601f19169290920160200192915050565b60e081526000610e5460e083018a610e15565b8281036020840152610e66818a610e15565b90508760408401528281036060840152610e808188610e15565b608084019690965250506001600160a01b0392831660a0820152911660c090910152949350505050565b60008251610ebc818460208701610df1565b919091019291505056fea2646970667358221220849f3e028a14dd0caba34e88e124f67834a95e85298a8ec49d35e542d61e676b64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHookCallCount\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHookCallCount\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b5061028c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063414c3e33146100675780637c46d3c814610083578063a145832a1461009e578063d3eddcc5146100b1578063e38ad590146100c4578063ed46336714610067575b600080fd5b610081610075366004610162565b50505050505050505050565b005b61008c60015481565b60405190815260200160405180910390f35b6100816100ac366004610162565b6100cd565b6100816100bf366004610162565b6100ed565b61008c60005481565b6000805490806100dc8361022f565b919050555050505050505050505050565b600180549060006100dc8361022f565b60008083601f84011261010f57600080fd5b50813567ffffffffffffffff81111561012757600080fd5b60208301915083602082850101111561013f57600080fd5b9250929050565b80356001600160a01b038116811461015d57600080fd5b919050565b60008060008060008060008060008060e08b8d03121561018157600080fd5b8a3567ffffffffffffffff8082111561019957600080fd5b6101a58e838f016100fd565b909c509a5060208d01359150808211156101be57600080fd5b6101ca8e838f016100fd565b909a50985060408d0135975060608d01359150808211156101ea57600080fd5b506101f78d828e016100fd565b90965094505060808b0135925061021060a08c01610146565b915061021e60c08c01610146565b90509295989b9194979a5092959850565b60006001820161024f57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220fbb59fec9ec7bf6cdda251d9d498ff456d0623f22ca1f4ef5f02ab03744fc44c64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"constructor\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IDelegationManager\"\n      },\n      {\n        \"name\": \"_argsEqualityCheckEnforcer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_args\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_delegator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"argsEqualityCheckEnforcer\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"delegationManager\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IDelegationManager\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"recipient_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"ValidatedPayment\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"recipient\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegator\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"redeemer\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x60c060405234801561001057600080fd5b506040516111b73803806111b783398101604081905261002f9161005e565b6001600160a01b039182166080521660a052610098565b6001600160a01b038116811461005b57600080fd5b50565b6000806040838503121561007157600080fd5b825161007c81610046565b602084015190925061008d81610046565b809150509250929050565b60805160a0516110e66100d16000396000818160a301526103c001526000818161011901528181610273015261065a01526110e66000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b99deb0e1161005b578063b99deb0e146100e2578063d3eddcc514610082578063ea4d3c9b14610114578063ed4633671461013b57600080fd5b8063414c3e3314610082578063a145832a14610082578063a42ff9311461009e575b600080fd5b61009c6100903660046108d5565b50505050505050505050565b005b6100c57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f56100f03660046109a2565b61014e565b604080516001600160a01b0390931683526020830191909152016100d9565b6100c57f000000000000000000000000000000000000000000000000000000000000000081565b61009c6101493660046108d5565b6101fc565b600080603483146101be5760405162461bcd60e51b815260206004820152602f60248201527f4e6174697665546f6b656e5061796d656e74456e666f726365723a696e76616c60448201526e0d2c85ae8cae4dae65ad8cadccee8d608b1b60648201526084015b60405180910390fd5b6101cc6014600085876109e4565b6101d591610a0e565b60601c91506101e783601481876109e4565b6101f091610a43565b60001c90509250929050565b85600881901b61020d8160006107ac565b6102675760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b60648201526084016101b5565b50336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102fb5760405162461bcd60e51b815260206004820152603260248201527f4e6174697665546f6b656e5061796d656e74456e666f726365723a6f6e6c792d6044820152713232b632b3b0ba34b7b716b6b0b730b3b2b960711b60648201526084016101b5565b6000806103088d8d61014e565b9092509050600061031b8b8d018d610c88565b905060008151116103945760405162461bcd60e51b815260206004820152603f60248201527f4e6174697665546f6b656e5061796d656e74456e666f726365723a696e76616c60448201527f69642d616c6c6f77616e63652d64656c65676174696f6e732d6c656e6774680060648201526084016101b5565b6000816000815181106103a9576103a9610dcd565b6020026020010151606001515111801561043057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816000815181106103fb576103fb610dcd565b60200260200101516060015160008151811061041957610419610dcd565b6020026020010151600001516001600160a01b0316145b6104a25760405162461bcd60e51b815260206004820152603c60248201527f4e6174697665546f6b656e5061796d656e74456e666f726365723a6d6973736960448201527f6e672d61726773457175616c697479436865636b456e666f726365720000000060648201526084016101b5565b86856040516020016104d092919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b604051602081830303815290604052816000815181106104f2576104f2610dcd565b60200260200101516060015160008151811061051057610510610dcd565b602090810291909101015160409081019190915280516001808252818301909252600091816020015b6060815260200190600190039081610539579050509050816040516020016105619190610e33565b6040516020818303038152906040528160008151811061058357610583610dcd565b6020908102919091010152604080516001808252818301909252600091816020015b60608152602001906001900390816105a55790505090506105d68585604051806020016040528060008152506107c3565b816000815181106105e9576105e9610dcd565b60209081029190910101526040805160018082528183019092526000918160200160208202803683370190505090506106206107f2565b8160008151811061063357610633610dcd565b602090810291909101015260405163cef6d20960e01b81526001600160a01b0380881631917f00000000000000000000000000000000000000000000000000000000000000009091169063cef6d2099061069590879086908890600401610fbf565b600060405180830381600087803b1580156106af57600080fd5b505af11580156106c3573d6000803e3d6000fd5b505050506001600160a01b038716316106dc8783611029565b8110156107435760405162461bcd60e51b815260206004820152602f60248201527f4e6174697665546f6b656e5061796d656e74456e666f726365723a7061796d6560448201526e1b9d0b5b9bdd0b5c9958d95a5d9959608a1b60648201526084016101b5565b604080516001600160a01b038d811682528c81166020830152918101899052908916908d9033907fac266e0d9b66169d0dc4479d531985bcec62dfd9d7992d0f6865afdbb7baa5e29060600160405180910390a450505050505050505050505050505050505050565b6001600160f81b0319828116908216145b92915050565b60608383836040516020016107da9392919061104a565b60405160208183030381529060405290509392505050565b600061080081808080610805565b905090565b604080516001600160f81b03198087166020830152851660218201526000602282018190526001600160e01b03198516602683015269ffffffffffffffffffff198416602a830152910160405160208183030381529060405261086790611089565b95945050505050565b60008083601f84011261088257600080fd5b50813567ffffffffffffffff81111561089a57600080fd5b6020830191508360208285010111156108b257600080fd5b9250929050565b80356001600160a01b03811681146108d057600080fd5b919050565b60008060008060008060008060008060e08b8d0312156108f457600080fd5b8a3567ffffffffffffffff8082111561090c57600080fd5b6109188e838f01610870565b909c509a5060208d013591508082111561093157600080fd5b61093d8e838f01610870565b909a50985060408d0135975060608d013591508082111561095d57600080fd5b5061096a8d828e01610870565b90965094505060808b0135925061098360a08c016108b9565b915061099160c08c016108b9565b90509295989b9194979a5092959850565b600080602083850312156109b557600080fd5b823567ffffffffffffffff8111156109cc57600080fd5b6109d885828601610870565b90969095509350505050565b600080858511156109f457600080fd5b83861115610a0157600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff198135818116916014851015610a3b5780818660140360031b1b83161692505b505092915050565b803560208310156107bd57600019602084900360031b1b1692915050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610a9a57610a9a610a61565b60405290565b60405160c0810167ffffffffffffffff81118282101715610a9a57610a9a610a61565b604051601f8201601f1916810167ffffffffffffffff81118282101715610aec57610aec610a61565b604052919050565b600067ffffffffffffffff821115610b0e57610b0e610a61565b5060051b60200190565b600082601f830112610b2957600080fd5b813567ffffffffffffffff811115610b4357610b43610a61565b610b56601f8201601f1916602001610ac3565b818152846020838601011115610b6b57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112610b9957600080fd5b81356020610bae610ba983610af4565b610ac3565b82815260059290921b84018101918181019086841115610bcd57600080fd5b8286015b84811015610c7d57803567ffffffffffffffff80821115610bf25760008081fd5b908801906060828b03601f1901811315610c0c5760008081fd5b610c14610a77565b610c1f8885016108b9565b815260408085013584811115610c355760008081fd5b610c438e8b83890101610b18565b838b015250918401359183831115610c5b5760008081fd5b610c698d8a85880101610b18565b908201528652505050918301918301610bd1565b509695505050505050565b60006020808385031215610c9b57600080fd5b823567ffffffffffffffff80821115610cb357600080fd5b818501915085601f830112610cc757600080fd5b8135610cd5610ba982610af4565b81815260059190911b83018401908481019088831115610cf457600080fd5b8585015b83811015610dc057803585811115610d0f57600080fd5b860160c0818c03601f19011215610d265760008081fd5b610d2e610aa0565b610d398983016108b9565b81526040610d488184016108b9565b8a83015260608084013582840152608091508184013589811115610d6c5760008081fd5b610d7a8f8d83880101610b88565b82850152505060a0808401358284015260c0840135915088821115610d9f5760008081fd5b610dad8e8c84870101610b18565b9083015250845250918601918601610cf8565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60005b83811015610dfe578181015183820152602001610de6565b50506000910152565b60008151808452610e1f816020860160208601610de3565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f5857603f19888603018452815160c0860160018060a01b038083511688528089840151168989015260408301516040890152606083015160c060608a015282815180855260e08b01915060e08160051b8c010194508b8301925060005b81811015610f1c5760df198c870301835283518581511687528d81015160608f890152610eed6060890182610e07565b9050604082015191508781036040890152610f088183610e07565b97505050928c0192918c0191600101610ebd565b50505050506080820151608088015260a0820151915086810360a0880152610f448183610e07565b965050509285019290850190600101610e5a565b5092979650505050505050565b60008282518085526020808601955060208260051b8401016020860160005b84811015610fb257601f19868403018952610fa0838351610e07565b98840198925090830190600101610f84565b5090979650505050505050565b606081526000610fd26060830186610f65565b82810360208481019190915285518083528682019282019060005b8181101561100957845183529383019391830191600101610fed565b5050848103604086015261101d8187610f65565b98975050505050505050565b808201808211156107bd57634e487b7160e01b600052601160045260246000fd5b6bffffffffffffffffffffffff198460601b1681528260148201526000825161107a816034850160208701610de3565b91909101603401949350505050565b805160208083015191908110156110aa576000198160200360031b1b821691505b5091905056fea264697066735822122085080b51672c95cef1f0b772853b91117f909ad9d873a40d2cad7c2b29f5117c64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getAvailableAmount\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"availableAmount_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"isNewPeriod_\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      },\n      {\n        \"name\": \"currentPeriod_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"periodAmount_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"periodDuration_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"startDate_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"periodicAllowances\",\n    \"inputs\": [\n      {\n        \"name\": \"delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"periodAmount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"periodDuration\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"startDate\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"lastTransferPeriod\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"transferredInCurrentPeriod\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"TransferredInPeriod\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"redeemer\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"periodAmount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"periodDuration\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"startDate\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"transferredInCurrentPeriod\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"transferTimestamp\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b50610b57806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a145832a1161005b578063a145832a1461013e578063b99deb0e14610151578063d3eddcc514610082578063ed4633671461008257600080fd5b8063414c3e33146100825780636a9843f61461009e5780637b91dc78146100d1575b600080fd5b61009c610090366004610893565b50505050505050505050565b005b6100b16100ac366004610960565b61017f565b604080519384529115156020840152908201526060015b60405180910390f35b6101166100df3660046109ba565b6000602081815292815260408082209093529081522080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0016100c8565b61009c61014c366004610893565b610255565b61016461015f3660046109e4565b61033a565b604080519384526020840192909252908201526060016100c8565b6001600160a01b0383166000908152602081815260408083208784528252808320815160a0810183528154815260018201549381019390935260028101549183018290526003810154606084015260040154608083015282918291156101f4576101e8816103f0565b9350935093505061024b565b6000806000610203898961033a565b92509250925060006040518060a00160405280858152602001848152602001838152602001600081526020016000815250905061023f816103f0565b97509750975050505050505b9450945094915050565b85610261816000610484565b6102b25760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d7479706560448201526064015b60405180910390fd5b86600881901b6102c3816000610484565b61031d5760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b60648201526084016102a9565b5061032c8c8c8989898861049b565b505050505050505050505050565b600080806060841461039b5760405162461bcd60e51b81526020600482015260366024820152600080516020610b028339815191526044820152750e474d2dcecc2d8d2c85ae8cae4dae65ad8cadccee8d60531b60648201526084016102a9565b6103a9602060008688610a26565b6103b291610a50565b92506103c2604060208688610a26565b6103cb91610a50565b91506103db606060408688610a26565b6103e491610a50565b60001c90509250925092565b6000806000836040015142101561040f5750600091508190508061047d565b602084015160408501516104239042610a84565b61042d9190610a97565b610438906001610ab9565b905080846060015114159150600082610455578460800151610458565b60005b90508085600001511161046c576000610479565b8451610479908290610a84565b9350505b9193909250565b6001600160f81b0319828116908216145b92915050565b60006104a785856107dd565b505091505060008060006104bb8a8a61033a565b336000908152602081815260408083208c84529091528120600281015494975092955090935090919003610684576000821161054d5760405162461bcd60e51b81526020600482015260396024820152600080516020610b0283398151915260448201527f723a696e76616c69642d7a65726f2d73746172742d646174650000000000000060648201526084016102a9565b600084116105b15760405162461bcd60e51b815260206004820152603c6024820152600080516020610b0283398151915260448201527f723a696e76616c69642d7a65726f2d706572696f642d616d6f756e740000000060648201526084016102a9565b600083116106155760405162461bcd60e51b815260206004820152603e6024820152600080516020610b0283398151915260448201527f723a696e76616c69642d7a65726f2d706572696f642d6475726174696f6e000060648201526084016102a9565b814210156106725760405162461bcd60e51b81526020600482015260366024820152600080516020610b028339815191526044820152751c8e9d1c985b9cd9995c8b5b9bdd0b5cdd185c9d195960521b60648201526084016102a9565b83815560018101839055600281018290555b60008060006106cf846040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250506103f0565b925092509250828811156107395760405162461bcd60e51b815260206004820152603a6024820152600080516020610b0283398151915260448201527f723a7472616e736665722d616d6f756e742d657863656564656400000000000060648201526084016102a9565b811561074e5760038401819055600060048501555b878460040160008282546107629190610ab9565b909155505060028401546004850154604080518a8152602081018a90529081019290925260608201524260808201528a906001600160a01b038b169033907f22e1bbd8bc0380d336958afc37cd8cb128d6c43891ed276162c30e8df467734d9060a00160405180910390a45050505050505050505050505050565b60008036816107ef6014828789610a26565b6107f891610acc565b60601c935061080b603460148789610a26565b61081491610a50565b92506108238560348189610a26565b949793965094505050565b60008083601f84011261084057600080fd5b50813567ffffffffffffffff81111561085857600080fd5b60208301915083602082850101111561087057600080fd5b9250929050565b80356001600160a01b038116811461088e57600080fd5b919050565b60008060008060008060008060008060e08b8d0312156108b257600080fd5b8a3567ffffffffffffffff808211156108ca57600080fd5b6108d68e838f0161082e565b909c509a5060208d01359150808211156108ef57600080fd5b6108fb8e838f0161082e565b909a50985060408d0135975060608d013591508082111561091b57600080fd5b506109288d828e0161082e565b90965094505060808b0135925061094160a08c01610877565b915061094f60c08c01610877565b90509295989b9194979a5092959850565b6000806000806060858703121561097657600080fd5b8435935061098660208601610877565b9250604085013567ffffffffffffffff8111156109a257600080fd5b6109ae8782880161082e565b95989497509550505050565b600080604083850312156109cd57600080fd5b6109d683610877565b946020939093013593505050565b600080602083850312156109f757600080fd5b823567ffffffffffffffff811115610a0e57600080fd5b610a1a8582860161082e565b90969095509350505050565b60008085851115610a3657600080fd5b83861115610a4357600080fd5b5050820193919092039150565b8035602083101561049557600019602084900360031b1b1692915050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561049557610495610a6e565b600082610ab457634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561049557610495610a6e565b6bffffffffffffffffffffffff198135818116916014851015610af95780818660140360031b1b83161692505b50509291505056fe4e6174697665546f6b656e506572696f645472616e73666572456e666f726365a2646970667358221220ddbfb33bfc3119eae666e9c14c2e492d38eed690114f0ed176d6eb49d0bc21a364736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"getNonce\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"key\",\n        \"type\": \"uint192\",\n        \"internalType\": \"uint192\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"nonce\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"incrementNonce\",\n    \"inputs\": [\n      {\n        \"name\": \"key\",\n        \"type\": \"uint192\",\n        \"internalType\": \"uint192\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"nonceSequenceNumber\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint192\",\n        \"internalType\": \"uint192\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_delegator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"currentNonce\",\n    \"inputs\": [\n      {\n        \"name\": \"delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"nonce\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"nonce_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"incrementNonce\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"UsedNonce\",\n    \"inputs\": [\n      {\n        \"name\": \"delegationManager\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"nonce\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b5061050e806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b99deb0e1161005b578063b99deb0e146100eb578063d3eddcc5146100bc578063ed463367146100bc578063f5743c4c146100fe57600080fd5b80632bd4ed2114610082578063414c3e33146100bc578063a145832a146100d8575b600080fd5b6100aa610090366004610314565b600060208181529281526040808220909352908152205481565b60405190815260200160405180910390f35b6100d66100ca366004610390565b50505050505050505050565b005b6100d66100e6366004610390565b610111565b6100aa6100f936600461045d565b61020f565b6100d661010c36600461049f565b61027d565b85600881901b6101228160006102e1565b6101815760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b60648201526084015b60405180910390fd5b50600061018e8c8c61020f565b336000908152602081815260408083206001600160a01b038916845290915290205490915081146102015760405162461bcd60e51b815260206004820152601b60248201527f4e6f6e6365456e666f726365723a696e76616c69642d6e6f6e636500000000006044820152606401610178565b505050505050505050505050565b60006020821461026c5760405162461bcd60e51b815260206004820152602260248201527f4e6f6e6365456e666f726365723a696e76616c69642d7465726d732d6c656e676044820152610e8d60f31b6064820152608401610178565b61027682846104ba565b9392505050565b6001600160a01b038116600081815260208181526040808320338085529083529281902080546001810190915590518181529093917fe02d340254c92bc3ad96f0fceb790db939e11c669c1f4c8a549d248f17130b33910160405180910390a35050565b6001600160f81b0319828116908216145b92915050565b80356001600160a01b038116811461030f57600080fd5b919050565b6000806040838503121561032757600080fd5b610330836102f8565b915061033e602084016102f8565b90509250929050565b60008083601f84011261035957600080fd5b50813567ffffffffffffffff81111561037157600080fd5b60208301915083602082850101111561038957600080fd5b9250929050565b60008060008060008060008060008060e08b8d0312156103af57600080fd5b8a3567ffffffffffffffff808211156103c757600080fd5b6103d38e838f01610347565b909c509a5060208d01359150808211156103ec57600080fd5b6103f88e838f01610347565b909a50985060408d0135975060608d013591508082111561041857600080fd5b506104258d828e01610347565b90965094505060808b0135925061043e60a08c016102f8565b915061044c60c08c016102f8565b90509295989b9194979a5092959850565b6000806020838503121561047057600080fd5b823567ffffffffffffffff81111561048757600080fd5b61049385828601610347565b90969095509350505050565b6000602082840312156104b157600080fd5b610276826102f8565b803560208310156102f257600019602084900360031b1b169291505056fea26469706673582212205626dd2329dbdfa25ba379781a5be6c8fc6ae0eb3a22e9122f5d8207bb7de74564736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_args\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getAllTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"tokens_\",\n        \"type\": \"address[]\",\n        \"internalType\": \"address[]\"\n      },\n      {\n        \"name\": \"periodAmounts_\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"periodDurations_\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"startDates_\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getAvailableAmount\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_args\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"availableAmount_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"isNewPeriod_\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      },\n      {\n        \"name\": \"currentPeriod_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getHashKey\",\n    \"inputs\": [\n      {\n        \"name\": \"_caller\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_token\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_index\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_tokenIndex\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"token_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"periodAmount_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"periodDuration_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"startDate_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"periodicAllowances\",\n    \"inputs\": [\n      {\n        \"name\": \"hashKey\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"periodAmount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"periodDuration\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"startDate\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"lastTransferPeriod\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"transferredInCurrentPeriod\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"TransferredInPeriod\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"redeemer\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"periodAmount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"periodDuration\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"startDate\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"transferredInCurrentPeriod\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"transferTimestamp\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b5061148b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a145832a11610066578063a145832a1461014b578063d3eddcc5146100c4578063da8081c21461015e578063ed463367146100c4578063f5c7d74e146101c357600080fd5b806319de6ebc14610098578063414c3e33146100c4578063733c0d80146100e05780638572e3191461011d575b600080fd5b6100ab6100a6366004610f6f565b6101e4565b6040516100bb9493929190610fed565b60405180910390f35b6100de6100d2366004611094565b50505050505050505050565b005b6100f36100ee366004611161565b6104b6565b604080516001600160a01b03909516855260208501939093529183015260608201526080016100bb565b61013061012b3660046111ad565b61062a565b604080519384529115156020840152908201526060016100bb565b6100de610159366004611094565b6106fc565b61019b61016c366004611237565b600060208190529081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0016100bb565b6101d66101d1366004611250565b6107de565b6040519081526020016100bb565b6060808080846101f56074826112a8565b15801561020157508015155b6102265760405162461bcd60e51b815260040161021d906112bc565b60405180910390fd5b600061023360748361130d565b90508067ffffffffffffffff81111561024e5761024e611321565b604051908082528060200260200182016040528015610277578160200160208202803683370190505b5095508067ffffffffffffffff81111561029357610293611321565b6040519080825280602002602001820160405280156102bc578160200160208202803683370190505b5094508067ffffffffffffffff8111156102d8576102d8611321565b604051908082528060200260200182016040528015610301578160200160208202803683370190505b5093508067ffffffffffffffff81111561031d5761031d611321565b604051908082528060200260200182016040528015610346578160200160208202803683370190505b50925060005b818110156104aa576000610361826074611337565b905089818a61037182601461134e565b9261037e93929190611361565b6103879161138b565b60601c88838151811061039c5761039c6113c0565b6001600160a01b039092166020928302919091019091015289896103c183601461134e565b906103cd84603461134e565b926103da93929190611361565b6103e3916113d6565b60001c8783815181106103f8576103f86113c0565b6020908102919091010152898961041083603461134e565b9061041c84605461134e565b9261042993929190611361565b610432916113d6565b60001c868381518110610447576104476113c0565b6020908102919091010152898961045f83605461134e565b9061046b84607461134e565b9261047893929190611361565b610481916113d6565b60001c858381518110610496576104966113c0565b60209081029190910101525060010161034c565b50505092959194509250565b60008080808580158015906104d357506104d16074826112a8565b155b6104ef5760405162461bcd60e51b815260040161021d906112bc565b60006104fc60748361130d565b90508087106105505760405162461bcd60e51b815260206004820152602c602482015260008051602061143683398151915260448201526b05ae8ded6cadc5ad2dcc8caf60a31b606482015260840161021d565b600061055d886074611337565b905089818a61056d82601461134e565b9261057a93929190611361565b6105839161138b565b60601c9650898961059583601461134e565b906105a184603461134e565b926105ae93929190611361565b6105b7916113d6565b955089896105c683603461134e565b906105d284605461134e565b926105df93929190611361565b6105e8916113d6565b945089896105f783605461134e565b9061060384607461134e565b9261061093929190611361565b610619916113d6565b60001c935050505093509350935093565b60008060008060008060006106438d8d8d8d8d8d6107f5565b60008481526020818152604091829020825160a081018452815481526001820154928101929092526002810154928201839052600381015460608301526004015460808201529498509296509094509250156106b2576106a28161083c565b97509750975050505050506106f0565b6040805160a0810182528581526020810185905290810183905260006060820181905260808201526106e38161083c565b9850985098505050505050505b96509650969350505050565b856107088160006108d0565b6107545760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d74797065604482015260640161021d565b86600881901b6107658160006108d0565b6107bf5760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b606482015260840161021d565b506107d08c8c8c8c8b8b8b8a6108e7565b505050505050505050505050565b60006107ec85858585610e8b565b95945050505050565b60008080808061080786880188611237565b905060006108168a8a846104b6565b91975095509350905061082b8b828e85610e8b565b955050509650965096509692505050565b6000806000836040015142101561085b575060009150819050806108c9565b6020840151604085015161086f90426113f4565b610879919061130d565b61088490600161134e565b9050808460600151141591506000826108a15784608001516108a4565b60005b9050808560000151116108b85760006108c5565b84516108c59082906113f4565b9350505b9193909250565b6001600160f81b0319828116908216145b92915050565b6000806000803660006108fa8a8a610ed5565b935093509350935081819050604403610a0657821561096f5760405162461bcd60e51b8152602060048201526038602482015260008051602061143683398151915260448201527f2d76616c75652d696e2d65726332302d7472616e736665720000000000000000606482015260840161021d565b63a9059cbb60e01b610985600460008486611361565b61098e91611407565b6001600160e01b031916146109e35760405162461bcd60e51b815260206004820152602760248201526000805160206114368339815191526044820152660b5b595d1a1bd960ca1b606482015260840161021d565b92935083926109f6604460248385611361565b6109ff916113d6565b9550610acf565b6000819003610a7f5760008311610a735760405162461bcd60e51b815260206004820152603e602482015260008051602061143683398151915260448201527f2d7a65726f2d76616c75652d696e2d6e61746976652d7472616e736665720000606482015260840161021d565b60009450829550610acf565b60405162461bcd60e51b8152602060048201526031602482015260008051602061143683398151915260448201527005ac6c2d8d85ac8c2e8c25ad8cadccee8d607b1b606482015260840161021d565b5060009250610ae3915050888a018a611237565b9050600080600080610af68f8f876104b6565b9350935093509350836001600160a01b0316866001600160a01b031614610b6f5760405162461bcd60e51b815260206004820152602760248201527f4d756c7469546f6b656e506572696f64456e666f726365723a746f6b656e2d6d6044820152660d2e6dac2e8c6d60cb1b606482015260840161021d565b6000610b7d33888c89610e8b565b60008181526020819052604081206002810154929350919003610d1f5760008311610bf15760405162461bcd60e51b8152602060048201526030602482015260008051602061143683398151915260448201526f2d7a65726f2d73746172742d6461746560801b606482015260840161021d565b60008511610c4b5760405162461bcd60e51b815260206004820152603360248201526000805160206114368339815191526044820152720b5e995c9bcb5c195c9a5bd90b585b5bdd5b9d606a1b606482015260840161021d565b60008411610ca75760405162461bcd60e51b8152602060048201526035602482015260008051602061143683398151915260448201527416bd32b93796b832b934b7b216b23ab930ba34b7b760591b606482015260840161021d565b82421015610d0d5760405162461bcd60e51b815260206004820152602d60248201527f4d756c7469546f6b656e506572696f64456e666f726365723a7472616e73666560448201526c1c8b5b9bdd0b5cdd185c9d1959609a1b606482015260840161021d565b84815560018101849055600281018390555b6000806000610d6a846040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505061083c565b925092509250828c1115610dda5760405162461bcd60e51b815260206004820152603160248201527f4d756c7469546f6b656e506572696f64456e666f726365723a7472616e7366656044820152701c8b585b5bdd5b9d0b595e18d959591959607a1b606482015260840161021d565b8115610def5760038401819055600060048501555b8b846004016000828254610e03919061134e565b90915550506004840154604080516001600160a01b038e81168252602082018c90529181018a90526060810189905260808101929092524260a08301528f91908f169033907fb2a345c7f80b4be490c405f4a994faf85384dd05da7d70be0801dc31a8c253af9060c00160405180910390a45050505050505050505050505050505050505050565b604080516001600160a01b03958616602080830191909152949095168582015260608501929092526080808501919091528151808503909101815260a09093019052815191012090565b6000803681610ee76014828789611361565b610ef09161138b565b60601c9350610f03603460148789611361565b610f0c916113d6565b9250610f1b8560348189611361565b949793965094505050565b60008083601f840112610f3857600080fd5b50813567ffffffffffffffff811115610f5057600080fd5b602083019150836020828501011115610f6857600080fd5b9250929050565b60008060208385031215610f8257600080fd5b823567ffffffffffffffff811115610f9957600080fd5b610fa585828601610f26565b90969095509350505050565b60008151808452602080850194506020840160005b83811015610fe257815187529582019590820190600101610fc6565b509495945050505050565b6080808252855190820181905260009060209060a0840190828901845b8281101561102f5781516001600160a01b03168452928401929084019060010161100a565b50505083810360208501526110448188610fb1565b91505082810360408401526110598186610fb1565b9050828103606084015261106d8185610fb1565b979650505050505050565b80356001600160a01b038116811461108f57600080fd5b919050565b60008060008060008060008060008060e08b8d0312156110b357600080fd5b8a3567ffffffffffffffff808211156110cb57600080fd5b6110d78e838f01610f26565b909c509a5060208d01359150808211156110f057600080fd5b6110fc8e838f01610f26565b909a50985060408d0135975060608d013591508082111561111c57600080fd5b506111298d828e01610f26565b90965094505060808b0135925061114260a08c01611078565b915061115060c08c01611078565b90509295989b9194979a5092959850565b60008060006040848603121561117657600080fd5b833567ffffffffffffffff81111561118d57600080fd5b61119986828701610f26565b909790965060209590950135949350505050565b600080600080600080608087890312156111c657600080fd5b863595506111d660208801611078565b9450604087013567ffffffffffffffff808211156111f357600080fd5b6111ff8a838b01610f26565b9096509450606089013591508082111561121857600080fd5b5061122589828a01610f26565b979a9699509497509295939492505050565b60006020828403121561124957600080fd5b5035919050565b6000806000806080858703121561126657600080fd5b61126f85611078565b935061127d60208601611078565b93969395505050506040820135916060013590565b634e487b7160e01b600052601260045260246000fd5b6000826112b7576112b7611292565b500690565b6020808252602d9082015260008051602061143683398151915260408201526c05ae8cae4dae65ad8cadccee8d609b1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008261131c5761131c611292565b500490565b634e487b7160e01b600052604160045260246000fd5b80820281158282048414176108e1576108e16112f7565b808201808211156108e1576108e16112f7565b6000808585111561137157600080fd5b8386111561137e57600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156113b85780818660140360031b1b83161692505b505092915050565b634e487b7160e01b600052603260045260246000fd5b803560208310156108e157600019602084900360031b1b1692915050565b818103818111156108e1576108e16112f7565b6001600160e01b031981358181169160048510156113b85760049490940360031b84901b169092169291505056fe4d756c7469546f6b656e506572696f64456e666f726365723a696e76616c6964a264697066735822122024c53d9970ff849bf9025e90cc5d34bfc99b0f5ee6a61ef6c48512264a9b0a3164736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"balanceCache\",\n    \"inputs\": [\n      {\n        \"name\": \"hashKey\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"balance\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getHashKey\",\n    \"inputs\": [\n      {\n        \"name\": \"_caller\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"enforceDecrease_\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      },\n      {\n        \"name\": \"recipient_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isLocked\",\n    \"inputs\": [\n      {\n        \"name\": \"hashKey\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"lock\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b50610824806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b5e544921161005b578063b5e5449214610115578063b99deb0e14610135578063d3eddcc51461016d578063ed463367146100c557600080fd5b806332a16f4e1461008d578063414c3e33146100c5578063a145832a146100e1578063a79a0db5146100f4575b600080fd5b6100b061009b366004610568565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100df6100d33660046105e6565b50505050505050505050565b005b6100df6100ef3660046105e6565b610180565b6101076101023660046106b3565b6102c6565b6040519081526020016100bc565b610107610123366004610568565b60006020819052908152604090205481565b6101486101433660046106dd565b6102db565b6040805193151584526001600160a01b039092166020840152908201526060016100bc565b6100df61017b3660046105e6565b6103ad565b85600881901b6001600160f81b03198116156101f15760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b60648201526084015b60405180910390fd5b5060006101fe338661052b565b9050600061020c8d8d6102db565b5060008481526001602052604090205490925060ff161590506102885760405162461bcd60e51b815260206004820152602e60248201527f4e617469766542616c616e63654368616e6765456e666f726365723a656e666f60448201526d1c98d95c8b5a5ccb5b1bd8dad95960921b60648201526084016101e8565b6000918252600160208181526040808520805460ff19169093179092558390529091206001600160a01b039091163190555050505050505050505050565b60006102d2838361052b565b90505b92915050565b60008080603584146103485760405162461bcd60e51b815260206004820152603060248201527f4e617469766542616c616e63654368616e6765456e666f726365723a696e766160448201526f0d8d2c85ae8cae4dae65ad8cadccee8d60831b60648201526084016101e8565b8484600081811061035b5761035b61071f565b909101356001600160f81b0319161515935061037d9050601560018688610735565b6103869161075f565b60601c91506103988460158188610735565b6103a191610794565b60001c90509250925092565b60008060006103bc8d8d6102db565b92509250925060006103ce338861052b565b6000818152600160205260409020805460ff1916905590508315610482576000818152602081905260409020546104069083906107c8565b836001600160a01b031631101561047d5760405162461bcd60e51b815260206004820152603560248201527f4e617469766542616c616e63654368616e6765456e666f726365723a65786365604482015274656465642d62616c616e63652d646563726561736560581b60648201526084016101e8565b61051b565b60008181526020819052604090205461049c9083906107db565b836001600160a01b031631101561051b5760405162461bcd60e51b815260206004820152603960248201527f4e617469766542616c616e63654368616e6765456e666f726365723a696e737560448201527f6666696369656e742d62616c616e63652d696e6372656173650000000000000060648201526084016101e8565b5050505050505050505050505050565b604080516001600160a01b038416602082015290810182905260009060600160405160208183030381529060405280519060200120905092915050565b60006020828403121561057a57600080fd5b5035919050565b60008083601f84011261059357600080fd5b50813567ffffffffffffffff8111156105ab57600080fd5b6020830191508360208285010111156105c357600080fd5b9250929050565b80356001600160a01b03811681146105e157600080fd5b919050565b60008060008060008060008060008060e08b8d03121561060557600080fd5b8a3567ffffffffffffffff8082111561061d57600080fd5b6106298e838f01610581565b909c509a5060208d013591508082111561064257600080fd5b61064e8e838f01610581565b909a50985060408d0135975060608d013591508082111561066e57600080fd5b5061067b8d828e01610581565b90965094505060808b0135925061069460a08c016105ca565b91506106a260c08c016105ca565b90509295989b9194979a5092959850565b600080604083850312156106c657600080fd5b6106cf836105ca565b946020939093013593505050565b600080602083850312156106f057600080fd5b823567ffffffffffffffff81111561070757600080fd5b61071385828601610581565b90969095509350505050565b634e487b7160e01b600052603260045260246000fd5b6000808585111561074557600080fd5b8386111561075257600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff19813581811691601485101561078c5780818660140360031b1b83161692505b505092915050565b803560208310156102d557600019602084900360031b1b1692915050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102d5576102d56107b2565b808201808211156102d5576102d56107b256fea2646970667358221220b33a5c188759ed62e28774f4ab95ff422856e7b7a36f7de87da5f14ed435ece964736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"owner\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"renounceOwnership\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transferOwnership\",\n    \"inputs\": [\n      {\n        \"name\": \"newOwner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"OwnershipTransferred\",\n    \"inputs\": [\n      {\n        \"name\": \"previousOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"newOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"OwnableInvalidOwner\",\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"OwnableUnauthorizedAccount\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220709bae2a6201f60c7dd916d94e8aed6e76d68870a93207bbf209cbf2ce9581c664736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC721Received\",\n    \"inputs\": [\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"event\",\n    \"name\": \"Initialized\",\n    \"inputs\": [\n      {\n        \"name\": \"version\",\n        \"type\": \"uint64\",\n        \"indexed\": false,\n        \"internalType\": \"uint64\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidInitialization\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotInitializing\",\n    \"inputs\": []\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"acceptOwnership\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"owner\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"pendingOwner\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"renounceOwnership\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transferOwnership\",\n    \"inputs\": [\n      {\n        \"name\": \"newOwner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"OwnershipTransferStarted\",\n    \"inputs\": [\n      {\n        \"name\": \"previousOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"newOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"OwnershipTransferred\",\n    \"inputs\": [\n      {\n        \"name\": \"previousOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"newOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"OwnableInvalidOwner\",\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"OwnableUnauthorizedAccount\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"execute\",\n    \"inputs\": [\n      {\n        \"name\": \"mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"executionData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsExecutionMode\",\n    \"inputs\": [\n      {\n        \"name\": \"mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"paused\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Paused\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Unpaused\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"EnforcedPause\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ExpectedPause\",\n    \"inputs\": []\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"allowance_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"spentMap\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"IncreasedSpentMap\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"redeemer\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"limit\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"spent\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b506105cd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063414c3e33146100675780639dd5d9ab14610083578063a145832a146100bd578063b99deb0e146100d0578063d3eddcc514610067578063ed46336714610067575b600080fd5b6100816100753660046103a7565b50505050505050505050565b005b6100ab610091366004610474565b600060208181529281526040808220909352908152205481565b60405190815260200160405180910390f35b6100816100cb3660046103a7565b6100e3565b6100ab6100de36600461049e565b6102c5565b856100ef8160006102da565b6101405760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d7479706560448201526064015b60405180910390fd5b86600881901b6101518160006102da565b6101ab5760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b6064820152608401610137565b5060006101b88d8d6102c5565b905060006101c689896102f1565b5050336000908152602081815260408083208c845290915281208054929450909250839183906101f79084906104e0565b92505081905590508281111561026c5760405162461bcd60e51b815260206004820152603460248201527f4e6174697665546f6b656e5472616e73666572416d6f756e74456e666f7263656044820152731c8e985b1b1bddd85b98d94b595e18d95959195960621b6064820152608401610137565b604080518481526020810183905289916001600160a01b0389169133917fc026e493323d526061a052b5dd562495120e2f648797a48be61966d3a6beec8d910160405180910390a4505050505050505050505050505050565b60006102d382840184610501565b9392505050565b6001600160f81b0319828116908216145b92915050565b6000803681610303601482878961051a565b61030c91610544565b60601c935061031f60346014878961051a565b61032891610579565b9250610337856034818961051a565b949793965094505050565b60008083601f84011261035457600080fd5b50813567ffffffffffffffff81111561036c57600080fd5b60208301915083602082850101111561038457600080fd5b9250929050565b80356001600160a01b03811681146103a257600080fd5b919050565b60008060008060008060008060008060e08b8d0312156103c657600080fd5b8a3567ffffffffffffffff808211156103de57600080fd5b6103ea8e838f01610342565b909c509a5060208d013591508082111561040357600080fd5b61040f8e838f01610342565b909a50985060408d0135975060608d013591508082111561042f57600080fd5b5061043c8d828e01610342565b90965094505060808b0135925061045560a08c0161038b565b915061046360c08c0161038b565b90509295989b9194979a5092959850565b6000806040838503121561048757600080fd5b6104908361038b565b946020939093013593505050565b600080602083850312156104b157600080fd5b823567ffffffffffffffff8111156104c857600080fd5b6104d485828601610342565b90969095509350505050565b808201808211156102eb57634e487b7160e01b600052601160045260246000fd5b60006020828403121561051357600080fd5b5035919050565b6000808585111561052a57600080fd5b8386111561053757600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156105715780818660140360031b1b83161692505b505092915050565b803560208310156102eb57600019602084900360031b1b169291505056fea2646970667358221220242bcbb545bdb30c0cc3054c27d7e861e0e03c97037d12e0a3a635b723f4c96064736f6c63430008170033\" as const;", "export const abi = [] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d7aca7990ce9da4d7914667722de1ec02253803fb163d86029328ca9bb504b0164736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"fallback\",\n    \"stateMutability\": \"nonpayable\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b5061022e806100206000396000f3fe608060405234801561001057600080fd5b50600036606060a0821461004057604080516000602082015201604051602081830303815290604052905061017b565b600061004f6020828587610186565b610058916101b0565b9050600061006a604060208688610186565b610073916101b0565b90506000610085606060408789610186565b61008e916101b0565b905060006100a060806060888a610186565b6100a9916101b0565b905060006100bb60a06080898b610186565b6100c4916101b0565b60405163a1f3128160e01b8152600481018790526024810186905260448101859052606481018490526084810182905290915073__$b8f96b288d4d0429e38b8ed50fd423070f$__9063a1f312819060a401602060405180830381865af4158015610133573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015791906101cf565b60408051911515602083015201604051602081830303815290604052955050505050505b915050805190602001f35b6000808585111561019657600080fd5b838611156101a357600080fd5b5050820193919092039150565b803560208310156101c957600019602084900360031b1b165b92915050565b6000602082840312156101e157600080fd5b815180151581146101f157600080fd5b939250505056fea26469706673582212203dafaa4c8f34ad767d36775120cdf65742956a98b33a9913f2e11f858baf2d9e64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"targetContract_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"OwnershipTransferEnforced\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"redeemer\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"newOwner\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b506106af806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063414c3e331461005c578063a145832a14610078578063b99deb0e1461008b578063d3eddcc51461005c578063ed4633671461005c575b600080fd5b61007661006a36600461049f565b50505050505050505050565b005b61007661008636600461049f565b6100ba565b61009e61009936600461056c565b6101e7565b6040516001600160a01b03909116815260200160405180910390f35b856100c6816000610252565b6101175760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d7479706560448201526064015b60405180910390fd5b86600881901b610128816000610252565b6101825760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b606482015260840161010e565b5060006101918d8d8a8a610269565b6040516001600160a01b038083168252919250879186169033907f0f026cada0b544ae1cc47ac006f1f4c3d7e94832af22aa0065351de49f9284d79060200160405180910390a450505050505050505050505050565b60006014821461023e5760405162461bcd60e51b815260206004820152602e602482015260008051602061065a83398151915260448201526d0c85ae8cae4dae65ad8cadccee8d60931b606482015260840161010e565b61024882846105ae565b60601c9392505050565b6001600160f81b0319828116908216145b92915050565b60008036600061027986866103e9565b929550935090915050602481146102db5760405162461bcd60e51b8152602060048201526032602482015260008051602061065a8339815191526044820152710c85acaf0cac6eae8d2dedc5ad8cadccee8d60731b606482015260840161010e565b60006102ea60048284866105e3565b6102f39161060d565b90506001600160e01b0319811663f2fde38b60e01b146103545760405162461bcd60e51b8152602060048201526028602482015260008051602061065a833981519152604482015267190b5b595d1a1bd960c21b606482015260840161010e565b60006103608a8a6101e7565b9050846001600160a01b0316816001600160a01b0316146103c45760405162461bcd60e51b815260206004820152602a602482015260008051602061065a833981519152604482015269190b58dbdb9d1c9858dd60b21b606482015260840161010e565b6103d26024600485876105e3565b6103db9161063b565b9a9950505050505050505050565b60008036816103fb60148287896105e3565b610404916105ae565b60601c93506104176034601487896105e3565b6104209161063b565b925061042f85603481896105e3565b949793965094505050565b60008083601f84011261044c57600080fd5b50813567ffffffffffffffff81111561046457600080fd5b60208301915083602082850101111561047c57600080fd5b9250929050565b80356001600160a01b038116811461049a57600080fd5b919050565b60008060008060008060008060008060e08b8d0312156104be57600080fd5b8a3567ffffffffffffffff808211156104d657600080fd5b6104e28e838f0161043a565b909c509a5060208d01359150808211156104fb57600080fd5b6105078e838f0161043a565b909a50985060408d0135975060608d013591508082111561052757600080fd5b506105348d828e0161043a565b90965094505060808b0135925061054d60a08c01610483565b915061055b60c08c01610483565b90509295989b9194979a5092959850565b6000806020838503121561057f57600080fd5b823567ffffffffffffffff81111561059657600080fd5b6105a28582860161043a565b90969095509350505050565b6bffffffffffffffffffffffff1981358181169160148510156105db5780818660140360031b1b83161692505b505092915050565b600080858511156105f357600080fd5b8386111561060057600080fd5b5050820193919092039150565b6001600160e01b031981358181169160048510156105db5760049490940360031b84901b1690921692915050565b8035602083101561026357600019602084900360031b1b169291505056fe4f776e6572736869705472616e73666572456e666f726365723a696e76616c69a2646970667358221220ca5ae6d7f1b90ba5d22d1aa6d07431cba5451fcdcfda2c53ba5014e9bf6c30cc64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"error\",\n    \"name\": \"SafeERC20FailedDecreaseAllowance\",\n    \"inputs\": [\n      {\n        \"name\": \"spender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"currentAllowance\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"requestedDecrease\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"SafeERC20FailedOperation\",\n    \"inputs\": [\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122088a0aa059cfc49869da70b79266115a887b85b6bf4a5e84a430f64ac0e13ee7c64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"createSender\",\n    \"inputs\": [\n      {\n        \"name\": \"initCode\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561000f575f80fd5b506101e28061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063570e1a361461002d575b5f80fd5b61004061003b3660046100e4565b61005c565b6040516001600160a01b03909116815260200160405180910390f35b5f8061006b6014828587610150565b61007491610177565b60601c90505f6100878460148188610150565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92018290525084519495509360209350849250905082850182875af190505f519350806100db575f93505b50505092915050565b5f80602083850312156100f5575f80fd5b823567ffffffffffffffff8082111561010c575f80fd5b818501915085601f83011261011f575f80fd5b81358181111561012d575f80fd5b86602082850101111561013e575f80fd5b60209290920196919550909350505050565b5f808585111561015e575f80fd5b8386111561016a575f80fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156101a45780818660140360031b1b83161692505b50509291505056fea264697066735822122078c1aaa9f040f8c523cf2b642dd06415593eec30d2e75021458af7e0c704e6fb64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"error\",\n    \"name\": \"ReentrancyGuardReentrantCall\",\n    \"inputs\": []\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"error\",\n    \"name\": \"SafeCastOverflowedIntDowncast\",\n    \"inputs\": [\n      {\n        \"name\": \"bits\",\n        \"type\": \"uint8\",\n        \"internalType\": \"uint8\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"int256\",\n        \"internalType\": \"int256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"SafeCastOverflowedIntToUint\",\n    \"inputs\": [\n      {\n        \"name\": \"value\",\n        \"type\": \"int256\",\n        \"internalType\": \"int256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"SafeCastOverflowedUintDowncast\",\n    \"inputs\": [\n      {\n        \"name\": \"bits\",\n        \"type\": \"uint8\",\n        \"internalType\": \"uint8\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"SafeCastOverflowedUintToInt\",\n    \"inputs\": [\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122061ebdeb3510df44a7d9170525bd3fc61f93c656e67274c3f3b4aa33ec92dc13864736f6c63430008170033\" as const;", "export const abi = [] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203d65f4321e18e96a0e0a3e6a8d19e56735de368638fd48b184c923bf46a5170f64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidShortString\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"StringTooLong\",\n    \"inputs\": [\n      {\n        \"name\": \"str\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122088910c5f67a05f7b05fc7425f62972b57385080dd0be1e4dea1ea74435bca86f64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"computeAddress\",\n    \"inputs\": [\n      {\n        \"name\": \"_bytecodeHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_salt\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"addr_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"deploy\",\n    \"inputs\": [\n      {\n        \"name\": \"_bytecode\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_salt\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"addr_\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Deployed\",\n    \"inputs\": [\n      {\n        \"name\": \"addr\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"Create2EmptyBytecode\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"Create2FailedDeployment\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"Create2InsufficientBalance\",\n    \"inputs\": [\n      {\n        \"name\": \"balance\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"needed\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"SimpleFactoryEmptyContract\",\n    \"inputs\": [\n      {\n        \"name\": \"deployed\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b506102ef806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063481286e61461003b5780634af63f021461006a575b600080fd5b61004e6100493660046101cc565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e610078366004610204565b610090565b60006100898284610115565b9392505050565b600061009e60008385610122565b9050806001600160a01b03163b6000036100db576040516301e3495560e61b81526001600160a01b03821660048201526024015b60405180910390fd5b6040516001600160a01b038216907ff40fcec21964ffb566044d083b4073f29f7f7929110ea19e1b3ebe375d89055e90600090a292915050565b60006100898383306101a2565b60008347101561014e5760405163392efb2b60e21b8152476004820152602481018590526044016100d2565b815160000361017057604051631328927760e21b815260040160405180910390fd5b8282516020840186f590506001600160a01b03811661008957604051633a0ba96160e11b815260040160405180910390fd5b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b600080604083850312156101df57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561021757600080fd5b823567ffffffffffffffff8082111561022f57600080fd5b818501915085601f83011261024357600080fd5b813581811115610255576102556101ee565b604051601f8201601f19908116603f0116810190838211818310171561027d5761027d6101ee565b8160405282815288602084870101111561029657600080fd5b82602086016020830137600060209382018401529896909101359650505050505056fea264697066735822122060b446de0182f6cf23546703f0e9eb0c1da6c4f00138f5d151474f865157cd3164736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_redeemer\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"allowedRedeemers_\",\n        \"type\": \"address[]\",\n        \"internalType\": \"address[]\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b5061064b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063414c3e331461005c578063a145832a14610078578063b99deb0e1461008b578063d3eddcc51461005c578063ed4633671461005c575b600080fd5b61007661006a3660046103ae565b50505050505050505050565b005b6100766100863660046103ae565b6100b4565b61009e61009936600461047b565b6101e8565b6040516100ab91906104bd565b60405180910390f35b85600881901b6100c5816000610332565b6101245760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b60648201526084015b60405180910390fd5b5060006101318c8c6101e8565b805190915060005b81811015610183578281815181106101535761015361050a565b60200260200101516001600160a01b0316856001600160a01b03160361017b575050506101db565b600101610139565b5060405162461bcd60e51b815260206004820152602660248201527f52656465656d6572456e666f726365723a756e617574686f72697a65642d72656044820152653232b2b6b2b960d11b606482015260840161011b565b5050505050505050505050565b606060008280158015906102045750610202601482610536565b155b61025e5760405162461bcd60e51b815260206004820152602560248201527f52656465656d6572456e666f726365723a696e76616c69642d7465726d732d6c6044820152640cadccee8d60db1b606482015260840161011b565b610269601482610560565b67ffffffffffffffff81111561028157610281610574565b6040519080825280602002602001820160405280156102aa578160200160208202803683370190505b50925060005b81811015610329578581866102c682601461058a565b926102d39392919061059d565b6102dc916105c7565b60601c8484815181106102f1576102f161050a565b6001600160a01b039092166020928302919091019091015282610313816105fc565b9350610322905060148261058a565b90506102b0565b50505092915050565b6001600160f81b0319828116908216145b92915050565b60008083601f84011261035b57600080fd5b50813567ffffffffffffffff81111561037357600080fd5b60208301915083602082850101111561038b57600080fd5b9250929050565b80356001600160a01b03811681146103a957600080fd5b919050565b60008060008060008060008060008060e08b8d0312156103cd57600080fd5b8a3567ffffffffffffffff808211156103e557600080fd5b6103f18e838f01610349565b909c509a5060208d013591508082111561040a57600080fd5b6104168e838f01610349565b909a50985060408d0135975060608d013591508082111561043657600080fd5b506104438d828e01610349565b90965094505060808b0135925061045c60a08c01610392565b915061046a60c08c01610392565b90509295989b9194979a5092959850565b6000806020838503121561048e57600080fd5b823567ffffffffffffffff8111156104a557600080fd5b6104b185828601610349565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156104fe5783516001600160a01b0316835292840192918401916001016104d9565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008261054557610545610520565b500690565b634e487b7160e01b600052601160045260246000fd5b60008261056f5761056f610520565b500490565b634e487b7160e01b600052604160045260246000fd5b808201808211156103435761034361054a565b600080858511156105ad57600080fd5b838611156105ba57600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156105f45780818660140360031b1b83161692505b505092915050565b60006001820161060e5761060e61054a565b506001019056fea264697066735822122021c89a0ebcdb2523c453552212243b747d81b7c16f2f3e22d20bb9692240f3a364736f6c63430008170033\" as const;", "export const abi = [] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209bac814741dd376ccf59547680acabccb0310545d980db81a1b4c6c7f17cdbc164736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_delegator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"termsData_\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct SpecificActionERC20TransferBatchEnforcer.TermsData\",\n        \"components\": [\n          {\n            \"name\": \"tokenAddress\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"recipient\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"amount\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"firstTarget\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"firstCalldata\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"usedDelegations\",\n    \"inputs\": [\n      {\n        \"name\": \"delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"used\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"DelegationExecuted\",\n    \"inputs\": [\n      {\n        \"name\": \"delegationManager\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"delegationHash\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"delegator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b50610ccf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063414c3e3314610067578063a145832a14610083578063b99deb0e14610096578063b9cf5249146100bf578063d3eddcc514610067578063ed46336714610067575b600080fd5b610081610075366004610958565b50505050505050505050565b005b610081610091366004610958565b6100fa565b6100a96100a4366004610a25565b6106ce565b6040516100b69190610a67565b60405180910390f35b6100ea6100cd366004610af5565b600060208181529281526040808220909352908152205460ff1681565b60405190151581526020016100b6565b8561010981600160f81b610843565b61015a5760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d7479706560448201526064015b60405180910390fd5b86600881901b61016b816000610843565b6101c55760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b6064820152608401610151565b503360009081526020818152604080832088845290915290205460ff1615610245576040805162461bcd60e51b8152602060048201526024810191909152600080516020610c7a83398151915260448201527f456e666f726365723a64656c65676174696f6e2d616c72656164792d757365646064820152608401610151565b336000908152602081815260408083208884529091528120805460ff191660011790553690610274898961085a565b9092509050600281146102dd5760405162461bcd60e51b815260206004820152603b6024820152600080516020610c7a83398151915260448201527f456e666f726365723a696e76616c69642d62617463682d73697a6500000000006064820152608401610151565b60006102e98f8f6106ce565b905080606001516001600160a01b03168383600081811061030c5761030c610b1f565b905060200281019061031e9190610b35565b61032c906020810190610b55565b6001600160a01b031614158061036957508282600081811061035057610350610b1f565b90506020028101906103629190610b35565b6020013515155b806103c757508060800151805190602001208383600081811061038e5761038e610b1f565b90506020028101906103a09190610b35565b6103ae906040810190610b77565b6040516103bc929190610bbe565b604051809103902014155b156104335760405162461bcd60e51b81526020600482015260426024820152600080516020610c7a83398151915260448201527f456e666f726365723a696e76616c69642d66697273742d7472616e736163746960648201526137b760f11b608482015260a401610151565b80516001600160a01b03168383600181811061045157610451610b1f565b90506020028101906104639190610b35565b610471906020810190610b55565b6001600160a01b03161415806104ae57508282600181811061049557610495610b1f565b90506020028101906104a79190610b35565b6020013515155b806104ee5750828260018181106104c7576104c7610b1f565b90506020028101906104d99190610b35565b6104e7906040810190610b77565b9050604414155b80610554575063a9059cbb60e01b8383600181811061050f5761050f610b1f565b90506020028101906105219190610b35565b61052f906040810190610b77565b61053e91600491600091610bce565b61054791610bf8565b6001600160e01b03191614155b806105bf575080602001516001600160a01b03168383600181811061057b5761057b610b1f565b905060200281019061058d9190610b35565b61059b906040810190610b77565b6105aa91602491600491610bce565b6105b391610c28565b6001600160a01b031614155b8061061857508060400151838360018181106105dd576105dd610b1f565b90506020028101906105ef9190610b35565b6105fd906040810190610b77565b61060c91604491602491610bce565b61061591610c28565b14155b156106855760405162461bcd60e51b81526020600482015260436024820152600080516020610c7a83398151915260448201527f456e666f726365723a696e76616c69642d7365636f6e642d7472616e7361637460648201526234b7b760e91b608482015260a401610151565b6040516001600160a01b03881690899033907f76f83a16f9924b51c0c3ad67a44af3e517fbdec68ffa3729776df2ac0f03144090600090a4505050505050505050505050505050565b61071b6040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160006001600160a01b03168152602001606081525090565b605c8210156107805760405162461bcd60e51b815260206004820152603d6024820152600080516020610c7a83398151915260448201527f456e666f726365723a696e76616c69642d7465726d732d6c656e6774680000006064820152608401610151565b61078e601460008486610bce565b61079791610c46565b60601c81526107aa602860148486610bce565b6107b391610c46565b60601c60208201526107c9604860288486610bce565b6107d291610c28565b60408201526107e5605c60488486610bce565b6107ee91610c46565b606090811c9082015261080482605c8186610bce565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505050608082015292915050565b6001600160f81b0319828116908216145b92915050565b366000833580850160208587010360208201945081359350808460051b8301118360401c17156108925763ba597e7e6000526004601cfd5b83156108e9578392505b6001830392508260051b850135915081850160408101358082018381358201118460408501111782861782351760401c17156108e05763ba597e7e6000526004601cfd5b5050508261089c575b5050509250929050565b60008083601f84011261090557600080fd5b50813567ffffffffffffffff81111561091d57600080fd5b60208301915083602082850101111561093557600080fd5b9250929050565b80356001600160a01b038116811461095357600080fd5b919050565b60008060008060008060008060008060e08b8d03121561097757600080fd5b8a3567ffffffffffffffff8082111561098f57600080fd5b61099b8e838f016108f3565b909c509a5060208d01359150808211156109b457600080fd5b6109c08e838f016108f3565b909a50985060408d0135975060608d01359150808211156109e057600080fd5b506109ed8d828e016108f3565b90965094505060808b01359250610a0660a08c0161093c565b9150610a1460c08c0161093c565b90509295989b9194979a5092959850565b60008060208385031215610a3857600080fd5b823567ffffffffffffffff811115610a4f57600080fd5b610a5b858286016108f3565b90969095509350505050565b6000602080835260018060a01b038085511660208501528060208601511660408501526040850151606085015280606086015116608085015250608084015160a08085015280518060c086015260005b81811015610ad35782810184015186820160e001528301610ab7565b50600060e0828701015260e0601f19601f830116860101935050505092915050565b60008060408385031215610b0857600080fd5b610b118361093c565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b60008235605e19833603018112610b4b57600080fd5b9190910192915050565b600060208284031215610b6757600080fd5b610b708261093c565b9392505050565b6000808335601e19843603018112610b8e57600080fd5b83018035915067ffffffffffffffff821115610ba957600080fd5b60200191503681900382131561093557600080fd5b8183823760009101908152919050565b60008085851115610bde57600080fd5b83861115610beb57600080fd5b5050820193919092039150565b6001600160e01b03198135818116916004851015610c205780818660040360031b1b83161692505b505092915050565b8035602083101561085457600019602084900360031b1b1692915050565b6bffffffffffffffffffffffff198135818116916014851015610c205760149490940360031b84901b169092169291505056fe5370656369666963416374696f6e45524332305472616e736665724261746368a2646970667358221220e8d1de6d5cca88243b7e7a1d3b3a1ae6b1a75dad78f305486212fafaf9e3ca5264736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"receive\",\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"addStake\",\n    \"inputs\": [\n      {\n        \"name\": \"unstakeDelaySec\",\n        \"type\": \"uint32\",\n        \"internalType\": \"uint32\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"balanceOf\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"depositTo\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"deposits\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"deposit\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"staked\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      },\n      {\n        \"name\": \"stake\",\n        \"type\": \"uint112\",\n        \"internalType\": \"uint112\"\n      },\n      {\n        \"name\": \"unstakeDelaySec\",\n        \"type\": \"uint32\",\n        \"internalType\": \"uint32\"\n      },\n      {\n        \"name\": \"withdrawTime\",\n        \"type\": \"uint48\",\n        \"internalType\": \"uint48\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDepositInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"info\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct IStakeManager.DepositInfo\",\n        \"components\": [\n          {\n            \"name\": \"deposit\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"staked\",\n            \"type\": \"bool\",\n            \"internalType\": \"bool\"\n          },\n          {\n            \"name\": \"stake\",\n            \"type\": \"uint112\",\n            \"internalType\": \"uint112\"\n          },\n          {\n            \"name\": \"unstakeDelaySec\",\n            \"type\": \"uint32\",\n            \"internalType\": \"uint32\"\n          },\n          {\n            \"name\": \"withdrawTime\",\n            \"type\": \"uint48\",\n            \"internalType\": \"uint48\"\n          }\n        ]\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"unlockStake\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"withdrawStake\",\n    \"inputs\": [\n      {\n        \"name\": \"withdrawAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address payable\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"withdrawTo\",\n    \"inputs\": [\n      {\n        \"name\": \"withdrawAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address payable\"\n      },\n      {\n        \"name\": \"withdrawAmount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Deposited\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"totalDeposit\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"StakeLocked\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"totalStaked\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"unstakeDelaySec\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"StakeUnlocked\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"withdrawTime\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"StakeWithdrawn\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"withdrawAddress\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Withdrawn\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"withdrawAddress\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"error\",\n    \"name\": \"StringsInsufficientHexLength\",\n    \"inputs\": [\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"length\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ce1bfc0cd5aac1e748b751339a93cc065f5fd20fd73be10a7844adf26543eb8164736f6c63430008170033\" as const;", "export const abi = [] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122089188054053227534294662d666312081d2f72553264bdfc0ce4a353c15e0f6364736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"proxiableUUID\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCallData\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"value_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b506104f8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063414c3e331461005c578063a145832a14610078578063b99deb0e1461008b578063d3eddcc51461005c578063ed4633671461005c575b600080fd5b61007661006a366004610336565b50505050505050505050565b005b610076610086366004610336565b6100b0565b61009e610099366004610403565b6101f8565b60405190815260200160405180910390f35b856100bc816000610269565b61010d5760405162461bcd60e51b815260206004820181905260248201527f436176656174456e666f726365723a696e76616c69642d63616c6c2d7479706560448201526064015b60405180910390fd5b86600881901b61011e816000610269565b6101785760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b6064820152608401610104565b5060006101858888610280565b505091505060006101968e8e6101f8565b9050808211156101e85760405162461bcd60e51b815260206004820152601f60248201527f56616c75654c7465456e666f726365723a76616c75652d746f6f2d68696768006044820152606401610104565b5050505050505050505050505050565b6000602082146102585760405162461bcd60e51b815260206004820152602560248201527f56616c75654c7465456e666f726365723a696e76616c69642d7465726d732d6c6044820152640cadccee8d60db1b6064820152608401610104565b6102628284610445565b9392505050565b6001600160f81b0319828116908216145b92915050565b60008036816102926014828789610463565b61029b9161048d565b60601c93506102ae603460148789610463565b6102b791610445565b92506102c68560348189610463565b949793965094505050565b60008083601f8401126102e357600080fd5b50813567ffffffffffffffff8111156102fb57600080fd5b60208301915083602082850101111561031357600080fd5b9250929050565b80356001600160a01b038116811461033157600080fd5b919050565b60008060008060008060008060008060e08b8d03121561035557600080fd5b8a3567ffffffffffffffff8082111561036d57600080fd5b6103798e838f016102d1565b909c509a5060208d013591508082111561039257600080fd5b61039e8e838f016102d1565b909a50985060408d0135975060608d01359150808211156103be57600080fd5b506103cb8d828e016102d1565b90965094505060808b013592506103e460a08c0161031a565b91506103f260c08c0161031a565b90509295989b9194979a5092959850565b6000806020838503121561041657600080fd5b823567ffffffffffffffff81111561042d57600080fd5b610439858286016102d1565b90969095509350505050565b8035602083101561027a57600019602084900360031b1b1692915050565b6000808585111561047357600080fd5b8386111561048057600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156104ba5780818660140360031b1b83161692505b50509291505056fea26469706673582212201b32f956e1bfeecade9436bbfc83066c0610b5679c49ae7d06d58eaeb4e24ff564736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"PAYMASTER_DATA_OFFSET\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"PAYMASTER_POSTOP_GAS_OFFSET\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"PAYMASTER_VALIDATION_GAS_OFFSET\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x60a7610034600b8282823980515f1a60731461002857634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106046575f3560e01c806325093e1b14604a578063b29a8ff4146063578063ede3150214606a575b5f80fd5b6051602481565b60405190815260200160405180910390f35b6051601481565b605160348156fea2646970667358221220e3e47e9c438ff94c86dca42d7dcd69637923bbba71e55fc90068fd2fbb4991dc64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"UPGRADE_INTERFACE_VERSION\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"proxiableUUID\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"upgradeToAndCall\",\n    \"inputs\": [\n      {\n        \"name\": \"newImplementation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Upgraded\",\n    \"inputs\": [\n      {\n        \"name\": \"implementation\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AddressEmptyCode\",\n    \"inputs\": [\n      {\n        \"name\": \"target\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1967InvalidImplementation\",\n    \"inputs\": [\n      {\n        \"name\": \"implementation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1967NonPayable\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"FailedInnerCall\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UUPSUnauthorizedCallContext\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UUPSUnsupportedProxiableUUID\",\n    \"inputs\": [\n      {\n        \"name\": \"slot\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"afterAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"afterHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeAllHook\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"beforeHook\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTermsInfo\",\n    \"inputs\": [\n      {\n        \"name\": \"_terms\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"timestampAfterThreshold_\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      },\n      {\n        \"name\": \"timestampBeforeThreshold_\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x608060405234801561001057600080fd5b506104e7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063414c3e331461005c578063a145832a14610078578063b99deb0e1461008b578063d3eddcc51461005c578063ed4633671461005c575b600080fd5b61007661006a36600461033f565b50505050505050505050565b005b61007661008636600461033f565b6100c2565b61009e61009936600461040c565b61023a565b604080516001600160801b0393841681529290911660208301520160405180910390f35b85600881901b6001600160f81b03198116156101335760405162461bcd60e51b815260206004820152602560248201527f436176656174456e666f726365723a696e76616c69642d657865637574696f6e6044820152642d7479706560d81b60648201526084015b60405180910390fd5b506000806101418d8d61023a565b90925090506001600160801b038216156101b857816001600160801b031642116101b85760405162461bcd60e51b815260206004820152602260248201527f54696d657374616d70456e666f726365723a6561726c792d64656c656761746960448201526137b760f11b606482015260840161012a565b6001600160801b0381161561022b57806001600160801b0316421061022b5760405162461bcd60e51b8152602060048201526024808201527f54696d657374616d70456e666f726365723a657870697265642d64656c6567616044820152633a34b7b760e11b606482015260840161012a565b50505050505050505050505050565b6000806020831461029c5760405162461bcd60e51b815260206004820152602660248201527f54696d657374616d70456e666f726365723a696e76616c69642d7465726d732d6044820152650d8cadccee8d60d31b606482015260840161012a565b6102a9836010818761044e565b6102b291610478565b60801c90506102c560106000858761044e565b6102ce91610478565b60801c91509250929050565b60008083601f8401126102ec57600080fd5b50813567ffffffffffffffff81111561030457600080fd5b60208301915083602082850101111561031c57600080fd5b9250929050565b80356001600160a01b038116811461033a57600080fd5b919050565b60008060008060008060008060008060e08b8d03121561035e57600080fd5b8a3567ffffffffffffffff8082111561037657600080fd5b6103828e838f016102da565b909c509a5060208d013591508082111561039b57600080fd5b6103a78e838f016102da565b909a50985060408d0135975060608d01359150808211156103c757600080fd5b506103d48d828e016102da565b90965094505060808b013592506103ed60a08c01610323565b91506103fb60c08c01610323565b90509295989b9194979a5092959850565b6000806020838503121561041f57600080fd5b823567ffffffffffffffff81111561043657600080fd5b610442858286016102da565b90969095509350505050565b6000808585111561045e57600080fd5b8386111561046b57600080fd5b5050820193919092039150565b6fffffffffffffffffffffffffffffffff1981358181169160108510156104a95780818660100360031b1b83161692505b50509291505056fea2646970667358221220493f1dd46bf21857fc13b6e41e6f29c1c53fbb939ca84fcd1536c7cf1000d18064736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"fallback\",\n    \"stateMutability\": \"payable\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x\" as const;", "export const abi = [] as const;\n\n\nexport const bytecode = \"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122034801a6b4534dfc9cfe9c8b31e018c344c3329b6bf478762f2158ce5781d2b7a64736f6c63430008170033\" as const;", "export const abi = [\n  {\n    \"type\": \"constructor\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationManager\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IDelegationManager\"\n      },\n      {\n        \"name\": \"_entryPoint\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IEntryPoint\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"receive\",\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"DOMAIN_VERSION\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"MAX_NUMBER_OF_SIGNERS\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"NAME\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"PACKED_USER_OP_TYPEHASH\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"UPGRADE_INTERFACE_VERSION\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"VERSION\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"addDeposit\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"addSigner\",\n    \"inputs\": [\n      {\n        \"name\": \"_newSigner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"delegationManager\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IDelegationManager\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"disableDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegation\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"eip712Domain\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"fields\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"bytes1\"\n      },\n      {\n        \"name\": \"name\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"version\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"chainId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"verifyingContract\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"salt\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"extensions\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"enableDelegation\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegation\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Delegation\",\n        \"components\": [\n          {\n            \"name\": \"delegate\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"delegator\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"caveats\",\n            \"type\": \"tuple[]\",\n            \"internalType\": \"struct Caveat[]\",\n            \"components\": [\n              {\n                \"name\": \"enforcer\",\n                \"type\": \"address\",\n                \"internalType\": \"address\"\n              },\n              {\n                \"name\": \"terms\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              },\n              {\n                \"name\": \"args\",\n                \"type\": \"bytes\",\n                \"internalType\": \"bytes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"salt\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"entryPoint\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"contract IEntryPoint\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"execute\",\n    \"inputs\": [\n      {\n        \"name\": \"_execution\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct Execution\",\n        \"components\": [\n          {\n            \"name\": \"target\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"value\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"execute\",\n    \"inputs\": [\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"executeFromExecutor\",\n    \"inputs\": [\n      {\n        \"name\": \"_mode\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"ModeCode\"\n      },\n      {\n        \"name\": \"_executionCalldata\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"returnData_\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDeposit\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDomainHash\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getImplementation\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getInitializedVersion\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint64\",\n        \"internalType\": \"uint64\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getNonce\",\n    \"inputs\": [\n      {\n        \"name\": \"_key\",\n        \"type\": \"uint192\",\n        \"internalType\": \"uint192\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getNonce\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getPackedUserOperationHash\",\n    \"inputs\": [\n      {\n        \"name\": \"_userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getPackedUserOperationTypedDataHash\",\n    \"inputs\": [\n      {\n        \"name\": \"_userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getSigners\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address[]\",\n        \"internalType\": \"address[]\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getSignersCount\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getThreshold\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"initialize\",\n    \"inputs\": [\n      {\n        \"name\": \"_signers\",\n        \"type\": \"address[]\",\n        \"internalType\": \"address[]\"\n      },\n      {\n        \"name\": \"_threshold\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isDelegationDisabled\",\n    \"inputs\": [\n      {\n        \"name\": \"_delegationHash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isSigner\",\n    \"inputs\": [\n      {\n        \"name\": \"_addr\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isValidSignature\",\n    \"inputs\": [\n      {\n        \"name\": \"_hash\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_signature\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"magicValue_\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC1155BatchReceived\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC1155Received\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"onERC721Received\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"proxiableUUID\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"redeemDelegations\",\n    \"inputs\": [\n      {\n        \"name\": \"_permissionContexts\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      },\n      {\n        \"name\": \"_modes\",\n        \"type\": \"bytes32[]\",\n        \"internalType\": \"ModeCode[]\"\n      },\n      {\n        \"name\": \"_executionCallDatas\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"reinitialize\",\n    \"inputs\": [\n      {\n        \"name\": \"_version\",\n        \"type\": \"uint64\",\n        \"internalType\": \"uint64\"\n      },\n      {\n        \"name\": \"_signers\",\n        \"type\": \"address[]\",\n        \"internalType\": \"address[]\"\n      },\n      {\n        \"name\": \"_threshold\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"_clearSigners\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"removeSigner\",\n    \"inputs\": [\n      {\n        \"name\": \"_oldSigner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"replaceSigner\",\n    \"inputs\": [\n      {\n        \"name\": \"_oldSigner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_newSigner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsInterface\",\n    \"inputs\": [\n      {\n        \"name\": \"_interfaceId\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"updateMultiSigParameters\",\n    \"inputs\": [\n      {\n        \"name\": \"_signers\",\n        \"type\": \"address[]\",\n        \"internalType\": \"address[]\"\n      },\n      {\n        \"name\": \"_threshold\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"_clearSigners\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"updateThreshold\",\n    \"inputs\": [\n      {\n        \"name\": \"_threshold\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"upgradeToAndCall\",\n    \"inputs\": [\n      {\n        \"name\": \"_newImplementation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"upgradeToAndCallAndRetainStorage\",\n    \"inputs\": [\n      {\n        \"name\": \"_newImplementation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"validateUserOp\",\n    \"inputs\": [\n      {\n        \"name\": \"_userOp\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct PackedUserOperation\",\n        \"components\": [\n          {\n            \"name\": \"sender\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"initCode\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"callData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"accountGasLimits\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"preVerificationGas\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"gasFees\",\n            \"type\": \"bytes32\",\n            \"internalType\": \"bytes32\"\n          },\n          {\n            \"name\": \"paymasterAndData\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"signature\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          }\n        ]\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_missingAccountFunds\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"validationData_\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"withdrawDeposit\",\n    \"inputs\": [\n      {\n        \"name\": \"_withdrawAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address payable\"\n      },\n      {\n        \"name\": \"_withdrawAmount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"AddedSigner\",\n    \"inputs\": [\n      {\n        \"name\": \"signer\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"ClearedStorage\",\n    \"inputs\": [],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"EIP712DomainChanged\",\n    \"inputs\": [],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Initialized\",\n    \"inputs\": [\n      {\n        \"name\": \"version\",\n        \"type\": \"uint64\",\n        \"indexed\": false,\n        \"internalType\": \"uint64\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"RemovedSigner\",\n    \"inputs\": [\n      {\n        \"name\": \"signer\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"ReplacedSigner\",\n    \"inputs\": [\n      {\n        \"name\": \"oldSigner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"newSigner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SentPrefund\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"success\",\n        \"type\": \"bool\",\n        \"indexed\": false,\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SetDelegationManager\",\n    \"inputs\": [\n      {\n        \"name\": \"newDelegationManager\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"contract IDelegationManager\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SetEntryPoint\",\n    \"inputs\": [\n      {\n        \"name\": \"entryPoint\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"contract IEntryPoint\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"TryExecuteUnsuccessful\",\n    \"inputs\": [\n      {\n        \"name\": \"batchExecutionindex\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"result\",\n        \"type\": \"bytes\",\n        \"indexed\": false,\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"UpdatedThreshold\",\n    \"inputs\": [\n      {\n        \"name\": \"threshold\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Upgraded\",\n    \"inputs\": [\n      {\n        \"name\": \"implementation\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AddressEmptyCode\",\n    \"inputs\": [\n      {\n        \"name\": \"target\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AlreadyASigner\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignature\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignatureLength\",\n    \"inputs\": [\n      {\n        \"name\": \"length\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ECDSAInvalidSignatureS\",\n    \"inputs\": [\n      {\n        \"name\": \"s\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1967InvalidImplementation\",\n    \"inputs\": [\n      {\n        \"name\": \"implementation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1967NonPayable\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ExecutionFailed\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"FailedInnerCall\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InsufficientSigners\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidInitialization\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidShortString\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidSignerAddress\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"InvalidThreshold\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotASigner\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotDelegationManager\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotEntryPoint\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotEntryPointOrSelf\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotInitializing\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"NotSelf\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"StringTooLong\",\n    \"inputs\": [\n      {\n        \"name\": \"str\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"TooManySigners\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UUPSUnauthorizedCallContext\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UUPSUnsupportedProxiableUUID\",\n    \"inputs\": [\n      {\n        \"name\": \"slot\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UnsupportedCallType\",\n    \"inputs\": [\n      {\n        \"name\": \"callType\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"CallType\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"UnsupportedExecType\",\n    \"inputs\": [\n      {\n        \"name\": \"execType\",\n        \"type\": \"bytes1\",\n        \"internalType\": \"ExecType\"\n      }\n    ]\n  }\n] as const;\n\n\nexport const bytecode = \"\" as const;", "export const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"verify\",\n    \"inputs\": [\n      {\n        \"name\": \"message\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"r\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"s\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"qx\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"qy\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  }\n] as const;\n\n\nexport const bytecode = \"0x610c9761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063a1f312811461003a575b600080fd5b61004d610048366004610bf0565b610061565b604051901515815260200160405180910390f35b600084158061007e5750600080516020610c428339815191528510155b80610087575083155b806100a05750600080516020610c428339815191528410155b156100ad5750600061020a565b6100fe600160601b63ffffffff60c01b03196bfffffffffffffffffffffffd63ffffffff60c01b03197f5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b8686610213565b151560000361010f5750600061020a565b600061011a856102be565b90506000600080516020610c4283398151915282890990506000600080516020610c42833981519152838909905060006040518060c00160405280888152602001878152602001600160601b63ffffffff60c01b031981526020016bfffffffffffffffffffffffd63ffffffff60c01b031981526020017f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29681526020017f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5815250905060006101ea828585610337565b509050600080516020610c428339815191528a8103820815955050505050505b95945050505050565b600082158015610221575081155b8061022c5750858310155b806102375750858210155b156102445750600061020a565b6000868061025457610254610c2b565b83840990506000878061026957610269610c2b565b888061027757610277610c2b565b888709898061028857610288610c2b565b878b8061029757610297610c2b565b898a090908905087806102ac576102ac610c2b565b86820891909114979650505050505050565b600060405160208152602080820152602060408201528260608201527fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f6080820152600080516020610c4283398151915260a082015260208160c0836005600019fa610330576107fe60405260206040fd5b5192915050565b600080600160ff1b8415801561034b575083155b1561035d576000809250925050610be8565b60008061080060405101604052604088015161082060405101526108206040510151610466565b6000806000808886600209898182098a8188098b82840992508b8c8d8c8d098f098d8e8b8c096003090895508b8b840993508b8a830994508b8c8260028f03098d8889090896508b8c828e03890887099150508a818c8a8509089450505082890392509650965096509692505050565b9086039086828186890908955086818803888588090894506000806000808a898a0993508a89850992508a84880991508a83890990508a84860996508a8b8860028e03098c858e038e8e8f09080893508a8a8c868e038a080994508a8b84880986089250975097509750979350505050565b60a0898101516080808c01516040519182015291820152600160c0820181905260e0909101526104a760608a01518260018060a08e015160808f0151610384565b95509350955095506104d683838789610100604051019081526020810191909152604081019190915260600152565b6104ed8160a08b015160808c015186868a8c6103f4565b955093509550955061051c83838789610180604051019081526020810191909152604081019190915260600152565b61054c60018060208c015160008d0151610200604051019081526020810191909152604081019190915260600152565b6080890151955060a089015194506105728160208b015160008c01516001808a8c6103f4565b95509350955095506105a183838789610280604051019081526020810191909152604081019190915260600152565b6105b88160a08b015160808c015186868a8c6103f4565b95509350955095506105e783838789610300604051019081526020810191909152604081019190915260600152565b6105fe8160a08b015160808c015186868a8c6103f4565b955093509550955061062d83838789610380604051019081526020810191909152604081019190915260600152565b600089015195506020890151945061064e60608a015182600180898b610384565b955093509550955061067d83838789610400604051019081526020810191909152604081019190915260600152565b6106948160a08b015160808c015186868a8c6103f4565b95509350955095506106c383838789610480604051019081526020810191909152604081019190915260600152565b6106da8160a08b015160808c015186868a8c6103f4565b955093509550955061070983838789610500604051019081526020810191909152604081019190915260600152565b6107208160a08b015160808c015186868a8c6103f4565b955093509550955061074f83838789610580604051019081526020810191909152604081019190915260600152565b6104006040510151955061042060405101519450610440604051015191506104606040510151925061078e8160208b015160008c015186868a8c6103f4565b95509350955095506107bd83838789610600604051019081526020810191909152604081019190915260600152565b6107d48160a08b015160808c015186868a8c6103f4565b955093509550955061080383838789610680604051019081526020810191909152604081019190915260600152565b61081a8160a08b015160808c015186868a8c6103f4565b955093509550955061084983838789610700604051019081526020810191909152604081019190915260600152565b6108608160a08b015160808c015186868a8c6103f4565b95509350955095505061089082828688610780604051019081526020810191909152604081019190915260600152565b600091505b816108d5578286161560010360031b8360011c87161560010360021b018388161560010360011b8460011c891615600103010191508260021c9250610895565b506040805160079290921b82018051602082015192820151606090920151610820850151919750929550919290915b8415610b7d5780866002098181820982818a09838284099250838487880960608f015109848186878e8f09600309089050848885099750848784099650600285039a508485838d0986838409089a5084858387038d088209925050508281848a850908830397508291508790506002098181820982818a09838284099250838487880960608f015109848186878e8f09600309089050848885099750848784099650600285039a508485838d0986838409089a5084858387038d088209925050508281848a850908975050508488161560010360031b8560011c89161560010360021b01858a161560010360011b8660011c8b1615600103010180610a0d575094850394610b72565b60071b828101805160609091015161086085015284610a48579083016020810151604082015160609092015192995097509094509250610b72565b82836108608601518a09848885602001880151090861084085015290830160400151908280838b0984038487840908610840850151610b005780610b005783896002860309925083838409905083818b09610840860152838184099250838487880960608f0151099150838285868d8e09600309089150838784099650838682099550838461084087015160028703098584850908995083848b8603610840880151088309905083848a850982089850505050610b72565b83818209915083818309905083838584890909955083838b0992508361086086015185838a09099650838485846002880309850985838703876108408a01516108408b01510908089950838284099150838482866108608901518d090985610840880151878e89038708090898505050505b8460021c9450610904565b61088060408190526108e085905260208082526108a08190526108c08190526001198301610900526109208390529092508260c0816005600019fa610bc8576107ff60405260206040fd5b808251870995508082518409925080838409925080838809965050505050505b935093915050565b600080600080600060a08688031215610c0857600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b634e487b7160e01b600052601260045260246000fdfeffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551a26469706673582212202032a0a92437c4c7498b5f3dbbeea2851a22a8974a563aed836730aa07e1cdda64736f6c63430008170033\" as const;", "import type { Client } from '../clients/createClient.js'\nimport type { PublicActions } from '../clients/decorators/public.js'\nimport type { WalletActions } from '../clients/decorators/wallet.js'\nimport type { Transport } from '../clients/transports/createTransport.js'\nimport type { Account } from '../types/account.js'\nimport type { Chain } from '../types/chain.js'\nimport type { RpcSchema } from '../types/eip1193.js'\n\n/**\n * Retrieves and returns an action from the client (if exists), and falls\n * back to the tree-shakable action.\n *\n * Useful for extracting overridden actions from a client (ie. if a consumer\n * wants to override the `sendTransaction` implementation).\n */\nexport function getAction<\n  transport extends Transport,\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  rpcSchema extends RpcSchema | undefined,\n  extended extends { [key: string]: unknown },\n  client extends Client<transport, chain, account, rpcSchema, extended>,\n  parameters,\n  returnType,\n>(\n  client: client,\n  actionFn: (_: any, parameters: parameters) => returnType,\n  // Some minifiers drop `Function.prototype.name`, or replace it with short letters,\n  // meaning that `actionFn.name` will not always work. For that case, the consumer\n  // needs to pass the name explicitly.\n  name: keyof PublicActions | keyof WalletActions | (string & {}),\n): (parameters: parameters) => returnType {\n  const action_implicit = client[actionFn.name]\n  if (typeof action_implicit === 'function')\n    return action_implicit as (params: parameters) => returnType\n\n  const action_explicit = client[name]\n  if (typeof action_explicit === 'function')\n    return action_explicit as (params: parameters) => returnType\n\n  return (params) => actionFn(client, params)\n}\n", "import { BaseError } from './base.js'\n\nexport type FilterTypeNotSupportedErrorType = FilterTypeNotSupportedError & {\n  name: 'FilterTypeNotSupportedError'\n}\nexport class FilterTypeNotSupportedError extends BaseError {\n  constructor(type: string) {\n    super(`Filter type \"${type}\" is not supported.`, {\n      name: 'FilterTypeNotSupportedError',\n    })\n  }\n}\n", "import type {\n  Abi,\n  AbiParameter,\n  AbiParameterToPrimitiveType,\n  ExtractAbiEvents,\n} from 'abitype'\n\nimport {\n  AbiEventNotFoundError,\n  type AbiEventNotFoundErrorType,\n} from '../../errors/abi.js'\nimport {\n  FilterTypeNotSupportedError,\n  type FilterTypeNotSupportedErrorType,\n} from '../../errors/log.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  ContractEventArgs,\n  ContractEventName,\n  EventDefinition,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport {\n  type ToEventSelectorErrorType,\n  toEventSelector,\n} from '../hash/toEventSelector.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from './encodeAbiParameters.js'\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\nimport { type GetAbiItemErrorType, getAbiItem } from './getAbiItem.js'\n\nconst docsPath = '/docs/contract/encodeEventTopics'\n\nexport type EncodeEventTopicsParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> | undefined = ContractEventName<abi>,\n  ///\n  hasEvents = abi extends Abi\n    ? Abi extends abi\n      ? true\n      : [ExtractAbiEvents<abi>] extends [never]\n        ? false\n        : true\n    : true,\n  allArgs = ContractEventArgs<\n    abi,\n    eventName extends ContractEventName<abi>\n      ? eventName\n      : ContractEventName<abi>\n  >,\n  allErrorNames = ContractEventName<abi>,\n> = {\n  abi: abi\n  args?: allArgs | undefined\n} & UnionEvaluate<\n  IsNarrowable<abi, Abi> extends true\n    ? abi['length'] extends 1\n      ? { eventName?: eventName | allErrorNames | undefined }\n      : { eventName: eventName | allErrorNames }\n    : { eventName?: eventName | allErrorNames | undefined }\n> &\n  (hasEvents extends true ? unknown : never)\n\nexport type EncodeEventTopicsReturnType = [Hex, ...(Hex | Hex[] | null)[]]\n\nexport type EncodeEventTopicsErrorType =\n  | AbiEventNotFoundErrorType\n  | EncodeArgErrorType\n  | FormatAbiItemErrorType\n  | GetAbiItemErrorType\n  | ToEventSelectorErrorType\n  | ErrorType\n\nexport function encodeEventTopics<\n  const abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi> | undefined = undefined,\n>(\n  parameters: EncodeEventTopicsParameters<abi, eventName>,\n): EncodeEventTopicsReturnType {\n  const { abi, eventName, args } = parameters as EncodeEventTopicsParameters\n\n  let abiItem = abi[0]\n  if (eventName) {\n    const item = getAbiItem({ abi, name: eventName })\n    if (!item) throw new AbiEventNotFoundError(eventName, { docsPath })\n    abiItem = item\n  }\n\n  if (abiItem.type !== 'event')\n    throw new AbiEventNotFoundError(undefined, { docsPath })\n\n  const definition = formatAbiItem(abiItem)\n  const signature = toEventSelector(definition as EventDefinition)\n\n  let topics: (Hex | Hex[] | null)[] = []\n  if (args && 'inputs' in abiItem) {\n    const indexedInputs = abiItem.inputs?.filter(\n      (param) => 'indexed' in param && param.indexed,\n    )\n    const args_ = Array.isArray(args)\n      ? args\n      : Object.values(args).length > 0\n        ? (indexedInputs?.map((x: any) => (args as any)[x.name]) ?? [])\n        : []\n\n    if (args_.length > 0) {\n      topics =\n        indexedInputs?.map((param, i) => {\n          if (Array.isArray(args_[i]))\n            return args_[i].map((_: any, j: number) =>\n              encodeArg({ param, value: args_[i][j] }),\n            )\n          return typeof args_[i] !== 'undefined' && args_[i] !== null\n            ? encodeArg({ param, value: args_[i] })\n            : null\n        }) ?? []\n    }\n  }\n  return [signature, ...topics]\n}\n\nexport type EncodeArgErrorType =\n  | Keccak256ErrorType\n  | ToBytesErrorType\n  | EncodeAbiParametersErrorType\n  | FilterTypeNotSupportedErrorType\n  | ErrorType\n\nfunction encodeArg({\n  param,\n  value,\n}: {\n  param: AbiParameter\n  value: AbiParameterToPrimitiveType<AbiParameter>\n}) {\n  if (param.type === 'string' || param.type === 'bytes')\n    return keccak256(toBytes(value as string))\n  if (param.type === 'tuple' || param.type.match(/^(.*)\\[(\\d+)?\\]$/))\n    throw new FilterTypeNotSupportedError(param.type)\n  return encodeAbiParameters([param], [value])\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { OnResponseFn } from '../../clients/transports/fallback.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { EIP1193RequestFn, PublicRpcSchema } from '../../types/eip1193.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { Filter } from '../../types/utils.js'\n\ntype CreateFilterRequestScopeParameters = {\n  method:\n    | 'eth_newFilter'\n    | 'eth_newPendingTransactionFilter'\n    | 'eth_newBlockFilter'\n}\n\ntype FilterRpcSchema = Filter<\n  PublicRpcSchema,\n  { Method: 'eth_getFilterLogs' | 'eth_getFilterChanges' }\n>\n\ntype CreateFilterRequestScopeReturnType = (\n  id: Hex,\n) => EIP1193RequestFn<FilterRpcSchema>\n\n/**\n * Scopes `request` to the filter ID. If the client is a fallback, it will\n * listen for responses and scope the child transport `request` function\n * to the successful filter ID.\n */\nexport function createFilterRequestScope<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  { method }: CreateFilterRequestScopeParameters,\n): CreateFilterRequestScopeReturnType {\n  const requestMap: Record<Hex, EIP1193RequestFn> = {}\n\n  if (client.transport.type === 'fallback')\n    client.transport.onResponse?.(\n      ({\n        method: method_,\n        response: id,\n        status,\n        transport,\n      }: Parameters<OnResponseFn>[0]) => {\n        if (status === 'success' && method === method_)\n          requestMap[id as Hex] = transport.request\n      },\n    )\n\n  return ((id) =>\n    requestMap[id] || client.request) as CreateFilterRequestScopeReturnType\n}\n", "import type { Abi, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Hex } from '../../types/misc.js'\nimport {\n  type EncodeEventTopicsErrorType,\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\n\nexport type CreateContractEventFilterParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> | undefined = undefined,\n  args extends\n    | MaybeExtractEventArgsFromAbi<abi, eventName>\n    | undefined = undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = {\n  address?: Address | Address[] | undefined\n  abi: abi\n  eventName?: eventName | ContractEventName<abi> | undefined\n  fromBlock?: fromBlock | BlockNumber | BlockTag | undefined\n  /**\n   * Whether or not the logs must match the indexed/non-indexed arguments in the event ABI item.\n   * @default false\n   */\n  strict?: strict | boolean | undefined\n  toBlock?: toBlock | BlockNumber | BlockTag | undefined\n} & (undefined extends eventName\n  ? {\n      args?: undefined\n    }\n  : MaybeExtractEventArgsFromAbi<abi, eventName> extends infer eventFilterArgs\n    ? {\n        args?:\n          | eventFilterArgs\n          | (args extends eventFilterArgs ? args : never)\n          | undefined\n      }\n    : {\n        args?: undefined\n      })\n\nexport type CreateContractEventFilterReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> | undefined = undefined,\n  args extends\n    | MaybeExtractEventArgsFromAbi<abi, eventName>\n    | undefined = undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = Filter<'event', abi, eventName, args, strict, fromBlock, toBlock>\n\nexport type CreateContractEventFilterErrorType =\n  | EncodeEventTopicsErrorType\n  | RequestErrorType\n  | NumberToHexErrorType\n  | ErrorType\n\n/**\n * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs).\n *\n * - Docs: https://viem.sh/docs/contract/createContractEventFilter\n *\n * @param client - Client to use\n * @param parameters - {@link CreateContractEventFilterParameters}\n * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateContractEventFilterReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createContractEventFilter } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createContractEventFilter(client, {\n *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n * })\n */\nexport async function createContractEventFilter<\n  chain extends Chain | undefined,\n  const abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi> | undefined,\n  args extends MaybeExtractEventArgsFromAbi<abi, eventName> | undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  client: Client<Transport, chain>,\n  parameters: CreateContractEventFilterParameters<\n    abi,\n    eventName,\n    args,\n    strict,\n    fromBlock,\n    toBlock\n  >,\n): Promise<\n  CreateContractEventFilterReturnType<\n    abi,\n    eventName,\n    args,\n    strict,\n    fromBlock,\n    toBlock\n  >\n> {\n  const { address, abi, args, eventName, fromBlock, strict, toBlock } =\n    parameters as CreateContractEventFilterParameters\n\n  const getRequest = createFilterRequestScope(client, {\n    method: 'eth_newFilter',\n  })\n\n  const topics = eventName\n    ? encodeEventTopics({\n        abi,\n        args,\n        eventName,\n      } as unknown as EncodeEventTopicsParameters)\n    : undefined\n  const id: Hex = await client.request({\n    method: 'eth_newFilter',\n    params: [\n      {\n        address,\n        fromBlock:\n          typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n        toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\n        topics,\n      },\n    ],\n  })\n\n  return {\n    abi,\n    args,\n    eventName,\n    id,\n    request: getRequest(id),\n    strict: Boolean(strict),\n    type: 'event',\n  } as unknown as CreateContractEventFilterReturnType<\n    abi,\n    eventName,\n    args,\n    strict,\n    fromBlock,\n    toBlock\n  >\n}\n", "import type { Abi, Address } from 'abitype'\n\nimport { AbiDecodingZeroDataError } from '../../errors/abi.js'\nimport { BaseError } from '../../errors/base.js'\nimport {\n  ContractFunctionExecutionError,\n  type ContractFunctionExecutionErrorType,\n  ContractFunctionRevertedError,\n  type ContractFunctionRevertedErrorType,\n  ContractFunctionZeroDataError,\n  type ContractFunctionZeroDataErrorType,\n  RawContractError,\n} from '../../errors/contract.js'\nimport { RpcRequestError } from '../../errors/request.js'\nimport { InternalRpcError } from '../../errors/rpc.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\nconst EXECUTION_REVERTED_ERROR_CODE = 3\n\nexport type GetContractErrorReturnType<cause = ErrorType> = Omit<\n  ContractFunctionExecutionErrorType,\n  'cause'\n> & {\n  cause:\n    | cause\n    | ContractFunctionZeroDataErrorType\n    | ContractFunctionRevertedErrorType\n}\n\nexport function getContractError<err extends ErrorType<string>>(\n  err: err,\n  {\n    abi,\n    address,\n    args,\n    docsPath,\n    functionName,\n    sender,\n  }: {\n    abi: Abi\n    args: any\n    address?: Address | undefined\n    docsPath?: string | undefined\n    functionName: string\n    sender?: Address | undefined\n  },\n): GetContractErrorReturnType {\n  const error = (\n    err instanceof RawContractError\n      ? err\n      : err instanceof BaseError\n        ? err.walk((err) => 'data' in (err as Error)) || err.walk()\n        : {}\n  ) as BaseError\n  const { code, data, details, message, shortMessage } =\n    error as RawContractError\n\n  const cause = (() => {\n    if (err instanceof AbiDecodingZeroDataError)\n      return new ContractFunctionZeroDataError({ functionName })\n    if (\n      [EXECUTION_REVERTED_ERROR_CODE, InternalRpcError.code].includes(code) &&\n      (data || details || message || shortMessage)\n    ) {\n      return new ContractFunctionRevertedError({\n        abi,\n        data: typeof data === 'object' ? data.data : data,\n        functionName,\n        message:\n          error instanceof RpcRequestError\n            ? details\n            : (shortMessage ?? message),\n      })\n    }\n    return err\n  })()\n\n  return new ContractFunctionExecutionError(cause as BaseError, {\n    abi,\n    args,\n    contractAddress: address,\n    docsPath,\n    functionName,\n    sender,\n  }) as GetContractErrorReturnType\n}\n", "import type { Address } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport {\n  type ChecksumAddressErrorType,\n  checksumAddress,\n} from '../../utils/address/getAddress.js'\nimport {\n  type Keccak256ErrorType,\n  keccak256,\n} from '../../utils/hash/keccak256.js'\n\nexport type PublicKeyToAddressErrorType =\n  | ChecksumAddressErrorType\n  | Keccak256ErrorType\n  | ErrorType\n\n/**\n * @description Converts an ECDSA public key to an address.\n *\n * @param publicKey The public key to convert.\n *\n * @returns The address.\n */\nexport function publicKeyToAddress(publicKey: Hex): Address {\n  const address = keccak256(`0x${publicKey.substring(4)}`).substring(26)\n  return checksumAddress(`0x${address}`) as Address\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { size } from '../data/size.js'\nimport {\n  type HexToNumberErrorType,\n  hexToBigInt,\n  hexToNumber,\n} from '../encoding/fromHex.js'\nimport { toHex } from '../encoding/toHex.js'\n\nexport type RecoverPublicKeyParameters = {\n  hash: Hex | ByteArray\n  signature: Hex | ByteArray | Signature\n}\n\nexport type RecoverPublicKeyReturnType = Hex\n\nexport type RecoverPublicKeyErrorType =\n  | HexToNumberErrorType\n  | IsHexErrorType\n  | ErrorType\n\nexport async function recoverPublicKey({\n  hash,\n  signature,\n}: RecoverPublicKeyParameters): Promise<RecoverPublicKeyReturnType> {\n  const hashHex = isHex(hash) ? hash : toHex(hash)\n\n  const { secp256k1 } = await import('@noble/curves/secp256k1')\n  const signature_ = (() => {\n    // typeof signature: `Signature`\n    if (typeof signature === 'object' && 'r' in signature && 's' in signature) {\n      const { r, s, v, yParity } = signature\n      const yParityOrV = Number(yParity ?? v)!\n      const recoveryBit = toRecoveryBit(yParityOrV)\n      return new secp256k1.Signature(\n        hexToBigInt(r),\n        hexToBigInt(s),\n      ).addRecoveryBit(recoveryBit)\n    }\n\n    // typeof signature: `Hex | ByteArray`\n    const signatureHex = isHex(signature) ? signature : toHex(signature)\n    if (size(signatureHex) !== 65) throw new Error('invalid signature length')\n    const yParityOrV = hexToNumber(`0x${signatureHex.slice(130)}`)\n    const recoveryBit = toRecoveryBit(yParityOrV)\n    return secp256k1.Signature.fromCompact(\n      signatureHex.substring(2, 130),\n    ).addRecoveryBit(recoveryBit)\n  })()\n\n  const publicKey = signature_\n    .recoverPublicKey(hashHex.substring(2))\n    .toHex(false)\n  return `0x${publicKey}`\n}\n\nfunction toRecoveryBit(yParityOrV: number) {\n  if (yParityOrV === 0 || yParityOrV === 1) return yParityOrV\n  if (yParityOrV === 27) return 0\n  if (yParityOrV === 28) return 1\n  throw new Error('Invalid yParityOrV value')\n}\n", "import type { Address } from 'abitype'\n\nimport { publicKeyToAddress } from '../../accounts/utils/publicKeyToAddress.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\nimport { recoverPublicKey } from './recoverPublicKey.js'\n\nexport type RecoverAddressParameters = {\n  hash: Hex | ByteArray\n  signature: Hex | ByteArray | Signature\n}\n\nexport type RecoverAddressReturnType = Address\n\nexport type RecoverAddressErrorType = ErrorType\n\nexport async function recoverAddress({\n  hash,\n  signature,\n}: RecoverAddressParameters): Promise<RecoverAddressReturnType> {\n  return publicKeyToAddress(await recoverPublicKey({ hash, signature }))\n}\n", "import { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport {\n  type CreateCursorErrorType,\n  type Cursor,\n  createCursor,\n} from '../cursor.js'\n\nimport { type HexToBytesErrorType, hexToBytes } from './toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from './toHex.js'\n\nexport type RecursiveArray<T> = T | readonly RecursiveArray<T>[]\n\ntype To = 'hex' | 'bytes'\n\ntype Encodable = {\n  length: number\n  encode(cursor: Cursor): void\n}\n\nexport type ToRlpReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type ToRlpErrorType =\n  | CreateCursorErrorType\n  | BytesToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\nexport function toRlp<to extends To = 'hex'>(\n  bytes: RecursiveArray<ByteArray> | RecursiveArray<Hex>,\n  to: to | To | undefined = 'hex',\n): ToRlpReturnType<to> {\n  const encodable = getEncodable(bytes)\n  const cursor = createCursor(new Uint8Array(encodable.length))\n  encodable.encode(cursor)\n\n  if (to === 'hex') return bytesToHex(cursor.bytes) as ToRlpReturnType<to>\n  return cursor.bytes as ToRlpReturnType<to>\n}\n\nexport type BytesToRlpErrorType = ToRlpErrorType | ErrorType\n\nexport function bytesToRlp<to extends To = 'bytes'>(\n  bytes: RecursiveArray<ByteArray>,\n  to: to | To | undefined = 'bytes',\n): ToRlpReturnType<to> {\n  return toRlp(bytes, to)\n}\n\nexport type HexToRlpErrorType = ToRlpErrorType | ErrorType\n\nexport function hexToRlp<to extends To = 'hex'>(\n  hex: RecursiveArray<Hex>,\n  to: to | To | undefined = 'hex',\n): ToRlpReturnType<to> {\n  return toRlp(hex, to)\n}\n\nfunction getEncodable(\n  bytes: RecursiveArray<ByteArray> | RecursiveArray<Hex>,\n): Encodable {\n  if (Array.isArray(bytes))\n    return getEncodableList(bytes.map((x) => getEncodable(x)))\n  return getEncodableBytes(bytes as any)\n}\n\nfunction getEncodableList(list: Encodable[]): Encodable {\n  const bodyLength = list.reduce((acc, x) => acc + x.length, 0)\n\n  const sizeOfBodyLength = getSizeOfLength(bodyLength)\n  const length = (() => {\n    if (bodyLength <= 55) return 1 + bodyLength\n    return 1 + sizeOfBodyLength + bodyLength\n  })()\n\n  return {\n    length,\n    encode(cursor: Cursor) {\n      if (bodyLength <= 55) {\n        cursor.pushByte(0xc0 + bodyLength)\n      } else {\n        cursor.pushByte(0xc0 + 55 + sizeOfBodyLength)\n        if (sizeOfBodyLength === 1) cursor.pushUint8(bodyLength)\n        else if (sizeOfBodyLength === 2) cursor.pushUint16(bodyLength)\n        else if (sizeOfBodyLength === 3) cursor.pushUint24(bodyLength)\n        else cursor.pushUint32(bodyLength)\n      }\n      for (const { encode } of list) {\n        encode(cursor)\n      }\n    },\n  }\n}\n\nfunction getEncodableBytes(bytesOrHex: ByteArray | Hex): Encodable {\n  const bytes =\n    typeof bytesOrHex === 'string' ? hexToBytes(bytesOrHex) : bytesOrHex\n\n  const sizeOfBytesLength = getSizeOfLength(bytes.length)\n  const length = (() => {\n    if (bytes.length === 1 && bytes[0] < 0x80) return 1\n    if (bytes.length <= 55) return 1 + bytes.length\n    return 1 + sizeOfBytesLength + bytes.length\n  })()\n\n  return {\n    length,\n    encode(cursor: Cursor) {\n      if (bytes.length === 1 && bytes[0] < 0x80) {\n        cursor.pushBytes(bytes)\n      } else if (bytes.length <= 55) {\n        cursor.pushByte(0x80 + bytes.length)\n        cursor.pushBytes(bytes)\n      } else {\n        cursor.pushByte(0x80 + 55 + sizeOfBytesLength)\n        if (sizeOfBytesLength === 1) cursor.pushUint8(bytes.length)\n        else if (sizeOfBytesLength === 2) cursor.pushUint16(bytes.length)\n        else if (sizeOfBytesLength === 3) cursor.pushUint24(bytes.length)\n        else cursor.pushUint32(bytes.length)\n        cursor.pushBytes(bytes)\n      }\n    },\n  }\n}\n\nfunction getSizeOfLength(length: number) {\n  if (length < 2 ** 8) return 1\n  if (length < 2 ** 16) return 2\n  if (length < 2 ** 24) return 3\n  if (length < 2 ** 32) return 4\n  throw new BaseError('Length is too large.')\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { AuthorizationRequest } from '../../types/authorization.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type NumberToHexErrorType, numberToHex } from '../encoding/toHex.js'\nimport { type ToRlpErrorType, toRlp } from '../encoding/toRlp.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type HashAuthorizationParameters<to extends To> =\n  AuthorizationRequest & {\n    /** Output format. @default \"hex\" */\n    to?: to | To | undefined\n  }\n\nexport type HashAuthorizationReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type HashAuthorizationErrorType =\n  | Keccak256ErrorType\n  | ConcatHexErrorType\n  | ToRlpErrorType\n  | NumberToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Computes an Authorization hash in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n */\nexport function hashAuthorization<to extends To = 'hex'>(\n  parameters: HashAuthorizationParameters<to>,\n): HashAuthorizationReturnType<to> {\n  const { chainId, nonce, to } = parameters\n  const address = parameters.contractAddress ?? parameters.address\n  const hash = keccak256(\n    concatHex([\n      '0x05',\n      toRlp([\n        chainId ? numberToHex(chainId) : '0x',\n        address,\n        nonce ? numberToHex(nonce) : '0x',\n      ]),\n    ]),\n  )\n  if (to === 'bytes') return hexToBytes(hash) as HashAuthorizationReturnType<to>\n  return hash as HashAuthorizationReturnType<to>\n}\n", "import type { Address } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  Authorization,\n  AuthorizationRequest,\n  SignedAuthorization,\n} from '../../types/authorization.js'\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\nimport type { OneOf } from '../../types/utils.js'\nimport {\n  type RecoverAddressErrorType,\n  recoverAddress,\n} from '../signature/recoverAddress.js'\nimport {\n  type HashAuthorizationErrorType,\n  hashAuthorization,\n} from './hashAuthorization.js'\n\nexport type RecoverAuthorizationAddressParameters<\n  authorization extends OneOf<\n    Authorization | AuthorizationRequest | SignedAuthorization\n  > = OneOf<Authorization | AuthorizationRequest | SignedAuthorization>,\n  //\n  _signature = Hex | ByteArray | OneOf<Signature | SignedAuthorization>,\n> = {\n  /**\n   * The Authorization object.\n   *\n   * - If an unsigned `authorization` is provided, the `signature` property is required.\n   * - If a signed `authorization` is provided, the `signature` property does not need to be provided.\n   */\n  authorization:\n    | authorization\n    | OneOf<Authorization | AuthorizationRequest | SignedAuthorization>\n} & (authorization extends SignedAuthorization\n  ? {\n      /** Signature of the Authorization. Not required if the `authorization` is signed. */\n      signature?: _signature | undefined\n    }\n  : {\n      /** Signature of the Authorization. Not required if the `authorization` is signed. */\n      signature: _signature\n    })\n\nexport type RecoverAuthorizationAddressReturnType = Address\n\nexport type RecoverAuthorizationAddressErrorType =\n  | HashAuthorizationErrorType\n  | RecoverAddressErrorType\n  | ErrorType\n\nexport async function recoverAuthorizationAddress<\n  const authorization extends OneOf<\n    Authorization | AuthorizationRequest | SignedAuthorization\n  >,\n>(\n  parameters: RecoverAuthorizationAddressParameters<authorization>,\n): Promise<RecoverAuthorizationAddressReturnType> {\n  const { authorization, signature } = parameters\n\n  return recoverAddress({\n    hash: hashAuthorization(authorization as AuthorizationRequest),\n    signature: (signature ?? authorization) as Signature,\n  })\n}\n", "import type { Account } from '../accounts/types.js'\nimport type { EstimateGasParameters } from '../actions/public/estimateGas.js'\nimport type { Chain } from '../types/chain.js'\nimport { formatEther } from '../utils/unit/formatEther.js'\nimport { formatGwei } from '../utils/unit/formatGwei.js'\n\nimport { BaseError } from './base.js'\nimport { prettyPrint } from './transaction.js'\n\nexport type EstimateGasExecutionErrorType = EstimateGasExecutionError & {\n  name: 'EstimateGasExecutionError'\n}\nexport class EstimateGasExecutionError extends BaseError {\n  override cause: BaseError\n\n  constructor(\n    cause: BaseError,\n    {\n      account,\n      docsPath,\n      chain,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    }: Omit<EstimateGasParameters<any>, 'account'> & {\n      account?: Account | undefined\n      chain?: Chain | undefined\n      docsPath?: string | undefined\n    },\n  ) {\n    const prettyArgs = prettyPrint({\n      from: account?.address,\n      to,\n      value:\n        typeof value !== 'undefined' &&\n        `${formatEther(value)} ${chain?.nativeCurrency?.symbol || 'ETH'}`,\n      data,\n      gas,\n      gasPrice:\n        typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\n      maxFeePerGas:\n        typeof maxFeePerGas !== 'undefined' &&\n        `${formatGwei(maxFeePerGas)} gwei`,\n      maxPriorityFeePerGas:\n        typeof maxPriorityFeePerGas !== 'undefined' &&\n        `${formatGwei(maxPriorityFeePerGas)} gwei`,\n      nonce,\n    })\n\n    super(cause.shortMessage, {\n      cause,\n      docsPath,\n      metaMessages: [\n        ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n        'Estimate Gas Arguments:',\n        prettyArgs,\n      ].filter(Boolean) as string[],\n      name: 'EstimateGasExecutionError',\n    })\n    this.cause = cause\n  }\n}\n", "import type { Account } from '../../accounts/types.js'\nimport type { EstimateGasParameters } from '../../actions/public/estimateGas.js'\nimport type { BaseError } from '../../errors/base.js'\nimport {\n  EstimateGasExecutionError,\n  type EstimateGasExecutionErrorType,\n} from '../../errors/estimateGas.js'\nimport { UnknownNodeError } from '../../errors/node.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\n\nimport {\n  type GetNodeErrorParameters,\n  type GetNodeErrorReturnType,\n  getNodeError,\n} from './getNodeError.js'\n\nexport type GetEstimateGasErrorReturnType<cause = ErrorType> = Omit<\n  EstimateGasExecutionErrorType,\n  'cause'\n> & { cause: cause | GetNodeErrorReturnType }\n\nexport function getEstimateGasError<err extends ErrorType<string>>(\n  err: err,\n  {\n    docsPath,\n    ...args\n  }: Omit<EstimateGasParameters, 'account'> & {\n    account?: Account | undefined\n    chain?: Chain | undefined\n    docsPath?: string | undefined\n  },\n): GetEstimateGasErrorReturnType<err> {\n  const cause = (() => {\n    const cause = getNodeError(\n      err as {} as BaseError,\n      args as GetNodeErrorParameters,\n    )\n    if (cause instanceof UnknownNodeError) return err as {} as BaseError\n    return cause\n  })()\n  return new EstimateGasExecutionError(cause, {\n    docsPath,\n    ...args,\n  }) as GetEstimateGasErrorReturnType<err>\n}\n", "import { formatGwei } from '../utils/unit/formatGwei.js'\nimport { BaseError } from './base.js'\n\nexport type BaseFeeScalarErrorType = BaseFeeScalarError & {\n  name: 'BaseFeeScalarError'\n}\nexport class BaseFeeScalarError extends BaseError {\n  constructor() {\n    super('`baseFeeMultiplier` must be greater than 1.', {\n      name: 'BaseFeeScalarError',\n    })\n  }\n}\n\nexport type Eip1559FeesNotSupportedErrorType = Eip1559FeesNotSupportedError & {\n  name: 'Eip1559FeesNotSupportedError'\n}\nexport class Eip1559FeesNotSupportedError extends BaseError {\n  constructor() {\n    super('Chain does not support EIP-1559 fees.', {\n      name: 'Eip1559FeesNotSupportedError',\n    })\n  }\n}\n\nexport type MaxFeePerGasTooLowErrorType = MaxFeePerGasTooLowError & {\n  name: 'MaxFeePerGasTooLowError'\n}\nexport class MaxFeePerGasTooLowError extends BaseError {\n  constructor({ maxPriorityFeePerGas }: { maxPriorityFeePerGas: bigint }) {\n    super(\n      `\\`maxFeePerGas\\` cannot be less than the \\`maxPriorityFeePerGas\\` (${formatGwei(\n        maxPriorityFeePerGas,\n      )} gwei).`,\n      { name: 'MaxFeePerGasTooLowError' },\n    )\n  }\n}\n", "import type { Hash } from '../types/misc.js'\n\nimport { BaseError } from './base.js'\n\nexport type BlockNotFoundErrorType = BlockNotFoundError & {\n  name: 'BlockNotFoundError'\n}\nexport class BlockNotFoundError extends BaseError {\n  constructor({\n    blockHash,\n    blockNumber,\n  }: {\n    blockHash?: Hash | undefined\n    blockNumber?: bigint | undefined\n  }) {\n    let identifier = 'Block'\n    if (blockHash) identifier = `Block at hash \"${blockHash}\"`\n    if (blockNumber) identifier = `Block at number \"${blockNumber}\"`\n    super(`${identifier} could not be found.`, { name: 'BlockNotFoundError' })\n  }\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { SignedAuthorizationList } from '../../types/authorization.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type {\n  Chain,\n  ExtractChainFormatterExclude,\n  ExtractChainFormatterReturnType,\n} from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RpcAuthorizationList, RpcTransaction } from '../../types/rpc.js'\nimport type { Transaction, TransactionType } from '../../types/transaction.js'\nimport type { ExactPartial, UnionLooseOmit } from '../../types/utils.js'\nimport { hexToNumber } from '../encoding/fromHex.js'\nimport { type DefineFormatterErrorType, defineFormatter } from './formatter.js'\n\ntype TransactionPendingDependencies =\n  | 'blockHash'\n  | 'blockNumber'\n  | 'transactionIndex'\n\nexport type FormattedTransaction<\n  chain extends Chain | undefined = undefined,\n  blockTag extends BlockTag = BlockTag,\n  _FormatterReturnType = ExtractChainFormatterReturnType<\n    chain,\n    'transaction',\n    Transaction\n  >,\n  _ExcludedPendingDependencies extends string = TransactionPendingDependencies &\n    ExtractChainFormatterExclude<chain, 'transaction'>,\n> = UnionLooseOmit<_FormatterReturnType, TransactionPendingDependencies> & {\n  [_K in _ExcludedPendingDependencies]: never\n} & Pick<\n    Transaction<bigint, number, blockTag extends 'pending' ? true : false>,\n    TransactionPendingDependencies\n  >\n\nexport const transactionType = {\n  '0x0': 'legacy',\n  '0x1': 'eip2930',\n  '0x2': 'eip1559',\n  '0x3': 'eip4844',\n  '0x4': 'eip7702',\n} as const satisfies Record<Hex, TransactionType>\n\nexport type FormatTransactionErrorType = ErrorType\n\nexport function formatTransaction(\n  transaction: ExactPartial<RpcTransaction>,\n  _?: string | undefined,\n) {\n  const transaction_ = {\n    ...transaction,\n    blockHash: transaction.blockHash ? transaction.blockHash : null,\n    blockNumber: transaction.blockNumber\n      ? BigInt(transaction.blockNumber)\n      : null,\n    chainId: transaction.chainId ? hexToNumber(transaction.chainId) : undefined,\n    gas: transaction.gas ? BigInt(transaction.gas) : undefined,\n    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : undefined,\n    maxFeePerBlobGas: transaction.maxFeePerBlobGas\n      ? BigInt(transaction.maxFeePerBlobGas)\n      : undefined,\n    maxFeePerGas: transaction.maxFeePerGas\n      ? BigInt(transaction.maxFeePerGas)\n      : undefined,\n    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas\n      ? BigInt(transaction.maxPriorityFeePerGas)\n      : undefined,\n    nonce: transaction.nonce ? hexToNumber(transaction.nonce) : undefined,\n    to: transaction.to ? transaction.to : null,\n    transactionIndex: transaction.transactionIndex\n      ? Number(transaction.transactionIndex)\n      : null,\n    type: transaction.type\n      ? (transactionType as any)[transaction.type]\n      : undefined,\n    typeHex: transaction.type ? transaction.type : undefined,\n    value: transaction.value ? BigInt(transaction.value) : undefined,\n    v: transaction.v ? BigInt(transaction.v) : undefined,\n  } as Transaction\n\n  if (transaction.authorizationList)\n    transaction_.authorizationList = formatAuthorizationList(\n      transaction.authorizationList,\n    )\n\n  transaction_.yParity = (() => {\n    // If `yParity` is provided, we will use it.\n    if (transaction.yParity) return Number(transaction.yParity)\n\n    // If no `yParity` provided, try derive from `v`.\n    if (typeof transaction_.v === 'bigint') {\n      if (transaction_.v === 0n || transaction_.v === 27n) return 0\n      if (transaction_.v === 1n || transaction_.v === 28n) return 1\n      if (transaction_.v >= 35n) return transaction_.v % 2n === 0n ? 1 : 0\n    }\n\n    return undefined\n  })()\n\n  if (transaction_.type === 'legacy') {\n    delete transaction_.accessList\n    delete transaction_.maxFeePerBlobGas\n    delete transaction_.maxFeePerGas\n    delete transaction_.maxPriorityFeePerGas\n    delete transaction_.yParity\n  }\n  if (transaction_.type === 'eip2930') {\n    delete transaction_.maxFeePerBlobGas\n    delete transaction_.maxFeePerGas\n    delete transaction_.maxPriorityFeePerGas\n  }\n  if (transaction_.type === 'eip1559') {\n    delete transaction_.maxFeePerBlobGas\n  }\n  return transaction_\n}\n\nexport type DefineTransactionErrorType = DefineFormatterErrorType | ErrorType\n\nexport const defineTransaction = /*#__PURE__*/ defineFormatter(\n  'transaction',\n  formatTransaction,\n)\n\n//////////////////////////////////////////////////////////////////////////////\n\nfunction formatAuthorizationList(\n  authorizationList: RpcAuthorizationList,\n): SignedAuthorizationList {\n  return authorizationList.map((authorization) => ({\n    address: (authorization as any).address,\n    chainId: Number(authorization.chainId),\n    nonce: Number(authorization.nonce),\n    r: authorization.r,\n    s: authorization.s,\n    yParity: Number(authorization.yParity),\n  })) as SignedAuthorizationList\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Block, BlockTag } from '../../types/block.js'\nimport type {\n  Chain,\n  ExtractChainFormatterExclude,\n  ExtractChainFormatterReturnType,\n} from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RpcBlock } from '../../types/rpc.js'\nimport type { ExactPartial, Prettify } from '../../types/utils.js'\n\nimport { type DefineFormatterErrorType, defineFormatter } from './formatter.js'\nimport { type FormattedTransaction, formatTransaction } from './transaction.js'\n\ntype BlockPendingDependencies = 'hash' | 'logsBloom' | 'nonce' | 'number'\n\nexport type FormattedBlock<\n  chain extends Chain | undefined = undefined,\n  includeTransactions extends boolean = boolean,\n  blockTag extends BlockTag = BlockTag,\n  _FormatterReturnType = ExtractChainFormatterReturnType<\n    chain,\n    'block',\n    Block<bigint, includeTransactions>\n  >,\n  _ExcludedPendingDependencies extends string = BlockPendingDependencies &\n    ExtractChainFormatterExclude<chain, 'block'>,\n  _Formatted = Omit<_FormatterReturnType, BlockPendingDependencies> & {\n    [_key in _ExcludedPendingDependencies]: never\n  } & Pick<\n      Block<bigint, includeTransactions, blockTag>,\n      BlockPendingDependencies\n    >,\n  _Transactions = includeTransactions extends true\n    ? Prettify<FormattedTransaction<chain, blockTag>>[]\n    : Hash[],\n> = Omit<_Formatted, 'transactions'> & {\n  transactions: _Transactions\n}\n\nexport type FormatBlockErrorType = ErrorType\n\nexport function formatBlock(\n  block: ExactPartial<RpcBlock>,\n  _?: string | undefined,\n) {\n  const transactions = (block.transactions ?? []).map((transaction) => {\n    if (typeof transaction === 'string') return transaction\n    return formatTransaction(transaction)\n  })\n  return {\n    ...block,\n    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,\n    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : undefined,\n    difficulty: block.difficulty ? BigInt(block.difficulty) : undefined,\n    excessBlobGas: block.excessBlobGas\n      ? BigInt(block.excessBlobGas)\n      : undefined,\n    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : undefined,\n    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : undefined,\n    hash: block.hash ? block.hash : null,\n    logsBloom: block.logsBloom ? block.logsBloom : null,\n    nonce: block.nonce ? block.nonce : null,\n    number: block.number ? BigInt(block.number) : null,\n    size: block.size ? BigInt(block.size) : undefined,\n    timestamp: block.timestamp ? BigInt(block.timestamp) : undefined,\n    transactions,\n    totalDifficulty: block.totalDifficulty\n      ? BigInt(block.totalDifficulty)\n      : null,\n  } as Block\n}\n\nexport type DefineBlockErrorType = DefineFormatterErrorType | ErrorType\n\nexport const defineBlock = /*#__PURE__*/ defineFormatter('block', formatBlock)\n", "import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  BlockNotFoundError,\n  type BlockNotFoundErrorType,\n} from '../../errors/block.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RpcBlock } from '../../types/rpc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormattedBlock,\n  formatBlock,\n} from '../../utils/formatters/block.js'\n\nexport type GetBlockParameters<\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n> = {\n  /** Whether or not to include transaction data in the response. */\n  includeTransactions?: includeTransactions | undefined\n} & (\n  | {\n      /** Hash of the block. */\n      blockHash?: Hash | undefined\n      blockNumber?: undefined\n      blockTag?: undefined\n    }\n  | {\n      blockHash?: undefined\n      /** The block number. */\n      blockNumber?: bigint | undefined\n      blockTag?: undefined\n    }\n  | {\n      blockHash?: undefined\n      blockNumber?: undefined\n      /**\n       * The block tag.\n       * @default 'latest'\n       */\n      blockTag?: blockTag | BlockTag | undefined\n    }\n)\n\nexport type GetBlockReturnType<\n  chain extends Chain | undefined = undefined,\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n> = Prettify<FormattedBlock<chain, includeTransactions, blockTag>>\n\nexport type GetBlockErrorType =\n  | BlockNotFoundErrorType\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns information about a block at a block number, hash, or tag.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlock\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_fetching-blocks\n * - JSON-RPC Methods:\n *   - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) for `blockNumber` & `blockTag`.\n *   - Calls [`eth_getBlockByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbyhash) for `blockHash`.\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockParameters}\n * @returns Information about the block. {@link GetBlockReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlock } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const block = await getBlock(client)\n */\nexport async function getBlock<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n>(\n  client: Client<Transport, chain, account>,\n  {\n    blockHash,\n    blockNumber,\n    blockTag = client.experimental_blockTag ?? 'latest',\n    includeTransactions: includeTransactions_,\n  }: GetBlockParameters<includeTransactions, blockTag> = {},\n): Promise<GetBlockReturnType<chain, includeTransactions, blockTag>> {\n  const includeTransactions = includeTransactions_ ?? false\n\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n\n  let block: RpcBlock | null = null\n  if (blockHash) {\n    block = await client.request(\n      {\n        method: 'eth_getBlockByHash',\n        params: [blockHash, includeTransactions],\n      },\n      { dedupe: true },\n    )\n  } else {\n    block = await client.request(\n      {\n        method: 'eth_getBlockByNumber',\n        params: [blockNumberHex || blockTag, includeTransactions],\n      },\n      { dedupe: Boolean(blockNumberHex) },\n    )\n  }\n\n  if (!block) throw new BlockNotFoundError({ blockHash, blockNumber })\n\n  const format = client.chain?.formatters?.block?.format || formatBlock\n  return format(block, 'getBlock')\n}\n", "import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type GetGasPriceReturnType = bigint\n\nexport type GetGasPriceErrorType = RequestErrorType | ErrorType\n\n/**\n * Returns the current price of gas (in wei).\n *\n * - Docs: https://viem.sh/docs/actions/public/getGasPrice\n * - JSON-RPC Methods: [`eth_gasPrice`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice)\n *\n * @param client - Client to use\n * @returns The gas price (in wei). {@link GetGasPriceReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getGasPrice } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gasPrice = await getGasPrice(client)\n */\nexport async function getGasPrice<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(client: Client<Transport, chain, account>): Promise<GetGasPriceReturnType> {\n  const gasPrice = await client.request({\n    method: 'eth_gasPrice',\n  })\n  return BigInt(gasPrice)\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  Eip1559FeesNotSupportedError,\n  type Eip1559FeesNotSupportedErrorType,\n} from '../../errors/fee.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Block } from '../../types/block.js'\nimport type {\n  Chain,\n  ChainFeesFnParameters,\n  GetChainParameter,\n} from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type HexToBigIntErrorType,\n  hexToBigInt,\n} from '../../utils/encoding/fromHex.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type { PrepareTransactionRequestParameters } from '../wallet/prepareTransactionRequest.js'\nimport { type GetBlockErrorType, getBlock } from './getBlock.js'\nimport { type GetGasPriceErrorType, getGasPrice } from './getGasPrice.js'\n\nexport type EstimateMaxPriorityFeePerGasParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n> = GetChainParameter<chain, chainOverride>\n\nexport type EstimateMaxPriorityFeePerGasReturnType = bigint\n\nexport type EstimateMaxPriorityFeePerGasErrorType =\n  | GetBlockErrorType\n  | HexToBigIntErrorType\n  | RequestErrorType\n  | GetBlockErrorType\n  | GetGasPriceErrorType\n  | Eip1559FeesNotSupportedErrorType\n  | ErrorType\n\n/**\n * Returns an estimate for the max priority fee per gas (in wei) for a\n * transaction to be likely included in the next block.\n * Defaults to [`chain.fees.defaultPriorityFee`](/docs/clients/chains#fees-defaultpriorityfee) if set.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateMaxPriorityFeePerGas\n *\n * @param client - Client to use\n * @returns An estimate (in wei) for the max priority fee per gas. {@link EstimateMaxPriorityFeePerGasReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateMaxPriorityFeePerGas } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const maxPriorityFeePerGas = await estimateMaxPriorityFeePerGas(client)\n * // 10000000n\n */\nexport async function estimateMaxPriorityFeePerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n>(\n  client: Client<Transport, chain>,\n  args?:\n    | EstimateMaxPriorityFeePerGasParameters<chain, chainOverride>\n    | undefined,\n): Promise<EstimateMaxPriorityFeePerGasReturnType> {\n  return internal_estimateMaxPriorityFeePerGas(client, args as any)\n}\n\nexport async function internal_estimateMaxPriorityFeePerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n>(\n  client: Client<Transport, chain>,\n  args: EstimateMaxPriorityFeePerGasParameters<chain, chainOverride> & {\n    block?: Block | undefined\n    request?:\n      | PrepareTransactionRequestParameters<\n          chain,\n          Account | undefined,\n          chainOverride\n        >\n      | undefined\n  },\n): Promise<EstimateMaxPriorityFeePerGasReturnType> {\n  const { block: block_, chain = client.chain, request } = args || {}\n\n  try {\n    const maxPriorityFeePerGas =\n      chain?.fees?.maxPriorityFeePerGas ?? chain?.fees?.defaultPriorityFee\n\n    if (typeof maxPriorityFeePerGas === 'function') {\n      const block =\n        block_ || (await getAction(client, getBlock, 'getBlock')({}))\n      const maxPriorityFeePerGas_ = await maxPriorityFeePerGas({\n        block,\n        client,\n        request,\n      } as ChainFeesFnParameters)\n      if (maxPriorityFeePerGas_ === null) throw new Error()\n      return maxPriorityFeePerGas_\n    }\n\n    if (typeof maxPriorityFeePerGas !== 'undefined') return maxPriorityFeePerGas\n\n    const maxPriorityFeePerGasHex = await client.request({\n      method: 'eth_maxPriorityFeePerGas',\n    })\n    return hexToBigInt(maxPriorityFeePerGasHex)\n  } catch {\n    // If the RPC Provider does not support `eth_maxPriorityFeePerGas`\n    // fall back to calculating it manually via `gasPrice - baseFeePerGas`.\n    // See: https://github.com/ethereum/pm/issues/328#:~:text=eth_maxPriorityFeePerGas%20after%20London%20will%20effectively%20return%20eth_gasPrice%20%2D%20baseFee\n    const [block, gasPrice] = await Promise.all([\n      block_\n        ? Promise.resolve(block_)\n        : getAction(client, getBlock, 'getBlock')({}),\n      getAction(client, getGasPrice, 'getGasPrice')({}),\n    ])\n\n    if (typeof block.baseFeePerGas !== 'bigint')\n      throw new Eip1559FeesNotSupportedError()\n\n    const maxPriorityFeePerGas = gasPrice - block.baseFeePerGas\n\n    if (maxPriorityFeePerGas < 0n) return 0n\n    return maxPriorityFeePerGas\n  }\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  BaseFeeScalarError,\n  type BaseFeeScalarErrorType,\n  Eip1559FeesNotSupportedError,\n  type Eip1559FeesNotSupportedErrorType,\n} from '../../errors/fee.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Block } from '../../types/block.js'\nimport type {\n  Chain,\n  ChainEstimateFeesPerGasFnParameters,\n  ChainFeesFnParameters,\n  GetChainParameter,\n} from '../../types/chain.js'\nimport type {\n  FeeValuesEIP1559,\n  FeeValuesLegacy,\n  FeeValuesType,\n} from '../../types/fee.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type { PrepareTransactionRequestParameters } from '../wallet/prepareTransactionRequest.js'\nimport {\n  type EstimateMaxPriorityFeePerGasErrorType,\n  internal_estimateMaxPriorityFeePerGas,\n} from './estimateMaxPriorityFeePerGas.js'\nimport { getBlock } from './getBlock.js'\nimport { type GetGasPriceErrorType, getGasPrice } from './getGasPrice.js'\n\nexport type EstimateFeesPerGasParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  type extends FeeValuesType = FeeValuesType,\n> = {\n  /**\n   * The type of fee values to return.\n   *\n   * - `legacy`: Returns the legacy gas price.\n   * - `eip1559`: Returns the max fee per gas and max priority fee per gas.\n   *\n   * @default 'eip1559'\n   */\n  type?: type | FeeValuesType | undefined\n} & GetChainParameter<chain, chainOverride>\n\nexport type EstimateFeesPerGasReturnType<\n  type extends FeeValuesType = FeeValuesType,\n> =\n  | (type extends 'legacy' ? FeeValuesLegacy : never)\n  | (type extends 'eip1559' ? FeeValuesEIP1559 : never)\n\nexport type EstimateFeesPerGasErrorType =\n  | BaseFeeScalarErrorType\n  | EstimateMaxPriorityFeePerGasErrorType\n  | GetGasPriceErrorType\n  | Eip1559FeesNotSupportedErrorType\n  | ErrorType\n\n/**\n * Returns an estimate for the fees per gas (in wei) for a\n * transaction to be likely included in the next block.\n * Defaults to [`chain.fees.estimateFeesPerGas`](/docs/clients/chains#fees-estimatefeespergas) if set.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateFeesPerGas\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateFeesPerGasParameters}\n * @returns An estimate (in wei) for the fees per gas. {@link EstimateFeesPerGasReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateFeesPerGas } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const maxPriorityFeePerGas = await estimateFeesPerGas(client)\n * // { maxFeePerGas: ..., maxPriorityFeePerGas: ... }\n */\nexport async function estimateFeesPerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n  type extends FeeValuesType = 'eip1559',\n>(\n  client: Client<Transport, chain>,\n  args?: EstimateFeesPerGasParameters<chain, chainOverride, type> | undefined,\n): Promise<EstimateFeesPerGasReturnType<type>> {\n  return internal_estimateFeesPerGas(client, args as any)\n}\n\nexport async function internal_estimateFeesPerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n  type extends FeeValuesType = 'eip1559',\n>(\n  client: Client<Transport, chain>,\n  args: EstimateFeesPerGasParameters<chain, chainOverride, type> & {\n    block?: Block | undefined\n    request?: PrepareTransactionRequestParameters<Chain, Account> | undefined\n  },\n): Promise<EstimateFeesPerGasReturnType<type>> {\n  const {\n    block: block_,\n    chain = client.chain,\n    request,\n    type = 'eip1559',\n  } = args || {}\n\n  const baseFeeMultiplier = await (async () => {\n    if (typeof chain?.fees?.baseFeeMultiplier === 'function')\n      return chain.fees.baseFeeMultiplier({\n        block: block_ as Block,\n        client,\n        request,\n      } as ChainFeesFnParameters)\n    return chain?.fees?.baseFeeMultiplier ?? 1.2\n  })()\n  if (baseFeeMultiplier < 1) throw new BaseFeeScalarError()\n\n  const decimals = baseFeeMultiplier.toString().split('.')[1]?.length ?? 0\n  const denominator = 10 ** decimals\n  const multiply = (base: bigint) =>\n    (base * BigInt(Math.ceil(baseFeeMultiplier * denominator))) /\n    BigInt(denominator)\n\n  const block = block_\n    ? block_\n    : await getAction(client, getBlock, 'getBlock')({})\n\n  if (typeof chain?.fees?.estimateFeesPerGas === 'function') {\n    const fees = (await chain.fees.estimateFeesPerGas({\n      block: block_ as Block,\n      client,\n      multiply,\n      request,\n      type,\n    } as ChainEstimateFeesPerGasFnParameters)) as unknown as EstimateFeesPerGasReturnType<type>\n\n    if (fees !== null) return fees\n  }\n\n  if (type === 'eip1559') {\n    if (typeof block.baseFeePerGas !== 'bigint')\n      throw new Eip1559FeesNotSupportedError()\n\n    const maxPriorityFeePerGas =\n      typeof request?.maxPriorityFeePerGas === 'bigint'\n        ? request.maxPriorityFeePerGas\n        : await internal_estimateMaxPriorityFeePerGas(\n            client as Client<Transport, Chain>,\n            {\n              block: block as Block,\n              chain,\n              request,\n            },\n          )\n\n    const baseFeePerGas = multiply(block.baseFeePerGas)\n    const maxFeePerGas =\n      request?.maxFeePerGas ?? baseFeePerGas + maxPriorityFeePerGas\n\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    } as EstimateFeesPerGasReturnType<type>\n  }\n\n  const gasPrice =\n    request?.gasPrice ??\n    multiply(await getAction(client, getGasPrice, 'getGasPrice')({}))\n  return {\n    gasPrice,\n  } as EstimateFeesPerGasReturnType<type>\n}\n", "import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type HexToNumberErrorType,\n  hexToNumber,\n} from '../../utils/encoding/fromHex.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetTransactionCountParameters = {\n  /** The account address. */\n  address: Address\n} & (\n  | {\n      /** The block number. */\n      blockNumber?: bigint | undefined\n      blockTag?: undefined\n    }\n  | {\n      blockNumber?: undefined\n      /** The block tag. Defaults to 'latest'. */\n      blockTag?: BlockTag | undefined\n    }\n)\nexport type GetTransactionCountReturnType = number\n\nexport type GetTransactionCountErrorType =\n  | RequestErrorType\n  | NumberToHexErrorType\n  | HexToNumberErrorType\n  | ErrorType\n\n/**\n * Returns the number of [Transactions](https://viem.sh/docs/glossary/terms#transaction) an Account has sent.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionCount\n * - JSON-RPC Methods: [`eth_getTransactionCount`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionCountParameters}\n * @returns The number of transactions an account has sent. {@link GetTransactionCountReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionCount } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionCount = await getTransactionCount(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function getTransactionCount<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(\n  client: Client<Transport, chain, account>,\n  { address, blockTag = 'latest', blockNumber }: GetTransactionCountParameters,\n): Promise<GetTransactionCountReturnType> {\n  const count = await client.request(\n    {\n      method: 'eth_getTransactionCount',\n      params: [\n        address,\n        typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : blockTag,\n      ],\n    },\n    {\n      dedupe: Boolean(blockNumber),\n    },\n  )\n  return hexToNumber(count)\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Kzg } from '../../types/kzg.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type BlobsToCommitmentsParameters<\n  blobs extends readonly ByteArray[] | readonly Hex[] =\n    | readonly ByteArray[]\n    | readonly Hex[],\n  to extends To | undefined = undefined,\n> = {\n  /** Blobs to transform into commitments. */\n  blobs: blobs | readonly ByteArray[] | readonly Hex[]\n  /** KZG implementation. */\n  kzg: Pick<Kzg, 'blobToKzgCommitment'>\n  /** Return type. */\n  to?: to | To | undefined\n}\n\nexport type BlobsToCommitmentsReturnType<to extends To> =\n  | (to extends 'bytes' ? readonly ByteArray[] : never)\n  | (to extends 'hex' ? readonly Hex[] : never)\n\nexport type BlobsToCommitmentsErrorType =\n  | HexToBytesErrorType\n  | BytesToHexErrorType\n  | ErrorType\n\n/**\n * Compute commitments from a list of blobs.\n *\n * @example\n * ```ts\n * import { blobsToCommitments, toBlobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * ```\n */\nexport function blobsToCommitments<\n  const blobs extends readonly ByteArray[] | readonly Hex[],\n  to extends To =\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n>(\n  parameters: BlobsToCommitmentsParameters<blobs, to>,\n): BlobsToCommitmentsReturnType<to> {\n  const { kzg } = parameters\n\n  const to =\n    parameters.to ?? (typeof parameters.blobs[0] === 'string' ? 'hex' : 'bytes')\n  const blobs = (\n    typeof parameters.blobs[0] === 'string'\n      ? parameters.blobs.map((x) => hexToBytes(x as any))\n      : parameters.blobs\n  ) as ByteArray[]\n\n  const commitments: ByteArray[] = []\n  for (const blob of blobs)\n    commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)))\n\n  return (to === 'bytes'\n    ? commitments\n    : commitments.map((x) =>\n        bytesToHex(x),\n      )) as {} as BlobsToCommitmentsReturnType<to>\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Kzg } from '../../types/kzg.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type blobsToProofsParameters<\n  blobs extends readonly ByteArray[] | readonly Hex[],\n  commitments extends readonly ByteArray[] | readonly Hex[],\n  to extends To =\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n  ///\n  _blobsType =\n    | (blobs extends readonly Hex[] ? readonly Hex[] : never)\n    | (blobs extends readonly ByteArray[] ? readonly ByteArray[] : never),\n> = {\n  /** Blobs to transform into proofs. */\n  blobs: blobs\n  /** Commitments for the blobs. */\n  commitments: commitments &\n    (commitments extends _blobsType\n      ? {}\n      : `commitments must be the same type as blobs`)\n  /** KZG implementation. */\n  kzg: Pick<Kzg, 'computeBlobKzgProof'>\n  /** Return type. */\n  to?: to | To | undefined\n}\n\nexport type blobsToProofsReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray[] : never)\n  | (to extends 'hex' ? Hex[] : never)\n\nexport type blobsToProofsErrorType =\n  | BytesToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Compute the proofs for a list of blobs and their commitments.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const proofs = blobsToProofs({ blobs, commitments, kzg })\n * ```\n */\nexport function blobsToProofs<\n  const blobs extends readonly ByteArray[] | readonly Hex[],\n  const commitments extends readonly ByteArray[] | readonly Hex[],\n  to extends To =\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n>(\n  parameters: blobsToProofsParameters<blobs, commitments, to>,\n): blobsToProofsReturnType<to> {\n  const { kzg } = parameters\n\n  const to =\n    parameters.to ?? (typeof parameters.blobs[0] === 'string' ? 'hex' : 'bytes')\n\n  const blobs = (\n    typeof parameters.blobs[0] === 'string'\n      ? parameters.blobs.map((x) => hexToBytes(x as any))\n      : parameters.blobs\n  ) as ByteArray[]\n  const commitments = (\n    typeof parameters.commitments[0] === 'string'\n      ? parameters.commitments.map((x) => hexToBytes(x as any))\n      : parameters.commitments\n  ) as ByteArray[]\n\n  const proofs: ByteArray[] = []\n  for (let i = 0; i < blobs.length; i++) {\n    const blob = blobs[i]\n    const commitment = commitments[i]\n    proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)))\n  }\n\n  return (to === 'bytes'\n    ? proofs\n    : proofs.map((x) => bytesToHex(x))) as {} as blobsToProofsReturnType<to>\n}\n", "/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n * @deprecated\n */\nimport {\n  SHA224 as SHA224n,\n  sha224 as sha224n,\n  SHA256 as SHA256n,\n  sha256 as sha256n,\n} from './sha2.ts';\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA256: typeof SHA256n = SHA256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha256: typeof sha256n = sha256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA224: typeof SHA224n = SHA224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha224: typeof sha224n = sha224n;\n", "import { sha256 as noble_sha256 } from '@noble/hashes/sha256'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type Sha256Hash<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type Sha256ErrorType =\n  | IsHexErrorType\n  | ToBytesErrorType\n  | ToHexErrorType\n  | ErrorType\n\nexport function sha256<to extends To = 'hex'>(\n  value: Hex | ByteArray,\n  to_?: to | undefined,\n): Sha256Hash<to> {\n  const to = to_ || 'hex'\n  const bytes = noble_sha256(\n    isHex(value, { strict: false }) ? toBytes(value) : value,\n  )\n  if (to === 'bytes') return bytes as Sha256Hash<to>\n  return toHex(bytes) as Sha256Hash<to>\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\nimport { type Sha256ErrorType, sha256 } from '../hash/sha256.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type CommitmentToVersionedHashParameters<\n  commitment extends Uint8Array | Hex = Uint8Array | Hex,\n  to extends To | undefined = undefined,\n> = {\n  /** Commitment from blob. */\n  commitment: commitment | Uint8Array | Hex\n  /** Return type. */\n  to?: to | To | undefined\n  /** Version to tag onto the hash. */\n  version?: number | undefined\n}\n\nexport type CommitmentToVersionedHashReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type CommitmentToVersionedHashErrorType =\n  | Sha256ErrorType\n  | BytesToHexErrorType\n  | ErrorType\n\n/**\n * Transform a commitment to it's versioned hash.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   commitmentToVersionedHash,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const [commitment] = blobsToCommitments({ blobs, kzg })\n * const versionedHash = commitmentToVersionedHash({ commitment })\n * ```\n */\nexport function commitmentToVersionedHash<\n  const commitment extends Hex | ByteArray,\n  to extends To =\n    | (commitment extends Hex ? 'hex' : never)\n    | (commitment extends ByteArray ? 'bytes' : never),\n>(\n  parameters: CommitmentToVersionedHashParameters<commitment, to>,\n): CommitmentToVersionedHashReturnType<to> {\n  const { commitment, version = 1 } = parameters\n  const to = parameters.to ?? (typeof commitment === 'string' ? 'hex' : 'bytes')\n\n  const versionedHash = sha256(commitment, 'bytes')\n  versionedHash.set([version], 0)\n  return (\n    to === 'bytes' ? versionedHash : bytesToHex(versionedHash)\n  ) as CommitmentToVersionedHashReturnType<to>\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport {\n  type CommitmentToVersionedHashErrorType,\n  commitmentToVersionedHash,\n} from './commitmentToVersionedHash.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type CommitmentsToVersionedHashesParameters<\n  commitments extends readonly Uint8Array[] | readonly Hex[] =\n    | readonly Uint8Array[]\n    | readonly Hex[],\n  to extends To | undefined = undefined,\n> = {\n  /** Commitments from blobs. */\n  commitments: commitments | readonly Uint8Array[] | readonly Hex[]\n  /** Return type. */\n  to?: to | To | undefined\n  /** Version to tag onto the hashes. */\n  version?: number | undefined\n}\n\nexport type CommitmentsToVersionedHashesReturnType<to extends To> =\n  | (to extends 'bytes' ? readonly ByteArray[] : never)\n  | (to extends 'hex' ? readonly Hex[] : never)\n\nexport type CommitmentsToVersionedHashesErrorType =\n  | CommitmentToVersionedHashErrorType\n  | ErrorType\n\n/**\n * Transform a list of commitments to their versioned hashes.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   commitmentsToVersionedHashes,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const versionedHashes = commitmentsToVersionedHashes({ commitments })\n * ```\n */\nexport function commitmentsToVersionedHashes<\n  const commitments extends readonly Uint8Array[] | readonly Hex[],\n  to extends To =\n    | (commitments extends readonly Hex[] ? 'hex' : never)\n    | (commitments extends readonly ByteArray[] ? 'bytes' : never),\n>(\n  parameters: CommitmentsToVersionedHashesParameters<commitments, to>,\n): CommitmentsToVersionedHashesReturnType<to> {\n  const { commitments, version } = parameters\n\n  const to =\n    parameters.to ?? (typeof commitments[0] === 'string' ? 'hex' : 'bytes')\n\n  const hashes: Uint8Array[] | Hex[] = []\n  for (const commitment of commitments) {\n    hashes.push(\n      commitmentToVersionedHash({\n        commitment,\n        to,\n        version,\n      }) as any,\n    )\n  }\n  return hashes as any\n}\n", "// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md#parameters\n\n/** Blob limit per transaction. */\nconst blobsPerTransaction = 6\n\n/** The number of bytes in a BLS scalar field element. */\nexport const bytesPerFieldElement = 32\n\n/** The number of field elements in a blob. */\nexport const fieldElementsPerBlob = 4096\n\n/** The number of bytes in a blob. */\nexport const bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob\n\n/** Blob bytes limit per transaction. */\nexport const maxBytesPerTransaction =\n  bytesPerBlob * blobsPerTransaction -\n  // terminator byte (0x80).\n  1 -\n  // zero byte (0x00) appended to each field element.\n  1 * fieldElementsPerBlob * blobsPerTransaction\n", "// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md#parameters\n\nexport const versionedHashVersionKzg = 1\n", "import { versionedHashVersionKzg } from '../constants/kzg.js'\nimport type { Hash } from '../types/misc.js'\n\nimport { BaseError } from './base.js'\n\nexport type BlobSizeTooLargeErrorType = BlobSizeTooLargeError & {\n  name: 'BlobSizeTooLargeError'\n}\nexport class BlobSizeTooLargeError extends BaseError {\n  constructor({ maxSize, size }: { maxSize: number; size: number }) {\n    super('Blob size is too large.', {\n      metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size} bytes`],\n      name: 'BlobSizeTooLargeError',\n    })\n  }\n}\n\nexport type EmptyBlobErrorType = EmptyBlobError & {\n  name: 'EmptyBlobError'\n}\nexport class EmptyBlobError extends BaseError {\n  constructor() {\n    super('Blob data must not be empty.', { name: 'EmptyBlobError' })\n  }\n}\n\nexport type InvalidVersionedHashSizeErrorType =\n  InvalidVersionedHashSizeError & {\n    name: 'InvalidVersionedHashSizeError'\n  }\nexport class InvalidVersionedHashSizeError extends BaseError {\n  constructor({\n    hash,\n    size,\n  }: {\n    hash: Hash\n    size: number\n  }) {\n    super(`Versioned hash \"${hash}\" size is invalid.`, {\n      metaMessages: ['Expected: 32', `Received: ${size}`],\n      name: 'InvalidVersionedHashSizeError',\n    })\n  }\n}\n\nexport type InvalidVersionedHashVersionErrorType =\n  InvalidVersionedHashVersionError & {\n    name: 'InvalidVersionedHashVersionError'\n  }\nexport class InvalidVersionedHashVersionError extends BaseError {\n  constructor({\n    hash,\n    version,\n  }: {\n    hash: Hash\n    version: number\n  }) {\n    super(`Versioned hash \"${hash}\" version is invalid.`, {\n      metaMessages: [\n        `Expected: ${versionedHashVersionKzg}`,\n        `Received: ${version}`,\n      ],\n      name: 'InvalidVersionedHashVersionError',\n    })\n  }\n}\n", "import {\n  bytesPerBlob,\n  bytesPerFieldElement,\n  fieldElementsPerBlob,\n  maxBytesPerTransaction,\n} from '../../constants/blob.js'\nimport {\n  BlobSizeTooLargeError,\n  type BlobSizeTooLargeErrorType,\n  EmptyBlobError,\n  type EmptyBlobErrorType,\n} from '../../errors/blob.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type CreateCursorErrorType, createCursor } from '../cursor.js'\nimport { type SizeErrorType, size } from '../data/size.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type ToBlobsParameters<\n  data extends Hex | ByteArray = Hex | ByteArray,\n  to extends To | undefined = undefined,\n> = {\n  /** Data to transform to a blob. */\n  data: data | Hex | ByteArray\n  /** Return type. */\n  to?: to | To | undefined\n}\n\nexport type ToBlobsReturnType<to extends To> =\n  | (to extends 'bytes' ? readonly ByteArray[] : never)\n  | (to extends 'hex' ? readonly Hex[] : never)\n\nexport type ToBlobsErrorType =\n  | BlobSizeTooLargeErrorType\n  | BytesToHexErrorType\n  | CreateCursorErrorType\n  | EmptyBlobErrorType\n  | HexToBytesErrorType\n  | SizeErrorType\n  | ErrorType\n\n/**\n * Transforms arbitrary data to blobs.\n *\n * @example\n * ```ts\n * import { toBlobs, stringToHex } from 'viem'\n *\n * const blobs = toBlobs({ data: stringToHex('hello world') })\n * ```\n */\nexport function toBlobs<\n  const data extends Hex | ByteArray,\n  to extends To =\n    | (data extends Hex ? 'hex' : never)\n    | (data extends ByteArray ? 'bytes' : never),\n>(parameters: ToBlobsParameters<data, to>): ToBlobsReturnType<to> {\n  const to =\n    parameters.to ?? (typeof parameters.data === 'string' ? 'hex' : 'bytes')\n  const data = (\n    typeof parameters.data === 'string'\n      ? hexToBytes(parameters.data)\n      : parameters.data\n  ) as ByteArray\n\n  const size_ = size(data)\n  if (!size_) throw new EmptyBlobError()\n  if (size_ > maxBytesPerTransaction)\n    throw new BlobSizeTooLargeError({\n      maxSize: maxBytesPerTransaction,\n      size: size_,\n    })\n\n  const blobs = []\n\n  let active = true\n  let position = 0\n  while (active) {\n    const blob = createCursor(new Uint8Array(bytesPerBlob))\n\n    let size = 0\n    while (size < fieldElementsPerBlob) {\n      const bytes = data.slice(position, position + (bytesPerFieldElement - 1))\n\n      // Push a zero byte so the field element doesn't overflow the BLS modulus.\n      blob.pushByte(0x00)\n\n      // Push the current segment of data bytes.\n      blob.pushBytes(bytes)\n\n      // If we detect that the current segment of data bytes is less than 31 bytes,\n      // we can stop processing and push a terminator byte to indicate the end of the blob.\n      if (bytes.length < 31) {\n        blob.pushByte(0x80)\n        active = false\n        break\n      }\n\n      size++\n      position += 31\n    }\n\n    blobs.push(blob)\n  }\n\n  return (\n    to === 'bytes'\n      ? blobs.map((x) => x.bytes)\n      : blobs.map((x) => bytesToHex(x.bytes))\n  ) as any\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { BlobSidecars } from '../../types/eip4844.js'\nimport type { Kzg } from '../../types/kzg.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport type { OneOf } from '../../types/utils.js'\nimport {\n  type BlobsToCommitmentsErrorType,\n  blobsToCommitments,\n} from './blobsToCommitments.js'\nimport { blobsToProofs, type blobsToProofsErrorType } from './blobsToProofs.js'\nimport { type ToBlobsErrorType, toBlobs } from './toBlobs.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type ToBlobSidecarsParameters<\n  data extends Hex | ByteArray | undefined = undefined,\n  blobs extends readonly Hex[] | readonly ByteArray[] | undefined = undefined,\n  to extends To =\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n  ///\n  _blobsType =\n    | (blobs extends readonly Hex[] ? readonly Hex[] : never)\n    | (blobs extends readonly ByteArray[] ? readonly ByteArray[] : never),\n> = {\n  /** Return type. */\n  to?: to | To | undefined\n} & OneOf<\n  | {\n      /** Data to transform into blobs. */\n      data: data | Hex | ByteArray\n      /** KZG implementation. */\n      kzg: Kzg\n    }\n  | {\n      /** Blobs. */\n      blobs: blobs | readonly Hex[] | readonly ByteArray[]\n      /** Commitment for each blob. */\n      commitments: _blobsType | readonly Hex[] | readonly ByteArray[]\n      /** Proof for each blob. */\n      proofs: _blobsType | readonly Hex[] | readonly ByteArray[]\n    }\n>\n\nexport type ToBlobSidecarsReturnType<to extends To> =\n  | (to extends 'bytes' ? BlobSidecars<ByteArray> : never)\n  | (to extends 'hex' ? BlobSidecars<Hex> : never)\n\nexport type ToBlobSidecarsErrorType =\n  | BlobsToCommitmentsErrorType\n  | ToBlobsErrorType\n  | blobsToProofsErrorType\n  | ErrorType\n\n/**\n * Transforms arbitrary data (or blobs, commitments, & proofs) into a sidecar array.\n *\n * @example\n * ```ts\n * import { toBlobSidecars, stringToHex } from 'viem'\n *\n * const sidecars = toBlobSidecars({ data: stringToHex('hello world') })\n * ```\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   toBlobs,\n *   blobsToProofs,\n *   toBlobSidecars,\n *   stringToHex\n * } from 'viem'\n *\n * const blobs = toBlobs({ data: stringToHex('hello world') })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const proofs = blobsToProofs({ blobs, commitments, kzg })\n *\n * const sidecars = toBlobSidecars({ blobs, commitments, proofs })\n * ```\n */\nexport function toBlobSidecars<\n  const data extends Hex | ByteArray | undefined = undefined,\n  const blobs extends\n    | readonly Hex[]\n    | readonly ByteArray[]\n    | undefined = undefined,\n  to extends To =\n    | (data extends Hex ? 'hex' : never)\n    | (data extends ByteArray ? 'bytes' : never)\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n>(\n  parameters: ToBlobSidecarsParameters<data, blobs, to>,\n): ToBlobSidecarsReturnType<to> {\n  const { data, kzg, to } = parameters\n  const blobs = parameters.blobs ?? toBlobs({ data: data!, to })\n  const commitments =\n    parameters.commitments ?? blobsToCommitments({ blobs, kzg: kzg!, to })\n  const proofs =\n    parameters.proofs ?? blobsToProofs({ blobs, commitments, kzg: kzg!, to })\n\n  const sidecars: BlobSidecars = []\n  for (let i = 0; i < blobs.length; i++)\n    sidecars.push({\n      blob: blobs[i],\n      commitment: commitments[i],\n      proof: proofs[i],\n    })\n\n  return sidecars as ToBlobSidecarsReturnType<to>\n}\n", "import {\n  InvalidSerializableTransactionError,\n  type InvalidSerializableTransactionErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  FeeValuesEIP1559,\n  FeeValuesEIP4844,\n  FeeValuesLegacy,\n} from '../../index.js'\nimport type {\n  TransactionRequestGeneric,\n  TransactionSerializableEIP2930,\n  TransactionSerializableEIP4844,\n  TransactionSerializableEIP7702,\n  TransactionSerializableGeneric,\n} from '../../types/transaction.js'\nimport type { Assign, ExactPartial, IsNever, OneOf } from '../../types/utils.js'\n\nexport type GetTransactionType<\n  transaction extends OneOf<\n    TransactionSerializableGeneric | TransactionRequestGeneric\n  > = TransactionSerializableGeneric,\n  result =\n    | (transaction extends LegacyProperties ? 'legacy' : never)\n    | (transaction extends EIP1559Properties ? 'eip1559' : never)\n    | (transaction extends EIP2930Properties ? 'eip2930' : never)\n    | (transaction extends EIP4844Properties ? 'eip4844' : never)\n    | (transaction extends EIP7702Properties ? 'eip7702' : never)\n    | (transaction['type'] extends TransactionSerializableGeneric['type']\n        ? Extract<transaction['type'], string>\n        : never),\n> = IsNever<keyof transaction> extends true\n  ? string\n  : IsNever<result> extends false\n    ? result\n    : string\n\nexport type GetTransactionTypeErrorType =\n  | InvalidSerializableTransactionErrorType\n  | ErrorType\n\nexport function getTransactionType<\n  const transaction extends OneOf<\n    TransactionSerializableGeneric | TransactionRequestGeneric\n  >,\n>(transaction: transaction): GetTransactionType<transaction> {\n  if (transaction.type)\n    return transaction.type as GetTransactionType<transaction>\n\n  if (typeof transaction.authorizationList !== 'undefined')\n    return 'eip7702' as any\n\n  if (\n    typeof transaction.blobs !== 'undefined' ||\n    typeof transaction.blobVersionedHashes !== 'undefined' ||\n    typeof transaction.maxFeePerBlobGas !== 'undefined' ||\n    typeof transaction.sidecars !== 'undefined'\n  )\n    return 'eip4844' as any\n\n  if (\n    typeof transaction.maxFeePerGas !== 'undefined' ||\n    typeof transaction.maxPriorityFeePerGas !== 'undefined'\n  ) {\n    return 'eip1559' as any\n  }\n\n  if (typeof transaction.gasPrice !== 'undefined') {\n    if (typeof transaction.accessList !== 'undefined') return 'eip2930' as any\n    return 'legacy' as any\n  }\n\n  throw new InvalidSerializableTransactionError({ transaction })\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype BaseProperties = {\n  accessList?: undefined\n  authorizationList?: undefined\n  blobs?: undefined\n  blobVersionedHashes?: undefined\n  gasPrice?: undefined\n  maxFeePerBlobGas?: undefined\n  maxFeePerGas?: undefined\n  maxPriorityFeePerGas?: undefined\n  sidecars?: undefined\n}\n\ntype LegacyProperties = Assign<BaseProperties, FeeValuesLegacy>\ntype EIP1559Properties = Assign<\n  BaseProperties,\n  OneOf<\n    | {\n        maxFeePerGas: FeeValuesEIP1559['maxFeePerGas']\n      }\n    | {\n        maxPriorityFeePerGas: FeeValuesEIP1559['maxPriorityFeePerGas']\n      },\n    FeeValuesEIP1559\n  > & {\n    accessList?: TransactionSerializableEIP2930['accessList'] | undefined\n  }\n>\ntype EIP2930Properties = Assign<\n  ExactPartial<LegacyProperties>,\n  {\n    accessList: TransactionSerializableEIP2930['accessList']\n  }\n>\ntype EIP4844Properties = Assign<\n  ExactPartial<EIP1559Properties>,\n  ExactPartial<FeeValuesEIP4844> &\n    OneOf<\n      | {\n          blobs: TransactionSerializableEIP4844['blobs']\n        }\n      | {\n          blobVersionedHashes: TransactionSerializableEIP4844['blobVersionedHashes']\n        }\n      | {\n          sidecars: TransactionSerializableEIP4844['sidecars']\n        },\n      TransactionSerializableEIP4844\n    >\n>\ntype EIP7702Properties = Assign<\n  ExactPartial<EIP1559Properties>,\n  {\n    authorizationList: TransactionSerializableEIP7702['authorizationList']\n  }\n>\n", "import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type HexToNumberErrorType,\n  hexToNumber,\n} from '../../utils/encoding/fromHex.js'\n\nexport type GetChainIdReturnType = number\n\nexport type GetChainIdErrorType =\n  | HexToNumberErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the chain ID associated with the current network.\n *\n * - Docs: https://viem.sh/docs/actions/public/getChainId\n * - JSON-RPC Methods: [`eth_chainId`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid)\n *\n * @param client - Client to use\n * @returns The current chain ID. {@link GetChainIdReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getChainId } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const chainId = await getChainId(client)\n * // 1\n */\nexport async function getChainId<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(client: Client<Transport, chain, account>): Promise<GetChainIdReturnType> {\n  const chainIdHex = await client.request(\n    {\n      method: 'eth_chainId',\n    },\n    { dedupe: true },\n  )\n  return hexToNumber(chainIdHex)\n}\n", "import type { Address } from 'abitype'\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport {\n  type EstimateFeesPerGasErrorType,\n  internal_estimateFeesPerGas,\n} from '../../actions/public/estimateFeesPerGas.js'\nimport {\n  type EstimateGasErrorType,\n  type EstimateGasParameters,\n  estimateGas,\n} from '../../actions/public/estimateGas.js'\nimport {\n  type GetBlockErrorType,\n  getBlock as getBlock_,\n} from '../../actions/public/getBlock.js'\nimport {\n  type GetTransactionCountErrorType,\n  getTransactionCount,\n} from '../../actions/public/getTransactionCount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { AccountNotFoundErrorType } from '../../errors/account.js'\nimport {\n  Eip1559FeesNotSupportedError,\n  MaxFeePerGasTooLowError,\n} from '../../errors/fee.js'\nimport type { DeriveAccount, GetAccountParameter } from '../../types/account.js'\nimport type { Block } from '../../types/block.js'\nimport type {\n  Chain,\n  DeriveChain,\n  GetChainParameter,\n} from '../../types/chain.js'\nimport type { GetTransactionRequestKzgParameter } from '../../types/kzg.js'\nimport type {\n  TransactionRequest,\n  TransactionRequestEIP1559,\n  TransactionRequestEIP2930,\n  TransactionRequestEIP4844,\n  TransactionRequestEIP7702,\n  TransactionRequestLegacy,\n  TransactionSerializable,\n} from '../../types/transaction.js'\nimport type {\n  ExactPartial,\n  IsNever,\n  Prettify,\n  UnionOmit,\n  UnionRequiredBy,\n} from '../../types/utils.js'\nimport { blobsToCommitments } from '../../utils/blob/blobsToCommitments.js'\nimport { blobsToProofs } from '../../utils/blob/blobsToProofs.js'\nimport { commitmentsToVersionedHashes } from '../../utils/blob/commitmentsToVersionedHashes.js'\nimport { toBlobSidecars } from '../../utils/blob/toBlobSidecars.js'\nimport type { FormattedTransactionRequest } from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type { NonceManager } from '../../utils/nonceManager.js'\nimport {\n  type AssertRequestErrorType,\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport {\n  type GetTransactionType,\n  getTransactionType,\n} from '../../utils/transaction/getTransactionType.js'\nimport { getChainId as getChainId_ } from '../public/getChainId.js'\n\nexport const defaultParameters = [\n  'blobVersionedHashes',\n  'chainId',\n  'fees',\n  'gas',\n  'nonce',\n  'type',\n] as const\n\n/** @internal */\nexport const eip1559NetworkCache = /*#__PURE__*/ new Map<string, boolean>()\n\nexport type PrepareTransactionRequestParameterType =\n  | 'blobVersionedHashes'\n  | 'chainId'\n  | 'fees'\n  | 'gas'\n  | 'nonce'\n  | 'sidecars'\n  | 'type'\ntype ParameterTypeToParameters<\n  parameterType extends PrepareTransactionRequestParameterType,\n> = parameterType extends 'fees'\n  ? 'maxFeePerGas' | 'maxPriorityFeePerGas' | 'gasPrice'\n  : parameterType\n\nexport type PrepareTransactionRequestRequest<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  ///\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> &\n  GetTransactionRequestKzgParameter & {\n    /**\n     * Nonce manager to use for the transaction request.\n     */\n    nonceManager?: NonceManager | undefined\n    /**\n     * Parameters to prepare for the transaction request.\n     *\n     * @default ['blobVersionedHashes', 'chainId', 'fees', 'gas', 'nonce', 'type']\n     */\n    parameters?: readonly PrepareTransactionRequestParameterType[] | undefined\n  }\n\nexport type PrepareTransactionRequestParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  accountOverride extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n  request extends PrepareTransactionRequestRequest<\n    chain,\n    chainOverride\n  > = PrepareTransactionRequestRequest<chain, chainOverride>,\n> = request &\n  GetAccountParameter<account, accountOverride, false, true> &\n  GetChainParameter<chain, chainOverride> &\n  GetTransactionRequestKzgParameter<request> & { chainId?: number | undefined }\n\nexport type PrepareTransactionRequestReturnType<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  accountOverride extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n  request extends PrepareTransactionRequestRequest<\n    chain,\n    chainOverride\n  > = PrepareTransactionRequestRequest<chain, chainOverride>,\n  ///\n  _derivedAccount extends Account | Address | undefined = DeriveAccount<\n    account,\n    accountOverride\n  >,\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n  _transactionType = request['type'] extends string | undefined\n    ? request['type']\n    : GetTransactionType<request> extends 'legacy'\n      ? unknown\n      : GetTransactionType<request>,\n  _transactionRequest extends TransactionRequest =\n    | (_transactionType extends 'legacy' ? TransactionRequestLegacy : never)\n    | (_transactionType extends 'eip1559' ? TransactionRequestEIP1559 : never)\n    | (_transactionType extends 'eip2930' ? TransactionRequestEIP2930 : never)\n    | (_transactionType extends 'eip4844' ? TransactionRequestEIP4844 : never)\n    | (_transactionType extends 'eip7702' ? TransactionRequestEIP7702 : never),\n> = Prettify<\n  UnionRequiredBy<\n    Extract<\n      UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> &\n        (_derivedChain extends Chain\n          ? { chain: _derivedChain }\n          : { chain?: undefined }) &\n        (_derivedAccount extends Account\n          ? { account: _derivedAccount; from: Address }\n          : { account?: undefined; from?: undefined }),\n      IsNever<_transactionRequest> extends true\n        ? unknown\n        : ExactPartial<_transactionRequest>\n    > & { chainId?: number | undefined },\n    ParameterTypeToParameters<\n      request['parameters'] extends readonly PrepareTransactionRequestParameterType[]\n        ? request['parameters'][number]\n        : (typeof defaultParameters)[number]\n    >\n  > &\n    (unknown extends request['kzg'] ? {} : Pick<request, 'kzg'>)\n>\n\nexport type PrepareTransactionRequestErrorType =\n  | AccountNotFoundErrorType\n  | AssertRequestErrorType\n  | ParseAccountErrorType\n  | GetBlockErrorType\n  | GetTransactionCountErrorType\n  | EstimateGasErrorType\n  | EstimateFeesPerGasErrorType\n\n/**\n * Prepares a transaction request for signing.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest\n *\n * @param args - {@link PrepareTransactionRequestParameters}\n * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function prepareTransactionRequest<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  const request extends PrepareTransactionRequestRequest<chain, chainOverride>,\n  accountOverride extends Account | Address | undefined = undefined,\n  chainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  args: PrepareTransactionRequestParameters<\n    chain,\n    account,\n    chainOverride,\n    accountOverride,\n    request\n  >,\n): Promise<\n  PrepareTransactionRequestReturnType<\n    chain,\n    account,\n    chainOverride,\n    accountOverride,\n    request\n  >\n> {\n  const {\n    account: account_ = client.account,\n    blobs,\n    chain,\n    gas,\n    kzg,\n    nonce,\n    nonceManager,\n    parameters = defaultParameters,\n    type,\n  } = args\n  const account = account_ ? parseAccount(account_) : account_\n\n  const request = { ...args, ...(account ? { from: account?.address } : {}) }\n\n  let block: Block | undefined\n  async function getBlock(): Promise<Block> {\n    if (block) return block\n    block = await getAction(\n      client,\n      getBlock_,\n      'getBlock',\n    )({ blockTag: 'latest' })\n    return block\n  }\n\n  let chainId: number | undefined\n  async function getChainId(): Promise<number> {\n    if (chainId) return chainId\n    if (chain) return chain.id\n    if (typeof args.chainId !== 'undefined') return args.chainId\n    const chainId_ = await getAction(client, getChainId_, 'getChainId')({})\n    chainId = chainId_\n    return chainId\n  }\n\n  if (parameters.includes('nonce') && typeof nonce === 'undefined' && account) {\n    if (nonceManager) {\n      const chainId = await getChainId()\n      request.nonce = await nonceManager.consume({\n        address: account.address,\n        chainId,\n        client,\n      })\n    } else {\n      request.nonce = await getAction(\n        client,\n        getTransactionCount,\n        'getTransactionCount',\n      )({\n        address: account.address,\n        blockTag: 'pending',\n      })\n    }\n  }\n\n  if (\n    (parameters.includes('blobVersionedHashes') ||\n      parameters.includes('sidecars')) &&\n    blobs &&\n    kzg\n  ) {\n    const commitments = blobsToCommitments({ blobs, kzg })\n\n    if (parameters.includes('blobVersionedHashes')) {\n      const versionedHashes = commitmentsToVersionedHashes({\n        commitments,\n        to: 'hex',\n      })\n      request.blobVersionedHashes = versionedHashes\n    }\n    if (parameters.includes('sidecars')) {\n      const proofs = blobsToProofs({ blobs, commitments, kzg })\n      const sidecars = toBlobSidecars({\n        blobs,\n        commitments,\n        proofs,\n        to: 'hex',\n      })\n      request.sidecars = sidecars\n    }\n  }\n\n  if (parameters.includes('chainId')) request.chainId = await getChainId()\n\n  if (\n    (parameters.includes('fees') || parameters.includes('type')) &&\n    typeof type === 'undefined'\n  ) {\n    try {\n      request.type = getTransactionType(\n        request as TransactionSerializable,\n      ) as any\n    } catch {\n      let isEip1559Network = eip1559NetworkCache.get(client.uid)\n      if (typeof isEip1559Network === 'undefined') {\n        const block = await getBlock()\n        isEip1559Network = typeof block?.baseFeePerGas === 'bigint'\n        eip1559NetworkCache.set(client.uid, isEip1559Network)\n      }\n      request.type = isEip1559Network ? 'eip1559' : 'legacy'\n    }\n  }\n\n  if (parameters.includes('fees')) {\n    // TODO(4844): derive blob base fees once https://github.com/ethereum/execution-apis/pull/486 is merged.\n\n    if (request.type !== 'legacy' && request.type !== 'eip2930') {\n      // EIP-1559 fees\n      if (\n        typeof request.maxFeePerGas === 'undefined' ||\n        typeof request.maxPriorityFeePerGas === 'undefined'\n      ) {\n        const block = await getBlock()\n        const { maxFeePerGas, maxPriorityFeePerGas } =\n          await internal_estimateFeesPerGas(client, {\n            block: block as Block,\n            chain,\n            request: request as PrepareTransactionRequestParameters,\n          })\n\n        if (\n          typeof args.maxPriorityFeePerGas === 'undefined' &&\n          args.maxFeePerGas &&\n          args.maxFeePerGas < maxPriorityFeePerGas\n        )\n          throw new MaxFeePerGasTooLowError({\n            maxPriorityFeePerGas,\n          })\n\n        request.maxPriorityFeePerGas = maxPriorityFeePerGas\n        request.maxFeePerGas = maxFeePerGas\n      }\n    } else {\n      // Legacy fees\n      if (\n        typeof args.maxFeePerGas !== 'undefined' ||\n        typeof args.maxPriorityFeePerGas !== 'undefined'\n      )\n        throw new Eip1559FeesNotSupportedError()\n\n      if (typeof args.gasPrice === 'undefined') {\n        const block = await getBlock()\n        const { gasPrice: gasPrice_ } = await internal_estimateFeesPerGas(\n          client,\n          {\n            block: block as Block,\n            chain,\n            request: request as PrepareTransactionRequestParameters,\n            type: 'legacy',\n          },\n        )\n        request.gasPrice = gasPrice_\n      }\n    }\n  }\n\n  if (parameters.includes('gas') && typeof gas === 'undefined')\n    request.gas = await getAction(\n      client,\n      estimateGas,\n      'estimateGas',\n    )({\n      ...request,\n      account,\n      prepare: account?.type === 'local' ? [] : ['blobVersionedHashes'],\n    } as EstimateGasParameters)\n\n  assertRequest(request as AssertRequestParameters)\n\n  delete request.parameters\n\n  return request as any\n}\n", "import type { Address } from 'abitype'\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { BaseError } from '../../errors/base.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { StateOverride } from '../../types/stateOverride.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport {\n  type RecoverAuthorizationAddressErrorType,\n  recoverAuthorizationAddress,\n} from '../../utils/authorization/recoverAuthorizationAddress.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type GetEstimateGasErrorReturnType,\n  getEstimateGasError,\n} from '../../utils/errors/getEstimateGasError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport { serializeStateOverride } from '../../utils/stateOverride.js'\nimport {\n  type AssertRequestErrorType,\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport {\n  type PrepareTransactionRequestParameters,\n  type PrepareTransactionRequestParameterType,\n  prepareTransactionRequest,\n} from '../wallet/prepareTransactionRequest.js'\n\nexport type EstimateGasParameters<\n  chain extends Chain | undefined = Chain | undefined,\n> = UnionOmit<FormattedEstimateGas<chain>, 'from'> & {\n  account?: Account | Address | undefined\n  prepare?:\n    | boolean\n    | readonly PrepareTransactionRequestParameterType[]\n    | undefined\n  stateOverride?: StateOverride | undefined\n} & (\n    | {\n        /** The balance of the account at a block number. */\n        blockNumber?: bigint | undefined\n        blockTag?: undefined\n      }\n    | {\n        blockNumber?: undefined\n        /**\n         * The balance of the account at a block tag.\n         * @default 'latest'\n         */\n        blockTag?: BlockTag | undefined\n      }\n  )\ntype FormattedEstimateGas<chain extends Chain | undefined = Chain | undefined> =\n  FormattedTransactionRequest<chain>\n\nexport type EstimateGasReturnType = bigint\n\nexport type EstimateGasErrorType = GetEstimateGasErrorReturnType<\n  | ParseAccountErrorType\n  | NumberToHexErrorType\n  | RequestErrorType\n  | RecoverAuthorizationAddressErrorType\n  | AssertRequestErrorType\n>\n\n/**\n * Estimates the gas necessary to complete a transaction without submitting it to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateGas\n * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateGasParameters}\n * @returns The gas estimate (in gas units). {@link EstimateGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateGas } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gasEstimate = await estimateGas(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: parseEther('1'),\n * })\n */\nexport async function estimateGas<\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  args: EstimateGasParameters<chain>,\n): Promise<EstimateGasReturnType> {\n  const { account: account_ = client.account, prepare = true } = args\n  const account = account_ ? parseAccount(account_) : undefined\n\n  const parameters = (() => {\n    if (Array.isArray(prepare)) return prepare\n    // Some RPC Providers do not compute versioned hashes from blobs. We will need\n    // to compute them.\n    if (account?.type !== 'local') return ['blobVersionedHashes']\n    return undefined\n  })()\n\n  try {\n    const {\n      accessList,\n      authorizationList,\n      blobs,\n      blobVersionedHashes,\n      blockNumber,\n      blockTag,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      value,\n      stateOverride,\n      ...rest\n    } = prepare\n      ? ((await prepareTransactionRequest(client, {\n          ...args,\n          parameters,\n        } as PrepareTransactionRequestParameters)) as EstimateGasParameters)\n      : args\n\n    const blockNumberHex =\n      typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined\n    const block = blockNumberHex || blockTag\n\n    const rpcStateOverride = serializeStateOverride(stateOverride)\n\n    const to = await (async () => {\n      // If `to` exists on the parameters, use that.\n      if (rest.to) return rest.to\n\n      // If no `to` exists, and we are sending a EIP-7702 transaction, use the\n      // address of the first authorization in the list.\n      if (authorizationList && authorizationList.length > 0)\n        return await recoverAuthorizationAddress({\n          authorization: authorizationList[0],\n        }).catch(() => {\n          throw new BaseError(\n            '`to` is required. Could not infer from `authorizationList`',\n          )\n        })\n\n      // Otherwise, we are sending a deployment transaction.\n      return undefined\n    })()\n\n    assertRequest(args as AssertRequestParameters)\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format(\n      {\n        // Pick out extra data that might exist on the chain's transaction request type.\n        ...extract(rest, { format: chainFormat }),\n        account,\n        accessList,\n        authorizationList,\n        blobs,\n        blobVersionedHashes,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerBlobGas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        to,\n        value,\n      } as TransactionRequest,\n      'estimateGas',\n    )\n\n    return BigInt(\n      await client.request({\n        method: 'eth_estimateGas',\n        params: rpcStateOverride\n          ? [\n              request,\n              block ?? client.experimental_blockTag ?? 'latest',\n              rpcStateOverride,\n            ]\n          : block\n            ? [request, block]\n            : [request],\n      }),\n    )\n  } catch (err) {\n    throw getEstimateGasError(err as BaseError, {\n      ...args,\n      account,\n      chain: client.chain,\n    })\n  }\n}\n", "import type { Abi } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n  ContractFunctionParameters,\n  GetValue,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  type EncodeFunctionDataParameters,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from '../../utils/errors/getContractError.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type EstimateGasErrorType,\n  type EstimateGasParameters,\n  estimateGas,\n} from './estimateGas.js'\n\nexport type EstimateContractGasParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  chain extends Chain | undefined = Chain | undefined,\n> = ContractFunctionParameters<\n  abi,\n  'nonpayable' | 'payable',\n  functionName,\n  args\n> &\n  UnionOmit<EstimateGasParameters<chain>, 'data' | 'to' | 'value'> &\n  GetValue<\n    abi,\n    functionName,\n    EstimateGasParameters<chain> extends EstimateGasParameters\n      ? EstimateGasParameters<chain>['value']\n      : EstimateGasParameters['value']\n  > & {\n    /** Data to append to the end of the calldata. Useful for adding a [\"domain\" tag](https://opensea.notion.site/opensea/Seaport-Order-Attributions-ec2d69bf455041a5baa490941aad307f). */\n    dataSuffix?: Hex | undefined\n  }\n\nexport type EstimateContractGasReturnType = bigint\n\nexport type EstimateContractGasErrorType = GetContractErrorReturnType<\n  EncodeFunctionDataErrorType | EstimateGasErrorType | ParseAccountErrorType\n>\n\n/**\n * Estimates the gas required to successfully execute a contract write function call.\n *\n * - Docs: https://viem.sh/docs/contract/estimateContractGas\n *\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`estimateGas` action](https://viem.sh/docs/actions/public/estimateGas) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateContractGasParameters}\n * @returns The gas estimate (in wei). {@link EstimateContractGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateContractGas } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gas = await estimateContractGas(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint() public']),\n *   functionName: 'mint',\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n * })\n */\nexport async function estimateContractGas<\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: EstimateContractGasParameters<abi, functionName, args, chain>,\n): Promise<EstimateContractGasReturnType> {\n  const { abi, address, args, functionName, dataSuffix, ...request } =\n    parameters as EstimateContractGasParameters\n  const data = encodeFunctionData({\n    abi,\n    args,\n    functionName,\n  } as EncodeFunctionDataParameters)\n  try {\n    const gas = await getAction(\n      client,\n      estimateGas,\n      'estimateGas',\n    )({\n      data: `${data}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,\n      to: address,\n      ...request,\n    } as unknown as EstimateGasParameters)\n    return gas\n  } catch (error) {\n    const account = request.account ? parseAccount(request.account) : undefined\n    throw getContractError(error as BaseError, {\n      abi,\n      address,\n      args,\n      docsPath: '/docs/contract/estimateContractGas',\n      functionName,\n      sender: account?.address,\n    })\n  }\n}\n", "import type { Abi, AbiParameter } from 'abitype'\n\nimport {\n  AbiDecodingDataSizeTooSmallError,\n  type AbiDecodingDataSizeTooSmallErrorType,\n  AbiEventSignatureEmptyTopicsError,\n  type AbiEventSignatureEmptyTopicsErrorType,\n  AbiEventSignatureNotFoundError,\n  type AbiEventSignatureNotFoundErrorType,\n  DecodeLogDataMismatch,\n  type DecodeLogDataMismatchErrorType,\n  DecodeLogTopicsMismatch,\n  type DecodeLogTopicsMismatchErrorType,\n} from '../../errors/abi.js'\nimport { PositionOutOfBoundsError } from '../../errors/cursor.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  ContractEventArgsFromTopics,\n  ContractEventName,\n  EventDefinition,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type {\n  IsNarrowable,\n  Prettify,\n  UnionEvaluate,\n} from '../../types/utils.js'\nimport { size } from '../data/size.js'\nimport {\n  type ToEventSelectorErrorType,\n  toEventSelector,\n} from '../hash/toEventSelector.js'\nimport {\n  type DecodeAbiParametersErrorType,\n  decodeAbiParameters,\n} from './decodeAbiParameters.js'\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\n\nexport type DecodeEventLogParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> | undefined = ContractEventName<abi>,\n  topics extends Hex[] = Hex[],\n  data extends Hex | undefined = undefined,\n  strict extends boolean = true,\n> = {\n  abi: abi\n  data?: data | undefined\n  eventName?: eventName | ContractEventName<abi> | undefined\n  strict?: strict | boolean | undefined\n  topics: [signature: Hex, ...args: topics] | []\n}\n\nexport type DecodeEventLogReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> | undefined = ContractEventName<abi>,\n  topics extends Hex[] = Hex[],\n  data extends Hex | undefined = undefined,\n  strict extends boolean = true,\n  ///\n  allEventNames extends\n    ContractEventName<abi> = eventName extends ContractEventName<abi>\n    ? eventName\n    : ContractEventName<abi>,\n> = IsNarrowable<abi, Abi> extends true\n  ? {\n      [name in allEventNames]: Prettify<\n        {\n          eventName: name\n        } & UnionEvaluate<\n          ContractEventArgsFromTopics<abi, name, strict> extends infer allArgs\n            ? topics extends readonly []\n              ? data extends undefined\n                ? { args?: undefined }\n                : { args?: allArgs | undefined }\n              : { args: allArgs }\n            : never\n        >\n      >\n    }[allEventNames]\n  : {\n      eventName: eventName\n      args: readonly unknown[] | undefined\n    }\n\nexport type DecodeEventLogErrorType =\n  | AbiDecodingDataSizeTooSmallErrorType\n  | AbiEventSignatureEmptyTopicsErrorType\n  | AbiEventSignatureNotFoundErrorType\n  | DecodeAbiParametersErrorType\n  | DecodeLogTopicsMismatchErrorType\n  | DecodeLogDataMismatchErrorType\n  | FormatAbiItemErrorType\n  | ToEventSelectorErrorType\n  | ErrorType\n\nconst docsPath = '/docs/contract/decodeEventLog'\n\nexport function decodeEventLog<\n  const abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi> | undefined = undefined,\n  topics extends Hex[] = Hex[],\n  data extends Hex | undefined = undefined,\n  strict extends boolean = true,\n>(\n  parameters: DecodeEventLogParameters<abi, eventName, topics, data, strict>,\n): DecodeEventLogReturnType<abi, eventName, topics, data, strict> {\n  const {\n    abi,\n    data,\n    strict: strict_,\n    topics,\n  } = parameters as DecodeEventLogParameters\n\n  const strict = strict_ ?? true\n  const [signature, ...argTopics] = topics\n  if (!signature) throw new AbiEventSignatureEmptyTopicsError({ docsPath })\n\n  const abiItem = abi.find(\n    (x) =>\n      x.type === 'event' &&\n      signature === toEventSelector(formatAbiItem(x) as EventDefinition),\n  )\n\n  if (!(abiItem && 'name' in abiItem) || abiItem.type !== 'event')\n    throw new AbiEventSignatureNotFoundError(signature, { docsPath })\n\n  const { name, inputs } = abiItem\n  const isUnnamed = inputs?.some((x) => !('name' in x && x.name))\n\n  const args: any = isUnnamed ? [] : {}\n\n  // Decode topics (indexed args).\n  const indexedInputs = inputs\n    .map((x, i) => [x, i] as const)\n    .filter(([x]) => 'indexed' in x && x.indexed)\n  for (let i = 0; i < indexedInputs.length; i++) {\n    const [param, argIndex] = indexedInputs[i]\n    const topic = argTopics[i]\n    if (!topic)\n      throw new DecodeLogTopicsMismatch({\n        abiItem,\n        param: param as AbiParameter & { indexed: boolean },\n      })\n    args[isUnnamed ? argIndex : param.name || argIndex] = decodeTopic({\n      param,\n      value: topic,\n    })\n  }\n\n  // Decode data (non-indexed args).\n  const nonIndexedInputs = inputs.filter((x) => !('indexed' in x && x.indexed))\n  if (nonIndexedInputs.length > 0) {\n    if (data && data !== '0x') {\n      try {\n        const decodedData = decodeAbiParameters(nonIndexedInputs, data)\n        if (decodedData) {\n          if (isUnnamed)\n            for (let i = 0; i < inputs.length; i++)\n              args[i] = args[i] ?? decodedData.shift()\n          else\n            for (let i = 0; i < nonIndexedInputs.length; i++)\n              args[nonIndexedInputs[i].name!] = decodedData[i]\n        }\n      } catch (err) {\n        if (strict) {\n          if (\n            err instanceof AbiDecodingDataSizeTooSmallError ||\n            err instanceof PositionOutOfBoundsError\n          )\n            throw new DecodeLogDataMismatch({\n              abiItem,\n              data: data,\n              params: nonIndexedInputs,\n              size: size(data),\n            })\n          throw err\n        }\n      }\n    } else if (strict) {\n      throw new DecodeLogDataMismatch({\n        abiItem,\n        data: '0x',\n        params: nonIndexedInputs,\n        size: 0,\n      })\n    }\n  }\n\n  return {\n    eventName: name,\n    args: Object.values(args).length > 0 ? args : undefined,\n  } as unknown as DecodeEventLogReturnType<abi, eventName, topics, data, strict>\n}\n\nfunction decodeTopic({ param, value }: { param: AbiParameter; value: Hex }) {\n  if (\n    param.type === 'string' ||\n    param.type === 'bytes' ||\n    param.type === 'tuple' ||\n    param.type.match(/^(.*)\\[(\\d+)?\\]$/)\n  )\n    return value\n  const decodedArg = decodeAbiParameters([param], value) || []\n  return decodedArg[0]\n}\n", "// TODO(v3): checksum address.\n\nimport type { Abi, AbiEvent, AbiEventParameter, Address } from 'abitype'\nimport {\n  AbiEventSignatureNotFoundError,\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ContractEventName, GetEventArgs } from '../../types/contract.js'\nimport type { Log } from '../../types/log.js'\nimport type { RpcLog } from '../../types/rpc.js'\nimport { isAddressEqual } from '../address/isAddressEqual.js'\nimport { toBytes } from '../encoding/toBytes.js'\nimport { keccak256 } from '../hash/keccak256.js'\nimport { toEventSelector } from '../hash/toEventSelector.js'\nimport {\n  type DecodeEventLogErrorType,\n  decodeEventLog,\n} from './decodeEventLog.js'\n\nexport type ParseEventLogsParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends\n    | ContractEventName<abi>\n    | ContractEventName<abi>[]\n    | undefined = ContractEventName<abi>,\n  strict extends boolean | undefined = boolean | undefined,\n  ///\n  allArgs = GetEventArgs<\n    abi,\n    eventName extends ContractEventName<abi>\n      ? eventName\n      : ContractEventName<abi>,\n    {\n      EnableUnion: true\n      IndexedOnly: false\n      Required: false\n    }\n  >,\n> = {\n  /** Contract ABI. */\n  abi: abi\n  /** Arguments for the event. */\n  args?: allArgs | undefined\n  /** Contract event. */\n  eventName?:\n    | eventName\n    | ContractEventName<abi>\n    | ContractEventName<abi>[]\n    | undefined\n  /** List of logs. */\n  logs: (Log | RpcLog)[]\n  strict?: strict | boolean | undefined\n}\n\nexport type ParseEventLogsReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends\n    | ContractEventName<abi>\n    | ContractEventName<abi>[]\n    | undefined = ContractEventName<abi>,\n  strict extends boolean | undefined = boolean | undefined,\n  ///\n  derivedEventName extends\n    | ContractEventName<abi>\n    | undefined = eventName extends ContractEventName<abi>[]\n    ? eventName[number]\n    : eventName,\n> = Log<bigint, number, false, undefined, strict, abi, derivedEventName>[]\n\nexport type ParseEventLogsErrorType = DecodeEventLogErrorType | ErrorType\n\n/**\n * Extracts & decodes logs matching the provided signature(s) (`abi` + optional `eventName`)\n * from a set of opaque logs.\n *\n * @param parameters - {@link ParseEventLogsParameters}\n * @returns The logs. {@link ParseEventLogsReturnType}\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { parseEventLogs } from 'viem/op-stack'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const receipt = await getTransactionReceipt(client, {\n *   hash: '0xec23b2ba4bc59ba61554507c1b1bc91649e6586eb2dd00c728e8ed0db8bb37ea',\n * })\n *\n * const logs = parseEventLogs({ logs: receipt.logs })\n * // [{ args: { ... }, eventName: 'TransactionDeposited', ... }, ...]\n */\nexport function parseEventLogs<\n  abi extends Abi | readonly unknown[],\n  strict extends boolean | undefined = true,\n  eventName extends\n    | ContractEventName<abi>\n    | ContractEventName<abi>[]\n    | undefined = undefined,\n>(\n  parameters: ParseEventLogsParameters<abi, eventName, strict>,\n): ParseEventLogsReturnType<abi, eventName, strict> {\n  const { abi, args, logs, strict = true } = parameters\n\n  const eventName = (() => {\n    if (!parameters.eventName) return undefined\n    if (Array.isArray(parameters.eventName)) return parameters.eventName\n    return [parameters.eventName as string]\n  })()\n\n  return logs\n    .map((log) => {\n      try {\n        const abiItem = (abi as Abi).find(\n          (abiItem) =>\n            abiItem.type === 'event' &&\n            log.topics[0] === toEventSelector(abiItem),\n        ) as AbiEvent\n        if (!abiItem) return null\n\n        const event = decodeEventLog({\n          ...log,\n          abi: [abiItem],\n          strict,\n        })\n\n        // Check that the decoded event name matches the provided event name.\n        if (eventName && !eventName.includes(event.eventName)) return null\n\n        // Check that the decoded event args match the provided args.\n        if (\n          !includesArgs({\n            args: event.args,\n            inputs: abiItem.inputs,\n            matchArgs: args,\n          })\n        )\n          return null\n\n        return { ...event, ...log }\n      } catch (err) {\n        let eventName: string | undefined\n        let isUnnamed: boolean | undefined\n\n        if (err instanceof AbiEventSignatureNotFoundError) return null\n        if (\n          err instanceof DecodeLogDataMismatch ||\n          err instanceof DecodeLogTopicsMismatch\n        ) {\n          // If strict mode is on, and log data/topics do not match event definition, skip.\n          if (strict) return null\n          eventName = err.abiItem.name\n          isUnnamed = err.abiItem.inputs?.some((x) => !('name' in x && x.name))\n        }\n\n        // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n        return { ...log, args: isUnnamed ? [] : {}, eventName }\n      }\n    })\n    .filter(Boolean) as unknown as ParseEventLogsReturnType<\n    abi,\n    eventName,\n    strict\n  >\n}\n\nfunction includesArgs(parameters: {\n  args: unknown\n  inputs: AbiEvent['inputs']\n  matchArgs: unknown\n}) {\n  const { args, inputs, matchArgs } = parameters\n\n  if (!matchArgs) return true\n  if (!args) return false\n\n  function isEqual(input: AbiEventParameter, value: unknown, arg: unknown) {\n    try {\n      if (input.type === 'address')\n        return isAddressEqual(value as Address, arg as Address)\n      if (input.type === 'string' || input.type === 'bytes')\n        return keccak256(toBytes(value as string)) === arg\n      return value === arg\n    } catch {\n      return false\n    }\n  }\n\n  if (Array.isArray(args) && Array.isArray(matchArgs)) {\n    return matchArgs.every((value, index) => {\n      if (value === null || value === undefined) return true\n      const input = inputs[index]\n      if (!input) return false\n      const value_ = Array.isArray(value) ? value : [value]\n      return value_.some((value) => isEqual(input, value, args[index]))\n    })\n  }\n\n  if (\n    typeof args === 'object' &&\n    !Array.isArray(args) &&\n    typeof matchArgs === 'object' &&\n    !Array.isArray(matchArgs)\n  )\n    return Object.entries(matchArgs).every(([key, value]) => {\n      if (value === null || value === undefined) return true\n      const input = inputs.find((input) => input.name === key)\n      if (!input) return false\n      const value_ = Array.isArray(value) ? value : [value]\n      return value_.some((value) =>\n        isEqual(input, value, (args as Record<string, unknown>)[key]),\n      )\n    })\n\n  return false\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Log } from '../../types/log.js'\nimport type { RpcLog } from '../../types/rpc.js'\nimport type { ExactPartial } from '../../types/utils.js'\n\nexport type FormatLogErrorType = ErrorType\n\nexport function formatLog(\n  log: ExactPartial<RpcLog>,\n  {\n    args,\n    eventName,\n  }: { args?: unknown | undefined; eventName?: string | undefined } = {},\n) {\n  return {\n    ...log,\n    blockHash: log.blockHash ? log.blockHash : null,\n    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,\n    logIndex: log.logIndex ? Number(log.logIndex) : null,\n    transactionHash: log.transactionHash ? log.transactionHash : null,\n    transactionIndex: log.transactionIndex\n      ? Number(log.transactionIndex)\n      : null,\n    ...(eventName ? { args, eventName } : {}),\n  } as Log\n}\n", "import type { AbiEvent, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Log } from '../../types/log.js'\nimport type { Hash, LogTopic } from '../../types/misc.js'\nimport type { RpcLog } from '../../types/rpc.js'\nimport type { DecodeEventLogErrorType } from '../../utils/abi/decodeEventLog.js'\nimport {\n  type EncodeEventTopicsErrorType,\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport { parseEventLogs } from '../../utils/abi/parseEventLogs.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormatLogErrorType,\n  formatLog,\n} from '../../utils/formatters/log.js'\n\nexport type GetLogsParameters<\n  abiEvent extends AbiEvent | undefined = undefined,\n  abiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  //\n  _eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\n> = {\n  /** Address or list of addresses from which logs originated */\n  address?: Address | Address[] | undefined\n} & (\n  | {\n      event: abiEvent\n      events?: undefined\n      args?: MaybeExtractEventArgsFromAbi<abiEvents, _eventName> | undefined\n      /**\n       * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n       * @default false\n       */\n      strict?: strict | undefined\n    }\n  | {\n      event?: undefined\n      events: abiEvents\n      args?: undefined\n      /**\n       * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n       * @default false\n       */\n      strict?: strict | undefined\n    }\n  | {\n      event?: undefined\n      events?: undefined\n      args?: undefined\n      strict?: undefined\n    }\n) &\n  (\n    | {\n        /** Block number or tag after which to include logs */\n        fromBlock?: fromBlock | BlockNumber | BlockTag | undefined\n        /** Block number or tag before which to include logs */\n        toBlock?: toBlock | BlockNumber | BlockTag | undefined\n        blockHash?: undefined\n      }\n    | {\n        fromBlock?: undefined\n        toBlock?: undefined\n        /** Hash of block to include logs from */\n        blockHash?: Hash | undefined\n      }\n  )\n\nexport type GetLogsReturnType<\n  abiEvent extends AbiEvent | undefined = undefined,\n  abiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  //\n  _eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\n  _pending extends boolean =\n    | (fromBlock extends 'pending' ? true : false)\n    | (toBlock extends 'pending' ? true : false),\n> = Log<bigint, number, _pending, abiEvent, strict, abiEvents, _eventName>[]\n\nexport type GetLogsErrorType =\n  | DecodeEventLogErrorType\n  | EncodeEventTopicsErrorType\n  | FormatLogErrorType\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns a list of event logs matching the provided parameters.\n *\n * - Docs: https://viem.sh/docs/actions/public/getLogs\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/logs_event-logs\n * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n *\n * @param client - Client to use\n * @param parameters - {@link GetLogsParameters}\n * @returns A list of event logs. {@link GetLogsReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getLogs } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const logs = await getLogs(client)\n */\nexport async function getLogs<\n  chain extends Chain | undefined,\n  const abiEvent extends AbiEvent | undefined = undefined,\n  const abiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  client: Client<Transport, chain>,\n  {\n    address,\n    blockHash,\n    fromBlock,\n    toBlock,\n    event,\n    events: events_,\n    args,\n    strict: strict_,\n  }: GetLogsParameters<abiEvent, abiEvents, strict, fromBlock, toBlock> = {},\n): Promise<GetLogsReturnType<abiEvent, abiEvents, strict, fromBlock, toBlock>> {\n  const strict = strict_ ?? false\n  const events = events_ ?? (event ? [event] : undefined)\n\n  let topics: LogTopic[] = []\n  if (events) {\n    const encoded = (events as AbiEvent[]).flatMap((event) =>\n      encodeEventTopics({\n        abi: [event],\n        eventName: (event as AbiEvent).name,\n        args: events_ ? undefined : args,\n      } as EncodeEventTopicsParameters),\n    )\n    // TODO: Clean up type casting\n    topics = [encoded as LogTopic]\n    if (event) topics = topics[0] as LogTopic[]\n  }\n\n  let logs: RpcLog[]\n  if (blockHash) {\n    logs = await client.request({\n      method: 'eth_getLogs',\n      params: [{ address, topics, blockHash }],\n    })\n  } else {\n    logs = await client.request({\n      method: 'eth_getLogs',\n      params: [\n        {\n          address,\n          topics,\n          fromBlock:\n            typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n          toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\n        },\n      ],\n    })\n  }\n\n  const formattedLogs = logs.map((log) => formatLog(log))\n  if (!events)\n    return formattedLogs as GetLogsReturnType<\n      abiEvent,\n      abiEvents,\n      strict,\n      fromBlock,\n      toBlock\n    >\n  return parseEventLogs({\n    abi: events,\n    args: args as any,\n    logs: formattedLogs,\n    strict,\n  }) as unknown as GetLogsReturnType<\n    abiEvent,\n    abiEvents,\n    strict,\n    fromBlock,\n    toBlock\n  >\n}\n", "import type { Abi, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractEventArgs,\n  ContractEventName,\n} from '../../types/contract.js'\nimport type { Log } from '../../types/log.js'\nimport type { Hash } from '../../types/misc.js'\nimport {\n  type GetAbiItemErrorType,\n  type GetAbiItemParameters,\n  getAbiItem,\n} from '../../utils/abi/getAbiItem.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type GetLogsErrorType,\n  type GetLogsParameters,\n  getLogs,\n} from './getLogs.js'\n\nexport type GetContractEventsParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> | undefined =\n    | ContractEventName<abi>\n    | undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = {\n  /** The address of the contract. */\n  address?: Address | Address[] | undefined\n  /** Contract ABI. */\n  abi: abi\n  args?:\n    | ContractEventArgs<\n        abi,\n        eventName extends ContractEventName<abi>\n          ? eventName\n          : ContractEventName<abi>\n      >\n    | undefined\n  /** Contract event. */\n  eventName?: eventName | ContractEventName<abi> | undefined\n  /**\n   * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n   * @default false\n   */\n  strict?: strict | boolean | undefined\n} & (\n  | {\n      /** Block number or tag after which to include logs */\n      fromBlock?: fromBlock | BlockNumber | BlockTag | undefined\n      /** Block number or tag before which to include logs */\n      toBlock?: toBlock | BlockNumber | BlockTag | undefined\n      blockHash?: undefined\n    }\n  | {\n      fromBlock?: undefined\n      toBlock?: undefined\n      /** Hash of block to include logs from */\n      blockHash?: Hash | undefined\n    }\n)\n\nexport type GetContractEventsReturnType<\n  abi extends Abi | readonly unknown[] = readonly unknown[],\n  eventName extends ContractEventName<abi> | undefined =\n    | ContractEventName<abi>\n    | undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  ///\n  isPending extends boolean =\n    | (fromBlock extends 'pending' ? true : false)\n    | (toBlock extends 'pending' ? true : false),\n> = Log<bigint, number, isPending, undefined, strict, abi, eventName>[]\n\nexport type GetContractEventsErrorType =\n  | GetAbiItemErrorType\n  | GetLogsErrorType\n  | ErrorType\n\n/**\n * Returns a list of event logs emitted by a contract.\n *\n * - Docs: https://viem.sh/docs/contract/getContractEvents#getcontractevents\n * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n *\n * @param client - Client to use\n * @param parameters - {@link GetContractEventsParameters}\n * @returns A list of event logs. {@link GetContractEventsReturnType}\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getContractEvents } from 'viem/public'\n * import { wagmiAbi } from './abi'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const logs = await getContractEvents(client, {\n *  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *  abi: wagmiAbi,\n *  eventName: 'Transfer'\n * })\n */\nexport async function getContractEvents<\n  chain extends Chain | undefined,\n  const abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi> | undefined = undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  client: Client<Transport, chain>,\n  parameters: GetContractEventsParameters<\n    abi,\n    eventName,\n    strict,\n    fromBlock,\n    toBlock\n  >,\n): Promise<\n  GetContractEventsReturnType<abi, eventName, strict, fromBlock, toBlock>\n> {\n  const {\n    abi,\n    address,\n    args,\n    blockHash,\n    eventName,\n    fromBlock,\n    toBlock,\n    strict,\n  } = parameters\n  const event = eventName\n    ? getAbiItem({ abi, name: eventName } as GetAbiItemParameters)\n    : undefined\n  const events = !event\n    ? (abi as Abi).filter((x) => x.type === 'event')\n    : undefined\n  return getAction(\n    client,\n    getLogs,\n    'getLogs',\n  )({\n    address,\n    args,\n    blockHash,\n    event,\n    events,\n    fromBlock,\n    toBlock,\n    strict,\n  } as {} as GetLogsParameters) as unknown as GetContractEventsReturnType<\n    abi,\n    eventName,\n    strict,\n    fromBlock,\n    toBlock\n  >\n}\n", "import type { Abi } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n  ContractFunctionParameters,\n  ContractFunctionReturnType,\n} from '../../types/contract.js'\nimport type { UnionEvaluate } from '../../types/utils.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  type EncodeFunctionDataParameters,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from '../../utils/errors/getContractError.js'\nimport { getAction } from '../../utils/getAction.js'\n\nimport { type CallErrorType, type CallParameters, call } from './call.js'\n\nexport type ReadContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'pure' | 'view'\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'pure' | 'view',\n    functionName\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n> = UnionEvaluate<\n  Pick<\n    CallParameters,\n    | 'account'\n    | 'authorizationList'\n    | 'blockNumber'\n    | 'blockOverrides'\n    | 'blockTag'\n    | 'factory'\n    | 'factoryData'\n    | 'stateOverride'\n  >\n> &\n  ContractFunctionParameters<abi, 'pure' | 'view', functionName, args, boolean>\n\nexport type ReadContractReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'pure' | 'view'\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'pure' | 'view',\n    functionName\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n> = ContractFunctionReturnType<abi, 'pure' | 'view', functionName, args>\n\nexport type ReadContractErrorType = GetContractErrorReturnType<\n  CallErrorType | EncodeFunctionDataErrorType | DecodeFunctionResultErrorType\n>\n\n/**\n * Calls a read-only function on a contract, and returns the response.\n *\n * - Docs: https://viem.sh/docs/contract/readContract\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_reading-contracts\n *\n * A \"read-only\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\n *\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n *\n * @param client - Client to use\n * @param parameters - {@link ReadContractParameters}\n * @returns The response from the contract. Type is inferred. {@link ReadContractReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { readContract } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const result = await readContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\n *   functionName: 'balanceOf',\n *   args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n * })\n * // 424122n\n */\nexport async function readContract<\n  chain extends Chain | undefined,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  const args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n>(\n  client: Client<Transport, chain>,\n  parameters: ReadContractParameters<abi, functionName, args>,\n): Promise<ReadContractReturnType<abi, functionName, args>> {\n  const { abi, address, args, functionName, ...rest } =\n    parameters as ReadContractParameters\n  const calldata = encodeFunctionData({\n    abi,\n    args,\n    functionName,\n  } as EncodeFunctionDataParameters)\n  try {\n    const { data } = await getAction(\n      client,\n      call,\n      'call',\n    )({\n      ...(rest as CallParameters),\n      data: calldata,\n      to: address!,\n    })\n    return decodeFunctionResult({\n      abi,\n      args,\n      functionName,\n      data: data || '0x',\n    }) as ReadContractReturnType<abi, functionName>\n  } catch (error) {\n    throw getContractError(error as BaseError, {\n      abi,\n      address,\n      args,\n      docsPath: '/docs/contract/readContract',\n      functionName,\n    })\n  }\n}\n", "import type { Abi, AbiFunction, AbiStateMutability, Address } from 'abitype'\n\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account, ParseAccount } from '../../types/account.js'\nimport type { Chain, DeriveChain } from '../../types/chain.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n  ContractFunctionParameters,\n  ContractFunctionReturnType,\n  ExtractAbiFunctionForArgs,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type {\n  IsNarrowable,\n  NoInfer,\n  Prettify,\n  UnionEvaluate,\n  UnionOmit,\n} from '../../types/utils.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from '../../utils/errors/getContractError.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type { WriteContractParameters } from '../wallet/writeContract.js'\nimport { type CallErrorType, type CallParameters, call } from './call.js'\n\nexport type GetMutabilityAwareValue<\n  abi extends Abi | readonly unknown[],\n  mutability extends AbiStateMutability = AbiStateMutability,\n  functionName extends ContractFunctionName<\n    abi,\n    mutability\n  > = ContractFunctionName<abi, mutability>,\n  valueType = TransactionRequest['value'],\n  args extends ContractFunctionArgs<\n    abi,\n    mutability,\n    functionName\n  > = ContractFunctionArgs<abi, mutability, functionName>,\n  abiFunction extends AbiFunction = abi extends Abi\n    ? ExtractAbiFunctionForArgs<abi, mutability, functionName, args>\n    : AbiFunction,\n  _Narrowable extends boolean = IsNarrowable<abi, Abi>,\n> = _Narrowable extends true\n  ? abiFunction['stateMutability'] extends 'payable'\n    ? { value?: NoInfer<valueType> | undefined }\n    : abiFunction['payable'] extends true\n      ? { value?: NoInfer<valueType> | undefined }\n      : { value?: undefined }\n  : { value?: NoInfer<valueType> | undefined }\n\nexport type SimulateContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  accountOverride extends Account | Address | null | undefined = undefined,\n  ///\n  derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = {\n  account?: accountOverride | null | undefined\n  chain?: chainOverride | undefined\n  /** Data to append to the end of the calldata. Useful for adding a [\"domain\" tag](https://opensea.notion.site/opensea/Seaport-Order-Attributions-ec2d69bf455041a5baa490941aad307f). */\n  dataSuffix?: Hex | undefined\n} & ContractFunctionParameters<\n  abi,\n  'nonpayable' | 'payable',\n  functionName,\n  args\n> &\n  UnionOmit<\n    CallParameters<derivedChain>,\n    | 'account'\n    | 'batch'\n    | 'code'\n    | 'to'\n    | 'data'\n    | 'factory'\n    | 'factoryData'\n    | 'value'\n  > &\n  GetMutabilityAwareValue<\n    abi,\n    'nonpayable' | 'payable',\n    functionName,\n    CallParameters<derivedChain> extends CallParameters\n      ? CallParameters<derivedChain>['value']\n      : CallParameters['value'],\n    args\n  >\n\nexport type SimulateContractReturnType<\n  out abi extends Abi | readonly unknown[] = Abi,\n  in out functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  in out args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  /** @ts-expect-error cast variance */\n  out chain extends Chain | undefined = Chain | undefined,\n  out account extends Account | undefined = Account | undefined,\n  out chainOverride extends Chain | undefined = Chain | undefined,\n  out accountOverride extends Account | Address | null | undefined =\n    | Account\n    | Address\n    | null\n    | undefined,\n  ///\n  in out minimizedAbi extends Abi = readonly [\n    ExtractAbiFunctionForArgs<\n      abi extends Abi ? abi : Abi,\n      'nonpayable' | 'payable',\n      functionName,\n      args\n    >,\n  ],\n  out resolvedAccount extends\n    | Account\n    | null\n    | undefined = accountOverride extends Account | Address | null\n    ? ParseAccount<accountOverride>\n    : account,\n> = {\n  result: ContractFunctionReturnType<\n    minimizedAbi,\n    'nonpayable' | 'payable',\n    functionName,\n    args\n  >\n  request: Prettify<\n    UnionEvaluate<\n      UnionOmit<\n        WriteContractParameters<\n          minimizedAbi,\n          functionName,\n          args,\n          chain,\n          undefined,\n          chainOverride\n        >,\n        'account' | 'abi' | 'args' | 'chain' | 'functionName'\n      >\n    > &\n      ContractFunctionParameters<\n        minimizedAbi,\n        'nonpayable' | 'payable',\n        functionName,\n        args\n      > & {\n        chain: DeriveChain<chain, chainOverride>\n      } & (resolvedAccount extends Account | null\n        ? { account: resolvedAccount }\n        : { account?: undefined })\n  >\n}\n\nexport type SimulateContractErrorType =\n  | ParseAccountErrorType\n  | EncodeFunctionDataErrorType\n  | GetContractErrorReturnType<CallErrorType | DecodeFunctionResultErrorType>\n  | ErrorType\n\n/**\n * Simulates/validates a contract interaction. This is useful for retrieving **return data** and **revert reasons** of contract write functions.\n *\n * - Docs: https://viem.sh/docs/contract/simulateContract\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\n *\n * This function does not require gas to execute and _**does not**_ change the state of the blockchain. It is almost identical to [`readContract`](https://viem.sh/docs/contract/readContract), but also supports contract write functions.\n *\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n *\n * @param client - Client to use\n * @param parameters - {@link SimulateContractParameters}\n * @returns The simulation result and write request. {@link SimulateContractReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { simulateContract } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const result = await simulateContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32) view returns (uint32)']),\n *   functionName: 'mint',\n *   args: ['69420'],\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function simulateContract<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  const args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  >,\n  chainOverride extends Chain | undefined = undefined,\n  accountOverride extends Account | Address | null | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: SimulateContractParameters<\n    abi,\n    functionName,\n    args,\n    chain,\n    chainOverride,\n    accountOverride\n  >,\n): Promise<\n  SimulateContractReturnType<\n    abi,\n    functionName,\n    args,\n    chain,\n    account,\n    chainOverride,\n    accountOverride\n  >\n> {\n  const { abi, address, args, dataSuffix, functionName, ...callRequest } =\n    parameters as SimulateContractParameters\n\n  const account = callRequest.account\n    ? parseAccount(callRequest.account)\n    : client.account\n  const calldata = encodeFunctionData({ abi, args, functionName })\n  try {\n    const { data } = await getAction(\n      client,\n      call,\n      'call',\n    )({\n      batch: false,\n      data: `${calldata}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,\n      to: address,\n      ...callRequest,\n      account,\n    })\n    const result = decodeFunctionResult({\n      abi,\n      args,\n      functionName,\n      data: data || '0x',\n    })\n    const minimizedAbi = abi.filter(\n      (abiItem) =>\n        'name' in abiItem && abiItem.name === parameters.functionName,\n    )\n    return {\n      result,\n      request: {\n        abi: minimizedAbi,\n        address,\n        args,\n        dataSuffix,\n        functionName,\n        ...callRequest,\n        account,\n      },\n    } as unknown as SimulateContractReturnType<\n      abi,\n      functionName,\n      args,\n      chain,\n      account,\n      chainOverride,\n      accountOverride\n    >\n  } catch (error) {\n    throw getContractError(error as BaseError, {\n      abi,\n      address,\n      args,\n      docsPath: '/docs/contract/simulateContract',\n      functionName,\n      sender: account?.address,\n    })\n  }\n}\n", "import type { ErrorType } from '../errors/utils.js'\nimport type { MaybePromise } from '../types/utils.js'\n\ntype Callback = ((...args: any[]) => any) | undefined\ntype Callbacks = Record<string, Callback>\n\nexport type ObserveErrorType = ErrorType\n\n/** @internal */\nexport const listenersCache = /*#__PURE__*/ new Map<\n  string,\n  { id: number; fns: Callbacks }[]\n>()\n/** @internal */\nexport const cleanupCache = /*#__PURE__*/ new Map<\n  string,\n  () => void | Promise<void>\n>()\n\ntype EmitFunction<callbacks extends Callbacks> = (\n  emit: callbacks,\n) => MaybePromise<void | (() => void) | (() => Promise<void>)>\n\nlet callbackCount = 0\n\n/**\n * @description Sets up an observer for a given function. If another function\n * is set up under the same observer id, the function will only be called once\n * for both instances of the observer.\n */\nexport function observe<callbacks extends Callbacks>(\n  observerId: string,\n  callbacks: callbacks,\n  fn: EmitFunction<callbacks>,\n) {\n  const callbackId = ++callbackCount\n\n  const getListeners = () => listenersCache.get(observerId) || []\n\n  const unsubscribe = () => {\n    const listeners = getListeners()\n    listenersCache.set(\n      observerId,\n      listeners.filter((cb: any) => cb.id !== callbackId),\n    )\n  }\n\n  const unwatch = () => {\n    const listeners = getListeners()\n    if (!listeners.some((cb: any) => cb.id === callbackId)) return\n    const cleanup = cleanupCache.get(observerId)\n    if (listeners.length === 1 && cleanup) {\n      const p = cleanup()\n      if (p instanceof Promise) p.catch(() => {})\n    }\n    unsubscribe()\n  }\n\n  const listeners = getListeners()\n  listenersCache.set(observerId, [\n    ...listeners,\n    { id: callbackId, fns: callbacks },\n  ])\n\n  if (listeners && listeners.length > 0) return unwatch\n\n  const emit: callbacks = {} as callbacks\n  for (const key in callbacks) {\n    emit[key] = ((\n      ...args: Parameters<NonNullable<callbacks[keyof callbacks]>>\n    ) => {\n      const listeners = getListeners()\n      if (listeners.length === 0) return\n      for (const listener of listeners) listener.fns[key]?.(...args)\n    }) as callbacks[Extract<keyof callbacks, string>]\n  }\n\n  const cleanup = fn(emit)\n  if (typeof cleanup === 'function') cleanupCache.set(observerId, cleanup)\n\n  return unwatch\n}\n", "export async function wait(time: number) {\n  return new Promise((res) => setTimeout(res, time))\n}\n", "import type { ErrorType } from '../errors/utils.js'\nimport { wait } from './wait.js'\n\ntype PollOptions<data> = {\n  // Whether or not to emit when the polling starts.\n  emitOnBegin?: boolean | undefined\n  // The initial wait time (in ms) before polling.\n  initialWaitTime?: ((data: data | void) => Promise<number>) | undefined\n  // The interval (in ms).\n  interval: number\n}\n\nexport type PollErrorType = ErrorType\n\n/**\n * @description Polls a function at a specified interval.\n */\nexport function poll<data>(\n  fn: ({ unpoll }: { unpoll: () => void }) => Promise<data | void>,\n  { emitOnBegin, initialWaitTime, interval }: PollOptions<data>,\n) {\n  let active = true\n\n  const unwatch = () => (active = false)\n\n  const watch = async () => {\n    let data: data | undefined | void\n    if (emitOnBegin) data = await fn({ unpoll: unwatch })\n\n    const initialWait = (await initialWaitTime?.(data)) ?? interval\n    await wait(initialWait)\n\n    const poll = async () => {\n      if (!active) return\n      await fn({ unpoll: unwatch })\n      await wait(interval)\n      poll()\n    }\n\n    poll()\n  }\n  watch()\n\n  return unwatch\n}\n", "import type { ErrorType } from '../../errors/utils.js'\n\n/** @internal */\nexport const promiseCache = /*#__PURE__*/ new Map()\n/** @internal */\nexport const responseCache = /*#__PURE__*/ new Map()\n\nexport type GetCacheErrorType = ErrorType\n\nexport function getCache<data>(cacheKey: string) {\n  const buildCache = <data>(cacheKey: string, cache: Map<string, data>) => ({\n    clear: () => cache.delete(cacheKey),\n    get: () => cache.get(cacheKey),\n    set: (data: data) => cache.set(cacheKey, data),\n  })\n\n  const promise = buildCache<Promise<data>>(cacheKey, promiseCache)\n  const response = buildCache<{ created: Date; data: data }>(\n    cacheKey,\n    responseCache,\n  )\n\n  return {\n    clear: () => {\n      promise.clear()\n      response.clear()\n    },\n    promise,\n    response,\n  }\n}\n\ntype WithCacheParameters = {\n  /** The key to cache the data against. */\n  cacheKey: string\n  /** The time that cached data will remain in memory. Default: Infinity (no expiry) */\n  cacheTime?: number | undefined\n}\n\n/**\n * @description Returns the result of a given promise, and caches the result for\n * subsequent invocations against a provided cache key.\n */\nexport async function withCache<data>(\n  fn: () => Promise<data>,\n  { cacheKey, cacheTime = Number.POSITIVE_INFINITY }: WithCacheParameters,\n) {\n  const cache = getCache<data>(cacheKey)\n\n  // If a response exists in the cache, and it's not expired, return it\n  // and do not invoke the promise.\n  // If the max age is 0, the cache is disabled.\n  const response = cache.response.get()\n  if (response && cacheTime > 0) {\n    const age = Date.now() - response.created.getTime()\n    if (age < cacheTime) return response.data\n  }\n\n  let promise = cache.promise.get()\n  if (!promise) {\n    promise = fn()\n\n    // Store the promise in the cache so that subsequent invocations\n    // will wait for the same promise to resolve (deduping).\n    cache.promise.set(promise)\n  }\n\n  try {\n    const data = await promise\n\n    // Store the response in the cache so that subsequent invocations\n    // will return the same response.\n    cache.response.set({ created: new Date(), data })\n\n    return data\n  } finally {\n    // Clear the promise cache so that subsequent invocations will\n    // invoke the promise again.\n    cache.promise.clear()\n  }\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type GetCacheErrorType,\n  getCache,\n  withCache,\n} from '../../utils/promise/withCache.js'\n\nexport type GetBlockNumberParameters = {\n  /** Time (in ms) that cached block number will remain in memory. */\n  cacheTime?: number | undefined\n}\n\nexport type GetBlockNumberReturnType = bigint\n\nexport type GetBlockNumberErrorType = RequestErrorType | ErrorType\n\nconst cacheKey = (id: string) => `blockNumber.${id}`\n\n/** @internal */\nexport type GetBlockNumberCacheErrorType = GetCacheErrorType | ErrorType\n\n/** @internal */\nexport function getBlockNumberCache(id: string) {\n  return getCache(cacheKey(id))\n}\n\n/**\n * Returns the number of the most recent block seen.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlockNumber\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_fetching-blocks\n * - JSON-RPC Methods: [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber)\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockNumberParameters}\n * @returns The number of the block. {@link GetBlockNumberReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlockNumber } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const blockNumber = await getBlockNumber(client)\n * // 69420n\n */\nexport async function getBlockNumber<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  { cacheTime = client.cacheTime }: GetBlockNumberParameters = {},\n): Promise<GetBlockNumberReturnType> {\n  const blockNumberHex = await withCache(\n    () =>\n      client.request({\n        method: 'eth_blockNumber',\n      }),\n    { cacheKey: cacheKey(client.uid), cacheTime },\n  )\n  return BigInt(blockNumberHex)\n}\n", "import type { Abi, AbiEvent, ExtractAbiEvent } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { RpcLog } from '../../index.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter, FilterType } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { DecodeEventLogErrorType } from '../../utils/abi/decodeEventLog.js'\nimport { parseEventLogs } from '../../utils/abi/parseEventLogs.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type FormatLogErrorType,\n  formatLog,\n} from '../../utils/formatters/log.js'\n\nexport type GetFilterChangesParameters<\n  filterType extends FilterType = FilterType,\n  abi extends Abi | readonly unknown[] | undefined = undefined,\n  eventName extends string | undefined = undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = {\n  filter: Filter<filterType, abi, eventName, any, strict, fromBlock, toBlock>\n}\n\nexport type GetFilterChangesReturnType<\n  filterType extends FilterType = FilterType,\n  abi extends Abi | readonly unknown[] | undefined = undefined,\n  eventName extends string | undefined = undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _AbiEvent extends AbiEvent | undefined = abi extends Abi\n    ? eventName extends string\n      ? ExtractAbiEvent<abi, eventName>\n      : undefined\n    : undefined,\n  _Pending extends boolean =\n    | (fromBlock extends 'pending' ? true : false)\n    | (toBlock extends 'pending' ? true : false),\n> = filterType extends 'event'\n  ? Log<bigint, number, _Pending, _AbiEvent, strict, abi, eventName>[]\n  : Hash[]\n\nexport type GetFilterChangesErrorType =\n  | RequestErrorType\n  | DecodeEventLogErrorType\n  | FormatLogErrorType\n  | ErrorType\n\n/**\n * Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFilterChanges\n * - JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\n *\n * A Filter can be created from the following actions:\n *\n * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\n * - [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\n * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\n * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\n *\n * Depending on the type of filter, the return value will be different:\n *\n * - If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\n * - If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\n * - If the filter was created with `createBlockFilter`, it returns a list of block hashes.\n *\n * @param client - Client to use\n * @param parameters - {@link GetFilterChangesParameters}\n * @returns Logs or hashes. {@link GetFilterChangesReturnType}\n *\n * @example\n * // Blocks\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createBlockFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createBlockFilter(client)\n * const hashes = await getFilterChanges(client, { filter })\n *\n * @example\n * // Contract Events\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createContractEventFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createContractEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n *   eventName: 'Transfer',\n * })\n * const logs = await getFilterChanges(client, { filter })\n *\n * @example\n * // Raw Events\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createEventFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n * })\n * const logs = await getFilterChanges(client, { filter })\n *\n * @example\n * // Transactions\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createPendingTransactionFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createPendingTransactionFilter(client)\n * const hashes = await getFilterChanges(client, { filter })\n */\nexport async function getFilterChanges<\n  transport extends Transport,\n  chain extends Chain | undefined,\n  filterType extends FilterType,\n  const abi extends Abi | readonly unknown[] | undefined,\n  eventName extends string | undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  _client: Client<transport, chain>,\n  {\n    filter,\n  }: GetFilterChangesParameters<\n    filterType,\n    abi,\n    eventName,\n    strict,\n    fromBlock,\n    toBlock\n  >,\n): Promise<\n  GetFilterChangesReturnType<\n    filterType,\n    abi,\n    eventName,\n    strict,\n    fromBlock,\n    toBlock\n  >\n> {\n  const strict = 'strict' in filter && filter.strict\n\n  const logs = await filter.request({\n    method: 'eth_getFilterChanges',\n    params: [filter.id],\n  })\n\n  if (typeof logs[0] === 'string')\n    return logs as GetFilterChangesReturnType<\n      filterType,\n      abi,\n      eventName,\n      strict,\n      fromBlock,\n      toBlock\n    >\n\n  const formattedLogs = logs.map((log) => formatLog(log as RpcLog))\n  if (!('abi' in filter) || !filter.abi)\n    return formattedLogs as GetFilterChangesReturnType<\n      filterType,\n      abi,\n      eventName,\n      strict,\n      fromBlock,\n      toBlock\n    >\n  return parseEventLogs({\n    abi: filter.abi,\n    logs: formattedLogs,\n    strict,\n  }) as unknown as GetFilterChangesReturnType<\n    filterType,\n    abi,\n    eventName,\n    strict,\n    fromBlock,\n    toBlock\n  >\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type UninstallFilterParameters = {\n  filter: Filter<any>\n}\nexport type UninstallFilterReturnType = boolean\n\nexport type UninstallFilterErrorType = RequestErrorType | ErrorType\n\n/**\n * Destroys a [`Filter`](https://viem.sh/docs/glossary/types#filter).\n *\n * - Docs: https://viem.sh/docs/actions/public/uninstallFilter\n * - JSON-RPC Methods: [`eth_uninstallFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_uninstallFilter)\n *\n * Destroys a Filter that was created from one of the following Actions:\n * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\n * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\n * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\n *\n * @param client - Client to use\n * @param parameters - {@link UninstallFilterParameters}\n * @returns A boolean indicating if the Filter was successfully uninstalled. {@link UninstallFilterReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createPendingTransactionFilter, uninstallFilter } from 'viem/public'\n *\n * const filter = await createPendingTransactionFilter(client)\n * const uninstalled = await uninstallFilter(client, { filter })\n * // true\n */\nexport async function uninstallFilter<\n  transport extends Transport,\n  chain extends Chain | undefined,\n>(\n  _client: Client<transport, chain>,\n  { filter }: UninstallFilterParameters,\n): Promise<UninstallFilterReturnType> {\n  return filter.request({\n    method: 'eth_uninstallFilter',\n    params: [filter.id],\n  })\n}\n", "import type { Abi, Address, ExtractAbiEvent } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport { InvalidInputRpcError } from '../../errors/rpc.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractEventArgs,\n  ContractEventName,\n} from '../../types/contract.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\nimport type { LogTopic } from '../../types/misc.js'\nimport type { GetPollOptions } from '../../types/transport.js'\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js'\nimport {\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport { formatLog } from '../../utils/formatters/log.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport { poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\nimport { createContractEventFilter } from './createContractEventFilter.js'\nimport { getBlockNumber } from './getBlockNumber.js'\nimport {\n  type GetContractEventsParameters,\n  getContractEvents,\n} from './getContractEvents.js'\nimport { getFilterChanges } from './getFilterChanges.js'\nimport { uninstallFilter } from './uninstallFilter.js'\n\nexport type WatchContractEventOnLogsParameter<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> = ContractEventName<abi>,\n  strict extends boolean | undefined = undefined,\n> = abi extends Abi\n  ? Abi extends abi\n    ? Log[]\n    : Log<bigint, number, false, ExtractAbiEvent<abi, eventName>, strict>[]\n  : Log[]\n\nexport type WatchContractEventOnLogsFn<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> = ContractEventName<abi>,\n  strict extends boolean | undefined = undefined,\n> = (logs: WatchContractEventOnLogsParameter<abi, eventName, strict>) => void\n\nexport type WatchContractEventParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> | undefined = ContractEventName<abi>,\n  strict extends boolean | undefined = undefined,\n  transport extends Transport = Transport,\n> = {\n  /** The address of the contract. */\n  address?: Address | Address[] | undefined\n  /** Contract ABI. */\n  abi: abi\n  args?:\n    | ContractEventArgs<\n        abi,\n        eventName extends ContractEventName<abi>\n          ? eventName\n          : ContractEventName<abi>\n      >\n    | undefined\n  /** Contract event. */\n  eventName?: eventName | ContractEventName<abi> | undefined\n  /** Block to start listening from. */\n  fromBlock?: BlockNumber<bigint> | undefined\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: ((error: Error) => void) | undefined\n  /** The callback to call when new event logs are received. */\n  onLogs: WatchContractEventOnLogsFn<\n    abi,\n    eventName extends ContractEventName<abi>\n      ? eventName\n      : ContractEventName<abi>,\n    strict\n  >\n  /**\n   * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n   * @default false\n   */\n  strict?: strict | boolean | undefined\n} & GetPollOptions<transport>\n\nexport type WatchContractEventReturnType = () => void\n\nexport type WatchContractEventErrorType =\n  | StringifyErrorType\n  | ObserveErrorType\n  | ErrorType\n\n/**\n * Watches and returns emitted contract event logs.\n *\n * - Docs: https://viem.sh/docs/contract/watchContractEvent\n *\n * This Action will batch up all the event logs found within the [`pollingInterval`](https://viem.sh/docs/contract/watchContractEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/contract/watchContractEvent#onLogs).\n *\n * `watchContractEvent` will attempt to create an [Event Filter](https://viem.sh/docs/contract/createContractEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchContractEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchContractEventParameters}\n * @returns A function that can be invoked to stop watching for new event logs. {@link WatchContractEventReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchContractEvent } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchContractEvent(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['event Transfer(address indexed from, address indexed to, uint256 value)']),\n *   eventName: 'Transfer',\n *   args: { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\n *   onLogs: (logs) => console.log(logs),\n * })\n */\nexport function watchContractEvent<\n  chain extends Chain | undefined,\n  const abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi> | undefined = undefined,\n  strict extends boolean | undefined = undefined,\n  transport extends Transport = Transport,\n>(\n  client: Client<transport, chain>,\n  parameters: WatchContractEventParameters<abi, eventName, strict, transport>,\n): WatchContractEventReturnType {\n  const {\n    abi,\n    address,\n    args,\n    batch = true,\n    eventName,\n    fromBlock,\n    onError,\n    onLogs,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n    strict: strict_,\n  } = parameters\n\n  const enablePolling = (() => {\n    if (typeof poll_ !== 'undefined') return poll_\n    if (typeof fromBlock === 'bigint') return true\n    if (\n      client.transport.type === 'webSocket' ||\n      client.transport.type === 'ipc'\n    )\n      return false\n    if (\n      client.transport.type === 'fallback' &&\n      (client.transport.transports[0].config.type === 'webSocket' ||\n        client.transport.transports[0].config.type === 'ipc')\n    )\n      return false\n    return true\n  })()\n\n  const pollContractEvent = () => {\n    const strict = strict_ ?? false\n    const observerId = stringify([\n      'watchContractEvent',\n      address,\n      args,\n      batch,\n      client.uid,\n      eventName,\n      pollingInterval,\n      strict,\n      fromBlock,\n    ])\n\n    return observe(observerId, { onLogs, onError }, (emit) => {\n      let previousBlockNumber: bigint\n      if (fromBlock !== undefined) previousBlockNumber = fromBlock - 1n\n      let filter: Filter<'event', abi, eventName> | undefined\n      let initialized = false\n\n      const unwatch = poll(\n        async () => {\n          if (!initialized) {\n            try {\n              filter = (await getAction(\n                client,\n                createContractEventFilter,\n                'createContractEventFilter',\n              )({\n                abi,\n                address,\n                args: args as any,\n                eventName: eventName as any,\n                strict: strict as any,\n                fromBlock,\n              })) as Filter<'event', abi, eventName>\n            } catch {}\n            initialized = true\n            return\n          }\n\n          try {\n            let logs: Log[]\n            if (filter) {\n              logs = await getAction(\n                client,\n                getFilterChanges,\n                'getFilterChanges',\n              )({ filter })\n            } else {\n              // If the filter doesn't exist, we will fall back to use `getLogs`.\n              // The fall back exists because some RPC Providers do not support filters.\n\n              // Fetch the block number to use for `getLogs`.\n              const blockNumber = await getAction(\n                client,\n                getBlockNumber,\n                'getBlockNumber',\n              )({})\n\n              // If the block number has changed, we will need to fetch the logs.\n              // If the block number doesn't exist, we are yet to reach the first poll interval,\n              // so do not emit any logs.\n              if (previousBlockNumber && previousBlockNumber < blockNumber) {\n                logs = await getAction(\n                  client,\n                  getContractEvents,\n                  'getContractEvents',\n                )({\n                  abi,\n                  address,\n                  args,\n                  eventName,\n                  fromBlock: previousBlockNumber + 1n,\n                  toBlock: blockNumber,\n                  strict,\n                } as {} as GetContractEventsParameters)\n              } else {\n                logs = []\n              }\n              previousBlockNumber = blockNumber\n            }\n\n            if (logs.length === 0) return\n            if (batch) emit.onLogs(logs as any)\n            else for (const log of logs) emit.onLogs([log] as any)\n          } catch (err) {\n            // If a filter has been set and gets uninstalled, providers will throw an InvalidInput error.\n            // Reinitialize the filter when this occurs\n            if (filter && err instanceof InvalidInputRpcError)\n              initialized = false\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin: true,\n          interval: pollingInterval,\n        },\n      )\n\n      return async () => {\n        if (filter)\n          await getAction(\n            client,\n            uninstallFilter,\n            'uninstallFilter',\n          )({ filter })\n        unwatch()\n      }\n    })\n  }\n\n  const subscribeContractEvent = () => {\n    const strict = strict_ ?? false\n    const observerId = stringify([\n      'watchContractEvent',\n      address,\n      args,\n      batch,\n      client.uid,\n      eventName,\n      pollingInterval,\n      strict,\n    ])\n\n    let active = true\n    let unsubscribe = () => (active = false)\n    return observe(observerId, { onLogs, onError }, (emit) => {\n      ;(async () => {\n        try {\n          const transport = (() => {\n            if (client.transport.type === 'fallback') {\n              const transport = client.transport.transports.find(\n                (transport: ReturnType<Transport>) =>\n                  transport.config.type === 'webSocket' ||\n                  transport.config.type === 'ipc',\n              )\n              if (!transport) return client.transport\n              return transport.value\n            }\n            return client.transport\n          })()\n\n          const topics: LogTopic[] = eventName\n            ? encodeEventTopics({\n                abi: abi,\n                eventName: eventName,\n                args,\n              } as EncodeEventTopicsParameters)\n            : []\n\n          const { unsubscribe: unsubscribe_ } = await transport.subscribe({\n            params: ['logs', { address, topics }],\n            onData(data: any) {\n              if (!active) return\n              const log = data.result\n              try {\n                const { eventName, args } = decodeEventLog({\n                  abi: abi,\n                  data: log.data,\n                  topics: log.topics as any,\n                  strict: strict_,\n                })\n                const formatted = formatLog(log, {\n                  args,\n                  eventName: eventName as string,\n                })\n                emit.onLogs([formatted] as any)\n              } catch (err) {\n                let eventName: string | undefined\n                let isUnnamed: boolean | undefined\n                if (\n                  err instanceof DecodeLogDataMismatch ||\n                  err instanceof DecodeLogTopicsMismatch\n                ) {\n                  // If strict mode is on, and log data/topics do not match event definition, skip.\n                  if (strict_) return\n                  eventName = err.abiItem.name\n                  isUnnamed = err.abiItem.inputs?.some(\n                    (x) => !('name' in x && x.name),\n                  )\n                }\n\n                // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n                const formatted = formatLog(log, {\n                  args: isUnnamed ? [] : {},\n                  eventName,\n                })\n                emit.onLogs([formatted] as any)\n              }\n            },\n            onError(error: Error) {\n              emit.onError?.(error)\n            },\n          })\n          unsubscribe = unsubscribe_\n          if (!active) unsubscribe()\n        } catch (err) {\n          onError?.(err as Error)\n        }\n      })()\n      return () => unsubscribe()\n    })\n  }\n\n  return enablePolling ? pollContractEvent() : subscribeContractEvent()\n}\n", "import { BaseError } from './base.js'\n\nexport type AccountNotFoundErrorType = AccountNotFoundError & {\n  name: 'AccountNotFoundError'\n}\nexport class AccountNotFoundError extends BaseError {\n  constructor({ docsPath }: { docsPath?: string | undefined } = {}) {\n    super(\n      [\n        'Could not find an Account to execute with this Action.',\n        'Please provide an Account with the `account` argument on the Action, or by supplying an `account` to the Client.',\n      ].join('\\n'),\n      {\n        docsPath,\n        docsSlug: 'account',\n        name: 'AccountNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AccountTypeNotSupportedErrorType = AccountTypeNotSupportedError & {\n  name: 'AccountTypeNotSupportedError'\n}\nexport class AccountTypeNotSupportedError extends BaseError {\n  constructor({\n    docsPath,\n    metaMessages,\n    type,\n  }: {\n    docsPath?: string | undefined\n    metaMessages?: string[] | undefined\n    type: string\n  }) {\n    super(`Account type \"${type}\" is not supported.`, {\n      docsPath,\n      metaMessages,\n      name: 'AccountTypeNotSupportedError',\n    })\n  }\n}\n", "import {\n  ChainMismatchError,\n  type ChainMismatchErrorType,\n  ChainNotFoundError,\n  type ChainNotFoundErrorType,\n} from '../../errors/chain.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\n\nexport type AssertCurrentChainParameters = {\n  chain?: Chain | undefined\n  currentChainId: number\n}\n\nexport type AssertCurrentChainErrorType =\n  | ChainNotFoundErrorType\n  | ChainMismatchErrorType\n  | ErrorType\n\nexport function assertCurrentChain({\n  chain,\n  currentChainId,\n}: AssertCurrentChainParameters): void {\n  if (!chain) throw new ChainNotFoundError()\n  if (currentChainId !== chain.id)\n    throw new ChainMismatchError({ chain, currentChainId })\n}\n", "import type { Account } from '../../accounts/types.js'\nimport type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js'\nimport type { BaseError } from '../../errors/base.js'\nimport { UnknownNodeError } from '../../errors/node.js'\nimport {\n  TransactionExecutionError,\n  type TransactionExecutionErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\n\nimport {\n  type GetNodeErrorParameters,\n  type GetNodeErrorReturnType,\n  getNodeError,\n} from './getNodeError.js'\n\nexport type GetTransactionErrorParameters = Omit<\n  SendTransactionParameters,\n  'account' | 'chain'\n> & {\n  account: Account | null\n  chain?: Chain | undefined\n  docsPath?: string | undefined\n}\n\nexport type GetTransactionErrorReturnType<cause = ErrorType> = Omit<\n  TransactionExecutionErrorType,\n  'cause'\n> & { cause: cause | GetNodeErrorReturnType }\n\nexport function getTransactionError<err extends ErrorType<string>>(\n  err: err,\n  { docsPath, ...args }: GetTransactionErrorParameters,\n): GetTransactionErrorReturnType<err> {\n  const cause = (() => {\n    const cause = getNodeError(\n      err as {} as BaseError,\n      args as GetNodeErrorParameters,\n    )\n    if (cause instanceof UnknownNodeError) return err as {} as BaseError\n    return cause\n  })()\n  return new TransactionExecutionError(cause, {\n    docsPath,\n    ...args,\n  }) as GetTransactionErrorReturnType<err>\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { TransactionSerializedGeneric } from '../../types/transaction.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type SendRawTransactionParameters = {\n  /** The signed serialized transaction. */\n  serializedTransaction: TransactionSerializedGeneric\n}\n\nexport type SendRawTransactionReturnType = Hash\n\nexport type SendRawTransactionErrorType = RequestErrorType | ErrorType\n\n/**\n * Sends a **signed** transaction to the network\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransaction\n * - JSON-RPC Method: [`eth_sendRawTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n *\n * @param client - Client to use\n * @param parameters - {@link SendRawTransactionParameters}\n * @returns The transaction hash. {@link SendRawTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendRawTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * const hash = await sendRawTransaction(client, {\n *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n * })\n */\nexport async function sendRawTransaction<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  { serializedTransaction }: SendRawTransactionParameters,\n): Promise<SendRawTransactionReturnType> {\n  return client.request(\n    {\n      method: 'eth_sendRawTransaction',\n      params: [serializedTransaction],\n    },\n    { retryCount: 0 },\n  )\n}\n", "import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SignTransactionErrorType } from '../../accounts/utils/signTransaction.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  AccountNotFoundError,\n  type AccountNotFoundErrorType,\n  AccountTypeNotSupportedError,\n  type AccountTypeNotSupportedErrorType,\n} from '../../errors/account.js'\nimport { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type {\n  Chain,\n  DeriveChain,\n  GetChainParameter,\n} from '../../types/chain.js'\nimport type { GetTransactionRequestKzgParameter } from '../../types/kzg.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport {\n  type RecoverAuthorizationAddressErrorType,\n  recoverAuthorizationAddress,\n} from '../../utils/authorization/recoverAuthorizationAddress.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type AssertCurrentChainErrorType,\n  assertCurrentChain,\n} from '../../utils/chain/assertCurrentChain.js'\nimport {\n  type GetTransactionErrorReturnType,\n  getTransactionError,\n} from '../../utils/errors/getTransactionError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { LruMap } from '../../utils/lru.js'\nimport {\n  type AssertRequestErrorType,\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport { type GetChainIdErrorType, getChainId } from '../public/getChainId.js'\nimport {\n  defaultParameters,\n  type PrepareTransactionRequestErrorType,\n  prepareTransactionRequest,\n} from './prepareTransactionRequest.js'\nimport {\n  type SendRawTransactionErrorType,\n  sendRawTransaction,\n} from './sendRawTransaction.js'\n\nconst supportsWalletNamespace = new LruMap<boolean>(128)\n\nexport type SendTransactionRequest<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  ///\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> &\n  GetTransactionRequestKzgParameter\n\nexport type SendTransactionParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  request extends SendTransactionRequest<\n    chain,\n    chainOverride\n  > = SendTransactionRequest<chain, chainOverride>,\n> = request &\n  GetAccountParameter<account, Account | Address, true, true> &\n  GetChainParameter<chain, chainOverride> &\n  GetTransactionRequestKzgParameter<request>\n\nexport type SendTransactionReturnType = Hash\n\nexport type SendTransactionErrorType =\n  | ParseAccountErrorType\n  | GetTransactionErrorReturnType<\n      | AccountNotFoundErrorType\n      | AccountTypeNotSupportedErrorType\n      | AssertCurrentChainErrorType\n      | AssertRequestErrorType\n      | GetChainIdErrorType\n      | PrepareTransactionRequestErrorType\n      | SendRawTransactionErrorType\n      | RecoverAuthorizationAddressErrorType\n      | SignTransactionErrorType\n      | RequestErrorType\n    >\n  | ErrorType\n\n/**\n * Creates, signs, and sends a new transaction to the network.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendTransaction\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\n *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\n *\n * @param client - Client to use\n * @param parameters - {@link SendTransactionParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await sendTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const hash = await sendTransaction(client, {\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendTransaction<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  const request extends SendTransactionRequest<chain, chainOverride>,\n  chainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: SendTransactionParameters<chain, account, chainOverride, request>,\n): Promise<SendTransactionReturnType> {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    accessList,\n    authorizationList,\n    blobs,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    type,\n    value,\n    ...rest\n  } = parameters\n\n  if (typeof account_ === 'undefined')\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/sendTransaction',\n    })\n  const account = account_ ? parseAccount(account_) : null\n\n  try {\n    assertRequest(parameters as AssertRequestParameters)\n\n    const to = await (async () => {\n      // If `to` exists on the parameters, use that.\n      if (parameters.to) return parameters.to\n\n      // If `to` is null, we are sending a deployment transaction.\n      if (parameters.to === null) return undefined\n\n      // If no `to` exists, and we are sending a EIP-7702 transaction, use the\n      // address of the first authorization in the list.\n      if (authorizationList && authorizationList.length > 0)\n        return await recoverAuthorizationAddress({\n          authorization: authorizationList[0],\n        }).catch(() => {\n          throw new BaseError(\n            '`to` is required. Could not infer from `authorizationList`.',\n          )\n        })\n\n      // Otherwise, we are sending a deployment transaction.\n      return undefined\n    })()\n\n    if (account?.type === 'json-rpc' || account === null) {\n      let chainId: number | undefined\n      if (chain !== null) {\n        chainId = await getAction(client, getChainId, 'getChainId')({})\n        assertCurrentChain({\n          currentChainId: chainId,\n          chain,\n        })\n      }\n\n      const chainFormat = client.chain?.formatters?.transactionRequest?.format\n      const format = chainFormat || formatTransactionRequest\n\n      const request = format(\n        {\n          // Pick out extra data that might exist on the chain's transaction request type.\n          ...extract(rest, { format: chainFormat }),\n          accessList,\n          account,\n          authorizationList,\n          blobs,\n          chainId,\n          data,\n          gas,\n          gasPrice,\n          maxFeePerBlobGas,\n          maxFeePerGas,\n          maxPriorityFeePerGas,\n          nonce,\n          to,\n          type,\n          value,\n        } as TransactionRequest,\n        'sendTransaction',\n      )\n\n      const isWalletNamespaceSupported = supportsWalletNamespace.get(client.uid)\n      const method = isWalletNamespaceSupported\n        ? 'wallet_sendTransaction'\n        : 'eth_sendTransaction'\n\n      try {\n        return await client.request(\n          {\n            method,\n            params: [request],\n          },\n          { retryCount: 0 },\n        )\n      } catch (e) {\n        if (isWalletNamespaceSupported === false) throw e\n\n        const error = e as BaseError\n        // If the transport does not support the method or input, attempt to use the\n        // `wallet_sendTransaction` method.\n        if (\n          error.name === 'InvalidInputRpcError' ||\n          error.name === 'InvalidParamsRpcError' ||\n          error.name === 'MethodNotFoundRpcError' ||\n          error.name === 'MethodNotSupportedRpcError'\n        ) {\n          return await client\n            .request(\n              {\n                method: 'wallet_sendTransaction',\n                params: [request],\n              },\n              { retryCount: 0 },\n            )\n            .then((hash) => {\n              supportsWalletNamespace.set(client.uid, true)\n              return hash\n            })\n            .catch((e) => {\n              const walletNamespaceError = e as BaseError\n              if (\n                walletNamespaceError.name === 'MethodNotFoundRpcError' ||\n                walletNamespaceError.name === 'MethodNotSupportedRpcError'\n              ) {\n                supportsWalletNamespace.set(client.uid, false)\n                throw error\n              }\n\n              throw walletNamespaceError\n            })\n        }\n\n        throw error\n      }\n    }\n\n    if (account?.type === 'local') {\n      // Prepare the request for signing (assign appropriate fees, etc.)\n      const request = await getAction(\n        client,\n        prepareTransactionRequest,\n        'prepareTransactionRequest',\n      )({\n        account,\n        accessList,\n        authorizationList,\n        blobs,\n        chain,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerBlobGas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        nonceManager: account.nonceManager,\n        parameters: [...defaultParameters, 'sidecars'],\n        type,\n        value,\n        ...rest,\n        to,\n      } as any)\n\n      const serializer = chain?.serializers?.transaction\n      const serializedTransaction = (await account.signTransaction(request, {\n        serializer,\n      })) as Hash\n      return await getAction(\n        client,\n        sendRawTransaction,\n        'sendRawTransaction',\n      )({\n        serializedTransaction,\n      })\n    }\n\n    if (account?.type === 'smart')\n      throw new AccountTypeNotSupportedError({\n        metaMessages: [\n          'Consider using the `sendUserOperation` Action instead.',\n        ],\n        docsPath: '/docs/actions/bundler/sendUserOperation',\n        type: 'smart',\n      })\n\n    throw new AccountTypeNotSupportedError({\n      docsPath: '/docs/actions/wallet/sendTransaction',\n      type: (account as any)?.type,\n    })\n  } catch (err) {\n    if (err instanceof AccountTypeNotSupportedError) throw err\n    throw getTransactionError(err as BaseError, {\n      ...parameters,\n      account,\n      chain: parameters.chain || undefined,\n    })\n  }\n}\n", "import type { Abi, Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  AccountNotFoundError,\n  type AccountNotFoundErrorType,\n} from '../../errors/account.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type {\n  Chain,\n  DeriveChain,\n  GetChainParameter,\n} from '../../types/chain.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n  ContractFunctionParameters,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { Prettify, UnionEvaluate, UnionOmit } from '../../types/utils.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  type EncodeFunctionDataParameters,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from '../../utils/errors/getContractError.js'\nimport type { FormattedTransactionRequest } from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type { GetMutabilityAwareValue } from '../public/simulateContract.js'\nimport {\n  type SendTransactionErrorType,\n  type SendTransactionReturnType,\n  sendTransaction,\n} from './sendTransaction.js'\nimport type { sendTransactionSync } from './sendTransactionSync.js'\n\nexport type WriteContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  ///\n  allFunctionNames = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = ContractFunctionParameters<\n  abi,\n  'nonpayable' | 'payable',\n  functionName,\n  args,\n  false,\n  allFunctionNames\n> &\n  GetChainParameter<chain, chainOverride> &\n  Prettify<\n    GetAccountParameter<account, Account | Address, true, true> &\n      GetMutabilityAwareValue<\n        abi,\n        'nonpayable' | 'payable',\n        functionName,\n        FormattedTransactionRequest<derivedChain>['value'],\n        args\n      > & {\n        /** Data to append to the end of the calldata. Useful for adding a [\"domain\" tag](https://opensea.notion.site/opensea/Seaport-Order-Attributions-ec2d69bf455041a5baa490941aad307f). */\n        dataSuffix?: Hex | undefined\n      }\n  > &\n  UnionEvaluate<\n    UnionOmit<\n      FormattedTransactionRequest<derivedChain>,\n      'data' | 'from' | 'to' | 'value'\n    >\n  >\n\nexport type WriteContractReturnType = SendTransactionReturnType\n\nexport type WriteContractErrorType =\n  | EncodeFunctionDataErrorType\n  | AccountNotFoundErrorType\n  | ParseAccountErrorType\n  | GetContractErrorReturnType<SendTransactionErrorType>\n  | ErrorType\n\n/**\n * Executes a write function on a contract.\n *\n * - Docs: https://viem.sh/docs/contract/writeContract\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\n *\n * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\n *\n * Internally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n *\n * __Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\n *\n * @param client - Client to use\n * @param parameters - {@link WriteContractParameters}\n * @returns A [Transaction Hash](https://viem.sh/docs/glossary/terms#hash). {@link WriteContractReturnType}\n *\n * @example\n * import { createWalletClient, custom, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { writeContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await writeContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n *   functionName: 'mint',\n *   args: [69420],\n * })\n *\n * @example\n * // With Validation\n * import { createWalletClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { simulateContract, writeContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const { request } = await simulateContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n *   functionName: 'mint',\n *   args: [69420],\n * }\n * const hash = await writeContract(client, request)\n */\nexport async function writeContract<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  >,\n  chainOverride extends Chain | undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: WriteContractParameters<\n    abi,\n    functionName,\n    args,\n    chain,\n    account,\n    chainOverride\n  >,\n): Promise<WriteContractReturnType> {\n  return writeContract.internal(\n    client,\n    sendTransaction,\n    'sendTransaction',\n    parameters,\n  ) as never\n}\n\nexport namespace writeContract {\n  export async function internal<\n    chain extends Chain | undefined,\n    account extends Account | undefined,\n    const abi extends Abi | readonly unknown[],\n    functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n    args extends ContractFunctionArgs<\n      abi,\n      'nonpayable' | 'payable',\n      functionName\n    >,\n    chainOverride extends Chain | undefined,\n  >(\n    client: Client<Transport, chain, account>,\n    actionFn: typeof sendTransaction | typeof sendTransactionSync,\n    name: 'sendTransaction' | 'sendTransactionSync',\n    parameters: WriteContractParameters<\n      abi,\n      functionName,\n      args,\n      chain,\n      account,\n      chainOverride\n    >,\n  ) {\n    const {\n      abi,\n      account: account_ = client.account,\n      address,\n      args,\n      dataSuffix,\n      functionName,\n      ...request\n    } = parameters as WriteContractParameters\n\n    if (typeof account_ === 'undefined')\n      throw new AccountNotFoundError({\n        docsPath: '/docs/contract/writeContract',\n      })\n    const account = account_ ? parseAccount(account_) : null\n\n    const data = encodeFunctionData({\n      abi,\n      args,\n      functionName,\n    } as EncodeFunctionDataParameters)\n\n    try {\n      return await getAction(\n        client,\n        actionFn as never,\n        name,\n      )({\n        data: `${data}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,\n        to: address,\n        account,\n        ...request,\n      })\n    } catch (error) {\n      throw getContractError(error as BaseError, {\n        abi,\n        address,\n        args,\n        docsPath: '/docs/contract/writeContract',\n        functionName,\n        sender: account?.address,\n      })\n    }\n  }\n}\n", "import type {\n  Abi,\n  AbiEvent,\n  AbiFunction,\n  AbiParametersToPrimitiveTypes,\n  Address,\n  ExtractAbiEvent,\n  ExtractAbiEventNames,\n  ExtractAbiFunction,\n  ExtractAbiFunctionNames,\n} from 'abitype'\n\nimport type { Account } from '../accounts/types.js'\nimport type { Client } from '../clients/createClient.js'\nimport type { Transport } from '../clients/transports/createTransport.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { Chain } from '../types/chain.js'\nimport type {\n  AbiEventParametersToPrimitiveTypes,\n  ContractEventName,\n  ContractFunctionArgs,\n  ContractFunctionName,\n  MaybeExtractEventArgsFromAbi,\n} from '../types/contract.js'\nimport type {\n  IsNarrowable,\n  IsNever,\n  IsUndefined,\n  Or,\n  Prettify,\n  UnionOmit,\n} from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\nimport {\n  type CreateContractEventFilterParameters,\n  type CreateContractEventFilterReturnType,\n  createContractEventFilter,\n} from './public/createContractEventFilter.js'\nimport {\n  type EstimateContractGasParameters,\n  type EstimateContractGasReturnType,\n  estimateContractGas,\n} from './public/estimateContractGas.js'\nimport {\n  type GetContractEventsParameters,\n  type GetContractEventsReturnType,\n  getContractEvents,\n} from './public/getContractEvents.js'\nimport {\n  type ReadContractParameters,\n  type ReadContractReturnType,\n  readContract,\n} from './public/readContract.js'\nimport {\n  type SimulateContractParameters,\n  type SimulateContractReturnType,\n  simulateContract,\n} from './public/simulateContract.js'\nimport {\n  type WatchContractEventParameters,\n  type WatchContractEventReturnType,\n  watchContractEvent,\n} from './public/watchContractEvent.js'\nimport {\n  type WriteContractParameters,\n  type WriteContractReturnType,\n  writeContract,\n} from './wallet/writeContract.js'\n\ntype KeyedClient<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n> =\n  | {\n      public?: Client<transport, chain> | undefined\n      wallet: Client<transport, chain, account>\n    }\n  | {\n      public: Client<transport, chain>\n      wallet?: Client<transport, chain, account> | undefined\n    }\n\nexport type GetContractParameters<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  abi extends Abi | readonly unknown[] = Abi,\n  client extends\n    | Client<transport, chain, account>\n    | KeyedClient<transport, chain, account> =\n    | Client<transport, chain, account>\n    | KeyedClient<transport, chain, account>,\n  address extends Address = Address,\n> = {\n  /** Contract ABI */\n  abi: abi\n  /** Contract address */\n  address: address\n  /** The Client.\n   *\n   * If you pass in a [`publicClient`](https://viem.sh/docs/clients/public), the following methods are available:\n   *\n   * - [`createEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\n   * - [`estimateGas`](https://viem.sh/docs/contract/estimateContractGas)\n   * - [`getEvents`](https://viem.sh/docs/contract/getContractEvents)\n   * - [`read`](https://viem.sh/docs/contract/readContract)\n   * - [`simulate`](https://viem.sh/docs/contract/simulateContract)\n   * - [`watchEvent`](https://viem.sh/docs/contract/watchContractEvent)\n   *\n   * If you pass in a [`walletClient`](https://viem.sh/docs/clients/wallet), the following methods are available:\n   *\n   * - [`estimateGas`](https://viem.sh/docs/contract/estimateContractGas)\n   * - [`write`](https://viem.sh/docs/contract/writeContract)\n   */\n  client: client\n}\n\nexport type GetContractReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  client extends Client | KeyedClient = Client | KeyedClient,\n  address extends Address = Address,\n  //\n  _eventNames extends string = abi extends Abi\n    ? Abi extends abi\n      ? string\n      : ExtractAbiEventNames<abi>\n    : string,\n  _readFunctionNames extends string = abi extends Abi\n    ? Abi extends abi\n      ? string\n      : ExtractAbiFunctionNames<abi, 'pure' | 'view'>\n    : string,\n  _writeFunctionNames extends string = abi extends Abi\n    ? Abi extends abi\n      ? string\n      : ExtractAbiFunctionNames<abi, 'nonpayable' | 'payable'>\n    : string,\n  _narrowable extends boolean = IsNarrowable<abi, Abi>,\n  _publicClient extends Client | unknown = client extends {\n    public: Client\n  }\n    ? client['public']\n    : client,\n  _walletClient extends Client | unknown = client extends {\n    wallet: Client\n  }\n    ? client['wallet']\n    : client,\n> = Prettify<\n  Prettify<\n    (_publicClient extends Client\n      ? (IsNever<_readFunctionNames> extends true\n          ? unknown\n          : {\n              /**\n               * Calls a read-only function on a contract, and returns the response.\n               *\n               * A \"read-only\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\n               *\n               * Internally, `read` uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n               *\n               * @example\n               * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n               * import { mainnet } from 'viem/chains'\n               *\n               * const publicClient = createPublicClient({\n               *   chain: mainnet,\n               *   transport: http(),\n               * })\n               * const contract = getContract({\n               *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n               *   abi: parseAbi([\n               *     'function balanceOf(address owner) view returns (uint256)',\n               *   ]),\n               *   client: publicClient,\n               * })\n               * const result = await contract.read.balanceOf(['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'])\n               * // 424122n\n               */\n              read: {\n                [functionName in _readFunctionNames]: GetReadFunction<\n                  _narrowable,\n                  abi,\n                  functionName extends ContractFunctionName<\n                    abi,\n                    'pure' | 'view'\n                  >\n                    ? functionName\n                    : never\n                >\n              }\n            }) &\n          (IsNever<_writeFunctionNames> extends true\n            ? unknown\n            : {\n                /**\n                 * Estimates the gas necessary to complete a transaction without submitting it to the network.\n                 *\n                 * @example\n                 * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n                 * import { mainnet } from 'viem/chains'\n                 *\n                 * const publicClient = createPublicClient({\n                 *   chain: mainnet,\n                 *   transport: http(),\n                 * })\n                 * const contract = getContract({\n                 *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n                 *   abi: parseAbi(['function mint() public']),\n                 *   client: publicClient,\n                 * })\n                 * const gas = await contract.estimateGas.mint({\n                 *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n                 * })\n                 */\n                estimateGas: {\n                  [functionName in _writeFunctionNames]: GetEstimateFunction<\n                    _narrowable,\n                    _publicClient['chain'],\n                    undefined,\n                    abi,\n                    functionName extends ContractFunctionName<\n                      abi,\n                      'nonpayable' | 'payable'\n                    >\n                      ? functionName\n                      : never\n                  >\n                }\n                /**\n                 * Simulates/validates a contract interaction. This is useful for retrieving return data and revert reasons of contract write functions.\n                 *\n                 * This function does not require gas to execute and does not change the state of the blockchain. It is almost identical to [`readContract`](https://viem.sh/docs/contract/readContract), but also supports contract write functions.\n                 *\n                 * Internally, `simulate` uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n                 *\n                 * @example\n                 * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n                 * import { mainnet } from 'viem/chains'\n                 *\n                 * const publicClient = createPublicClient({\n                 *   chain: mainnet,\n                 *   transport: http(),\n                 * })\n                 * const contract = getContract({\n                 *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n                 *   abi: parseAbi(['function mint() public']),\n                 *   client: publicClient,\n                 * })\n                 * const result = await contract.simulate.mint({\n                 *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n                 * })\n                 */\n                simulate: {\n                  [functionName in _writeFunctionNames]: GetSimulateFunction<\n                    _narrowable,\n                    _publicClient['chain'],\n                    _walletClient extends Client\n                      ? _walletClient['account']\n                      : _publicClient['account'],\n                    abi,\n                    functionName extends ContractFunctionName<\n                      abi,\n                      'nonpayable' | 'payable'\n                    >\n                      ? functionName\n                      : never\n                  >\n                }\n              }) &\n          (IsNever<_eventNames> extends true\n            ? unknown\n            : {\n                /**\n                 * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs).\n                 *\n                 * @example\n                 * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n                 * import { mainnet } from 'viem/chains'\n                 *\n                 * const publicClient = createPublicClient({\n                 *   chain: mainnet,\n                 *   transport: http(),\n                 * })\n                 * const contract = getContract({\n                 *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n                 *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n                 *   client: publicClient,\n                 * })\n                 * const filter = await contract.createEventFilter.Transfer()\n                 */\n                createEventFilter: {\n                  [EventName in _eventNames]: GetEventFilter<\n                    _narrowable,\n                    abi,\n                    EventName extends ContractEventName<abi> ? EventName : never\n                  >\n                }\n                /**\n                 * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs).\n                 *\n                 * @example\n                 * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n                 * import { mainnet } from 'viem/chains'\n                 *\n                 * const publicClient = createPublicClient({\n                 *   chain: mainnet,\n                 *   transport: http(),\n                 * })\n                 * const contract = getContract({\n                 *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n                 *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n                 *   client: publicClient,\n                 * })\n                 * const filter = await contract.createEventFilter.Transfer()\n                 */\n                getEvents: {\n                  [EventName in _eventNames]: GetEventsFunction<\n                    _narrowable,\n                    abi,\n                    EventName extends ContractEventName<abi> ? EventName : never\n                  >\n                }\n                /**\n                 * Watches and returns emitted contract event logs.\n                 *\n                 * This Action will batch up all the event logs found within the [`pollingInterval`](https://viem.sh/docs/contract/watchContractEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/contract/watchContractEvent#onLogs).\n                 *\n                 * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/contract/createContractEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n                 *\n                 * @example\n                 * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n                 * import { mainnet } from 'viem/chains'\n                 *\n                 * const publicClient = createPublicClient({\n                 *   chain: mainnet,\n                 *   transport: http(),\n                 * })\n                 * const contract = getContract({\n                 *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n                 *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n                 *   client: publicClient,\n                 * })\n                 * const filter = await contract.createEventFilter.Transfer()\n                 * const unwatch = contract.watchEvent.Transfer(\n                 *   { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\n                 *   { onLogs: (logs) => console.log(logs) },\n                 * )\n                 */\n                watchEvent: {\n                  [EventName in _eventNames]: GetWatchEvent<\n                    _narrowable,\n                    abi,\n                    EventName extends ContractEventName<abi> ? EventName : never\n                  >\n                }\n              })\n      : unknown) &\n      (_walletClient extends Client\n        ? IsNever<_writeFunctionNames> extends true\n          ? unknown\n          : {\n              /**\n               * Estimates the gas necessary to complete a transaction without submitting it to the network.\n               *\n               * @example\n               * import { createWalletClient, getContract, http, parseAbi } from 'viem'\n               * import { mainnet } from 'viem/chains'\n               *\n               * const walletClient = createWalletClient({\n               *   chain: mainnet,\n               *   transport: http(),\n               * })\n               * const contract = getContract({\n               *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n               *   abi: parseAbi(['function mint() public']),\n               *   client: walletClient,\n               * })\n               * const gas = await contract.estimateGas.mint({\n               *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n               * })\n               */\n              estimateGas: {\n                [functionName in _writeFunctionNames]: GetEstimateFunction<\n                  _narrowable,\n                  _walletClient['chain'],\n                  _walletClient['account'],\n                  abi,\n                  functionName extends ContractFunctionName<\n                    abi,\n                    'nonpayable' | 'payable'\n                  >\n                    ? functionName\n                    : never\n                >\n              }\n              /**\n               * Executes a write function on a contract.\n               *\n               * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\n               *\n               * Internally, `write` uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n               *\n               * __Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\n               *\n               * @example\n               * import { createWalletClient, getContract, http, parseAbi } from 'viem'\n               * import { mainnet } from 'viem/chains'\n               *\n               * const walletClient = createWalletClient({\n               *   chain: mainnet,\n               *   transport: http(),\n               * })\n               * const contract = getContract({\n               *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n               *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n               *   client: walletClient,\n               * })\n               * const hash = await contract.write.min([69420], {\n               *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n               * })\n               */\n              write: {\n                [functionName in _writeFunctionNames]: GetWriteFunction<\n                  _narrowable,\n                  _walletClient['chain'],\n                  _walletClient['account'],\n                  abi,\n                  functionName extends ContractFunctionName<\n                    abi,\n                    'nonpayable' | 'payable'\n                  >\n                    ? functionName\n                    : never\n                >\n              }\n            }\n        : unknown)\n  > & { address: address; abi: abi }\n>\n\nexport type GetContractErrorType = ErrorType\n\n/**\n * Gets type-safe interface for performing contract-related actions with a specific `abi` and `address`.\n *\n * - Docs https://viem.sh/docs/contract/getContract\n *\n * Using Contract Instances can make it easier to work with contracts if you don't want to pass the `abi` and `address` properties every time you perform contract actions, e.g. [`readContract`](https://viem.sh/docs/contract/readContract), [`writeContract`](https://viem.sh/docs/contract/writeContract), [`estimateContractGas`](https://viem.sh/docs/contract/estimateContractGas), etc.\n *\n * @example\n * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const publicClient = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const contract = getContract({\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi([\n *     'function balanceOf(address owner) view returns (uint256)',\n *     'function ownerOf(uint256 tokenId) view returns (address)',\n *     'function totalSupply() view returns (uint256)',\n *   ]),\n *   client: publicClient,\n * })\n */\nexport function getContract<\n  transport extends Transport,\n  address extends Address,\n  const abi extends Abi | readonly unknown[],\n  const client extends\n    | Client<transport, chain, account>\n    | KeyedClient<transport, chain, account>,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n>({\n  abi,\n  address,\n  client: client_,\n}: GetContractParameters<\n  transport,\n  chain,\n  account,\n  abi,\n  client,\n  address\n>): GetContractReturnType<abi, client, address> {\n  const client = client_ as\n    | Client<transport, chain, account>\n    | KeyedClient<transport, chain, account>\n\n  const [publicClient, walletClient] = (() => {\n    if (!client) return [undefined, undefined]\n    if ('public' in client && 'wallet' in client)\n      return [client.public as Client, client.wallet as Client]\n    if ('public' in client) return [client.public as Client, undefined]\n    if ('wallet' in client) return [undefined, client.wallet as Client]\n    return [client, client]\n  })()\n\n  const hasPublicClient = publicClient !== undefined && publicClient !== null\n  const hasWalletClient = walletClient !== undefined && walletClient !== null\n\n  const contract: {\n    [_ in\n      | 'abi'\n      | 'address'\n      | 'createEventFilter'\n      | 'estimateGas'\n      | 'getEvents'\n      | 'read'\n      | 'simulate'\n      | 'watchEvent'\n      | 'write']?: unknown\n  } = {}\n\n  let hasReadFunction = false\n  let hasWriteFunction = false\n  let hasEvent = false\n  for (const item of abi as Abi) {\n    if (item.type === 'function')\n      if (item.stateMutability === 'view' || item.stateMutability === 'pure')\n        hasReadFunction = true\n      else hasWriteFunction = true\n    else if (item.type === 'event') hasEvent = true\n    // Exit early if all flags are `true`\n    if (hasReadFunction && hasWriteFunction && hasEvent) break\n  }\n\n  if (hasPublicClient) {\n    if (hasReadFunction)\n      contract.read = new Proxy(\n        {},\n        {\n          get(_, functionName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[] | undefined,\n                options?: UnionOmit<\n                  ReadContractParameters,\n                  'abi' | 'address' | 'functionName' | 'args'\n                >,\n              ]\n            ) => {\n              const { args, options } = getFunctionParameters(parameters)\n              return getAction(\n                publicClient,\n                readContract,\n                'readContract',\n              )({\n                abi,\n                address,\n                functionName,\n                args,\n                ...options,\n              } as ReadContractParameters)\n            }\n          },\n        },\n      )\n\n    if (hasWriteFunction)\n      contract.simulate = new Proxy(\n        {},\n        {\n          get(_, functionName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[],\n                options?: UnionOmit<\n                  SimulateContractParameters,\n                  'abi' | 'address' | 'functionName' | 'args'\n                >,\n              ]\n            ) => {\n              const { args, options } = getFunctionParameters(parameters)\n              return getAction(\n                publicClient,\n                simulateContract,\n                'simulateContract',\n              )({\n                abi,\n                address,\n                functionName,\n                args,\n                ...options,\n              } as SimulateContractParameters)\n            }\n          },\n        },\n      )\n\n    if (hasEvent) {\n      contract.createEventFilter = new Proxy(\n        {},\n        {\n          get(_, eventName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[] | object,\n                options?: Omit<\n                  CreateContractEventFilterParameters,\n                  'abi' | 'address' | 'eventName' | 'args'\n                >,\n              ]\n            ) => {\n              const abiEvent = (abi as readonly AbiEvent[]).find(\n                (x: AbiEvent) => x.type === 'event' && x.name === eventName,\n              )\n              const { args, options } = getEventParameters(\n                parameters,\n                abiEvent!,\n              )\n              return getAction(\n                publicClient,\n                createContractEventFilter,\n                'createContractEventFilter',\n              )({\n                abi,\n                address,\n                eventName,\n                args,\n                ...options,\n              } as CreateContractEventFilterParameters)\n            }\n          },\n        },\n      )\n      contract.getEvents = new Proxy(\n        {},\n        {\n          get(_, eventName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[] | object,\n                options?: Omit<\n                  GetContractEventsParameters,\n                  'abi' | 'address' | 'eventName'\n                >,\n              ]\n            ) => {\n              const abiEvent = (abi as readonly AbiEvent[]).find(\n                (x: AbiEvent) => x.type === 'event' && x.name === eventName,\n              )\n              const { args, options } = getEventParameters(\n                parameters,\n                abiEvent!,\n              )\n              return getAction(\n                publicClient,\n                getContractEvents,\n                'getContractEvents',\n              )({\n                abi,\n                address,\n                eventName,\n                args,\n                ...options,\n              } as unknown as GetContractEventsParameters)\n            }\n          },\n        },\n      )\n      contract.watchEvent = new Proxy(\n        {},\n        {\n          get(_, eventName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[] | object,\n                options?: Omit<\n                  WatchContractEventParameters,\n                  'abi' | 'address' | 'eventName'\n                >,\n              ]\n            ) => {\n              const abiEvent = (abi as readonly AbiEvent[]).find(\n                (x: AbiEvent) => x.type === 'event' && x.name === eventName,\n              )\n              const { args, options } = getEventParameters(\n                parameters,\n                abiEvent!,\n              )\n              return getAction(\n                publicClient,\n                watchContractEvent,\n                'watchContractEvent',\n              )({\n                abi,\n                address,\n                eventName,\n                args,\n                ...options,\n              } as unknown as WatchContractEventParameters)\n            }\n          },\n        },\n      )\n    }\n  }\n\n  if (hasWalletClient) {\n    if (hasWriteFunction)\n      contract.write = new Proxy(\n        {},\n        {\n          get(_, functionName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[],\n                options?: UnionOmit<\n                  WriteContractParameters,\n                  'abi' | 'address' | 'functionName' | 'args'\n                >,\n              ]\n            ) => {\n              const { args, options } = getFunctionParameters(parameters)\n              return getAction(\n                walletClient,\n                writeContract,\n                'writeContract',\n              )({\n                abi,\n                address,\n                functionName,\n                args,\n                ...(options as any),\n              })\n            }\n          },\n        },\n      )\n  }\n\n  if (hasPublicClient || hasWalletClient)\n    if (hasWriteFunction)\n      contract.estimateGas = new Proxy(\n        {},\n        {\n          get(_, functionName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[],\n                options?: UnionOmit<\n                  EstimateContractGasParameters,\n                  'abi' | 'address' | 'functionName' | 'args'\n                >,\n              ]\n            ) => {\n              const { args, options } = getFunctionParameters(parameters)\n              const client = (publicClient ?? walletClient)!\n              return getAction(\n                client,\n                estimateContractGas,\n                'estimateContractGas',\n              )({\n                abi,\n                address,\n                functionName,\n                args,\n                ...options,\n                account:\n                  (options as EstimateContractGasParameters).account ??\n                  (walletClient as unknown as Client).account,\n              } as any)\n            }\n          },\n        },\n      )\n  contract.address = address\n  contract.abi = abi\n\n  return contract as unknown as GetContractReturnType<abi, client, address>\n}\n\n/**\n * @internal exporting for testing only\n */\nexport function getFunctionParameters(\n  values: [args?: readonly unknown[] | undefined, options?: object | undefined],\n) {\n  const hasArgs = values.length && Array.isArray(values[0])\n  const args = hasArgs ? values[0]! : []\n  const options = (hasArgs ? values[1] : values[0]) ?? {}\n  return { args, options }\n}\n\n/**\n * @internal exporting for testing only\n */\nexport function getEventParameters(\n  values: [args?: object | unknown[], options?: object],\n  abiEvent: AbiEvent,\n) {\n  let hasArgs = false\n  // If first item is array, must be `args`\n  if (Array.isArray(values[0])) hasArgs = true\n  // Check if first item is `args` or `options`\n  else if (values.length === 1) {\n    // if event has indexed inputs, must have `args`\n    hasArgs = abiEvent.inputs.some((x) => x.indexed)\n    // If there are two items in array, must have `args`\n  } else if (values.length === 2) {\n    hasArgs = true\n  }\n\n  const args = hasArgs ? values[0]! : undefined\n  const options = (hasArgs ? values[1] : values[0]) ?? {}\n  return { args, options }\n}\n\ntype GetReadFunction<\n  narrowable extends boolean,\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'pure' | 'view',\n    functionName\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  abiFunction extends AbiFunction = abi extends Abi\n    ? ExtractAbiFunction<abi, functionName>\n    : AbiFunction,\n  //\n  _args = AbiParametersToPrimitiveTypes<abiFunction['inputs']>,\n  _options = Prettify<\n    UnionOmit<\n      ReadContractParameters<abi, functionName, args>,\n      'abi' | 'address' | 'args' | 'functionName'\n    >\n  >,\n> = narrowable extends true\n  ? (\n      ...parameters: _args extends readonly []\n        ? [options?: _options]\n        : [args: _args, options?: _options]\n    ) => Promise<ReadContractReturnType<abi, functionName, args>>\n  : (\n      ...parameters:\n        | [options?: _options]\n        | [args: readonly unknown[], options?: _options]\n    ) => Promise<ReadContractReturnType>\n\ntype GetEstimateFunction<\n  narrowable extends boolean,\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  abiFunction extends AbiFunction = abi extends Abi\n    ? ExtractAbiFunction<abi, functionName>\n    : AbiFunction,\n  //\n  _args = AbiParametersToPrimitiveTypes<abiFunction['inputs']>,\n  _options = Prettify<\n    UnionOmit<\n      EstimateContractGasParameters<abi, functionName, args, chain>,\n      'abi' | 'address' | 'args' | 'functionName'\n    >\n  >,\n  // For making `options` parameter required if `account`\n  IsOptionsRequired = IsUndefined<account>,\n> = narrowable extends true\n  ? (\n      ...parameters: _args extends readonly []\n        ? IsOptionsRequired extends true\n          ? [options: _options]\n          : [options?: _options]\n        : [\n            args: _args,\n            ...parameters: IsOptionsRequired extends true\n              ? [options: _options]\n              : [options?: _options],\n          ]\n    ) => Promise<EstimateContractGasReturnType>\n  : (\n      ...parameters:\n        | (IsOptionsRequired extends true\n            ? [options: _options]\n            : [options?: _options])\n        | [\n            args: readonly unknown[],\n            ...parameters: IsOptionsRequired extends true\n              ? [options: _options]\n              : [options?: _options],\n          ]\n    ) => Promise<EstimateContractGasReturnType>\n\ntype GetSimulateFunction<\n  narrowable extends boolean,\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  abiFunction extends AbiFunction = abi extends Abi\n    ? ExtractAbiFunction<abi, functionName>\n    : AbiFunction,\n  //\n  _args = AbiParametersToPrimitiveTypes<abiFunction['inputs']>,\n> = narrowable extends true\n  ? <\n      chainOverride extends Chain | undefined = undefined,\n      accountOverride extends Account | Address | undefined = undefined,\n    >(\n      ...parameters: _args extends readonly []\n        ? [\n            options?: Omit<\n              SimulateContractParameters<\n                abi,\n                functionName,\n                args,\n                chain,\n                chainOverride,\n                accountOverride\n              >,\n              'abi' | 'address' | 'args' | 'functionName'\n            >,\n          ]\n        : [\n            args: _args,\n            options?: Omit<\n              SimulateContractParameters<\n                abi,\n                functionName,\n                args,\n                chain,\n                chainOverride,\n                accountOverride\n              >,\n              'abi' | 'address' | 'args' | 'functionName'\n            >,\n          ]\n    ) => Promise<\n      SimulateContractReturnType<\n        abi,\n        functionName,\n        args,\n        chain,\n        account,\n        chainOverride,\n        accountOverride\n      >\n    >\n  : <\n      chainOverride extends Chain | undefined = undefined,\n      accountOverride extends Account | Address | undefined = undefined,\n    >(\n      ...parameters:\n        | [\n            options?: Omit<\n              SimulateContractParameters<\n                abi,\n                functionName,\n                args,\n                chain,\n                chainOverride,\n                accountOverride\n              >,\n              'abi' | 'address' | 'args' | 'functionName'\n            >,\n          ]\n        | [\n            args: readonly unknown[],\n            options?: Omit<\n              SimulateContractParameters<\n                abi,\n                functionName,\n                args,\n                chain,\n                chainOverride,\n                accountOverride\n              >,\n              'abi' | 'address' | 'args' | 'functionName'\n            >,\n          ]\n    ) => Promise<SimulateContractReturnType>\n\ntype GetWriteFunction<\n  narrowable extends boolean,\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  abiFunction extends AbiFunction = abi extends Abi\n    ? ExtractAbiFunction<abi, functionName>\n    : AbiFunction,\n  //\n  _args = AbiParametersToPrimitiveTypes<abiFunction['inputs']>,\n  // For making `options` parameter required if `account` or `chain` is undefined\n  _isOptionsRequired = Or<[IsUndefined<account>, IsUndefined<chain>]>,\n> = narrowable extends true\n  ? <\n      chainOverride extends Chain | undefined,\n      options extends Prettify<\n        UnionOmit<\n          WriteContractParameters<\n            abi,\n            functionName,\n            args,\n            chain,\n            account,\n            chainOverride\n          >,\n          'abi' | 'address' | 'args' | 'functionName'\n        >\n      >,\n    >(\n      ...parameters: _args extends readonly []\n        ? _isOptionsRequired extends true\n          ? [options: options]\n          : [options?: options]\n        : [\n            args: _args,\n            ...parameters: _isOptionsRequired extends true\n              ? [options: options]\n              : [options?: options],\n          ]\n    ) => Promise<WriteContractReturnType>\n  : <\n      chainOverride extends Chain | undefined,\n      options extends Prettify<\n        UnionOmit<\n          WriteContractParameters<\n            abi,\n            functionName,\n            args,\n            chain,\n            account,\n            chainOverride\n          >,\n          'abi' | 'address' | 'args' | 'functionName'\n        >\n      >,\n      Rest extends unknown[] = _isOptionsRequired extends true\n        ? [options: options]\n        : [options?: options],\n    >(\n      ...parameters: Rest | [args: readonly unknown[], ...parameters: Rest]\n    ) => Promise<WriteContractReturnType>\n\ntype GetEventFilter<\n  narrowable extends boolean,\n  abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi>,\n  abiEvent extends AbiEvent = abi extends Abi\n    ? ExtractAbiEvent<abi, eventName>\n    : AbiEvent,\n  //\n  _args = AbiEventParametersToPrimitiveTypes<abiEvent['inputs']>,\n  _options = Prettify<\n    Omit<\n      CreateContractEventFilterParameters<abi, eventName>,\n      'abi' | 'address' | 'args' | 'eventName' | 'strict'\n    >\n  >,\n  IndexedInputs = Extract<abiEvent['inputs'][number], { indexed: true }>,\n> = narrowable extends true\n  ? <\n      const args extends\n        | MaybeExtractEventArgsFromAbi<abi, eventName>\n        | undefined,\n      strict extends boolean | undefined = undefined,\n    >(\n      ...parameters: IsNever<IndexedInputs> extends true\n        ? [options?: _options & { strict?: strict }]\n        : [\n            args: _args | (_args extends args ? Readonly<args> : never),\n            options?: _options & { strict?: strict },\n          ]\n    ) => Promise<\n      CreateContractEventFilterReturnType<abi, eventName, args, strict>\n    >\n  : <strict extends boolean | undefined = undefined>(\n      ...parameters:\n        | [options?: _options & { strict?: strict }]\n        | [\n            args: readonly unknown[] | CreateContractFilterOptions,\n            options?: _options & { strict?: strict },\n          ]\n    ) => Promise<CreateContractEventFilterReturnType>\n\ntype GetEventsFunction<\n  narrowable extends boolean,\n  abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi>,\n  abiEvent extends AbiEvent = abi extends Abi\n    ? ExtractAbiEvent<abi, eventName>\n    : AbiEvent,\n  //\n  _args = AbiEventParametersToPrimitiveTypes<abiEvent['inputs']>,\n  _options = Prettify<\n    Omit<\n      GetContractEventsParameters<abi, eventName>,\n      'abi' | 'address' | 'args' | 'eventName'\n    >\n  >,\n  IndexedInputs = Extract<abiEvent['inputs'][number], { indexed: true }>,\n> = narrowable extends true\n  ? (\n      ...parameters: IsNever<IndexedInputs> extends true\n        ? [options?: _options]\n        : [args?: _args, options?: _options]\n    ) => Promise<GetContractEventsReturnType<abi, eventName>>\n  : (\n      ...parameters:\n        | [options?: _options]\n        | [\n            args?: readonly unknown[] | WatchContractEventOptions,\n            options?: _options,\n          ]\n    ) => Promise<GetContractEventsReturnType<abi, eventName>>\n\ntype GetWatchEvent<\n  narrowable extends boolean,\n  abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi>,\n  abiEvent extends AbiEvent = abi extends Abi\n    ? ExtractAbiEvent<abi, eventName>\n    : AbiEvent,\n  //\n  _args = AbiEventParametersToPrimitiveTypes<abiEvent['inputs']>,\n  _options = Prettify<\n    Omit<\n      WatchContractEventParameters<abi, eventName>,\n      'abi' | 'address' | 'args' | 'eventName'\n    >\n  >,\n  _indexedInputs = Extract<abiEvent['inputs'][number], { indexed: true }>,\n> = narrowable extends true\n  ? (\n      ...parameters: IsNever<_indexedInputs> extends true\n        ? [options: _options]\n        : [args: _args, options: _options]\n    ) => WatchContractEventReturnType\n  : (\n      ...parameters:\n        | [options?: _options]\n        | [\n            args: readonly unknown[] | WatchContractEventOptions,\n            options?: _options,\n          ]\n    ) => WatchContractEventReturnType\n\ntype CreateContractFilterOptions =\n  RemoveProperties<CreateContractEventFilterParameters>\ntype WatchContractEventOptions = RemoveProperties<WatchContractEventParameters>\n\ntype RemoveProperties<T extends object> = Prettify<\n  {\n    [key: string]: unknown\n  } & {\n    [_ in keyof T]?: never\n  }\n>\n", "import type { GetCallsStatusReturnType } from '../actions/wallet/getCallsStatus.js'\nimport { BaseError } from './base.js'\n\nexport type BundleFailedErrorType = BundleFailedError & {\n  name: 'BundleFailedError'\n}\nexport class BundleFailedError extends BaseError {\n  result: GetCallsStatusReturnType\n\n  constructor(result: GetCallsStatusReturnType) {\n    super(`Call bundle failed with status: ${result.statusCode}`, {\n      name: 'BundleFailedError',\n    })\n\n    this.result = result\n  }\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport { wait } from '../wait.js'\n\nexport type WithRetryParameters = {\n  // The delay (in ms) between retries.\n  delay?:\n    | ((config: { count: number; error: Error }) => number)\n    | number\n    | undefined\n  // The max number of times to retry.\n  retryCount?: number | undefined\n  // Whether or not to retry when an error is thrown.\n  shouldRetry?:\n    | (({\n        count,\n        error,\n      }: {\n        count: number\n        error: Error\n      }) => Promise<boolean> | boolean)\n    | undefined\n}\n\nexport type WithRetryErrorType = ErrorType\n\nexport function withRetry<data>(\n  fn: () => Promise<data>,\n  {\n    delay: delay_ = 100,\n    retryCount = 2,\n    shouldRetry = () => true,\n  }: WithRetryParameters = {},\n) {\n  return new Promise<data>((resolve, reject) => {\n    const attemptRetry = async ({ count = 0 } = {}) => {\n      const retry = async ({ error }: { error: Error }) => {\n        const delay =\n          typeof delay_ === 'function' ? delay_({ count, error }) : delay_\n        if (delay) await wait(delay)\n        attemptRetry({ count: count + 1 })\n      }\n\n      try {\n        const data = await fn()\n        resolve(data)\n      } catch (err) {\n        if (\n          count < retryCount &&\n          (await shouldRetry({ count, error: err as Error }))\n        )\n          return retry({ error: err as Error })\n        reject(err)\n      }\n    }\n    attemptRetry()\n  })\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type {\n  Chain,\n  ExtractChainFormatterReturnType,\n} from '../../types/chain.js'\nimport type { RpcTransactionReceipt } from '../../types/rpc.js'\nimport type { TransactionReceipt } from '../../types/transaction.js'\nimport type { ExactPartial } from '../../types/utils.js'\nimport { hexToNumber } from '../encoding/fromHex.js'\n\nimport { type DefineFormatterErrorType, defineFormatter } from './formatter.js'\nimport { formatLog } from './log.js'\nimport { transactionType } from './transaction.js'\n\nexport type FormattedTransactionReceipt<\n  chain extends Chain | undefined = undefined,\n> = ExtractChainFormatterReturnType<\n  chain,\n  'transactionReceipt',\n  TransactionReceipt\n>\n\nexport const receiptStatuses = {\n  '0x0': 'reverted',\n  '0x1': 'success',\n} as const\n\nexport type FormatTransactionReceiptErrorType = ErrorType\n\nexport function formatTransactionReceipt(\n  transactionReceipt: ExactPartial<RpcTransactionReceipt>,\n  _?: string | undefined,\n) {\n  const receipt = {\n    ...transactionReceipt,\n    blockNumber: transactionReceipt.blockNumber\n      ? BigInt(transactionReceipt.blockNumber)\n      : null,\n    contractAddress: transactionReceipt.contractAddress\n      ? transactionReceipt.contractAddress\n      : null,\n    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed\n      ? BigInt(transactionReceipt.cumulativeGasUsed)\n      : null,\n    effectiveGasPrice: transactionReceipt.effectiveGasPrice\n      ? BigInt(transactionReceipt.effectiveGasPrice)\n      : null,\n    gasUsed: transactionReceipt.gasUsed\n      ? BigInt(transactionReceipt.gasUsed)\n      : null,\n    logs: transactionReceipt.logs\n      ? transactionReceipt.logs.map((log) => formatLog(log))\n      : null,\n    to: transactionReceipt.to ? transactionReceipt.to : null,\n    transactionIndex: transactionReceipt.transactionIndex\n      ? hexToNumber(transactionReceipt.transactionIndex)\n      : null,\n    status: transactionReceipt.status\n      ? receiptStatuses[transactionReceipt.status]\n      : null,\n    type: transactionReceipt.type\n      ? transactionType[\n          transactionReceipt.type as keyof typeof transactionType\n        ] || transactionReceipt.type\n      : null,\n  } as TransactionReceipt\n\n  if (transactionReceipt.blobGasPrice)\n    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice)\n  if (transactionReceipt.blobGasUsed)\n    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed)\n\n  return receipt\n}\n\nexport type DefineTransactionReceiptErrorType =\n  | DefineFormatterErrorType\n  | ErrorType\n\nexport const defineTransactionReceipt = /*#__PURE__*/ defineFormatter(\n  'transactionReceipt',\n  formatTransactionReceipt,\n)\n", "import type { Address, Narrow } from 'abitype'\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { BaseError } from '../../errors/base.js'\nimport {\n  AtomicityNotSupportedError,\n  UnsupportedNonOptionalCapabilityError,\n} from '../../errors/rpc.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account, GetAccountParameter } from '../../types/account.js'\nimport type { Call, Calls } from '../../types/calls.js'\nimport type { ExtractCapabilities } from '../../types/capabilities.js'\nimport type { Chain, DeriveChain } from '../../types/chain.js'\nimport type { WalletSendCallsParameters } from '../../types/eip1193.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport { encodeFunctionData } from '../../utils/abi/encodeFunctionData.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { concat } from '../../utils/data/concat.js'\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\nimport { getTransactionError } from '../../utils/errors/getTransactionError.js'\nimport { sendTransaction } from './sendTransaction.js'\n\nexport const fallbackMagicIdentifier =\n  '0x5792579257925792579257925792579257925792579257925792579257925792'\nexport const fallbackTransactionErrorMagicIdentifier = numberToHex(0, {\n  size: 32,\n})\n\nexport type SendCallsParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  calls extends readonly unknown[] = readonly unknown[],\n  //\n  _chain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = {\n  chain?: chainOverride | Chain | undefined\n  calls: Calls<Narrow<calls>>\n  capabilities?: ExtractCapabilities<'sendCalls', 'Request'> | undefined\n  experimental_fallback?: boolean | undefined\n  experimental_fallbackDelay?: number | undefined\n  forceAtomic?: boolean | undefined\n  id?: string | undefined\n  version?: WalletSendCallsParameters[number]['version'] | undefined\n} & GetAccountParameter<account, Account | Address, false, true>\n\nexport type SendCallsReturnType = Prettify<{\n  capabilities?: ExtractCapabilities<'sendCalls', 'ReturnType'> | undefined\n  id: string\n}>\n\nexport type SendCallsErrorType = RequestErrorType | ErrorType\n\n/**\n * Requests the connected wallet to send a batch of calls.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendCalls\n * - JSON-RPC Methods: [`wallet_sendCalls`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns Transaction identifier. {@link SendCallsReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendCalls } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const id = await sendCalls(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   calls: [\n *     {\n *       data: '0xdeadbeef',\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *     },\n *     {\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *       value: 69420n,\n *     },\n *   ],\n * })\n */\nexport async function sendCalls<\n  const calls extends readonly unknown[],\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n  chainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: SendCallsParameters<chain, account, chainOverride, calls>,\n): Promise<SendCallsReturnType> {\n  const {\n    account: account_ = client.account,\n    capabilities,\n    chain = client.chain,\n    experimental_fallback,\n    experimental_fallbackDelay = 32,\n    forceAtomic = false,\n    id,\n    version = '2.0.0',\n  } = parameters\n\n  const account = account_ ? parseAccount(account_) : null\n\n  const calls = parameters.calls.map((call_: unknown) => {\n    const call = call_ as Call\n\n    const data = call.abi\n      ? encodeFunctionData({\n          abi: call.abi,\n          functionName: call.functionName,\n          args: call.args,\n        })\n      : call.data\n\n    return {\n      data: call.dataSuffix && data ? concat([data, call.dataSuffix]) : data,\n      to: call.to,\n      value: call.value ? numberToHex(call.value) : undefined,\n    }\n  })\n\n  try {\n    const response = await client.request(\n      {\n        method: 'wallet_sendCalls',\n        params: [\n          {\n            atomicRequired: forceAtomic,\n            calls,\n            capabilities,\n            chainId: numberToHex(chain!.id),\n            from: account?.address,\n            id,\n            version,\n          },\n        ],\n      },\n      { retryCount: 0 },\n    )\n    if (typeof response === 'string') return { id: response }\n    return response as never\n  } catch (err) {\n    const error = err as BaseError\n\n    // If the transport does not support EIP-5792, fall back to\n    // `eth_sendTransaction`.\n    if (\n      experimental_fallback &&\n      (error.name === 'MethodNotFoundRpcError' ||\n        error.name === 'MethodNotSupportedRpcError' ||\n        error.name === 'UnknownRpcError' ||\n        error.details\n          .toLowerCase()\n          .includes('does not exist / is not available') ||\n        error.details.toLowerCase().includes('missing or invalid. request()') ||\n        error.details\n          .toLowerCase()\n          .includes('did not match any variant of untagged enum') ||\n        error.details\n          .toLowerCase()\n          .includes('account upgraded to unsupported contract') ||\n        error.details.toLowerCase().includes('eip-7702 not supported') ||\n        error.details.toLowerCase().includes('unsupported wc_ method') ||\n        // magic.link\n        error.details\n          .toLowerCase()\n          .includes('feature toggled misconfigured') ||\n        // Trust Wallet\n        error.details\n          .toLowerCase()\n          .includes(\n            'jsonrpcengine: response has no error or result for request',\n          ))\n    ) {\n      if (capabilities) {\n        const hasNonOptionalCapability = Object.values(capabilities).some(\n          (capability) => !capability.optional,\n        )\n        if (hasNonOptionalCapability) {\n          const message =\n            'non-optional `capabilities` are not supported on fallback to `eth_sendTransaction`.'\n          throw new UnsupportedNonOptionalCapabilityError(\n            new BaseError(message, {\n              details: message,\n            }),\n          )\n        }\n      }\n      if (forceAtomic && calls.length > 1) {\n        const message =\n          '`forceAtomic` is not supported on fallback to `eth_sendTransaction`.'\n        throw new AtomicityNotSupportedError(\n          new BaseError(message, {\n            details: message,\n          }),\n        )\n      }\n\n      const promises: Promise<Hex>[] = []\n      for (const call of calls) {\n        const promise = sendTransaction(client, {\n          account,\n          chain,\n          data: call.data,\n          to: call.to,\n          value: call.value ? hexToBigInt(call.value) : undefined,\n        })\n        promises.push(promise)\n\n        // Note: some browser wallets require a small delay between transactions\n        // to prevent duplicate JSON-RPC requests.\n        if (experimental_fallbackDelay > 0)\n          await new Promise((resolve) =>\n            setTimeout(resolve, experimental_fallbackDelay),\n          )\n      }\n\n      const results = await Promise.allSettled(promises)\n      if (results.every((r) => r.status === 'rejected')) throw results[0].reason\n\n      const hashes = results.map((result) => {\n        if (result.status === 'fulfilled') return result.value\n        return fallbackTransactionErrorMagicIdentifier\n      })\n      return {\n        id: concat([\n          ...hashes,\n          numberToHex(chain!.id, { size: 32 }),\n          fallbackMagicIdentifier,\n        ]),\n      }\n    }\n\n    throw getTransactionError(err as BaseError, {\n      ...parameters,\n      account,\n      chain: parameters.chain!,\n    })\n  }\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { ExtractCapabilities } from '../../types/capabilities.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { WalletGetCallsStatusReturnType } from '../../types/eip1193.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RpcTransactionReceipt } from '../../types/rpc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { sliceHex } from '../../utils/data/slice.js'\nimport { trim } from '../../utils/data/trim.js'\nimport { hexToBigInt, hexToNumber } from '../../utils/encoding/fromHex.js'\nimport { receiptStatuses } from '../../utils/formatters/transactionReceipt.js'\nimport {\n  fallbackMagicIdentifier,\n  fallbackTransactionErrorMagicIdentifier,\n} from './sendCalls.js'\n\nexport type GetCallsStatusParameters = { id: string }\n\nexport type GetCallsStatusReturnType = Prettify<\n  Omit<\n    WalletGetCallsStatusReturnType<\n      ExtractCapabilities<'getCallsStatus', 'ReturnType'>,\n      number,\n      bigint,\n      'success' | 'reverted'\n    >,\n    'status'\n  > & {\n    statusCode: number\n    status: 'pending' | 'success' | 'failure' | undefined\n  }\n>\n\nexport type GetCallsStatusErrorType = RequestErrorType | ErrorType\n\n/**\n * Returns the status of a call batch that was sent via `sendCalls`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getCallsStatus\n * - JSON-RPC Methods: [`wallet_getCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns Status of the calls. {@link GetCallsStatusReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getCallsStatus } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const { receipts, status } = await getCallsStatus(client, { id: '0xdeadbeef' })\n */\nexport async function getCallsStatus<\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: GetCallsStatusParameters,\n): Promise<GetCallsStatusReturnType> {\n  async function getStatus(id: Hex) {\n    const isTransactions = id.endsWith(fallbackMagicIdentifier.slice(2))\n    if (isTransactions) {\n      const chainId = trim(sliceHex(id, -64, -32))\n      const hashes = sliceHex(id, 0, -64)\n        .slice(2)\n        .match(/.{1,64}/g)\n\n      const receipts = await Promise.all(\n        hashes!.map((hash) =>\n          fallbackTransactionErrorMagicIdentifier.slice(2) !== hash\n            ? client.request(\n                {\n                  method: 'eth_getTransactionReceipt',\n                  params: [`0x${hash}`],\n                },\n                { dedupe: true },\n              )\n            : undefined,\n        ),\n      )\n\n      const status = (() => {\n        if (receipts.some((r) => r === null)) return 100 // pending\n        if (receipts.every((r) => r?.status === '0x1')) return 200 // success\n        if (receipts.every((r) => r?.status === '0x0')) return 500 // complete failure\n        return 600 // partial failure\n      })()\n\n      return {\n        atomic: false,\n        chainId: hexToNumber(chainId),\n        receipts: receipts.filter(Boolean) as RpcTransactionReceipt[],\n        status,\n        version: '2.0.0',\n      }\n    }\n    return client.request({\n      method: 'wallet_getCallsStatus',\n      params: [id],\n    })\n  }\n\n  const {\n    atomic = false,\n    chainId,\n    receipts,\n    version = '2.0.0',\n    ...response\n  } = await getStatus(parameters.id as Hex)\n  const [status, statusCode] = (() => {\n    const statusCode = response.status\n    if (statusCode >= 100 && statusCode < 200)\n      return ['pending', statusCode] as const\n    if (statusCode >= 200 && statusCode < 300)\n      return ['success', statusCode] as const\n    if (statusCode >= 300 && statusCode < 700)\n      return ['failure', statusCode] as const\n    // @ts-expect-error: for backwards compatibility\n    if (statusCode === 'CONFIRMED') return ['success', 200] as const\n    // @ts-expect-error: for backwards compatibility\n    if (statusCode === 'PENDING') return ['pending', 100] as const\n    return [undefined, statusCode]\n  })()\n  return {\n    ...response,\n    atomic,\n    // @ts-expect-error: for backwards compatibility\n    chainId: chainId ? hexToNumber(chainId) : undefined,\n    receipts:\n      receipts?.map((receipt) => ({\n        ...receipt,\n        blockNumber: hexToBigInt(receipt.blockNumber),\n        gasUsed: hexToBigInt(receipt.gasUsed),\n        status: receiptStatuses[receipt.status as '0x0' | '0x1'],\n      })) ?? [],\n    statusCode,\n    status,\n    version,\n  }\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { BaseError } from '../../errors/base.js'\nimport { BundleFailedError } from '../../errors/calls.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport { type PollErrorType, poll } from '../../utils/poll.js'\nimport { withResolvers } from '../../utils/promise/withResolvers.js'\nimport {\n  type WithRetryParameters,\n  withRetry,\n} from '../../utils/promise/withRetry.js'\nimport { stringify } from '../../utils/stringify.js'\nimport {\n  type GetCallsStatusErrorType,\n  type GetCallsStatusReturnType,\n  getCallsStatus,\n} from './getCallsStatus.js'\n\nexport type WaitForCallsStatusParameters = {\n  /**\n   * The id of the call batch to wait for.\n   */\n  id: string\n  /**\n   * Polling frequency (in ms). Defaults to the client's pollingInterval config.\n   *\n   * @default client.pollingInterval\n   */\n  pollingInterval?: number | undefined\n  /**\n   * Number of times to retry if the call bundle failed.\n   * @default 4 (exponential backoff)\n   */\n  retryCount?: WithRetryParameters['retryCount'] | undefined\n  /**\n   * Time to wait (in ms) between retries.\n   * @default `({ count }) => ~~(1 << count) * 200` (exponential backoff)\n   */\n  retryDelay?: WithRetryParameters['delay'] | undefined\n  /**\n   * The status range to wait for.\n   *\n   * @default (status) => status >= 200\n   */\n  status?: ((parameters: GetCallsStatusReturnType) => boolean) | undefined\n  /**\n   * Whether to throw an error if the call bundle fails.\n   *\n   * @default false\n   */\n  throwOnFailure?: boolean | undefined\n  /**\n   * Optional timeout (in milliseconds) to wait before stopping polling.\n   *\n   * @default 60_000\n   */\n  timeout?: number | undefined\n}\n\nexport type WaitForCallsStatusReturnType = GetCallsStatusReturnType\n\nexport type WaitForCallsStatusErrorType =\n  | ObserveErrorType\n  | PollErrorType\n  | GetCallsStatusErrorType\n  | WaitForCallsStatusTimeoutError\n  | ErrorType\n\n/**\n * Waits for the status & receipts of a call bundle that was sent via `sendCalls`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/waitForCallsStatus\n * - JSON-RPC Methods: [`wallet_getCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @param parameters - {@link WaitForCallsStatusParameters}\n * @returns Status & receipts of the call bundle. {@link WaitForCallsStatusReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { waitForCallsStatus } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * const { receipts, status } = await waitForCallsStatus(client, { id: '0xdeadbeef' })\n */\nexport async function waitForCallsStatus<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  parameters: WaitForCallsStatusParameters,\n): Promise<WaitForCallsStatusReturnType> {\n  const {\n    id,\n    pollingInterval = client.pollingInterval,\n    status = ({ statusCode }) => statusCode === 200 || statusCode >= 300,\n    retryCount = 4,\n    retryDelay = ({ count }) => ~~(1 << count) * 200, // exponential backoff\n    timeout = 60_000,\n    throwOnFailure = false,\n  } = parameters\n  const observerId = stringify(['waitForCallsStatus', client.uid, id])\n\n  const { promise, resolve, reject } =\n    withResolvers<WaitForCallsStatusReturnType>()\n\n  let timer: Timer | undefined\n\n  const unobserve = observe(observerId, { resolve, reject }, (emit) => {\n    const unpoll = poll(\n      async () => {\n        const done = (fn: () => void) => {\n          clearTimeout(timer)\n          unpoll()\n          fn()\n          unobserve()\n        }\n\n        try {\n          const result = await withRetry(\n            async () => {\n              const result = await getAction(\n                client,\n                getCallsStatus,\n                'getCallsStatus',\n              )({ id })\n              if (throwOnFailure && result.status === 'failure')\n                throw new BundleFailedError(result)\n              return result\n            },\n            {\n              retryCount,\n              delay: retryDelay,\n            },\n          )\n          if (!status(result)) return\n          done(() => emit.resolve(result))\n        } catch (error) {\n          done(() => emit.reject(error))\n        }\n      },\n      {\n        interval: pollingInterval,\n        emitOnBegin: true,\n      },\n    )\n\n    return unpoll\n  })\n\n  timer = timeout\n    ? setTimeout(() => {\n        unobserve()\n        clearTimeout(timer)\n        reject(new WaitForCallsStatusTimeoutError({ id }))\n      }, timeout)\n    : undefined\n\n  return await promise\n}\n\nexport type WaitForCallsStatusTimeoutErrorType =\n  WaitForCallsStatusTimeoutError & {\n    name: 'WaitForCallsStatusTimeoutError'\n  }\nexport class WaitForCallsStatusTimeoutError extends BaseError {\n  constructor({ id }: { id: string }) {\n    super(\n      `Timed out while waiting for call bundle with id \"${id}\" to be confirmed.`,\n      { name: 'WaitForCallsStatusTimeoutError' },\n    )\n  }\n}\n", "const size = 256\nlet index = size\nlet buffer: string\n\nexport function uid(length = 11) {\n  if (!buffer || index + length > size * 2) {\n    buffer = ''\n    index = 0\n    for (let i = 0; i < size; i++) {\n      buffer += ((256 + Math.random() * 256) | 0).toString(16).substring(1)\n    }\n  }\n  return buffer.substring(index, index++ + length)\n}\n", "import type { Address } from 'abitype'\n\nimport type { JsonRpcAccount } from '../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../accounts/utils/parseAccount.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { Account } from '../types/account.js'\nimport type { BlockTag } from '../types/block.js'\nimport type { Chain } from '../types/chain.js'\nimport type {\n  EIP1193RequestFn,\n  EIP1474Methods,\n  RpcSchema,\n} from '../types/eip1193.js'\nimport type { ExactPartial, Prettify } from '../types/utils.js'\nimport type {\n  CcipRequestParameters,\n  CcipRequestReturnType,\n} from '../utils/ccip.js'\nimport { uid } from '../utils/uid.js'\nimport type { PublicActions } from './decorators/public.js'\nimport type { WalletActions } from './decorators/wallet.js'\nimport type { Transport } from './transports/createTransport.js'\n\nexport type ClientConfig<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  accountOrAddress extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = {\n  /** The Account to use for the Client. This will be used for Actions that require an account as an argument. */\n  account?: accountOrAddress | Account | Address | undefined\n  /** Flags for batch settings. */\n  batch?:\n    | {\n        /** Toggle to enable `eth_call` multicall aggregation. */\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined\n      }\n    | undefined\n  /**\n   * Default block tag to use for RPC requests.\n   *\n   * If the chain supports a pre-confirmation mechanism\n   * (set via `chain.experimental_preconfirmationTime`), defaults to `'pending'`.\n   *\n   * @default 'latest'\n   */\n  experimental_blockTag?: BlockTag | undefined\n  /**\n   * Time (in ms) that cached data will remain in memory.\n   * @default chain.blockTime / 3\n   */\n  cacheTime?: number | undefined\n  /**\n   * [CCIP Read](https://eips.ethereum.org/EIPS/eip-3668) configuration.\n   * If `false`, the client will not support offchain CCIP lookups.\n   */\n  ccipRead?:\n    | {\n        /**\n         * A function that will be called to make the offchain CCIP lookup request.\n         * @see https://eips.ethereum.org/EIPS/eip-3668#client-lookup-protocol\n         */\n        request?: (\n          parameters: CcipRequestParameters,\n        ) => Promise<CcipRequestReturnType>\n      }\n    | false\n    | undefined\n  /** Chain for the client. */\n  chain?: Chain | undefined | chain\n  /** A key for the client. */\n  key?: string | undefined\n  /** A name for the client. */\n  name?: string | undefined\n  /**\n   * Frequency (in ms) for polling enabled actions & events.\n   * @default chain.blockTime / 3\n   */\n  pollingInterval?: number | undefined\n  /**\n   * Typed JSON-RPC schema for the client.\n   */\n  rpcSchema?: rpcSchema | undefined\n  /** The RPC transport */\n  transport: transport\n  /** The type of client. */\n  type?: string | undefined\n}\n\n// Actions that are used internally by other Actions (ie. `call` is used by `readContract`).\n// They are allowed to be extended, but must conform to their parameter & return type interfaces.\n// Example: an extended `call` action must accept `CallParameters` as parameters,\n// and conform to the `CallReturnType` return type.\ntype ExtendableProtectedActions<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n> = Pick<\n  PublicActions<transport, chain, account>,\n  | 'call'\n  | 'createContractEventFilter'\n  | 'createEventFilter'\n  | 'estimateContractGas'\n  | 'estimateGas'\n  | 'getBlock'\n  | 'getBlockNumber'\n  | 'getChainId'\n  | 'getContractEvents'\n  | 'getEnsText'\n  | 'getFilterChanges'\n  | 'getGasPrice'\n  | 'getLogs'\n  | 'getTransaction'\n  | 'getTransactionCount'\n  | 'getTransactionReceipt'\n  | 'prepareTransactionRequest'\n  | 'readContract'\n  | 'sendRawTransaction'\n  | 'simulateContract'\n  | 'uninstallFilter'\n  | 'watchBlockNumber'\n  | 'watchContractEvent'\n> &\n  Pick<WalletActions<chain, account>, 'sendTransaction' | 'writeContract'>\n\n// TODO: Move `transport` to slot index 2 since `chain` and `account` used more frequently.\n// Otherwise, we end up with a lot of `Client<Transport, chain, account>` in actions.\nexport type Client<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n  extended extends Extended | undefined = Extended | undefined,\n> = Client_Base<transport, chain, account, rpcSchema> &\n  (extended extends Extended ? extended : unknown) & {\n    extend: <\n      const client extends Extended &\n        ExactPartial<ExtendableProtectedActions<transport, chain, account>>,\n    >(\n      fn: (\n        client: Client<transport, chain, account, rpcSchema, extended>,\n      ) => client,\n    ) => Client<\n      transport,\n      chain,\n      account,\n      rpcSchema,\n      Prettify<client> & (extended extends Extended ? extended : unknown)\n    >\n  }\n\ntype Client_Base<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = {\n  /** The Account of the Client. */\n  account: account\n  /** Flags for batch settings. */\n  batch?: ClientConfig['batch'] | undefined\n  /** Time (in ms) that cached data will remain in memory. */\n  cacheTime: number\n  /** [CCIP Read](https://eips.ethereum.org/EIPS/eip-3668) configuration. */\n  ccipRead?: ClientConfig['ccipRead'] | undefined\n  /** Chain for the client. */\n  chain: chain\n  /** Default block tag to use for RPC requests. */\n  experimental_blockTag?: BlockTag | undefined\n  /** A key for the client. */\n  key: string\n  /** A name for the client. */\n  name: string\n  /** Frequency (in ms) for polling enabled actions & events. Defaults to 4_000 milliseconds. */\n  pollingInterval: number\n  /** Request function wrapped with friendly error handling */\n  request: EIP1193RequestFn<\n    rpcSchema extends undefined ? EIP1474Methods : rpcSchema\n  >\n  /** The RPC transport */\n  transport: ReturnType<transport>['config'] & ReturnType<transport>['value']\n  /** The type of client. */\n  type: string\n  /** A unique ID for the client. */\n  uid: string\n}\n\ntype Extended = Prettify<\n  // disallow redefining base properties\n  { [_ in keyof Client_Base]?: undefined } & {\n    [key: string]: unknown\n  }\n>\n\nexport type MulticallBatchOptions = {\n  /** The maximum size (in bytes) for each calldata chunk. @default 1_024 */\n  batchSize?: number | undefined\n  /** Enable deployless multicall. */\n  deployless?: boolean | undefined\n  /** The maximum number of milliseconds to wait before sending a batch. @default 0 */\n  wait?: number | undefined\n}\n\nexport type CreateClientErrorType = ParseAccountErrorType | ErrorType\n\nexport function createClient<\n  transport extends Transport,\n  chain extends Chain | undefined = undefined,\n  accountOrAddress extends Account | Address | undefined = undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n>(\n  parameters: ClientConfig<transport, chain, accountOrAddress, rpcSchema>,\n): Prettify<\n  Client<\n    transport,\n    chain,\n    accountOrAddress extends Address\n      ? Prettify<JsonRpcAccount<accountOrAddress>>\n      : accountOrAddress,\n    rpcSchema\n  >\n>\n\nexport function createClient(parameters: ClientConfig): Client {\n  const {\n    batch,\n    chain,\n    ccipRead,\n    key = 'base',\n    name = 'Base Client',\n    type = 'base',\n  } = parameters\n\n  const experimental_blockTag =\n    parameters.experimental_blockTag ??\n    (typeof chain?.experimental_preconfirmationTime === 'number'\n      ? 'pending'\n      : undefined)\n  const blockTime = chain?.blockTime ?? 12_000\n\n  const defaultPollingInterval = Math.min(\n    Math.max(Math.floor(blockTime / 2), 500),\n    4_000,\n  )\n  const pollingInterval = parameters.pollingInterval ?? defaultPollingInterval\n  const cacheTime = parameters.cacheTime ?? pollingInterval\n\n  const account = parameters.account\n    ? parseAccount(parameters.account)\n    : undefined\n  const { config, request, value } = parameters.transport({\n    chain,\n    pollingInterval,\n  })\n  const transport = { ...config, ...value }\n\n  const client = {\n    account,\n    batch,\n    cacheTime,\n    ccipRead,\n    chain,\n    key,\n    name,\n    pollingInterval,\n    request,\n    transport,\n    type,\n    uid: uid(),\n    ...(experimental_blockTag ? { experimental_blockTag } : {}),\n  }\n\n  function extend(base: typeof client) {\n    type ExtendFn = (base: typeof client) => unknown\n    return (extendFn: ExtendFn) => {\n      const extended = extendFn(base) as Extended\n      for (const key in client) delete extended[key]\n      const combined = { ...base, ...extended }\n      return Object.assign(combined, { extend: extend(combined as any) })\n    }\n  }\n\n  return Object.assign(client, { extend: extend(client) as any })\n}\n\n/**\n * Defines a typed JSON-RPC schema for the client.\n * Note: This is a runtime noop function.\n */\nexport function rpcSchema<rpcSchema extends RpcSchema>(): rpcSchema {\n  return null as any\n}\n", "import { BaseError } from '../../errors/base.js'\nimport { ContractFunctionRevertedError } from '../../errors/contract.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\n/** @internal */\nexport type IsNullUniversalResolverErrorErrorType = ErrorType\n\n/*\n * @description Checks if error is a valid null result UniversalResolver error\n */\nexport function isNullUniversalResolverError(err: unknown): boolean {\n  if (!(err instanceof BaseError)) return false\n  const cause = err.walk((e) => e instanceof ContractFunctionRevertedError)\n  if (!(cause instanceof ContractFunctionRevertedError)) return false\n\n  if (cause.data?.errorName === 'HttpError') return true\n  if (cause.data?.errorName === 'ResolverError') return true\n  if (cause.data?.errorName === 'ResolverNotContract') return true\n  if (cause.data?.errorName === 'ResolverNotFound') return true\n  if (cause.data?.errorName === 'ReverseAddressMismatch') return true\n  if (cause.data?.errorName === 'UnsupportedResolverProfile') return true\n\n  return false\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\n\nexport type EncodedLabelToLabelhashErrorType = IsHexErrorType | ErrorType\n\nexport function encodedLabelToLabelhash(label: string): Hex | null {\n  if (label.length !== 66) return null\n  if (label.indexOf('[') !== 0) return null\n  if (label.indexOf(']') !== 65) return null\n  const hash = `0x${label.slice(1, 65)}`\n  if (!isHex(hash)) return null\n  return hash\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray } from '../../types/misc.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport {\n  type StringToBytesErrorType,\n  stringToBytes,\n  type ToBytesErrorType,\n  toBytes,\n} from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport {\n  type EncodedLabelToLabelhashErrorType,\n  encodedLabelToLabelhash,\n} from './encodedLabelToLabelhash.js'\n\nexport type NamehashErrorType =\n  | BytesToHexErrorType\n  | EncodedLabelToLabelhashErrorType\n  | ToBytesErrorType\n  | Keccak256ErrorType\n  | StringToBytesErrorType\n  | ConcatErrorType\n  | ErrorType\n\n/**\n * @description Hashes ENS name\n *\n * - Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `namehash`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @example\n * namehash('wevm.eth')\n * '0x08c85f2f4059e930c45a6aeff9dcd3bd95dc3c5c1cddef6a0626b31152248560'\n *\n * @link https://eips.ethereum.org/EIPS/eip-137\n */\nexport function namehash(name: string) {\n  let result = new Uint8Array(32).fill(0) as ByteArray\n  if (!name) return bytesToHex(result)\n\n  const labels = name.split('.')\n  // Iterate in reverse order building up hash\n  for (let i = labels.length - 1; i >= 0; i -= 1) {\n    const hashFromEncodedLabel = encodedLabelToLabelhash(labels[i])\n    const hashed = hashFromEncodedLabel\n      ? toBytes(hashFromEncodedLabel)\n      : keccak256(stringToBytes(labels[i]), 'bytes')\n    result = keccak256(concat([result, hashed]), 'bytes')\n  }\n\n  return bytesToHex(result)\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\n\nexport type EncodeLabelhashErrorType = ErrorType\n\nexport function encodeLabelhash(hash: Hex): `[${string}]` {\n  return `[${hash.slice(2)}]`\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport {\n  type StringToBytesErrorType,\n  stringToBytes,\n} from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport {\n  type EncodedLabelToLabelhashErrorType,\n  encodedLabelToLabelhash,\n} from './encodedLabelToLabelhash.js'\n\nexport type LabelhashErrorType =\n  | BytesToHexErrorType\n  | EncodedLabelToLabelhashErrorType\n  | Keccak256ErrorType\n  | StringToBytesErrorType\n  | ErrorType\n\n/**\n * @description Hashes ENS label\n *\n * - Since ENS labels prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS labels](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `labelhash`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @example\n * labelhash('eth')\n * '0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0'\n */\nexport function labelhash(label: string) {\n  const result = new Uint8Array(32).fill(0)\n  if (!label) return bytesToHex(result)\n  return encodedLabelToLabelhash(label) || keccak256(stringToBytes(label))\n}\n", "// Adapted from https://github.com/mafintosh/dns-packet\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray } from '../../types/misc.js'\nimport {\n  type StringToBytesErrorType,\n  stringToBytes,\n} from '../encoding/toBytes.js'\nimport {\n  type EncodeLabelhashErrorType,\n  encodeLabelhash,\n} from './encodeLabelhash.js'\nimport { type LabelhashErrorType, labelhash } from './labelhash.js'\n\nexport type PacketToBytesErrorType =\n  | EncodeLabelhashErrorType\n  | LabelhashErrorType\n  | StringToBytesErrorType\n  | ErrorType\n\n/*\n * @description Encodes a DNS packet into a ByteArray containing a UDP payload.\n *\n * @example\n * packetToBytes('awkweb.eth')\n * '0x0661776b7765620365746800'\n *\n * @see https://docs.ens.domains/resolution/names#dns\n *\n */\nexport function packetToBytes(packet: string): ByteArray {\n  // strip leading and trailing `.`\n  const value = packet.replace(/^\\.|\\.$/gm, '')\n  if (value.length === 0) return new Uint8Array(1)\n\n  const bytes = new Uint8Array(stringToBytes(value).byteLength + 2)\n\n  let offset = 0\n  const list = value.split('.')\n  for (let i = 0; i < list.length; i++) {\n    let encoded = stringToBytes(list[i])\n    // if the length is > 255, make the encoded label value a labelhash\n    // this is compatible with the universal resolver\n    if (encoded.byteLength > 255)\n      encoded = stringToBytes(encodeLabelhash(labelhash(list[i])))\n    bytes[offset] = encoded.length\n    bytes.set(encoded, offset + 1)\n    offset += encoded.length + 1\n  }\n\n  if (bytes.byteLength !== offset + 1) return bytes.slice(0, offset + 1)\n\n  return bytes\n}\n", "import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  addressResolverAbi,\n  universalResolverResolveAbi,\n} from '../../constants/abis.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport { type TrimErrorType, trim } from '../../utils/data/trim.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\nimport { localBatchGatewayUrl } from '../../utils/ens/localBatchGatewayRequest.js'\nimport { type NamehashErrorType, namehash } from '../../utils/ens/namehash.js'\nimport {\n  type PacketToBytesErrorType,\n  packetToBytes,\n} from '../../utils/ens/packetToBytes.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsAddressParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /**\n     * ENSIP-9 compliant coinType (chain) to get ENS address for.\n     *\n     * To get the `coinType` for a chain id, use the `toCoinType` function:\n     * ```ts\n     * import { toCoinType } from 'viem'\n     * import { base } from 'viem/chains'\n     *\n     * const coinType = toCoinType(base.id)\n     * ```\n     *\n     * @default 60n\n     */\n    coinType?: bigint | undefined\n    /**\n     * Universal Resolver gateway URLs to use for resolving CCIP-read requests.\n     */\n    gatewayUrls?: string[] | undefined\n    /**\n     * Name to get the address for.\n     */\n    name: string\n    /**\n     * Whether or not to throw errors propagated from the ENS Universal Resolver Contract.\n     */\n    strict?: boolean | undefined\n    /**\n     * Address of ENS Universal Resolver Contract.\n     */\n    universalResolverAddress?: Address | undefined\n  }\n>\n\nexport type GetEnsAddressReturnType = Address | null\n\nexport type GetEnsAddressErrorType =\n  | GetChainContractAddressErrorType\n  | EncodeFunctionDataErrorType\n  | NamehashErrorType\n  | ToHexErrorType\n  | PacketToBytesErrorType\n  | DecodeFunctionResultErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Gets address for ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsAddress\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsAddressParameters}\n * @returns Address for ENS name or `null` if not found. {@link GetEnsAddressReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsAddress, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensAddress = await getEnsAddress(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // '0xd2135CfB216b74109775236E36d4b433F1DF507B'\n */\nexport async function getEnsAddress<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  parameters: GetEnsAddressParameters,\n): Promise<GetEnsAddressReturnType> {\n  const { blockNumber, blockTag, coinType, name, gatewayUrls, strict } =\n    parameters\n  const { chain } = client\n\n  const universalResolverAddress = (() => {\n    if (parameters.universalResolverAddress)\n      return parameters.universalResolverAddress\n    if (!chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n    return getChainContractAddress({\n      blockNumber,\n      chain,\n      contract: 'ensUniversalResolver',\n    })\n  })()\n\n  const tlds = chain?.ensTlds\n  if (tlds && !tlds.some((tld) => name.endsWith(tld))) return null\n\n  const args = (() => {\n    if (coinType != null) return [namehash(name), BigInt(coinType)] as const\n    return [namehash(name)] as const\n  })()\n\n  try {\n    const functionData = encodeFunctionData({\n      abi: addressResolverAbi,\n      functionName: 'addr',\n      args,\n    })\n\n    const readContractParameters = {\n      address: universalResolverAddress,\n      abi: universalResolverResolveAbi,\n      functionName: 'resolveWithGateways',\n      args: [\n        toHex(packetToBytes(name)),\n        functionData,\n        gatewayUrls ?? [localBatchGatewayUrl],\n      ],\n      blockNumber,\n      blockTag,\n    } as const\n\n    const readContractAction = getAction(client, readContract, 'readContract')\n\n    const res = await readContractAction(readContractParameters)\n\n    if (res[0] === '0x') return null\n\n    const address = decodeFunctionResult({\n      abi: addressResolverAbi,\n      args,\n      functionName: 'addr',\n      data: res[0],\n    })\n\n    if (address === '0x') return null\n    if (trim(address) === '0x00') return null\n    return address\n  } catch (err) {\n    if (strict) throw err\n    if (isNullUniversalResolverError(err)) return null\n    throw err\n  }\n}\n", "import { BaseError } from './base.js'\n\nexport type EnsAvatarInvalidMetadataErrorType =\n  EnsAvatarInvalidMetadataError & {\n    name: 'EnsAvatarInvalidMetadataError'\n  }\nexport class EnsAvatarInvalidMetadataError extends BaseError {\n  constructor({ data }: { data: any }) {\n    super(\n      'Unable to extract image from metadata. The metadata may be malformed or invalid.',\n      {\n        metaMessages: [\n          '- Metadata must be a JSON object with at least an `image`, `image_url` or `image_data` property.',\n          '',\n          `Provided data: ${JSON.stringify(data)}`,\n        ],\n        name: 'EnsAvatarInvalidMetadataError',\n      },\n    )\n  }\n}\n\nexport type EnsAvatarInvalidNftUriErrorType = EnsAvatarInvalidNftUriError & {\n  name: 'EnsAvatarInvalidNftUriError'\n}\nexport class EnsAvatarInvalidNftUriError extends BaseError {\n  constructor({ reason }: { reason: string }) {\n    super(`ENS NFT avatar URI is invalid. ${reason}`, {\n      name: 'EnsAvatarInvalidNftUriError',\n    })\n  }\n}\n\nexport type EnsAvatarUriResolutionErrorType = EnsAvatarUriResolutionError & {\n  name: 'EnsAvatarUriResolutionError'\n}\nexport class EnsAvatarUriResolutionError extends BaseError {\n  constructor({ uri }: { uri: string }) {\n    super(\n      `Unable to resolve ENS avatar URI \"${uri}\". The URI may be malformed, invalid, or does not respond with a valid image.`,\n      { name: 'EnsAvatarUriResolutionError' },\n    )\n  }\n}\n\nexport type EnsAvatarUnsupportedNamespaceErrorType =\n  EnsAvatarUnsupportedNamespaceError & {\n    name: 'EnsAvatarUnsupportedNamespaceError'\n  }\nexport class EnsAvatarUnsupportedNamespaceError extends BaseError {\n  constructor({ namespace }: { namespace: string }) {\n    super(\n      `ENS NFT avatar namespace \"${namespace}\" is not supported. Must be \"erc721\" or \"erc1155\".`,\n      { name: 'EnsAvatarUnsupportedNamespaceError' },\n    )\n  }\n}\n\nexport type EnsInvalidChainIdErrorType = EnsInvalidChainIdError & {\n  name: 'EnsInvalidChainIdError'\n}\nexport class EnsInvalidChainIdError extends BaseError {\n  constructor({ chainId }: { chainId: number }) {\n    super(\n      `Invalid ENSIP-11 chainId: ${chainId}. Must be between 0 and 0x7fffffff, or 1.`,\n      {\n        name: 'EnsInvalidChainIdError',\n      },\n    )\n  }\n}\n", "import type { Address } from 'abitype'\n\nimport {\n  type ReadContractErrorType,\n  readContract,\n} from '../../../actions/public/readContract.js'\nimport type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport {\n  EnsAvatarInvalidMetadataError,\n  type EnsAvatarInvalidMetadataErrorType,\n  EnsAvatarInvalidNftUriError,\n  type EnsAvatarInvalidNftUriErrorType,\n  EnsAvatarUnsupportedNamespaceError,\n  type EnsAvatarUnsupportedNamespaceErrorType,\n  EnsAvatarUriResolutionError,\n  type EnsAvatarUriResolutionErrorType,\n} from '../../../errors/ens.js'\nimport type { ErrorType } from '../../../errors/utils.js'\nimport type { Chain } from '../../../types/chain.js'\nimport type { AssetGatewayUrls } from '../../../types/ens.js'\n\ntype UriItem = {\n  uri: string\n  isOnChain: boolean\n  isEncoded: boolean\n}\n\nconst networkRegex =\n  /(?<protocol>https?:\\/\\/[^/]*|ipfs:\\/|ipns:\\/|ar:\\/)?(?<root>\\/)?(?<subpath>ipfs\\/|ipns\\/)?(?<target>[\\w\\-.]+)(?<subtarget>\\/.*)?/\nconst ipfsHashRegex =\n  /^(Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})(\\/(?<target>[\\w\\-.]+))?(?<subtarget>\\/.*)?$/\nconst base64Regex = /^data:([a-zA-Z\\-/+]*);base64,([^\"].*)/\nconst dataURIRegex = /^data:([a-zA-Z\\-/+]*)?(;[a-zA-Z0-9].*?)?(,)/\n\ntype IsImageUriErrorType = ErrorType\n\n/** @internal */\nexport async function isImageUri(uri: string) {\n  try {\n    const res = await fetch(uri, { method: 'HEAD' })\n    // retrieve content type header to check if content is image\n    if (res.status === 200) {\n      const contentType = res.headers.get('content-type')\n      return contentType?.startsWith('image/')\n    }\n    return false\n  } catch (error: any) {\n    // if error is not cors related then fail\n    if (typeof error === 'object' && typeof error.response !== 'undefined') {\n      return false\n    }\n    // fail in NodeJS, since the error is not cors but any other network issue\n    if (!Object.hasOwn(globalThis, 'Image')) return false\n    // in case of cors, use image api to validate if given url is an actual image\n    return new Promise((resolve) => {\n      const img = new Image()\n      img.onload = () => {\n        resolve(true)\n      }\n      img.onerror = () => {\n        resolve(false)\n      }\n      img.src = uri\n    })\n  }\n}\n\ntype GetGatewayErrorType = ErrorType\n\n/** @internal */\nexport function getGateway(custom: string | undefined, defaultGateway: string) {\n  if (!custom) return defaultGateway\n  if (custom.endsWith('/')) return custom.slice(0, -1)\n  return custom\n}\n\nexport type ResolveAvatarUriErrorType =\n  | GetGatewayErrorType\n  | EnsAvatarUriResolutionErrorType\n  | ErrorType\n\nexport function resolveAvatarUri({\n  uri,\n  gatewayUrls,\n}: {\n  uri: string\n  gatewayUrls?: AssetGatewayUrls | undefined\n}): UriItem {\n  const isEncoded = base64Regex.test(uri)\n  if (isEncoded) return { uri, isOnChain: true, isEncoded }\n\n  const ipfsGateway = getGateway(gatewayUrls?.ipfs, 'https://ipfs.io')\n  const arweaveGateway = getGateway(gatewayUrls?.arweave, 'https://arweave.net')\n\n  const networkRegexMatch = uri.match(networkRegex)\n  const {\n    protocol,\n    subpath,\n    target,\n    subtarget = '',\n  } = networkRegexMatch?.groups || {}\n\n  const isIPNS = protocol === 'ipns:/' || subpath === 'ipns/'\n  const isIPFS =\n    protocol === 'ipfs:/' || subpath === 'ipfs/' || ipfsHashRegex.test(uri)\n\n  if (uri.startsWith('http') && !isIPNS && !isIPFS) {\n    let replacedUri = uri\n    if (gatewayUrls?.arweave)\n      replacedUri = uri.replace(/https:\\/\\/arweave.net/g, gatewayUrls?.arweave)\n    return { uri: replacedUri, isOnChain: false, isEncoded: false }\n  }\n\n  if ((isIPNS || isIPFS) && target) {\n    return {\n      uri: `${ipfsGateway}/${isIPNS ? 'ipns' : 'ipfs'}/${target}${subtarget}`,\n      isOnChain: false,\n      isEncoded: false,\n    }\n  }\n\n  if (protocol === 'ar:/' && target) {\n    return {\n      uri: `${arweaveGateway}/${target}${subtarget || ''}`,\n      isOnChain: false,\n      isEncoded: false,\n    }\n  }\n\n  let parsedUri = uri.replace(dataURIRegex, '')\n  if (parsedUri.startsWith('<svg')) {\n    // if svg, base64 encode\n    parsedUri = `data:image/svg+xml;base64,${btoa(parsedUri)}`\n  }\n\n  if (parsedUri.startsWith('data:') || parsedUri.startsWith('{')) {\n    return {\n      uri: parsedUri,\n      isOnChain: true,\n      isEncoded: false,\n    }\n  }\n\n  throw new EnsAvatarUriResolutionError({ uri })\n}\n\nexport type GetJsonImageErrorType =\n  | EnsAvatarInvalidMetadataErrorType\n  | ErrorType\n\nexport function getJsonImage(data: any) {\n  // validation check for json data, must include one of theses properties\n  if (\n    typeof data !== 'object' ||\n    (!('image' in data) && !('image_url' in data) && !('image_data' in data))\n  ) {\n    throw new EnsAvatarInvalidMetadataError({ data })\n  }\n\n  return data.image || data.image_url || data.image_data\n}\n\nexport type GetMetadataAvatarUriErrorType =\n  | EnsAvatarUriResolutionErrorType\n  | ParseAvatarUriErrorType\n  | GetJsonImageErrorType\n  | ErrorType\n\nexport async function getMetadataAvatarUri({\n  gatewayUrls,\n  uri,\n}: {\n  gatewayUrls?: AssetGatewayUrls | undefined\n  uri: string\n}): Promise<string> {\n  try {\n    const res = await fetch(uri).then((res) => res.json())\n    const image = await parseAvatarUri({\n      gatewayUrls,\n      uri: getJsonImage(res),\n    })\n    return image\n  } catch {\n    throw new EnsAvatarUriResolutionError({ uri })\n  }\n}\n\nexport type ParseAvatarUriErrorType =\n  | ResolveAvatarUriErrorType\n  | IsImageUriErrorType\n  | EnsAvatarUriResolutionErrorType\n  | ErrorType\n\nexport async function parseAvatarUri({\n  gatewayUrls,\n  uri,\n}: {\n  gatewayUrls?: AssetGatewayUrls | undefined\n  uri: string\n}): Promise<string> {\n  const { uri: resolvedURI, isOnChain } = resolveAvatarUri({ uri, gatewayUrls })\n  if (isOnChain) return resolvedURI\n\n  // check if resolvedURI is an image, if it is return the url\n  const isImage = await isImageUri(resolvedURI)\n  if (isImage) return resolvedURI\n\n  throw new EnsAvatarUriResolutionError({ uri })\n}\n\ntype ParsedNft = {\n  chainID: number\n  namespace: string\n  contractAddress: Address\n  tokenID: string\n}\n\nexport type ParseNftUriErrorType = EnsAvatarInvalidNftUriErrorType | ErrorType\n\nexport function parseNftUri(uri_: string): ParsedNft {\n  let uri = uri_\n  // parse valid nft spec (CAIP-22/CAIP-29)\n  // @see: https://github.com/ChainAgnostic/CAIPs/tree/master/CAIPs\n  if (uri.startsWith('did:nft:')) {\n    // convert DID to CAIP\n    uri = uri.replace('did:nft:', '').replace(/_/g, '/')\n  }\n\n  const [reference, asset_namespace, tokenID] = uri.split('/')\n  const [eip_namespace, chainID] = reference.split(':')\n  const [erc_namespace, contractAddress] = asset_namespace.split(':')\n\n  if (!eip_namespace || eip_namespace.toLowerCase() !== 'eip155')\n    throw new EnsAvatarInvalidNftUriError({ reason: 'Only EIP-155 supported' })\n  if (!chainID)\n    throw new EnsAvatarInvalidNftUriError({ reason: 'Chain ID not found' })\n  if (!contractAddress)\n    throw new EnsAvatarInvalidNftUriError({\n      reason: 'Contract address not found',\n    })\n  if (!tokenID)\n    throw new EnsAvatarInvalidNftUriError({ reason: 'Token ID not found' })\n  if (!erc_namespace)\n    throw new EnsAvatarInvalidNftUriError({ reason: 'ERC namespace not found' })\n\n  return {\n    chainID: Number.parseInt(chainID, 10),\n    namespace: erc_namespace.toLowerCase(),\n    contractAddress: contractAddress as Address,\n    tokenID,\n  }\n}\n\nexport type GetNftTokenUriErrorType =\n  | ReadContractErrorType\n  | EnsAvatarUnsupportedNamespaceErrorType\n  | ErrorType\n\nexport async function getNftTokenUri<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  { nft }: { nft: ParsedNft },\n) {\n  if (nft.namespace === 'erc721') {\n    return readContract(client, {\n      address: nft.contractAddress,\n      abi: [\n        {\n          name: 'tokenURI',\n          type: 'function',\n          stateMutability: 'view',\n          inputs: [{ name: 'tokenId', type: 'uint256' }],\n          outputs: [{ name: '', type: 'string' }],\n        },\n      ],\n      functionName: 'tokenURI',\n      args: [BigInt(nft.tokenID)],\n    })\n  }\n  if (nft.namespace === 'erc1155') {\n    return readContract(client, {\n      address: nft.contractAddress,\n      abi: [\n        {\n          name: 'uri',\n          type: 'function',\n          stateMutability: 'view',\n          inputs: [{ name: '_id', type: 'uint256' }],\n          outputs: [{ name: '', type: 'string' }],\n        },\n      ],\n      functionName: 'uri',\n      args: [BigInt(nft.tokenID)],\n    })\n  }\n  throw new EnsAvatarUnsupportedNamespaceError({ namespace: nft.namespace })\n}\n", "import type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../../errors/utils.js'\nimport type { Chain } from '../../../types/chain.js'\nimport type { AssetGatewayUrls } from '../../../types/ens.js'\n\nimport {\n  type GetJsonImageErrorType,\n  type GetMetadataAvatarUriErrorType,\n  type GetNftTokenUriErrorType,\n  getJsonImage,\n  getMetadataAvatarUri,\n  getNftTokenUri,\n  type ParseAvatarUriErrorType,\n  type ParseNftUriErrorType,\n  parseAvatarUri,\n  parseNftUri,\n  type ResolveAvatarUriErrorType,\n  resolveAvatarUri,\n} from './utils.js'\n\nexport type ParseAvatarRecordErrorType =\n  | ParseNftAvatarUriErrorType\n  | ParseAvatarUriErrorType\n  | ErrorType\n\n/*\n * @description Parses an ENS avatar record.\n *\n * @example\n * parseAvatarRecord('eip155:1/erc1155:0xb32979486938aa9694bfc898f35dbed459f44424/10063')\n * 'https://ipfs.io/ipfs/QmSP4nq9fnN9dAiCj42ug9Wa79rqmQerZXZch82VqpiH7U/image.gif'\n *\n * @see https://docs.ens.domains/web/avatars\n *\n */\nexport async function parseAvatarRecord<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    gatewayUrls,\n    record,\n  }: {\n    gatewayUrls?: AssetGatewayUrls | undefined\n    record: string\n  },\n): Promise<string> {\n  if (/eip155:/i.test(record))\n    return parseNftAvatarUri(client, { gatewayUrls, record })\n  return parseAvatarUri({ uri: record, gatewayUrls })\n}\n\ntype ParseNftAvatarUriErrorType =\n  | ParseNftUriErrorType\n  | GetNftTokenUriErrorType\n  | ResolveAvatarUriErrorType\n  | ParseAvatarUriErrorType\n  | GetJsonImageErrorType\n  | GetMetadataAvatarUriErrorType\n  | ErrorType\n\nasync function parseNftAvatarUri<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    gatewayUrls,\n    record,\n  }: {\n    gatewayUrls?: AssetGatewayUrls | undefined\n    record: string\n  },\n): Promise<string> {\n  // parse NFT URI into properties\n  const nft = parseNftUri(record)\n  // fetch tokenURI from the NFT contract\n  const nftUri = await getNftTokenUri(client, { nft })\n  // resolve the URI from the fetched tokenURI\n  const {\n    uri: resolvedNftUri,\n    isOnChain,\n    isEncoded,\n  } = resolveAvatarUri({ uri: nftUri, gatewayUrls })\n\n  // if the resolved URI is on chain, return the data\n  if (\n    isOnChain &&\n    (resolvedNftUri.includes('data:application/json;base64,') ||\n      resolvedNftUri.startsWith('{'))\n  ) {\n    const encodedJson = isEncoded\n      ? // if it is encoded, decode it\n        atob(resolvedNftUri.replace('data:application/json;base64,', ''))\n      : // if it isn't encoded assume it is a JSON string, but it could be anything (it will error if it is)\n        resolvedNftUri\n\n    const decoded = JSON.parse(encodedJson)\n    return parseAvatarUri({ uri: getJsonImage(decoded), gatewayUrls })\n  }\n\n  let uriTokenId = nft.tokenID\n  if (nft.namespace === 'erc1155')\n    uriTokenId = uriTokenId.replace('0x', '').padStart(64, '0')\n\n  return getMetadataAvatarUri({\n    gatewayUrls,\n    uri: resolvedNftUri.replace(/(?:0x)?{id}/, uriTokenId),\n  })\n}\n", "import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  textResolverAbi,\n  universalResolverResolveAbi,\n} from '../../constants/abis.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\nimport { localBatchGatewayUrl } from '../../utils/ens/localBatchGatewayRequest.js'\nimport { type NamehashErrorType, namehash } from '../../utils/ens/namehash.js'\nimport {\n  type PacketToBytesErrorType,\n  packetToBytes,\n} from '../../utils/ens/packetToBytes.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractErrorType,\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsTextParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /** ENS name to get Text for. */\n    name: string\n    /** Universal Resolver gateway URLs to use for resolving CCIP-read requests. */\n    gatewayUrls?: string[] | undefined\n    /** Text record to retrieve. */\n    key: string\n    /** Whether or not to throw errors propagated from the ENS Universal Resolver Contract. */\n    strict?: boolean | undefined\n    /** Address of ENS Universal Resolver Contract. */\n    universalResolverAddress?: Address | undefined\n  }\n>\n\nexport type GetEnsTextReturnType = string | null\n\nexport type GetEnsTextErrorType =\n  | GetChainContractAddressErrorType\n  | ReadContractErrorType\n  | ToHexErrorType\n  | PacketToBytesErrorType\n  | EncodeFunctionDataErrorType\n  | NamehashErrorType\n  | DecodeFunctionResultErrorType\n\n/**\n * Gets a text record for specified ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsTextParameters}\n * @returns Address for ENS resolver. {@link GetEnsTextReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsText, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const twitterRecord = await getEnsText(client, {\n *   name: normalize('wevm.eth'),\n *   key: 'com.twitter',\n * })\n * // 'wevm_dev'\n */\nexport async function getEnsText<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  parameters: GetEnsTextParameters,\n): Promise<GetEnsTextReturnType> {\n  const { blockNumber, blockTag, key, name, gatewayUrls, strict } = parameters\n  const { chain } = client\n\n  const universalResolverAddress = (() => {\n    if (parameters.universalResolverAddress)\n      return parameters.universalResolverAddress\n    if (!chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n    return getChainContractAddress({\n      blockNumber,\n      chain,\n      contract: 'ensUniversalResolver',\n    })\n  })()\n\n  const tlds = chain?.ensTlds\n  if (tlds && !tlds.some((tld) => name.endsWith(tld))) return null\n\n  try {\n    const readContractParameters = {\n      address: universalResolverAddress,\n      abi: universalResolverResolveAbi,\n      args: [\n        toHex(packetToBytes(name)),\n        encodeFunctionData({\n          abi: textResolverAbi,\n          functionName: 'text',\n          args: [namehash(name), key],\n        }),\n        gatewayUrls ?? [localBatchGatewayUrl],\n      ],\n      functionName: 'resolveWithGateways',\n      blockNumber,\n      blockTag,\n    } as const\n\n    const readContractAction = getAction(client, readContract, 'readContract')\n\n    const res = await readContractAction(readContractParameters)\n\n    if (res[0] === '0x') return null\n\n    const record = decodeFunctionResult({\n      abi: textResolverAbi,\n      functionName: 'text',\n      data: res[0],\n    })\n\n    return record === '' ? null : record\n  } catch (err) {\n    if (strict) throw err\n    if (isNullUniversalResolverError(err)) return null\n    throw err\n  }\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { AssetGatewayUrls } from '../../types/ens.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type ParseAvatarRecordErrorType,\n  parseAvatarRecord,\n} from '../../utils/ens/avatar/parseAvatarRecord.js'\nimport { getAction } from '../../utils/getAction.js'\n\nimport {\n  type GetEnsTextErrorType,\n  type GetEnsTextParameters,\n  getEnsText,\n} from './getEnsText.js'\n\nexport type GetEnsAvatarParameters = Prettify<\n  Omit<GetEnsTextParameters, 'key'> & {\n    /** Gateway urls to resolve IPFS and/or Arweave assets. */\n    assetGatewayUrls?: AssetGatewayUrls | undefined\n  }\n>\n\nexport type GetEnsAvatarReturnType = string | null\n\nexport type GetEnsAvatarErrorType =\n  | GetEnsTextErrorType\n  | ParseAvatarRecordErrorType\n  | ErrorType\n\n/**\n * Gets the avatar of an ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsAvatar\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls [`getEnsText`](https://viem.sh/docs/ens/actions/getEnsText) with `key` set to `'avatar'`.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsAvatarParameters}\n * @returns Avatar URI or `null` if not found. {@link GetEnsAvatarReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsAvatar, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensAvatar = await getEnsAvatar(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // 'https://ipfs.io/ipfs/Qma8mnp6xV3J2cRNf3mTth5C8nV11CAnceVinc3y8jSbio'\n */\nexport async function getEnsAvatar<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    blockNumber,\n    blockTag,\n    assetGatewayUrls,\n    name,\n    gatewayUrls,\n    strict,\n    universalResolverAddress,\n  }: GetEnsAvatarParameters,\n): Promise<GetEnsAvatarReturnType> {\n  const record = await getAction(\n    client,\n    getEnsText,\n    'getEnsText',\n  )({\n    blockNumber,\n    blockTag,\n    key: 'avatar',\n    name,\n    universalResolverAddress,\n    gatewayUrls,\n    strict,\n  })\n  if (!record) return null\n  try {\n    return await parseAvatarRecord(client, {\n      record,\n      gatewayUrls: assetGatewayUrls,\n    })\n  } catch {\n    return null\n  }\n}\n", "import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { universalResolverReverseAbi } from '../../constants/abis.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\nimport { localBatchGatewayUrl } from '../../utils/ens/localBatchGatewayRequest.js'\nimport type { PacketToBytesErrorType } from '../../utils/ens/packetToBytes.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractErrorType,\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsNameParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /**\n     * Address to get ENS name for.\n     */\n    address: Address\n    /**\n     * ENSIP-9 compliant coinType (chain) to get ENS name for.\n     *\n     * To get the `coinType` for a chain id, use the `toCoinType` function:\n     * ```ts\n     * import { toCoinType } from 'viem'\n     * import { base } from 'viem/chains'\n     *\n     * const coinType = toCoinType(base.id)\n     * ```\n     *\n     * @default 60n\n     */\n    coinType?: bigint | undefined\n    /**\n     * Universal Resolver gateway URLs to use for resolving CCIP-read requests.\n     */\n    gatewayUrls?: string[] | undefined\n    /**\n     * Whether or not to throw errors propagated from the ENS Universal Resolver Contract.\n     */\n    strict?: boolean | undefined\n    /**\n     * Address of ENS Universal Resolver Contract.\n     */\n    universalResolverAddress?: Address | undefined\n  }\n>\n\nexport type GetEnsNameReturnType = string | null\n\nexport type GetEnsNameErrorType =\n  | GetChainContractAddressErrorType\n  | ReadContractErrorType\n  | PacketToBytesErrorType\n  | ErrorType\n\n/**\n * Gets primary name for specified address.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsName\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `reverse(bytes)` on ENS Universal Resolver Contract to \"reverse resolve\" the address to the primary ENS name.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsNameParameters}\n * @returns Name or `null` if not found. {@link GetEnsNameReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsName } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensName = await getEnsName(client, {\n *   address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n * })\n * // 'wevm.eth'\n */\nexport async function getEnsName<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  parameters: GetEnsNameParameters,\n): Promise<GetEnsNameReturnType> {\n  const {\n    address,\n    blockNumber,\n    blockTag,\n    coinType = 60n,\n    gatewayUrls,\n    strict,\n  } = parameters\n  const { chain } = client\n\n  const universalResolverAddress = (() => {\n    if (parameters.universalResolverAddress)\n      return parameters.universalResolverAddress\n    if (!chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n    return getChainContractAddress({\n      blockNumber,\n      chain,\n      contract: 'ensUniversalResolver',\n    })\n  })()\n\n  try {\n    const readContractParameters = {\n      address: universalResolverAddress,\n      abi: universalResolverReverseAbi,\n      args: [address, coinType, gatewayUrls ?? [localBatchGatewayUrl]],\n      functionName: 'reverseWithGateways',\n      blockNumber,\n      blockTag,\n    } as const\n\n    const readContractAction = getAction(client, readContract, 'readContract')\n\n    const [name] = await readContractAction(readContractParameters)\n\n    return name || null\n  } catch (err) {\n    if (strict) throw err\n    if (isNullUniversalResolverError(err)) return null\n    throw err\n  }\n}\n", "import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\nimport {\n  type PacketToBytesErrorType,\n  packetToBytes,\n} from '../../utils/ens/packetToBytes.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsResolverParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /** Name to get the address for. */\n    name: string\n    /** Address of ENS Universal Resolver Contract. */\n    universalResolverAddress?: Address | undefined\n  }\n>\n\nexport type GetEnsResolverReturnType = Address\n\nexport type GetEnsResolverErrorType =\n  | GetChainContractAddressErrorType\n  | ToHexErrorType\n  | PacketToBytesErrorType\n  | ErrorType\n\n/**\n * Gets resolver for ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `findResolver(bytes)` on ENS Universal Resolver Contract to retrieve the resolver of an ENS name.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsResolverParameters}\n * @returns Address for ENS resolver. {@link GetEnsResolverReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsResolver, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const resolverAddress = await getEnsResolver(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // '0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41'\n */\nexport async function getEnsResolver<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  parameters: GetEnsResolverParameters,\n): Promise<GetEnsResolverReturnType> {\n  const { blockNumber, blockTag, name } = parameters\n  const { chain } = client\n\n  const universalResolverAddress = (() => {\n    if (parameters.universalResolverAddress)\n      return parameters.universalResolverAddress\n    if (!chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n    return getChainContractAddress({\n      blockNumber,\n      chain,\n      contract: 'ensUniversalResolver',\n    })\n  })()\n\n  const tlds = chain?.ensTlds\n  if (tlds && !tlds.some((tld) => name.endsWith(tld)))\n    throw new Error(\n      `${name} is not a valid ENS TLD (${tlds?.join(', ')}) for chain \"${chain.name}\" (id: ${chain.id}).`,\n    )\n\n  const [resolverAddress] = await getAction(\n    client,\n    readContract,\n    'readContract',\n  )({\n    address: universalResolverAddress,\n    abi: [\n      {\n        inputs: [{ type: 'bytes' }],\n        name: 'findResolver',\n        outputs: [\n          { type: 'address' },\n          { type: 'bytes32' },\n          { type: 'uint256' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n      },\n    ],\n    functionName: 'findResolver',\n    args: [toHex(packetToBytes(name))],\n    blockNumber,\n    blockTag,\n  })\n  return resolverAddress\n}\n", "import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RpcTransactionRequest } from '../../types/rpc.js'\nimport type { AccessList, TransactionRequest } from '../../types/transaction.js'\nimport type { ExactPartial, Prettify, UnionOmit } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type GetCallErrorReturnType,\n  getCallError,\n} from '../../utils/errors/getCallError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormatTransactionRequestErrorType,\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport type {\n  AssertRequestErrorType,\n  AssertRequestParameters,\n} from '../../utils/transaction/assertRequest.js'\nimport { assertRequest } from '../../utils/transaction/assertRequest.js'\n\nexport type CreateAccessListParameters<\n  chain extends Chain | undefined = Chain | undefined,\n> = UnionOmit<\n  FormattedTransactionRequest<chain>,\n  'from' | 'nonce' | 'accessList'\n> & {\n  /** Account attached to the call (msg.sender). */\n  account?: Account | Address | undefined\n} & (\n    | {\n        /** The balance of the account at a block number. */\n        blockNumber?: bigint | undefined\n        blockTag?: undefined\n      }\n    | {\n        blockNumber?: undefined\n        /**\n         * The balance of the account at a block tag.\n         * @default 'latest'\n         */\n        blockTag?: BlockTag | undefined\n      }\n  )\n\nexport type CreateAccessListReturnType = Prettify<{\n  accessList: AccessList\n  gasUsed: bigint\n}>\n\nexport type CreateAccessListErrorType = GetCallErrorReturnType<\n  | ParseAccountErrorType\n  | AssertRequestErrorType\n  | NumberToHexErrorType\n  | FormatTransactionRequestErrorType\n  | RequestErrorType\n>\n\n/**\n * Creates an EIP-2930 access list.\n *\n * - Docs: https://viem.sh/docs/actions/public/createAccessList\n * - JSON-RPC Methods: `eth_createAccessList`\n *\n * @param client - Client to use\n * @param parameters - {@link CreateAccessListParameters}\n * @returns The access list. {@link CreateAccessListReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createAccessList } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const data = await createAccessList(client, {\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * })\n */\nexport async function createAccessList<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  args: CreateAccessListParameters<chain>,\n): Promise<CreateAccessListReturnType> {\n  const {\n    account: account_ = client.account,\n    blockNumber,\n    blockTag = 'latest',\n    blobs,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    to,\n    value,\n    ...rest\n  } = args\n  const account = account_ ? parseAccount(account_) : undefined\n\n  try {\n    assertRequest(args as AssertRequestParameters)\n\n    const blockNumberHex =\n      typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined\n    const block = blockNumberHex || blockTag\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format(\n      {\n        // Pick out extra data that might exist on the chain's transaction request type.\n        ...extract(rest, { format: chainFormat }),\n        account,\n        blobs,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerBlobGas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        to,\n        value,\n      } as TransactionRequest,\n      'createAccessList',\n    ) as TransactionRequest\n\n    const response = await client.request({\n      method: 'eth_createAccessList',\n      params: [request as ExactPartial<RpcTransactionRequest>, block],\n    })\n    return {\n      accessList: response.accessList,\n      gasUsed: BigInt(response.gasUsed),\n    }\n  } catch (err) {\n    throw getCallError(err as ErrorType, {\n      ...args,\n      account,\n      chain: client.chain,\n    })\n  }\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\n\nexport type CreateBlockFilterReturnType = Filter<'block'>\n\nexport type CreateBlockFilterErrorType = RequestErrorType | ErrorType\n\n/**\n * Creates a [`Filter`](https://viem.sh/docs/glossary/types#filter) to listen for new block hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n *\n * - Docs: https://viem.sh/docs/actions/public/createBlockFilter\n * - JSON-RPC Methods: [`eth_newBlockFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newBlockFilter)\n *\n * @param client - Client to use\n * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateBlockFilterReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createBlockFilter } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createBlockFilter(client)\n * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'block' }\n */\nexport async function createBlockFilter<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n): Promise<CreateBlockFilterReturnType> {\n  const getRequest = createFilterRequestScope(client, {\n    method: 'eth_newBlockFilter',\n  })\n  const id = await client.request({\n    method: 'eth_newBlockFilter',\n  })\n  return { id, request: getRequest(id), type: 'block' }\n}\n", "import type { AbiEvent, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Hex, LogTopic } from '../../types/misc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type EncodeEventTopicsErrorType,\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\n\nexport type CreateEventFilterParameters<\n  abiEvent extends AbiEvent | undefined = undefined,\n  abiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  //\n  _eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\n  _args extends\n    | MaybeExtractEventArgsFromAbi<abiEvents, _eventName>\n    | undefined = undefined,\n> = {\n  address?: Address | Address[] | undefined\n  fromBlock?: fromBlock | BlockNumber | BlockTag | undefined\n  toBlock?: toBlock | BlockNumber | BlockTag | undefined\n} & (MaybeExtractEventArgsFromAbi<\n  abiEvents,\n  _eventName\n> extends infer eventFilterArgs\n  ?\n      | {\n          args:\n            | eventFilterArgs\n            | (_args extends eventFilterArgs ? _args : never)\n          event: abiEvent\n          events?: undefined\n          /**\n           * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n           * @default false\n           */\n          strict?: strict | undefined\n        }\n      | {\n          args?: undefined\n          event?: abiEvent | undefined\n          events?: undefined\n          /**\n           * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n           * @default false\n           */\n          strict?: strict | undefined\n        }\n      | {\n          args?: undefined\n          event?: undefined\n          events: abiEvents | undefined\n          /**\n           * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n           * @default false\n           */\n          strict?: strict | undefined\n        }\n      | {\n          args?: undefined\n          event?: undefined\n          events?: undefined\n          strict?: undefined\n        }\n  : {\n      args?: undefined\n      event?: undefined\n      events?: undefined\n      strict?: undefined\n    })\n\nexport type CreateEventFilterReturnType<\n  abiEvent extends AbiEvent | undefined = undefined,\n  abiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\n  _args extends\n    | MaybeExtractEventArgsFromAbi<abiEvents, _eventName>\n    | undefined = undefined,\n> = Prettify<\n  Filter<'event', abiEvents, _eventName, _args, strict, fromBlock, toBlock>\n>\n\nexport type CreateEventFilterErrorType =\n  | EncodeEventTopicsErrorType\n  | RequestErrorType\n  | NumberToHexErrorType\n  | ErrorType\n\n/**\n * Creates a [`Filter`](https://viem.sh/docs/glossary/types#filter) to listen for new events that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n *\n * - Docs: https://viem.sh/docs/actions/public/createEventFilter\n * - JSON-RPC Methods: [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter)\n *\n * @param client - Client to use\n * @param parameters - {@link CreateEventFilterParameters}\n * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateEventFilterReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createEventFilter } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createEventFilter(client, {\n *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n * })\n */\nexport async function createEventFilter<\n  chain extends Chain | undefined,\n  const abiEvent extends AbiEvent | undefined = undefined,\n  const abiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber<bigint> | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber<bigint> | BlockTag | undefined = undefined,\n  _eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\n  _args extends\n    | MaybeExtractEventArgsFromAbi<abiEvents, _eventName>\n    | undefined = undefined,\n>(\n  client: Client<Transport, chain>,\n  {\n    address,\n    args,\n    event,\n    events: events_,\n    fromBlock,\n    strict,\n    toBlock,\n  }: CreateEventFilterParameters<\n    abiEvent,\n    abiEvents,\n    strict,\n    fromBlock,\n    toBlock,\n    _eventName,\n    _args\n  > = {} as any,\n): Promise<\n  CreateEventFilterReturnType<\n    abiEvent,\n    abiEvents,\n    strict,\n    fromBlock,\n    toBlock,\n    _eventName,\n    _args\n  >\n> {\n  const events = events_ ?? (event ? [event] : undefined)\n\n  const getRequest = createFilterRequestScope(client, {\n    method: 'eth_newFilter',\n  })\n\n  let topics: LogTopic[] = []\n  if (events) {\n    const encoded = (events as AbiEvent[]).flatMap((event) =>\n      encodeEventTopics({\n        abi: [event],\n        eventName: (event as AbiEvent).name,\n        args,\n      } as EncodeEventTopicsParameters),\n    )\n    // TODO: Clean up type casting\n    topics = [encoded as LogTopic]\n    if (event) topics = topics[0] as LogTopic[]\n  }\n\n  const id: Hex = await client.request({\n    method: 'eth_newFilter',\n    params: [\n      {\n        address,\n        fromBlock:\n          typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n        toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\n        ...(topics.length ? { topics } : {}),\n      },\n    ],\n  })\n\n  return {\n    abi: events,\n    args,\n    eventName: event ? (event as AbiEvent).name : undefined,\n    fromBlock,\n    id,\n    request: getRequest(id),\n    strict: Boolean(strict),\n    toBlock,\n    type: 'event',\n  } as unknown as CreateEventFilterReturnType<\n    abiEvent,\n    abiEvents,\n    strict,\n    fromBlock,\n    toBlock,\n    _eventName,\n    _args\n  >\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\n\nexport type CreatePendingTransactionFilterReturnType = Filter<'transaction'>\n\nexport type CreatePendingTransactionFilterErrorType =\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Creates a Filter to listen for new pending transaction hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n *\n * - Docs: https://viem.sh/docs/actions/public/createPendingTransactionFilter\n * - JSON-RPC Methods: [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter)\n *\n * @param client - Client to use\n * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateBlockFilterReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createPendingTransactionFilter } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createPendingTransactionFilter(client)\n * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'transaction' }\n */\nexport async function createPendingTransactionFilter<\n  transport extends Transport,\n  chain extends Chain | undefined,\n>(\n  client: Client<transport, chain>,\n): Promise<CreatePendingTransactionFilterReturnType> {\n  const getRequest = createFilterRequestScope(client, {\n    method: 'eth_newPendingTransactionFilter',\n  })\n  const id = await client.request({\n    method: 'eth_newPendingTransactionFilter',\n  })\n  return { id, request: getRequest(id), type: 'transaction' }\n}\n", "import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetBalanceParameters = {\n  /** The address of the account. */\n  address: Address\n} & (\n  | {\n      /** The balance of the account at a block number. */\n      blockNumber?: bigint | undefined\n      blockTag?: undefined\n    }\n  | {\n      blockNumber?: undefined\n      /** The balance of the account at a block tag. */\n      blockTag?: BlockTag | undefined\n    }\n)\n\nexport type GetBalanceReturnType = bigint\n\nexport type GetBalanceErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the balance of an address in wei.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBalance\n * - JSON-RPC Methods: [`eth_getBalance`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance)\n *\n * You can convert the balance to ether units with [`formatEther`](https://viem.sh/docs/utilities/formatEther).\n *\n * ```ts\n * const balance = await getBalance(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   blockTag: 'safe'\n * })\n * const balanceAsEther = formatEther(balance)\n * // \"6.942\"\n * ```\n *\n * @param client - Client to use\n * @param parameters - {@link GetBalanceParameters}\n * @returns The balance of the address in wei. {@link GetBalanceReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBalance } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const balance = await getBalance(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n * // 10000000000000000000000n (wei)\n */\nexport async function getBalance<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    address,\n    blockNumber,\n    blockTag = client.experimental_blockTag ?? 'latest',\n  }: GetBalanceParameters,\n): Promise<GetBalanceReturnType> {\n  const blockNumberHex =\n    typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined\n\n  const balance = await client.request({\n    method: 'eth_getBalance',\n    params: [address, blockNumberHex || blockTag],\n  })\n  return BigInt(balance)\n}\n", "import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type GetBlobBaseFeeReturnType = bigint\n\nexport type GetBlobBaseFeeErrorType = RequestErrorType | ErrorType\n\n/**\n * Returns the base fee per blob gas in wei.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlobBaseFee\n * - JSON-RPC Methods: [`eth_blobBaseFee`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blobBaseFee)\n *\n * @param client - Client to use\n * @returns The blob base fee (in wei). {@link GetBlobBaseFeeReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlobBaseFee } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const blobBaseFee = await getBlobBaseFee(client)\n */\nexport async function getBlobBaseFee<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(\n  client: Client<Transport, chain, account>,\n): Promise<GetBlobBaseFeeReturnType> {\n  const baseFee = await client.request({\n    method: 'eth_blobBaseFee',\n  })\n  return BigInt(baseFee)\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { Quantity } from '../../types/rpc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type HexToNumberErrorType,\n  hexToNumber,\n} from '../../utils/encoding/fromHex.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetBlockTransactionCountParameters =\n  | {\n      /** Hash of the block. */\n      blockHash?: Hash | undefined\n      blockNumber?: undefined\n      blockTag?: undefined\n    }\n  | {\n      blockHash?: undefined\n      /** The block number. */\n      blockNumber?: bigint | undefined\n      blockTag?: undefined\n    }\n  | {\n      blockHash?: undefined\n      blockNumber?: undefined\n      /** The block tag. Defaults to 'latest'. */\n      blockTag?: BlockTag | undefined\n    }\n\nexport type GetBlockTransactionCountReturnType = number\n\nexport type GetBlockTransactionCountErrorType =\n  | NumberToHexErrorType\n  | HexToNumberErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the number of Transactions at a block number, hash, or tag.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlockTransactionCount\n * - JSON-RPC Methods:\n *   - Calls [`eth_getBlockTransactionCountByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbynumber) for `blockNumber` & `blockTag`.\n *   - Calls [`eth_getBlockTransactionCountByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbyhash) for `blockHash`.\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockTransactionCountParameters}\n * @returns The block transaction count. {@link GetBlockTransactionCountReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlockTransactionCount } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const count = await getBlockTransactionCount(client)\n */\nexport async function getBlockTransactionCount<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    blockHash,\n    blockNumber,\n    blockTag = 'latest',\n  }: GetBlockTransactionCountParameters = {},\n): Promise<GetBlockTransactionCountReturnType> {\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n\n  let count: Quantity\n  if (blockHash) {\n    count = await client.request(\n      {\n        method: 'eth_getBlockTransactionCountByHash',\n        params: [blockHash],\n      },\n      { dedupe: true },\n    )\n  } else {\n    count = await client.request(\n      {\n        method: 'eth_getBlockTransactionCountByNumber',\n        params: [blockNumberHex || blockTag],\n      },\n      { dedupe: Boolean(blockNumberHex) },\n    )\n  }\n\n  return hexToNumber(count)\n}\n", "import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetCodeParameters = {\n  address: Address\n} & (\n  | {\n      blockNumber?: undefined\n      blockTag?: BlockTag | undefined\n    }\n  | {\n      blockNumber?: bigint | undefined\n      blockTag?: undefined\n    }\n)\n\nexport type GetCodeReturnType = Hex | undefined\n\nexport type GetCodeErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Retrieves the bytecode at an address.\n *\n * - Docs: https://viem.sh/docs/contract/getCode\n * - JSON-RPC Methods: [`eth_getCode`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getcode)\n *\n * @param client - Client to use\n * @param parameters - {@link GetCodeParameters}\n * @returns The contract's bytecode. {@link GetCodeReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getCode } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const code = await getCode(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n * })\n */\nexport async function getCode<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  { address, blockNumber, blockTag = 'latest' }: GetCodeParameters,\n): Promise<GetCodeReturnType> {\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n  const hex = await client.request(\n    {\n      method: 'eth_getCode',\n      params: [address, blockNumberHex || blockTag],\n    },\n    { dedupe: Boolean(blockNumberHex) },\n  )\n  if (hex === '0x') return undefined\n  return hex\n}\n", "import type { Address } from 'abitype'\nimport { BaseError } from './base.js'\n\nexport type Eip712DomainNotFoundErrorType = Eip712DomainNotFoundError & {\n  name: 'Eip712DomainNotFoundError'\n}\nexport class Eip712DomainNotFoundError extends BaseError {\n  constructor({ address }: { address: Address }) {\n    super(`No EIP-712 domain found on contract \"${address}\".`, {\n      metaMessages: [\n        'Ensure that:',\n        `- The contract is deployed at the address \"${address}\".`,\n        '- `eip712Domain()` function exists on the contract.',\n        '- `eip712Domain()` function matches signature to ERC-5267 specification.',\n      ],\n      name: 'Eip712DomainNotFoundError',\n    })\n  }\n}\n", "import type { Address, TypedDataDomain } from 'abitype'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  Eip712DomainNotFoundError,\n  type Eip712DomainNotFoundErrorType,\n} from '../../errors/eip712.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RequiredBy } from '../../types/utils.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractErrorType,\n  type ReadContractParameters,\n  readContract,\n} from './readContract.js'\n\nexport type GetEip712DomainParameters = {\n  address: Address\n} & Pick<ReadContractParameters, 'factory' | 'factoryData'>\n\nexport type GetEip712DomainReturnType = {\n  domain: RequiredBy<\n    TypedDataDomain,\n    'chainId' | 'name' | 'verifyingContract' | 'salt' | 'version'\n  >\n  fields: Hex\n  extensions: readonly bigint[]\n}\n\nexport type GetEip712DomainErrorType =\n  | Eip712DomainNotFoundErrorType\n  | ReadContractErrorType\n  | ErrorType\n\n/**\n * Reads the EIP-712 domain from a contract, based on the ERC-5267 specification.\n *\n * @param client - A {@link Client} instance.\n * @param parameters - The parameters of the action. {@link GetEip712DomainParameters}\n * @returns The EIP-712 domain, fields, and extensions. {@link GetEip712DomainReturnType}\n *\n * @example\n * ```ts\n * import { createPublicClient, http, getEip712Domain } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const domain = await getEip712Domain(client, {\n *   address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n * })\n * // {\n * //   domain: {\n * //     name: 'ExampleContract',\n * //     version: '1',\n * //     chainId: 1,\n * //     verifyingContract: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n * //   },\n * //   fields: '0x0f',\n * //   extensions: [],\n * // }\n * ```\n */\nexport async function getEip712Domain(\n  client: Client<Transport>,\n  parameters: GetEip712DomainParameters,\n): Promise<GetEip712DomainReturnType> {\n  const { address, factory, factoryData } = parameters\n\n  try {\n    const [\n      fields,\n      name,\n      version,\n      chainId,\n      verifyingContract,\n      salt,\n      extensions,\n    ] = await getAction(\n      client,\n      readContract,\n      'readContract',\n    )({\n      abi,\n      address,\n      functionName: 'eip712Domain',\n      factory,\n      factoryData,\n    })\n\n    return {\n      domain: {\n        name,\n        version,\n        chainId: Number(chainId),\n        verifyingContract,\n        salt,\n      },\n      extensions,\n      fields,\n    }\n  } catch (e) {\n    const error = e as ReadContractErrorType\n    if (\n      error.name === 'ContractFunctionExecutionError' &&\n      error.cause.name === 'ContractFunctionZeroDataError'\n    ) {\n      throw new Eip712DomainNotFoundError({ address })\n    }\n    throw error\n  }\n}\n\nconst abi = [\n  {\n    inputs: [],\n    name: 'eip712Domain',\n    outputs: [\n      { name: 'fields', type: 'bytes1' },\n      { name: 'name', type: 'string' },\n      { name: 'version', type: 'string' },\n      { name: 'chainId', type: 'uint256' },\n      { name: 'verifyingContract', type: 'address' },\n      { name: 'salt', type: 'bytes32' },\n      { name: 'extensions', type: 'uint256[]' },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n] as const\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { FeeHistory } from '../../types/fee.js'\nimport type { RpcFeeHistory } from '../../types/rpc.js'\n\nexport type FormatFeeHistoryErrorType = ErrorType\n\nexport function formatFeeHistory(feeHistory: RpcFeeHistory): FeeHistory {\n  return {\n    baseFeePerGas: feeHistory.baseFeePerGas.map((value) => BigInt(value)),\n    gasUsedRatio: feeHistory.gasUsedRatio,\n    oldestBlock: BigInt(feeHistory.oldestBlock),\n    reward: feeHistory.reward?.map((reward) =>\n      reward.map((value) => BigInt(value)),\n    ),\n  }\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { FeeHistory } from '../../types/fee.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormatFeeHistoryErrorType,\n  formatFeeHistory,\n} from '../../utils/formatters/feeHistory.js'\n\nexport type GetFeeHistoryParameters = {\n  /**\n   * Number of blocks in the requested range. Between 1 and 1024 blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.\n   */\n  blockCount: number\n  /**\n   * A monotonically increasing list of percentile values to sample from each block's effective priority fees per gas in ascending order, weighted by gas used.\n   */\n  rewardPercentiles: number[]\n} & (\n  | {\n      blockNumber?: undefined\n      /**\n       * Highest number block of the requested range.\n       * @default 'latest'\n       */\n      blockTag?: BlockTag | undefined\n    }\n  | {\n      /** Highest number block of the requested range. */\n      blockNumber?: bigint | undefined\n      blockTag?: undefined\n    }\n)\nexport type GetFeeHistoryReturnType = FeeHistory\n\nexport type GetFeeHistoryErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | FormatFeeHistoryErrorType\n\n/**\n * Returns a collection of historical gas information.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFeeHistory\n * - JSON-RPC Methods: [`eth_feeHistory`](https://docs.alchemy.com/reference/eth-feehistory)\n *\n * @param client - Client to use\n * @param parameters - {@link GetFeeHistoryParameters}\n * @returns The gas estimate (in wei). {@link GetFeeHistoryReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getFeeHistory } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const feeHistory = await getFeeHistory(client, {\n *   blockCount: 4,\n *   rewardPercentiles: [25, 75],\n * })\n */\nexport async function getFeeHistory<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    blockCount,\n    blockNumber,\n    blockTag = 'latest',\n    rewardPercentiles,\n  }: GetFeeHistoryParameters,\n): Promise<GetFeeHistoryReturnType> {\n  const blockNumberHex =\n    typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined\n  const feeHistory = await client.request(\n    {\n      method: 'eth_feeHistory',\n      params: [\n        numberToHex(blockCount),\n        blockNumberHex || blockTag,\n        rewardPercentiles,\n      ],\n    },\n    { dedupe: Boolean(blockNumberHex) },\n  )\n  return formatFeeHistory(feeHistory)\n}\n", "import type { Abi, AbiEvent, ExtractAbiEvent } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\nimport type { DecodeEventLogErrorType } from '../../utils/abi/decodeEventLog.js'\nimport { parseEventLogs } from '../../utils/abi/parseEventLogs.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type FormatLogErrorType,\n  formatLog,\n} from '../../utils/formatters/log.js'\n\nexport type GetFilterLogsParameters<\n  abi extends Abi | readonly unknown[] | undefined = undefined,\n  eventName extends string | undefined = undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = {\n  filter: Filter<'event', abi, eventName, any, strict, fromBlock, toBlock>\n}\nexport type GetFilterLogsReturnType<\n  abi extends Abi | readonly unknown[] | undefined = undefined,\n  eventName extends string | undefined = undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _AbiEvent extends AbiEvent | undefined = abi extends Abi\n    ? eventName extends string\n      ? ExtractAbiEvent<abi, eventName>\n      : undefined\n    : undefined,\n  _Pending extends boolean =\n    | (fromBlock extends 'pending' ? true : false)\n    | (toBlock extends 'pending' ? true : false),\n> = Log<bigint, number, _Pending, _AbiEvent, strict, abi, eventName>[]\n\nexport type GetFilterLogsErrorType =\n  | RequestErrorType\n  | DecodeEventLogErrorType\n  | FormatLogErrorType\n  | ErrorType\n\n/**\n * Returns a list of event logs since the filter was created.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFilterLogs\n * - JSON-RPC Methods: [`eth_getFilterLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterlogs)\n *\n * `getFilterLogs` is only compatible with **event filters**.\n *\n * @param client - Client to use\n * @param parameters - {@link GetFilterLogsParameters}\n * @returns A list of event logs. {@link GetFilterLogsReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createEventFilter, getFilterLogs } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n * })\n * const logs = await getFilterLogs(client, { filter })\n */\nexport async function getFilterLogs<\n  chain extends Chain | undefined,\n  const abi extends Abi | readonly unknown[] | undefined,\n  eventName extends string | undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  _client: Client<Transport, chain>,\n  {\n    filter,\n  }: GetFilterLogsParameters<abi, eventName, strict, fromBlock, toBlock>,\n): Promise<\n  GetFilterLogsReturnType<abi, eventName, strict, fromBlock, toBlock>\n> {\n  const strict = filter.strict ?? false\n\n  const logs = await filter.request({\n    method: 'eth_getFilterLogs',\n    params: [filter.id],\n  })\n\n  const formattedLogs = logs.map((log) => formatLog(log))\n  if (!filter.abi)\n    return formattedLogs as GetFilterLogsReturnType<\n      abi,\n      eventName,\n      strict,\n      fromBlock,\n      toBlock\n    >\n  return parseEventLogs({\n    abi: filter.abi,\n    logs: formattedLogs,\n    strict,\n  }) as unknown as GetFilterLogsReturnType<\n    abi,\n    eventName,\n    strict,\n    fromBlock,\n    toBlock\n  >\n}\n", "import type {\n  AbiParameterToPrimitiveType,\n  AbiType,\n  Address,\n  SolidityAddress,\n  SolidityArrayWithoutTuple,\n  SolidityBool,\n  SolidityBytes,\n  SolidityInt,\n  SolidityString,\n} from 'abitype'\n\nimport {\n  AbiEncodingLengthMismatchError,\n  type AbiEncodingLengthMismatchErrorType,\n  BytesSizeMismatchError,\n  type BytesSizeMismatchErrorType,\n  UnsupportedPackedAbiType,\n} from '../../errors/abi.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport { type PadErrorType, pad } from '../data/pad.js'\nimport {\n  type BoolToHexErrorType,\n  boolToHex,\n  type NumberToHexErrorType,\n  numberToHex,\n  type StringToHexErrorType,\n  stringToHex,\n} from '../encoding/toHex.js'\nimport { arrayRegex, bytesRegex, integerRegex } from '../regex.js'\n\ntype PackedAbiType =\n  | SolidityAddress\n  | SolidityBool\n  | SolidityBytes\n  | SolidityInt\n  | SolidityString\n  | SolidityArrayWithoutTuple\n\ntype EncodePackedValues<\n  packedAbiTypes extends readonly PackedAbiType[] | readonly unknown[],\n> = {\n  [K in keyof packedAbiTypes]: packedAbiTypes[K] extends AbiType\n    ? AbiParameterToPrimitiveType<{ type: packedAbiTypes[K] }>\n    : unknown\n}\n\nexport type EncodePackedErrorType =\n  | AbiEncodingLengthMismatchErrorType\n  | ConcatHexErrorType\n  | EncodeErrorType\n  | ErrorType\n\nexport function encodePacked<\n  const packedAbiTypes extends readonly PackedAbiType[] | readonly unknown[],\n>(types: packedAbiTypes, values: EncodePackedValues<packedAbiTypes>): Hex {\n  if (types.length !== values.length)\n    throw new AbiEncodingLengthMismatchError({\n      expectedLength: types.length as number,\n      givenLength: values.length as number,\n    })\n\n  const data: Hex[] = []\n  for (let i = 0; i < (types as unknown[]).length; i++) {\n    const type = types[i]\n    const value = values[i]\n    data.push(encode(type, value))\n  }\n  return concatHex(data)\n}\n\ntype EncodeErrorType =\n  | BoolToHexErrorType\n  | BytesSizeMismatchErrorType\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | NumberToHexErrorType\n  | PadErrorType\n  | StringToHexErrorType\n  | UnsupportedPackedAbiType\n  | ErrorType\n\nfunction encode<const packedAbiType extends PackedAbiType | unknown>(\n  type: packedAbiType,\n  value: EncodePackedValues<[packedAbiType]>[0],\n  isArray = false,\n): Hex {\n  if (type === 'address') {\n    const address = value as Address\n    if (!isAddress(address)) throw new InvalidAddressError({ address })\n    return pad(address.toLowerCase() as Hex, {\n      size: isArray ? 32 : null,\n    }) as Address\n  }\n  if (type === 'string') return stringToHex(value as string)\n  if (type === 'bytes') return value as Hex\n  if (type === 'bool')\n    return pad(boolToHex(value as boolean), { size: isArray ? 32 : 1 })\n\n  const intMatch = (type as string).match(integerRegex)\n  if (intMatch) {\n    const [_type, baseType, bits = '256'] = intMatch\n    const size = Number.parseInt(bits, 10) / 8\n    return numberToHex(value as number, {\n      size: isArray ? 32 : size,\n      signed: baseType === 'int',\n    })\n  }\n\n  const bytesMatch = (type as string).match(bytesRegex)\n  if (bytesMatch) {\n    const [_type, size] = bytesMatch\n    if (Number.parseInt(size, 10) !== ((value as Hex).length - 2) / 2)\n      throw new BytesSizeMismatchError({\n        expectedSize: Number.parseInt(size, 10),\n        givenSize: ((value as Hex).length - 2) / 2,\n      })\n    return pad(value as Hex, { dir: 'right', size: isArray ? 32 : null }) as Hex\n  }\n\n  const arrayMatch = (type as string).match(arrayRegex)\n  if (arrayMatch && Array.isArray(value)) {\n    const [_type, childType] = arrayMatch\n    const data: Hex[] = []\n    for (let i = 0; i < value.length; i++) {\n      data.push(encode(childType, value[i], true))\n    }\n    if (data.length === 0) return '0x'\n    return concatHex(data)\n  }\n\n  throw new UnsupportedPackedAbiType(type)\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray } from '../../types/misc.js'\n\nexport type IsBytesErrorType = ErrorType\n\nexport function isBytes(value: unknown): value is ByteArray {\n  if (!value) return false\n  if (typeof value !== 'object') return false\n  if (!('BYTES_PER_ELEMENT' in value)) return false\n  return (\n    value.BYTES_PER_ELEMENT === 1 && value.constructor.name === 'Uint8Array'\n  )\n}\n", "import type { Address } from 'abitype'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport { type IsBytesErrorType, isBytes } from '../data/isBytes.js'\nimport { type PadErrorType, pad } from '../data/pad.js'\nimport { type SliceErrorType, slice } from '../data/slice.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type ToRlpErrorType, toRlp } from '../encoding/toRlp.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport { type GetAddressErrorType, getAddress } from './getAddress.js'\n\nexport type GetCreateAddressOptions = {\n  from: Address\n  nonce: bigint\n}\n\nexport type GetCreate2AddressOptions =\n  | {\n      bytecode: ByteArray | Hex\n      from: Address\n      salt: ByteArray | Hex\n    }\n  | {\n      bytecodeHash: ByteArray | Hex\n      from: Address\n      salt: ByteArray | Hex\n    }\n\nexport type GetContractAddressOptions =\n  | ({\n      opcode?: 'CREATE' | undefined\n    } & GetCreateAddressOptions)\n  | ({ opcode: 'CREATE2' } & GetCreate2AddressOptions)\n\nexport function getContractAddress(opts: GetContractAddressOptions) {\n  if (opts.opcode === 'CREATE2') return getCreate2Address(opts)\n  return getCreateAddress(opts)\n}\n\nexport type GetCreateAddressErrorType =\n  | Keccak256ErrorType\n  | GetAddressErrorType\n  | ToBytesErrorType\n  | ToRlpErrorType\n  | ErrorType\n\nexport function getCreateAddress(opts: GetCreateAddressOptions) {\n  const from = toBytes(getAddress(opts.from))\n\n  let nonce = toBytes(opts.nonce)\n  if (nonce[0] === 0) nonce = new Uint8Array([])\n\n  return getAddress(\n    `0x${keccak256(toRlp([from, nonce], 'bytes')).slice(26)}` as Address,\n  )\n}\n\nexport type GetCreate2AddressErrorType =\n  | ConcatErrorType\n  | Keccak256ErrorType\n  | GetAddressErrorType\n  | IsBytesErrorType\n  | PadErrorType\n  | SliceErrorType\n  | ToBytesErrorType\n  | ToRlpErrorType\n  | ErrorType\n\nexport function getCreate2Address(opts: GetCreate2AddressOptions) {\n  const from = toBytes(getAddress(opts.from))\n  const salt = pad(isBytes(opts.salt) ? opts.salt : toBytes(opts.salt), {\n    size: 32,\n  })\n\n  const bytecodeHash = (() => {\n    if ('bytecodeHash' in opts) {\n      if (isBytes(opts.bytecodeHash)) return opts.bytecodeHash\n      return toBytes(opts.bytecodeHash)\n    }\n    return keccak256(opts.bytecode, 'bytes')\n  })()\n\n  return getAddress(\n    slice(keccak256(concat([toBytes('0xff'), from, salt, bytecodeHash])), 12),\n  )\n}\n", "import { versionedHashVersionKzg } from '../../constants/kzg.js'\nimport { maxUint256 } from '../../constants/number.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport { BaseError, type BaseErrorType } from '../../errors/base.js'\nimport {\n  EmptyBlobError,\n  type EmptyBlobErrorType,\n  InvalidVersionedHashSizeError,\n  type InvalidVersionedHashSizeErrorType,\n  InvalidVersionedHashVersionError,\n  type InvalidVersionedHashVersionErrorType,\n} from '../../errors/blob.js'\nimport {\n  InvalidChainIdError,\n  type InvalidChainIdErrorType,\n} from '../../errors/chain.js'\nimport {\n  FeeCapTooHighError,\n  type FeeCapTooHighErrorType,\n  TipAboveFeeCapError,\n  type TipAboveFeeCapErrorType,\n} from '../../errors/node.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableEIP4844,\n  TransactionSerializableEIP7702,\n  TransactionSerializableLegacy,\n} from '../../types/transaction.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { size } from '../data/size.js'\nimport { slice } from '../data/slice.js'\nimport { hexToNumber } from '../encoding/fromHex.js'\n\nexport type AssertTransactionEIP7702ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | ErrorType\n\nexport function assertTransactionEIP7702(\n  transaction: TransactionSerializableEIP7702,\n) {\n  const { authorizationList } = transaction\n  if (authorizationList) {\n    for (const authorization of authorizationList) {\n      const { chainId } = authorization\n      const address = authorization.address\n      if (!isAddress(address)) throw new InvalidAddressError({ address })\n      if (chainId < 0) throw new InvalidChainIdError({ chainId })\n    }\n  }\n  assertTransactionEIP1559(transaction as {} as TransactionSerializableEIP1559)\n}\n\nexport type AssertTransactionEIP4844ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | EmptyBlobErrorType\n  | InvalidVersionedHashSizeErrorType\n  | InvalidVersionedHashVersionErrorType\n  | ErrorType\n\nexport function assertTransactionEIP4844(\n  transaction: TransactionSerializableEIP4844,\n) {\n  const { blobVersionedHashes } = transaction\n  if (blobVersionedHashes) {\n    if (blobVersionedHashes.length === 0) throw new EmptyBlobError()\n    for (const hash of blobVersionedHashes) {\n      const size_ = size(hash)\n      const version = hexToNumber(slice(hash, 0, 1))\n      if (size_ !== 32)\n        throw new InvalidVersionedHashSizeError({ hash, size: size_ })\n      if (version !== versionedHashVersionKzg)\n        throw new InvalidVersionedHashVersionError({\n          hash,\n          version,\n        })\n    }\n  }\n  assertTransactionEIP1559(transaction as {} as TransactionSerializableEIP1559)\n}\n\nexport type AssertTransactionEIP1559ErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | TipAboveFeeCapErrorType\n  | ErrorType\n\nexport function assertTransactionEIP1559(\n  transaction: TransactionSerializableEIP1559,\n) {\n  const { chainId, maxPriorityFeePerGas, maxFeePerGas, to } = transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (maxFeePerGas && maxFeePerGas > maxUint256)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n  if (\n    maxPriorityFeePerGas &&\n    maxFeePerGas &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n}\n\nexport type AssertTransactionEIP2930ErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | ErrorType\n\nexport function assertTransactionEIP2930(\n  transaction: TransactionSerializableEIP2930,\n) {\n  const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } =\n    transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (maxPriorityFeePerGas || maxFeePerGas)\n    throw new BaseError(\n      '`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.',\n    )\n  if (gasPrice && gasPrice > maxUint256)\n    throw new FeeCapTooHighError({ maxFeePerGas: gasPrice })\n}\n\nexport type AssertTransactionLegacyErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | ErrorType\n\nexport function assertTransactionLegacy(\n  transaction: TransactionSerializableLegacy,\n) {\n  const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } =\n    transaction\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (typeof chainId !== 'undefined' && chainId <= 0)\n    throw new InvalidChainIdError({ chainId })\n  if (maxPriorityFeePerGas || maxFeePerGas)\n    throw new BaseError(\n      '`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.',\n    )\n  if (gasPrice && gasPrice > maxUint256)\n    throw new FeeCapTooHighError({ maxFeePerGas: gasPrice })\n}\n", "import {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport {\n  InvalidStorageKeySizeError,\n  type InvalidStorageKeySizeErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { AccessList } from '../../types/transaction.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport type { RecursiveArray } from '../encoding/toRlp.js'\n\nexport type SerializeAccessListErrorType =\n  | InvalidStorageKeySizeErrorType\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\n/*\n * Serialize an  EIP-2930 access list\n * @remarks\n * Use to create a transaction serializer with support for EIP-2930 access lists\n *\n * @param accessList - Array of objects of address and arrays of Storage Keys\n * @throws InvalidAddressError, InvalidStorageKeySizeError\n * @returns Array of hex strings\n */\nexport function serializeAccessList(\n  accessList?: AccessList | undefined,\n): RecursiveArray<Hex> {\n  if (!accessList || accessList.length === 0) return []\n\n  const serializedAccessList = []\n  for (let i = 0; i < accessList.length; i++) {\n    const { address, storageKeys } = accessList[i]\n\n    for (let j = 0; j < storageKeys.length; j++) {\n      if (storageKeys[j].length - 2 !== 64) {\n        throw new InvalidStorageKeySizeError({ storageKey: storageKeys[j] })\n      }\n    }\n\n    if (!isAddress(address, { strict: false })) {\n      throw new InvalidAddressError({ address })\n    }\n\n    serializedAccessList.push([address, storageKeys])\n  }\n  return serializedAccessList\n}\n", "import {\n  InvalidLegacyVError,\n  type InvalidLegacyVErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  ByteArray,\n  Hex,\n  Signature,\n  SignatureLegacy,\n} from '../../types/misc.js'\nimport type {\n  TransactionSerializable,\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableEIP4844,\n  TransactionSerializableEIP7702,\n  TransactionSerializableGeneric,\n  TransactionSerializableLegacy,\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n  TransactionSerializedEIP4844,\n  TransactionSerializedEIP7702,\n  TransactionSerializedLegacy,\n  TransactionType,\n} from '../../types/transaction.js'\nimport type { MaybePromise, OneOf } from '../../types/utils.js'\nimport {\n  type SerializeAuthorizationListErrorType,\n  serializeAuthorizationList,\n} from '../authorization/serializeAuthorizationList.js'\nimport {\n  type BlobsToCommitmentsErrorType,\n  blobsToCommitments,\n} from '../blob/blobsToCommitments.js'\nimport {\n  blobsToProofs,\n  type blobsToProofsErrorType,\n} from '../blob/blobsToProofs.js'\nimport {\n  type CommitmentsToVersionedHashesErrorType,\n  commitmentsToVersionedHashes,\n} from '../blob/commitmentsToVersionedHashes.js'\nimport {\n  type ToBlobSidecarsErrorType,\n  toBlobSidecars,\n} from '../blob/toBlobSidecars.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport { trim } from '../data/trim.js'\nimport {\n  bytesToHex,\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../encoding/toHex.js'\nimport { type ToRlpErrorType, toRlp } from '../encoding/toRlp.js'\n\nimport {\n  type AssertTransactionEIP1559ErrorType,\n  type AssertTransactionEIP2930ErrorType,\n  type AssertTransactionEIP4844ErrorType,\n  type AssertTransactionEIP7702ErrorType,\n  type AssertTransactionLegacyErrorType,\n  assertTransactionEIP1559,\n  assertTransactionEIP2930,\n  assertTransactionEIP4844,\n  assertTransactionEIP7702,\n  assertTransactionLegacy,\n} from './assertTransaction.js'\nimport {\n  type GetTransactionType,\n  type GetTransactionTypeErrorType,\n  getTransactionType,\n} from './getTransactionType.js'\nimport {\n  type SerializeAccessListErrorType,\n  serializeAccessList,\n} from './serializeAccessList.js'\n\nexport type SerializedTransactionReturnType<\n  transaction extends TransactionSerializable = TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = GetTransactionType<transaction>,\n> = TransactionSerialized<_transactionType>\n\nexport type SerializeTransactionFn<\n  transaction extends TransactionSerializableGeneric = TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = never,\n> = (\n  transaction: OneOf<TransactionSerializable | transaction>,\n  signature?: Signature | undefined,\n) => MaybePromise<\n  SerializedTransactionReturnType<\n    OneOf<TransactionSerializable | transaction>,\n    _transactionType\n  >\n>\n\nexport type SerializeTransactionErrorType =\n  | GetTransactionTypeErrorType\n  | SerializeTransactionEIP1559ErrorType\n  | SerializeTransactionEIP2930ErrorType\n  | SerializeTransactionEIP4844ErrorType\n  | SerializeTransactionEIP7702ErrorType\n  | SerializeTransactionLegacyErrorType\n  | ErrorType\n\nexport function serializeTransaction<\n  const transaction extends TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = GetTransactionType<transaction>,\n>(\n  transaction: transaction,\n  signature?: Signature | undefined,\n): SerializedTransactionReturnType<transaction, _transactionType> {\n  const type = getTransactionType(transaction) as GetTransactionType\n\n  if (type === 'eip1559')\n    return serializeTransactionEIP1559(\n      transaction as TransactionSerializableEIP1559,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  if (type === 'eip2930')\n    return serializeTransactionEIP2930(\n      transaction as TransactionSerializableEIP2930,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  if (type === 'eip4844')\n    return serializeTransactionEIP4844(\n      transaction as TransactionSerializableEIP4844,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  if (type === 'eip7702')\n    return serializeTransactionEIP7702(\n      transaction as TransactionSerializableEIP7702,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  return serializeTransactionLegacy(\n    transaction as TransactionSerializableLegacy,\n    signature as SignatureLegacy,\n  ) as SerializedTransactionReturnType<transaction>\n}\n\ntype SerializeTransactionEIP7702ErrorType =\n  | AssertTransactionEIP7702ErrorType\n  | SerializeAuthorizationListErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | NumberToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP7702(\n  transaction: TransactionSerializableEIP7702,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP7702 {\n  const {\n    authorizationList,\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP7702(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n  const serializedAuthorizationList =\n    serializeAuthorizationList(authorizationList)\n\n  return concatHex([\n    '0x04',\n    toRlp([\n      numberToHex(chainId),\n      nonce ? numberToHex(nonce) : '0x',\n      maxPriorityFeePerGas ? numberToHex(maxPriorityFeePerGas) : '0x',\n      maxFeePerGas ? numberToHex(maxFeePerGas) : '0x',\n      gas ? numberToHex(gas) : '0x',\n      to ?? '0x',\n      value ? numberToHex(value) : '0x',\n      data ?? '0x',\n      serializedAccessList,\n      serializedAuthorizationList,\n      ...toYParitySignatureArray(transaction, signature),\n    ]),\n  ]) as TransactionSerializedEIP7702\n}\n\ntype SerializeTransactionEIP4844ErrorType =\n  | AssertTransactionEIP4844ErrorType\n  | BlobsToCommitmentsErrorType\n  | CommitmentsToVersionedHashesErrorType\n  | blobsToProofsErrorType\n  | ToBlobSidecarsErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | NumberToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP4844(\n  transaction: TransactionSerializableEIP4844,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP4844 {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP4844(transaction)\n\n  let blobVersionedHashes = transaction.blobVersionedHashes\n  let sidecars = transaction.sidecars\n  // If `blobs` are passed, we will need to compute the KZG commitments & proofs.\n  if (\n    transaction.blobs &&\n    (typeof blobVersionedHashes === 'undefined' ||\n      typeof sidecars === 'undefined')\n  ) {\n    const blobs = (\n      typeof transaction.blobs[0] === 'string'\n        ? transaction.blobs\n        : (transaction.blobs as ByteArray[]).map((x) => bytesToHex(x))\n    ) as Hex[]\n    const kzg = transaction.kzg!\n    const commitments = blobsToCommitments({\n      blobs,\n      kzg,\n    })\n\n    if (typeof blobVersionedHashes === 'undefined')\n      blobVersionedHashes = commitmentsToVersionedHashes({\n        commitments,\n      })\n    if (typeof sidecars === 'undefined') {\n      const proofs = blobsToProofs({ blobs, commitments, kzg })\n      sidecars = toBlobSidecars({ blobs, commitments, proofs })\n    }\n  }\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    numberToHex(chainId),\n    nonce ? numberToHex(nonce) : '0x',\n    maxPriorityFeePerGas ? numberToHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? numberToHex(maxFeePerGas) : '0x',\n    gas ? numberToHex(gas) : '0x',\n    to ?? '0x',\n    value ? numberToHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    maxFeePerBlobGas ? numberToHex(maxFeePerBlobGas) : '0x',\n    blobVersionedHashes ?? [],\n    ...toYParitySignatureArray(transaction, signature),\n  ] as const\n\n  const blobs: Hex[] = []\n  const commitments: Hex[] = []\n  const proofs: Hex[] = []\n  if (sidecars)\n    for (let i = 0; i < sidecars.length; i++) {\n      const { blob, commitment, proof } = sidecars[i]\n      blobs.push(blob)\n      commitments.push(commitment)\n      proofs.push(proof)\n    }\n\n  return concatHex([\n    '0x03',\n    sidecars\n      ? // If sidecars are enabled, envelope turns into a \"wrapper\":\n        toRlp([serializedTransaction, blobs, commitments, proofs])\n      : // If sidecars are disabled, standard envelope is used:\n        toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP4844\n}\n\ntype SerializeTransactionEIP1559ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | NumberToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP1559(\n  transaction: TransactionSerializableEIP1559,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP1559 {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP1559(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    numberToHex(chainId),\n    nonce ? numberToHex(nonce) : '0x',\n    maxPriorityFeePerGas ? numberToHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? numberToHex(maxFeePerGas) : '0x',\n    gas ? numberToHex(gas) : '0x',\n    to ?? '0x',\n    value ? numberToHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    ...toYParitySignatureArray(transaction, signature),\n  ]\n\n  return concatHex([\n    '0x02',\n    toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP1559\n}\n\ntype SerializeTransactionEIP2930ErrorType =\n  | AssertTransactionEIP2930ErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | NumberToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP2930(\n  transaction: TransactionSerializableEIP2930,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP2930 {\n  const { chainId, gas, data, nonce, to, value, accessList, gasPrice } =\n    transaction\n\n  assertTransactionEIP2930(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    numberToHex(chainId),\n    nonce ? numberToHex(nonce) : '0x',\n    gasPrice ? numberToHex(gasPrice) : '0x',\n    gas ? numberToHex(gas) : '0x',\n    to ?? '0x',\n    value ? numberToHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    ...toYParitySignatureArray(transaction, signature),\n  ]\n\n  return concatHex([\n    '0x01',\n    toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP2930\n}\n\ntype SerializeTransactionLegacyErrorType =\n  | AssertTransactionLegacyErrorType\n  | InvalidLegacyVErrorType\n  | NumberToHexErrorType\n  | ToRlpErrorType\n  | ErrorType\n\nfunction serializeTransactionLegacy(\n  transaction: TransactionSerializableLegacy,\n  signature?: SignatureLegacy | undefined,\n): TransactionSerializedLegacy {\n  const { chainId = 0, gas, data, nonce, to, value, gasPrice } = transaction\n\n  assertTransactionLegacy(transaction)\n\n  let serializedTransaction = [\n    nonce ? numberToHex(nonce) : '0x',\n    gasPrice ? numberToHex(gasPrice) : '0x',\n    gas ? numberToHex(gas) : '0x',\n    to ?? '0x',\n    value ? numberToHex(value) : '0x',\n    data ?? '0x',\n  ]\n\n  if (signature) {\n    const v = (() => {\n      // EIP-155 (inferred chainId)\n      if (signature.v >= 35n) {\n        const inferredChainId = (signature.v - 35n) / 2n\n        if (inferredChainId > 0) return signature.v\n        return 27n + (signature.v === 35n ? 0n : 1n)\n      }\n\n      // EIP-155 (explicit chainId)\n      if (chainId > 0)\n        return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n)\n\n      // Pre-EIP-155 (no chainId)\n      const v = 27n + (signature.v === 27n ? 0n : 1n)\n      if (signature.v !== v) throw new InvalidLegacyVError({ v: signature.v })\n      return v\n    })()\n\n    const r = trim(signature.r)\n    const s = trim(signature.s)\n\n    serializedTransaction = [\n      ...serializedTransaction,\n      numberToHex(v),\n      r === '0x00' ? '0x' : r,\n      s === '0x00' ? '0x' : s,\n    ]\n  } else if (chainId > 0) {\n    serializedTransaction = [\n      ...serializedTransaction,\n      numberToHex(chainId),\n      '0x',\n      '0x',\n    ]\n  }\n\n  return toRlp(serializedTransaction) as TransactionSerializedLegacy\n}\n\nexport function toYParitySignatureArray(\n  transaction: TransactionSerializableGeneric,\n  signature_?: Signature | undefined,\n) {\n  const signature = signature_ ?? transaction\n  const { v, yParity } = signature\n\n  if (typeof signature.r === 'undefined') return []\n  if (typeof signature.s === 'undefined') return []\n  if (typeof v === 'undefined' && typeof yParity === 'undefined') return []\n\n  const r = trim(signature.r)\n  const s = trim(signature.s)\n\n  const yParity_ = (() => {\n    if (typeof yParity === 'number') return yParity ? numberToHex(1) : '0x'\n    if (v === 0n) return '0x'\n    if (v === 1n) return numberToHex(1)\n\n    return v === 27n ? '0x' : numberToHex(1)\n  })()\n\n  return [yParity_, r === '0x00' ? '0x' : r, s === '0x00' ? '0x' : s]\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type {\n  AuthorizationList,\n  SerializedAuthorizationList,\n} from '../../types/authorization.js'\nimport { toHex } from '../encoding/toHex.js'\nimport { toYParitySignatureArray } from '../transaction/serializeTransaction.js'\n\nexport type SerializeAuthorizationListReturnType = SerializedAuthorizationList\n\nexport type SerializeAuthorizationListErrorType = ErrorType\n\n/*\n * Serializes an EIP-7702 authorization list.\n */\nexport function serializeAuthorizationList(\n  authorizationList?: AuthorizationList<number, true> | undefined,\n): SerializeAuthorizationListReturnType {\n  if (!authorizationList || authorizationList.length === 0) return []\n\n  const serializedAuthorizationList = []\n  for (const authorization of authorizationList) {\n    const { chainId, nonce, ...signature } = authorization\n    const contractAddress = authorization.address\n    serializedAuthorizationList.push([\n      chainId ? toHex(chainId) : '0x',\n      contractAddress,\n      nonce ? toHex(nonce) : '0x',\n      ...toYParitySignatureArray({}, signature),\n    ])\n  }\n\n  return serializedAuthorizationList as {} as SerializeAuthorizationListReturnType\n}\n", "import type { Address } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type GetAddressErrorType, getAddress } from '../address/getAddress.js'\nimport {\n  type IsAddressEqualErrorType,\n  isAddressEqual,\n} from '../address/isAddressEqual.js'\nimport {\n  type RecoverAuthorizationAddressErrorType,\n  type RecoverAuthorizationAddressParameters,\n  recoverAuthorizationAddress,\n} from './recoverAuthorizationAddress.js'\n\nexport type VerifyAuthorizationParameters =\n  RecoverAuthorizationAddressParameters & {\n    /** The address that signed the Authorization object. */\n    address: Address\n  }\n\nexport type VerifyAuthorizationReturnType = boolean\n\nexport type VerifyAuthorizationErrorType =\n  | IsAddressEqualErrorType\n  | GetAddressErrorType\n  | RecoverAuthorizationAddressErrorType\n  | ErrorType\n\n/**\n * Verify that an Authorization object was signed by the provided address.\n *\n * - Docs {@link https://viem.sh/docs/utilities/verifyAuthorization}\n *\n * @param parameters - {@link VerifyAuthorizationParameters}\n * @returns Whether or not the signature is valid. {@link VerifyAuthorizationReturnType}\n */\nexport async function verifyAuthorization({\n  address,\n  authorization,\n  signature,\n}: VerifyAuthorizationParameters): Promise<VerifyAuthorizationReturnType> {\n  return isAddressEqual(\n    getAddress(address),\n    await recoverAuthorizationAddress({\n      authorization,\n      signature,\n    }),\n  )\n}\n", "import { LruMap } from '../lru.js'\n\n/** @internal */\nexport const promiseCache = /*#__PURE__*/ new LruMap<Promise<any>>(8192)\n\ntype WithDedupeOptions = {\n  enabled?: boolean | undefined\n  id?: string | undefined\n}\n\n/** Deduplicates in-flight promises. */\nexport function withDedupe<data>(\n  fn: () => Promise<data>,\n  { enabled = true, id }: WithDedupeOptions,\n): Promise<data> {\n  if (!enabled || !id) return fn()\n  if (promiseCache.get(id)) return promiseCache.get(id)!\n  const promise = fn().finally(() => promiseCache.delete(id))\n  promiseCache.set(id, promise)\n  return promise\n}\n", "import { BaseError } from '../errors/base.js'\nimport {\n  HttpRequestError,\n  type HttpRequestErrorType,\n  type RpcRequestErrorType,\n  type TimeoutErrorType,\n  type WebSocketRequestErrorType,\n} from '../errors/request.js'\nimport {\n  AtomicityNotSupportedError,\n  type AtomicityNotSupportedErrorType,\n  AtomicReadyWalletRejectedUpgradeError,\n  type AtomicReadyWalletRejectedUpgradeErrorType,\n  BundleTooLargeError,\n  type BundleTooLargeErrorType,\n  ChainDisconnectedError,\n  type ChainDisconnectedErrorType,\n  DuplicateIdError,\n  type DuplicateIdErrorType,\n  InternalRpcError,\n  type InternalRpcErrorType,\n  InvalidInputRpcError,\n  type InvalidInputRpcErrorType,\n  InvalidParamsRpcError,\n  type InvalidParamsRpcErrorType,\n  InvalidRequestRpcError,\n  type InvalidRequestRpcErrorType,\n  JsonRpcVersionUnsupportedError,\n  type JsonRpcVersionUnsupportedErrorType,\n  LimitExceededRpcError,\n  type LimitExceededRpcErrorType,\n  MethodNotFoundRpcError,\n  type MethodNotFoundRpcErrorType,\n  MethodNotSupportedRpcError,\n  type MethodNotSupportedRpcErrorType,\n  ParseRpcError,\n  type ParseRpcErrorType,\n  ProviderDisconnectedError,\n  type ProviderDisconnectedErrorType,\n  type ProviderRpcErrorCode,\n  ResourceNotFoundRpcError,\n  type ResourceNotFoundRpcErrorType,\n  ResourceUnavailableRpcError,\n  type ResourceUnavailableRpcErrorType,\n  type RpcError,\n  type RpcErrorCode,\n  type RpcErrorType,\n  SwitchChainError,\n  type SwitchChainErrorType,\n  TransactionRejectedRpcError,\n  type TransactionRejectedRpcErrorType,\n  UnauthorizedProviderError,\n  type UnauthorizedProviderErrorType,\n  UnknownBundleIdError,\n  type UnknownBundleIdErrorType,\n  UnknownRpcError,\n  type UnknownRpcErrorType,\n  UnsupportedChainIdError,\n  type UnsupportedChainIdErrorType,\n  UnsupportedNonOptionalCapabilityError,\n  type UnsupportedNonOptionalCapabilityErrorType,\n  UnsupportedProviderMethodError,\n  type UnsupportedProviderMethodErrorType,\n  UserRejectedRequestError,\n  type UserRejectedRequestErrorType,\n} from '../errors/rpc.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type {\n  EIP1193RequestFn,\n  EIP1193RequestOptions,\n} from '../types/eip1193.js'\nimport { stringToHex } from './encoding/toHex.js'\nimport type { CreateBatchSchedulerErrorType } from './promise/createBatchScheduler.js'\nimport { withDedupe } from './promise/withDedupe.js'\nimport { type WithRetryErrorType, withRetry } from './promise/withRetry.js'\nimport type { GetSocketRpcClientErrorType } from './rpc/socket.js'\nimport { stringify } from './stringify.js'\n\nexport type RequestErrorType =\n  | AtomicityNotSupportedErrorType\n  | AtomicReadyWalletRejectedUpgradeErrorType\n  | BundleTooLargeErrorType\n  | ChainDisconnectedErrorType\n  | CreateBatchSchedulerErrorType\n  | DuplicateIdErrorType\n  | HttpRequestErrorType\n  | InternalRpcErrorType\n  | InvalidInputRpcErrorType\n  | InvalidParamsRpcErrorType\n  | InvalidRequestRpcErrorType\n  | GetSocketRpcClientErrorType\n  | JsonRpcVersionUnsupportedErrorType\n  | LimitExceededRpcErrorType\n  | MethodNotFoundRpcErrorType\n  | MethodNotSupportedRpcErrorType\n  | ParseRpcErrorType\n  | ProviderDisconnectedErrorType\n  | ResourceNotFoundRpcErrorType\n  | ResourceUnavailableRpcErrorType\n  | RpcErrorType\n  | RpcRequestErrorType\n  | SwitchChainErrorType\n  | TimeoutErrorType\n  | TransactionRejectedRpcErrorType\n  | UnauthorizedProviderErrorType\n  | UnknownBundleIdErrorType\n  | UnknownRpcErrorType\n  | UnsupportedChainIdErrorType\n  | UnsupportedNonOptionalCapabilityErrorType\n  | UnsupportedProviderMethodErrorType\n  | UserRejectedRequestErrorType\n  | WebSocketRequestErrorType\n  | WithRetryErrorType\n  | ErrorType\n\nexport function buildRequest<request extends (args: any) => Promise<any>>(\n  request: request,\n  options: EIP1193RequestOptions = {},\n): EIP1193RequestFn {\n  return async (args, overrideOptions = {}) => {\n    const {\n      dedupe = false,\n      methods,\n      retryDelay = 150,\n      retryCount = 3,\n      uid,\n    } = {\n      ...options,\n      ...overrideOptions,\n    }\n\n    const { method } = args\n    if (methods?.exclude?.includes(method))\n      throw new MethodNotSupportedRpcError(new Error('method not supported'), {\n        method,\n      })\n    if (methods?.include && !methods.include.includes(method))\n      throw new MethodNotSupportedRpcError(new Error('method not supported'), {\n        method,\n      })\n\n    const requestId = dedupe\n      ? stringToHex(`${uid}.${stringify(args)}`)\n      : undefined\n    return withDedupe(\n      () =>\n        withRetry(\n          async () => {\n            try {\n              return await request(args)\n            } catch (err_) {\n              const err = err_ as unknown as RpcError<\n                RpcErrorCode | ProviderRpcErrorCode\n              >\n              switch (err.code) {\n                // -32700\n                case ParseRpcError.code:\n                  throw new ParseRpcError(err)\n                // -32600\n                case InvalidRequestRpcError.code:\n                  throw new InvalidRequestRpcError(err)\n                // -32601\n                case MethodNotFoundRpcError.code:\n                  throw new MethodNotFoundRpcError(err, { method: args.method })\n                // -32602\n                case InvalidParamsRpcError.code:\n                  throw new InvalidParamsRpcError(err)\n                // -32603\n                case InternalRpcError.code:\n                  throw new InternalRpcError(err)\n                // -32000\n                case InvalidInputRpcError.code:\n                  throw new InvalidInputRpcError(err)\n                // -32001\n                case ResourceNotFoundRpcError.code:\n                  throw new ResourceNotFoundRpcError(err)\n                // -32002\n                case ResourceUnavailableRpcError.code:\n                  throw new ResourceUnavailableRpcError(err)\n                // -32003\n                case TransactionRejectedRpcError.code:\n                  throw new TransactionRejectedRpcError(err)\n                // -32004\n                case MethodNotSupportedRpcError.code:\n                  throw new MethodNotSupportedRpcError(err, {\n                    method: args.method,\n                  })\n                // -32005\n                case LimitExceededRpcError.code:\n                  throw new LimitExceededRpcError(err)\n                // -32006\n                case JsonRpcVersionUnsupportedError.code:\n                  throw new JsonRpcVersionUnsupportedError(err)\n\n                // 4001\n                case UserRejectedRequestError.code:\n                  throw new UserRejectedRequestError(err)\n                // 4100\n                case UnauthorizedProviderError.code:\n                  throw new UnauthorizedProviderError(err)\n                // 4200\n                case UnsupportedProviderMethodError.code:\n                  throw new UnsupportedProviderMethodError(err)\n                // 4900\n                case ProviderDisconnectedError.code:\n                  throw new ProviderDisconnectedError(err)\n                // 4901\n                case ChainDisconnectedError.code:\n                  throw new ChainDisconnectedError(err)\n                // 4902\n                case SwitchChainError.code:\n                  throw new SwitchChainError(err)\n\n                // 5700\n                case UnsupportedNonOptionalCapabilityError.code:\n                  throw new UnsupportedNonOptionalCapabilityError(err)\n                // 5710\n                case UnsupportedChainIdError.code:\n                  throw new UnsupportedChainIdError(err)\n                // 5720\n                case DuplicateIdError.code:\n                  throw new DuplicateIdError(err)\n                // 5730\n                case UnknownBundleIdError.code:\n                  throw new UnknownBundleIdError(err)\n                // 5740\n                case BundleTooLargeError.code:\n                  throw new BundleTooLargeError(err)\n                // 5750\n                case AtomicReadyWalletRejectedUpgradeError.code:\n                  throw new AtomicReadyWalletRejectedUpgradeError(err)\n                // 5760\n                case AtomicityNotSupportedError.code:\n                  throw new AtomicityNotSupportedError(err)\n\n                // CAIP-25: User Rejected Error\n                // https://docs.walletconnect.com/2.0/specs/clients/sign/error-codes#rejected-caip-25\n                case 5000:\n                  throw new UserRejectedRequestError(err)\n\n                default:\n                  if (err_ instanceof BaseError) throw err_\n                  throw new UnknownRpcError(err as Error)\n              }\n            }\n          },\n          {\n            delay: ({ count, error }) => {\n              // If we find a Retry-After header, let's retry after the given time.\n              if (error && error instanceof HttpRequestError) {\n                const retryAfter = error?.headers?.get('Retry-After')\n                if (retryAfter?.match(/\\d/))\n                  return Number.parseInt(retryAfter, 10) * 1000\n              }\n\n              // Otherwise, let's retry with an exponential backoff.\n              return ~~(1 << count) * retryDelay\n            },\n            retryCount,\n            shouldRetry: ({ error }) => shouldRetry(error),\n          },\n        ),\n      { enabled: dedupe, id: requestId },\n    )\n  }\n}\n\n/** @internal */\nexport function shouldRetry(error: Error) {\n  if ('code' in error && typeof error.code === 'number') {\n    if (error.code === -1) return true // Unknown error\n    if (error.code === LimitExceededRpcError.code) return true\n    if (error.code === InternalRpcError.code) return true\n    return false\n  }\n  if (error instanceof HttpRequestError && error.status) {\n    // Forbidden\n    if (error.status === 403) return true\n    // Request Timeout\n    if (error.status === 408) return true\n    // Request Entity Too Large\n    if (error.status === 413) return true\n    // Too Many Requests\n    if (error.status === 429) return true\n    // Internal Server Error\n    if (error.status === 500) return true\n    // Bad Gateway\n    if (error.status === 502) return true\n    // Service Unavailable\n    if (error.status === 503) return true\n    // Gateway Timeout\n    if (error.status === 504) return true\n    return false\n  }\n  return true\n}\n", "import type { Chain, ChainFormatters } from '../../types/chain.js'\nimport type { Assign, Prettify } from '../../types/utils.js'\n\nexport function defineChain<\n  formatters extends ChainFormatters,\n  const chain extends Chain<formatters>,\n>(chain: chain): Prettify<Assign<Chain<undefined>, chain>> {\n  return {\n    formatters: undefined,\n    fees: undefined,\n    serializers: undefined,\n    ...chain,\n  } as Assign<Chain<undefined>, chain>\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type SizeErrorType, size } from '../data/size.js'\n\nexport type IsHashErrorType = IsHexErrorType | SizeErrorType | ErrorType\n\nexport function isHash(hash: string): hash is Hex {\n  return isHex(hash) && size(hash) === 32\n}\n", "/**\n\nSHA1 (RFC 3174), MD5 (RFC 1321) and RIPEMD160 (RFC 2286) legacy, weak hash functions.\nDon't use them in a new protocol. What \"weak\" means:\n\n- Collisions can be made with 2^18 effort in MD5, 2^60 in SHA1, 2^80 in RIPEMD160.\n- No practical pre-image attacks (only theoretical, 2^123.4)\n- HMAC seems kinda ok: https://datatracker.ietf.org/doc/html/rfc6151\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.ts';\nimport { type CHash, clean, createHasher, rotl } from './utils.ts';\n\n/** Initial SHA1 state */\nconst SHA1_IV = /* @__PURE__ */ Uint32Array.from([\n  0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0,\n]);\n\n// Reusable temporary buffer\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\n\n/** SHA1 legacy hash class. */\nexport class SHA1 extends HashMD<SHA1> {\n  private A = SHA1_IV[0] | 0;\n  private B = SHA1_IV[1] | 0;\n  private C = SHA1_IV[2] | 0;\n  private D = SHA1_IV[3] | 0;\n  private E = SHA1_IV[4] | 0;\n\n  constructor() {\n    super(64, 20, 8, false);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { A, B, C, D, E } = this;\n    return [A, B, C, D, E];\n  }\n  protected set(A: number, B: number, C: number, D: number, E: number): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) SHA1_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 80; i++)\n      SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\n    // Compression function main loop, 80 rounds\n    let { A, B, C, D, E } = this;\n    for (let i = 0; i < 80; i++) {\n      let F, K;\n      if (i < 20) {\n        F = Chi(B, C, D);\n        K = 0x5a827999;\n      } else if (i < 40) {\n        F = B ^ C ^ D;\n        K = 0x6ed9eba1;\n      } else if (i < 60) {\n        F = Maj(B, C, D);\n        K = 0x8f1bbcdc;\n      } else {\n        F = B ^ C ^ D;\n        K = 0xca62c1d6;\n      }\n      const T = (rotl(A, 5) + F + E + K + SHA1_W[i]) | 0;\n      E = D;\n      D = C;\n      C = rotl(B, 30);\n      B = A;\n      A = T;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    this.set(A, B, C, D, E);\n  }\n  protected roundClean(): void {\n    clean(SHA1_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\n/** SHA1 (RFC 3174) legacy hash function. It was cryptographically broken. */\nexport const sha1: CHash = /* @__PURE__ */ createHasher(() => new SHA1());\n\n/** Per-round constants */\nconst p32 = /* @__PURE__ */ Math.pow(2, 32);\nconst K = /* @__PURE__ */ Array.from({ length: 64 }, (_, i) =>\n  Math.floor(p32 * Math.abs(Math.sin(i + 1)))\n);\n\n/** md5 initial state: same as sha1, but 4 u32 instead of 5. */\nconst MD5_IV = /* @__PURE__ */ SHA1_IV.slice(0, 4);\n\n// Reusable temporary buffer\nconst MD5_W = /* @__PURE__ */ new Uint32Array(16);\n/** MD5 legacy hash class. */\nexport class MD5 extends HashMD<MD5> {\n  private A = MD5_IV[0] | 0;\n  private B = MD5_IV[1] | 0;\n  private C = MD5_IV[2] | 0;\n  private D = MD5_IV[3] | 0;\n\n  constructor() {\n    super(64, 16, 8, true);\n  }\n  protected get(): [number, number, number, number] {\n    const { A, B, C, D } = this;\n    return [A, B, C, D];\n  }\n  protected set(A: number, B: number, C: number, D: number): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) MD5_W[i] = view.getUint32(offset, true);\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D } = this;\n    for (let i = 0; i < 64; i++) {\n      let F, g, s;\n      if (i < 16) {\n        F = Chi(B, C, D);\n        g = i;\n        s = [7, 12, 17, 22];\n      } else if (i < 32) {\n        F = Chi(D, B, C);\n        g = (5 * i + 1) % 16;\n        s = [5, 9, 14, 20];\n      } else if (i < 48) {\n        F = B ^ C ^ D;\n        g = (3 * i + 5) % 16;\n        s = [4, 11, 16, 23];\n      } else {\n        F = C ^ (B | ~D);\n        g = (7 * i) % 16;\n        s = [6, 10, 15, 21];\n      }\n      F = F + A + K[i] + MD5_W[g];\n      A = D;\n      D = C;\n      C = B;\n      B = B + rotl(F, s[i % 4]);\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    this.set(A, B, C, D);\n  }\n  protected roundClean(): void {\n    clean(MD5_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\n/**\n * MD5 (RFC 1321) legacy hash function. It was cryptographically broken.\n * MD5 architecture is similar to SHA1, with some differences:\n * - Reduced output length: 16 bytes (128 bit) instead of 20\n * - 64 rounds, instead of 80\n * - Little-endian: could be faster, but will require more code\n * - Non-linear index selection: huge speed-up for unroll\n * - Per round constants: more memory accesses, additional speed-up for unroll\n */\nexport const md5: CHash = /* @__PURE__ */ createHasher(() => new MD5());\n\n// RIPEMD-160\n\nconst Rho160 = /* @__PURE__ */ Uint8Array.from([\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n]);\nconst Id160 = /* @__PURE__ */ (() => Uint8Array.from(new Array(16).fill(0).map((_, i) => i)))();\nconst Pi160 = /* @__PURE__ */ (() => Id160.map((i) => (9 * i + 5) % 16))();\nconst idxLR = /* @__PURE__ */ (() => {\n  const L = [Id160];\n  const R = [Pi160];\n  const res = [L, R];\n  for (let i = 0; i < 4; i++) for (let j of res) j.push(j[i].map((k) => Rho160[k]));\n  return res;\n})();\nconst idxL = /* @__PURE__ */ (() => idxLR[0])();\nconst idxR = /* @__PURE__ */ (() => idxLR[1])();\n// const [idxL, idxR] = idxLR;\n\nconst shifts160 = /* @__PURE__ */ [\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => Uint8Array.from(i));\nconst shiftsL160 = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst shiftsR160 = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst Kl160 = /* @__PURE__ */ Uint32Array.from([\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr160 = /* @__PURE__ */ Uint32Array.from([\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// It's called f() in spec.\nfunction ripemd_f(group: number, x: number, y: number, z: number): number {\n  if (group === 0) return x ^ y ^ z;\n  if (group === 1) return (x & y) | (~x & z);\n  if (group === 2) return (x | ~y) ^ z;\n  if (group === 3) return (x & z) | (y & ~z);\n  return x ^ (y | ~z);\n}\n// Reusable temporary buffer\nconst BUF_160 = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends HashMD<RIPEMD160> {\n  private h0 = 0x67452301 | 0;\n  private h1 = 0xefcdab89 | 0;\n  private h2 = 0x98badcfe | 0;\n  private h3 = 0x10325476 | 0;\n  private h4 = 0xc3d2e1f0 | 0;\n\n  constructor() {\n    super(64, 20, 8, true);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { h0, h1, h2, h3, h4 } = this;\n    return [h0, h1, h2, h3, h4];\n  }\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number): void {\n    this.h0 = h0 | 0;\n    this.h1 = h1 | 0;\n    this.h2 = h2 | 0;\n    this.h3 = h3 | 0;\n    this.h4 = h4 | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) BUF_160[i] = view.getUint32(offset, true);\n    // prettier-ignore\n    let al = this.h0 | 0, ar = al,\n        bl = this.h1 | 0, br = bl,\n        cl = this.h2 | 0, cr = cl,\n        dl = this.h3 | 0, dr = dl,\n        el = this.h4 | 0, er = el;\n\n    // Instead of iterating 0 to 80, we split it into 5 groups\n    // And use the groups in constants, functions, etc. Much simpler\n    for (let group = 0; group < 5; group++) {\n      const rGroup = 4 - group;\n      const hbl = Kl160[group], hbr = Kr160[group]; // prettier-ignore\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n      const sl = shiftsL160[group], sr = shiftsR160[group]; // prettier-ignore\n      for (let i = 0; i < 16; i++) {\n        const tl = (rotl(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i]] + hbl, sl[i]) + el) | 0;\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n      }\n      // 2 loops are 10% faster\n      for (let i = 0; i < 16; i++) {\n        const tr = (rotl(ar + ripemd_f(rGroup, br, cr, dr) + BUF_160[rr[i]] + hbr, sr[i]) + er) | 0;\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n      }\n    }\n    // Add the compressed chunk to the current hash value\n    this.set(\n      (this.h1 + cl + dr) | 0,\n      (this.h2 + dl + er) | 0,\n      (this.h3 + el + ar) | 0,\n      (this.h4 + al + br) | 0,\n      (this.h0 + bl + cr) | 0\n    );\n  }\n  protected roundClean(): void {\n    clean(BUF_160);\n  }\n  destroy(): void {\n    this.destroyed = true;\n    clean(this.buffer);\n    this.set(0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * RIPEMD-160 - a legacy hash function from 1990s.\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n */\nexport const ripemd160: CHash = /* @__PURE__ */ createHasher(() => new RIPEMD160());\n", "import type { Address } from 'abitype'\n\nimport { getTransactionCount } from '../actions/public/getTransactionCount.js'\nimport type { Client } from '../clients/createClient.js'\nimport type { MaybePromise } from '../types/utils.js'\nimport { LruMap } from './lru.js'\n\nexport type CreateNonceManagerParameters = {\n  source: NonceManagerSource\n}\n\ntype FunctionParameters = {\n  address: Address\n  chainId: number\n}\n\nexport type NonceManager = {\n  /** Get and increment a nonce. */\n  consume: (\n    parameters: FunctionParameters & { client: Client },\n  ) => Promise<number>\n  /** Increment a nonce. */\n  increment: (chainId: FunctionParameters) => void\n  /** Get a nonce. */\n  get: (chainId: FunctionParameters & { client: Client }) => Promise<number>\n  /** Reset a nonce. */\n  reset: (chainId: FunctionParameters) => void\n}\n\n/**\n * Creates a nonce manager for auto-incrementing transaction nonces.\n *\n * - Docs: https://viem.sh/docs/accounts/createNonceManager\n *\n * @example\n * ```ts\n * const nonceManager = createNonceManager({\n *   source: jsonRpc(),\n * })\n * ```\n */\nexport function createNonceManager(\n  parameters: CreateNonceManagerParameters,\n): NonceManager {\n  const { source } = parameters\n\n  const deltaMap = new Map()\n  const nonceMap = new LruMap<number>(8192)\n  const promiseMap = new Map<string, Promise<number>>()\n\n  const getKey = ({ address, chainId }: FunctionParameters) =>\n    `${address}.${chainId}`\n\n  return {\n    async consume({ address, chainId, client }) {\n      const key = getKey({ address, chainId })\n      const promise = this.get({ address, chainId, client })\n\n      this.increment({ address, chainId })\n      const nonce = await promise\n\n      await source.set({ address, chainId }, nonce)\n      nonceMap.set(key, nonce)\n\n      return nonce\n    },\n    async increment({ address, chainId }) {\n      const key = getKey({ address, chainId })\n      const delta = deltaMap.get(key) ?? 0\n      deltaMap.set(key, delta + 1)\n    },\n    async get({ address, chainId, client }) {\n      const key = getKey({ address, chainId })\n\n      let promise = promiseMap.get(key)\n      if (!promise) {\n        promise = (async () => {\n          try {\n            const nonce = await source.get({ address, chainId, client })\n            const previousNonce = nonceMap.get(key) ?? 0\n            if (previousNonce > 0 && nonce <= previousNonce)\n              return previousNonce + 1\n            nonceMap.delete(key)\n            return nonce\n          } finally {\n            this.reset({ address, chainId })\n          }\n        })()\n        promiseMap.set(key, promise)\n      }\n\n      const delta = deltaMap.get(key) ?? 0\n      return delta + (await promise)\n    },\n    reset({ address, chainId }) {\n      const key = getKey({ address, chainId })\n      deltaMap.delete(key)\n      promiseMap.delete(key)\n    },\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// Sources\n\nexport type NonceManagerSource = {\n  /** Get a nonce. */\n  get(parameters: FunctionParameters & { client: Client }): MaybePromise<number>\n  /** Set a nonce. */\n  set(parameters: FunctionParameters, nonce: number): MaybePromise<void>\n}\n\n/** JSON-RPC source for a nonce manager. */\nexport function jsonRpc(): NonceManagerSource {\n  return {\n    async get(parameters) {\n      const { address, client } = parameters\n      return getTransactionCount(client, {\n        address,\n        blockTag: 'pending',\n      })\n    },\n    set() {},\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// Default\n\n/** Default Nonce Manager with a JSON-RPC source. */\nexport const nonceManager = /*#__PURE__*/ createNonceManager({\n  source: jsonRpc(),\n})\n", "import type { ErrorType } from '../../errors/utils.js'\n\nexport type WithTimeoutErrorType = ErrorType\n\nexport function withTimeout<data>(\n  fn: ({\n    signal,\n  }: {\n    signal: AbortController['signal'] | null\n  }) => Promise<data>,\n  {\n    errorInstance = new Error('timed out'),\n    timeout,\n    signal,\n  }: {\n    // The error instance to throw when the timeout is reached.\n    errorInstance?: Error | undefined\n    // The timeout (in ms).\n    timeout: number\n    // Whether or not the timeout should use an abort signal.\n    signal?: boolean | undefined\n  },\n): Promise<data> {\n  return new Promise((resolve, reject) => {\n    ;(async () => {\n      let timeoutId!: NodeJS.Timeout\n      try {\n        const controller = new AbortController()\n        if (timeout > 0) {\n          timeoutId = setTimeout(() => {\n            if (signal) {\n              controller.abort()\n            } else {\n              reject(errorInstance)\n            }\n          }, timeout) as NodeJS.Timeout // need to cast because bun globals.d.ts overrides @types/node\n        }\n        resolve(await fn({ signal: controller?.signal || null }))\n      } catch (err) {\n        if ((err as Error)?.name === 'AbortError') reject(errorInstance)\n        reject(err)\n      } finally {\n        clearTimeout(timeoutId)\n      }\n    })()\n  })\n}\n", "function createIdStore() {\n  return {\n    current: 0,\n    take() {\n      return this.current++\n    },\n    reset() {\n      this.current = 0\n    },\n  }\n}\n\nexport const idCache = /*#__PURE__*/ createIdStore()\n", "import {\n  HttpRequestError,\n  type HttpRequestErrorType as HttpRequestErrorType_,\n  TimeoutError,\n  type TimeoutErrorType,\n} from '../../errors/request.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { RpcRequest, RpcResponse } from '../../types/rpc.js'\nimport type { MaybePromise } from '../../types/utils.js'\nimport {\n  type WithTimeoutErrorType,\n  withTimeout,\n} from '../promise/withTimeout.js'\nimport { stringify } from '../stringify.js'\nimport { idCache } from './id.js'\n\nexport type HttpRpcClientOptions = {\n  /** Override for the fetch function used to make requests. */\n  fetchFn?:\n    | ((input: string | URL | Request, init?: RequestInit) => Promise<Response>)\n    | undefined\n  /** Request configuration to pass to `fetch`. */\n  fetchOptions?: Omit<RequestInit, 'body'> | undefined\n  /** A callback to handle the request. */\n  onRequest?:\n    | ((\n        request: Request,\n        init: RequestInit,\n      ) => MaybePromise<\n        void | undefined | (RequestInit & { url?: string | undefined })\n      >)\n    | undefined\n  /** A callback to handle the response. */\n  onResponse?: ((response: Response) => Promise<void> | void) | undefined\n  /** The timeout (in ms) for the request. */\n  timeout?: number | undefined\n}\n\nexport type HttpRequestParameters<\n  body extends RpcRequest | RpcRequest[] = RpcRequest,\n> = {\n  /** The RPC request body. */\n  body: body\n  /** Override for the fetch function used to make requests. */\n  fetchFn?: HttpRpcClientOptions['fetchFn'] | undefined\n  /** Request configuration to pass to `fetch`. */\n  fetchOptions?: HttpRpcClientOptions['fetchOptions'] | undefined\n  /** A callback to handle the response. */\n  onRequest?:\n    | ((\n        request: Request,\n        init: RequestInit,\n      ) => MaybePromise<\n        void | undefined | (RequestInit & { url?: string | undefined })\n      >)\n    | undefined\n  /** A callback to handle the response. */\n  onResponse?: ((response: Response) => Promise<void> | void) | undefined\n  /** The timeout (in ms) for the request. */\n  timeout?: HttpRpcClientOptions['timeout'] | undefined\n}\n\nexport type HttpRequestReturnType<\n  body extends RpcRequest | RpcRequest[] = RpcRequest,\n> = body extends RpcRequest[] ? RpcResponse[] : RpcResponse\n\nexport type HttpRequestErrorType =\n  | HttpRequestErrorType_\n  | TimeoutErrorType\n  | WithTimeoutErrorType\n  | ErrorType\n\nexport type HttpRpcClient = {\n  request<body extends RpcRequest | RpcRequest[]>(\n    params: HttpRequestParameters<body>,\n  ): Promise<HttpRequestReturnType<body>>\n}\n\nexport function getHttpRpcClient(\n  url: string,\n  options: HttpRpcClientOptions = {},\n): HttpRpcClient {\n  return {\n    async request(params) {\n      const {\n        body,\n        fetchFn = options.fetchFn ?? fetch,\n        onRequest = options.onRequest,\n        onResponse = options.onResponse,\n        timeout = options.timeout ?? 10_000,\n      } = params\n\n      const fetchOptions = {\n        ...(options.fetchOptions ?? {}),\n        ...(params.fetchOptions ?? {}),\n      }\n\n      const { headers, method, signal: signal_ } = fetchOptions\n\n      try {\n        const response = await withTimeout(\n          async ({ signal }) => {\n            const init: RequestInit = {\n              ...fetchOptions,\n              body: Array.isArray(body)\n                ? stringify(\n                    body.map((body) => ({\n                      jsonrpc: '2.0',\n                      id: body.id ?? idCache.take(),\n                      ...body,\n                    })),\n                  )\n                : stringify({\n                    jsonrpc: '2.0',\n                    id: body.id ?? idCache.take(),\n                    ...body,\n                  }),\n              headers: {\n                'Content-Type': 'application/json',\n                ...headers,\n              },\n              method: method || 'POST',\n              signal: signal_ || (timeout > 0 ? signal : null),\n            }\n            const request = new Request(url, init)\n            const args = (await onRequest?.(request, init)) ?? { ...init, url }\n            const response = await fetchFn(args.url ?? url, args)\n            return response\n          },\n          {\n            errorInstance: new TimeoutError({ body, url }),\n            timeout,\n            signal: true,\n          },\n        )\n\n        if (onResponse) await onResponse(response)\n\n        let data: any\n        if (\n          response.headers.get('Content-Type')?.startsWith('application/json')\n        )\n          data = await response.json()\n        else {\n          data = await response.text()\n          try {\n            data = JSON.parse(data || '{}')\n          } catch (err) {\n            if (response.ok) throw err\n            data = { error: data }\n          }\n        }\n\n        if (!response.ok) {\n          throw new HttpRequestError({\n            body,\n            details: stringify(data.error) || response.statusText,\n            headers: response.headers,\n            status: response.status,\n            url,\n          })\n        }\n\n        return data\n      } catch (err) {\n        if (err instanceof HttpRequestError) throw err\n        if (err instanceof TimeoutError) throw err\n        throw new HttpRequestError({\n          body,\n          cause: err as Error,\n          url,\n        })\n      }\n    },\n  }\n}\n", "import { SocketClosedError, TimeoutError } from '../../errors/request.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { RpcRequest, RpcResponse } from '../../types/rpc.js'\nimport {\n  type CreateBatchSchedulerErrorType,\n  createBatchScheduler,\n} from '../promise/createBatchScheduler.js'\nimport { withTimeout } from '../promise/withTimeout.js'\nimport { idCache } from './id.js'\n\ntype Id = string | number\ntype CallbackFn = {\n  onResponse: (message: any) => void\n  onError?: ((error?: Error | Event | undefined) => void) | undefined\n  body?: RpcRequest\n}\ntype CallbackMap = Map<Id, CallbackFn>\n\nexport type GetSocketParameters = {\n  onClose: () => void\n  onError: (error?: Error | Event | undefined) => void\n  onOpen: () => void\n  onResponse: (data: RpcResponse) => void\n}\n\nexport type Socket<socket extends {}> = socket & {\n  close(): void\n  ping?: (() => void) | undefined\n  request(params: { body: RpcRequest }): void\n}\n\nexport type SocketRpcClient<socket extends {}> = {\n  close(): void\n  socket: Socket<socket>\n  request(params: {\n    body: RpcRequest\n    onError?: ((error?: Error | Event | undefined) => void) | undefined\n    onResponse: (message: RpcResponse) => void\n  }): void\n  requestAsync(params: {\n    body: RpcRequest\n    timeout?: number | undefined\n  }): Promise<RpcResponse>\n  requests: CallbackMap\n  subscriptions: CallbackMap\n  url: string\n}\n\nexport type GetSocketRpcClientParameters<socket extends {} = {}> = {\n  getSocket(params: GetSocketParameters): Promise<Socket<socket>>\n  /**\n   * Whether or not to send keep-alive messages.\n   * @default true\n   */\n  keepAlive?:\n    | boolean\n    | {\n        /**\n         * The interval (in ms) to send keep-alive messages.\n         * @default 30_000\n         */\n        interval?: number | undefined\n      }\n    | undefined\n  key?: string\n  /**\n   * Whether or not to attempt to reconnect on socket failure or closure.\n   * @default true\n   */\n  reconnect?:\n    | boolean\n    | {\n        /**\n         * The maximum number of reconnection attempts.\n         * @default 5\n         */\n        attempts?: number | undefined\n        /**\n         * The delay (in ms) between reconnection attempts.\n         * @default 2_000\n         */\n        delay?: number | undefined\n      }\n    | undefined\n  url: string\n}\n\nexport type GetSocketRpcClientErrorType =\n  | CreateBatchSchedulerErrorType\n  | ErrorType\n\nexport const socketClientCache = /*#__PURE__*/ new Map<\n  string,\n  SocketRpcClient<Socket<{}>>\n>()\n\nexport async function getSocketRpcClient<socket extends {}>(\n  parameters: GetSocketRpcClientParameters<socket>,\n): Promise<SocketRpcClient<socket>> {\n  const {\n    getSocket,\n    keepAlive = true,\n    key = 'socket',\n    reconnect = true,\n    url,\n  } = parameters\n  const { interval: keepAliveInterval = 30_000 } =\n    typeof keepAlive === 'object' ? keepAlive : {}\n  const { attempts = 5, delay = 2_000 } =\n    typeof reconnect === 'object' ? reconnect : {}\n\n  const id = JSON.stringify({ keepAlive, key, url, reconnect })\n  let socketClient = socketClientCache.get(id)\n\n  // If the socket already exists, return it.\n  if (socketClient) return socketClient as {} as SocketRpcClient<socket>\n\n  let reconnectCount = 0\n  const { schedule } = createBatchScheduler<\n    undefined,\n    [SocketRpcClient<socket>]\n  >({\n    id,\n    fn: async () => {\n      // Set up a cache for incoming \"synchronous\" requests.\n      const requests = new Map<Id, CallbackFn>()\n\n      // Set up a cache for subscriptions (eth_subscribe).\n      const subscriptions = new Map<Id, CallbackFn>()\n\n      let error: Error | Event | undefined\n      let socket: Socket<{}>\n      let keepAliveTimer: ReturnType<typeof setInterval> | undefined\n\n      let reconnectInProgress = false\n      function attemptReconnect() {\n        // Attempt to reconnect.\n        if (reconnect && reconnectCount < attempts) {\n          if (reconnectInProgress) return\n          reconnectInProgress = true\n          reconnectCount++\n\n          // Make sure the previous socket is definitely closed.\n          socket?.close()\n\n          setTimeout(async () => {\n            // biome-ignore lint/suspicious/noConsole: _\n            await setup().catch(console.error)\n            reconnectInProgress = false\n          }, delay)\n        }\n        // Otherwise, clear all requests and subscriptions.\n        else {\n          requests.clear()\n          subscriptions.clear()\n        }\n      }\n\n      // Set up socket implementation.\n      async function setup() {\n        const result = await getSocket({\n          onClose() {\n            // Notify all requests and subscriptions of the closure error.\n            for (const request of requests.values())\n              request.onError?.(new SocketClosedError({ url }))\n            for (const subscription of subscriptions.values())\n              subscription.onError?.(new SocketClosedError({ url }))\n\n            attemptReconnect()\n          },\n          onError(error_) {\n            error = error_\n\n            // Notify all requests and subscriptions of the error.\n            for (const request of requests.values()) request.onError?.(error)\n            for (const subscription of subscriptions.values())\n              subscription.onError?.(error)\n\n            attemptReconnect()\n          },\n          onOpen() {\n            error = undefined\n            reconnectCount = 0\n          },\n          onResponse(data) {\n            const isSubscription = data.method === 'eth_subscription'\n            const id = isSubscription ? data.params.subscription : data.id\n            const cache = isSubscription ? subscriptions : requests\n            const callback = cache.get(id)\n            if (callback) callback.onResponse(data)\n            if (!isSubscription) cache.delete(id)\n          },\n        })\n\n        socket = result\n\n        if (keepAlive) {\n          if (keepAliveTimer) clearInterval(keepAliveTimer)\n          keepAliveTimer = setInterval(() => socket.ping?.(), keepAliveInterval)\n        }\n\n        if (reconnect && subscriptions.size > 0) {\n          const subscriptionEntries = subscriptions.entries()\n          for (const [\n            key,\n            { onResponse, body, onError },\n          ] of subscriptionEntries) {\n            if (!body) continue\n\n            subscriptions.delete(key)\n            socketClient?.request({ body, onResponse, onError })\n          }\n        }\n\n        return result\n      }\n      await setup()\n      error = undefined\n\n      // Create a new socket instance.\n      socketClient = {\n        close() {\n          keepAliveTimer && clearInterval(keepAliveTimer)\n          socket.close()\n          socketClientCache.delete(id)\n        },\n        get socket() {\n          return socket\n        },\n        request({ body, onError, onResponse }) {\n          if (error && onError) onError(error)\n\n          const id = body.id ?? idCache.take()\n\n          const callback = (response: RpcResponse) => {\n            if (typeof response.id === 'number' && id !== response.id) return\n\n            // If we are subscribing to a topic, we want to set up a listener for incoming\n            // messages.\n            if (\n              body.method === 'eth_subscribe' &&\n              typeof response.result === 'string'\n            )\n              subscriptions.set(response.result, {\n                onResponse: callback,\n                onError,\n                body,\n              })\n\n            // If we are unsubscribing from a topic, we want to remove the listener.\n            if (body.method === 'eth_unsubscribe')\n              subscriptions.delete(body.params?.[0])\n\n            onResponse(response)\n          }\n\n          requests.set(id, { onResponse: callback, onError })\n          try {\n            socket.request({\n              body: {\n                jsonrpc: '2.0',\n                id,\n                ...body,\n              },\n            })\n          } catch (error) {\n            onError?.(error as Error)\n          }\n        },\n        requestAsync({ body, timeout = 10_000 }) {\n          return withTimeout(\n            () =>\n              new Promise<RpcResponse>((onResponse, onError) =>\n                this.request({\n                  body,\n                  onError,\n                  onResponse,\n                }),\n              ),\n            {\n              errorInstance: new TimeoutError({ body, url }),\n              timeout,\n            },\n          )\n        },\n        requests,\n        subscriptions,\n        url,\n      }\n      socketClientCache.set(id, socketClient)\n\n      return [socketClient as {} as SocketRpcClient<socket>]\n    },\n  })\n\n  const [_, [socketClient_]] = await schedule()\n  return socketClient_\n}\n", "import type { MessageEvent } from 'isows'\n\nimport {\n  SocketClosedError,\n  WebSocketRequestError,\n} from '../../errors/request.js'\nimport type { RpcRequest } from '../../types/rpc.js'\nimport {\n  type GetSocketRpcClientParameters,\n  getSocketRpcClient,\n  type Socket,\n  type SocketRpcClient,\n} from './socket.js'\n\nexport type GetWebSocketRpcClientOptions = Pick<\n  GetSocketRpcClientParameters,\n  'keepAlive' | 'reconnect'\n>\n\nexport async function getWebSocketRpcClient(\n  url: string,\n  options: GetWebSocketRpcClientOptions | undefined = {},\n): Promise<SocketRpcClient<WebSocket>> {\n  const { keepAlive, reconnect } = options\n\n  return getSocketRpcClient({\n    async getSocket({ onClose, onError, onOpen, onResponse }) {\n      const WebSocket = await import('isows').then((module) => module.WebSocket)\n      const socket = new WebSocket(url)\n\n      function onClose_() {\n        socket.removeEventListener('close', onClose_)\n        socket.removeEventListener('message', onMessage)\n        socket.removeEventListener('error', onError)\n        socket.removeEventListener('open', onOpen)\n        onClose()\n      }\n      function onMessage({ data }: MessageEvent) {\n        // ignore empty messages\n        if (typeof data === 'string' && data.trim().length === 0) return\n\n        try {\n          const _data = JSON.parse(data)\n          onResponse(_data)\n        } catch (error) {\n          onError(error as Error)\n        }\n      }\n\n      // Setup event listeners for RPC & subscription responses.\n      socket.addEventListener('close', onClose_)\n      socket.addEventListener('message', onMessage)\n      socket.addEventListener('error', onError)\n      socket.addEventListener('open', onOpen)\n\n      // Wait for the socket to open.\n      if (socket.readyState === WebSocket.CONNECTING) {\n        await new Promise((resolve, reject) => {\n          if (!socket) return\n          socket.onopen = resolve\n          socket.onerror = reject\n        })\n      }\n\n      const { close: close_ } = socket\n\n      return Object.assign(socket, {\n        close() {\n          close_.bind(socket)()\n          onClose_()\n        },\n        ping() {\n          try {\n            if (\n              socket.readyState === socket.CLOSED ||\n              socket.readyState === socket.CLOSING\n            )\n              throw new WebSocketRequestError({\n                url: socket.url,\n                cause: new SocketClosedError({ url: socket.url }),\n              })\n\n            const body: RpcRequest = {\n              jsonrpc: '2.0',\n              id: null,\n              method: 'net_version',\n              params: [],\n            }\n            socket.send(JSON.stringify(body))\n          } catch (error) {\n            onError(error as Error)\n          }\n        },\n        request({ body }) {\n          if (\n            socket.readyState === socket.CLOSED ||\n            socket.readyState === socket.CLOSING\n          )\n            throw new WebSocketRequestError({\n              body,\n              url: socket.url,\n              cause: new SocketClosedError({ url: socket.url }),\n            })\n\n          return socket.send(JSON.stringify(body))\n        },\n      } as Socket<WebSocket>)\n    },\n    keepAlive,\n    reconnect,\n    url,\n  })\n}\n", "// TODO(v3): This file is here for backwards compatibility, and to prevent breaking changes.\n// These APIs will be removed in v3.\n\n/* c8 ignore start */\nimport type {\n  TimeoutErrorType,\n  WebSocketRequestError,\n} from '../../errors/request.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { RpcResponse } from '../../types/rpc.js'\nimport type { WithTimeoutErrorType } from '../promise/withTimeout.js'\nimport { getHttpRpcClient, type HttpRequestParameters } from './http.js'\nimport type { SocketRpcClient } from './socket.js'\nimport { getWebSocketRpcClient } from './webSocket.js'\n\nexport type WebSocketOptions = Parameters<\n  SocketRpcClient<WebSocket>['request']\n>[0]\nexport type WebSocketReturnType = SocketRpcClient<WebSocket>\nexport type WebSocketErrorType = WebSocketRequestError | ErrorType\n\nfunction webSocket(\n  socketClient: SocketRpcClient<WebSocket>,\n  { body, onError, onResponse }: WebSocketOptions,\n): WebSocketReturnType {\n  socketClient.request({\n    body,\n    onError,\n    onResponse,\n  })\n  return socketClient\n}\n\nexport type WebSocketAsyncOptions = Parameters<\n  SocketRpcClient<WebSocket>['requestAsync']\n>[0]\nexport type WebSocketAsyncReturnType = RpcResponse\nexport type WebSocketAsyncErrorType =\n  | WebSocketErrorType\n  | TimeoutErrorType\n  | WithTimeoutErrorType\n  | ErrorType\n\nasync function webSocketAsync(\n  socketClient: SocketRpcClient<WebSocket>,\n  { body, timeout = 10_000 }: WebSocketAsyncOptions,\n): Promise<WebSocketAsyncReturnType> {\n  return socketClient.requestAsync({\n    body,\n    timeout,\n  })\n}\n\n/**\n * @deprecated use `getSocketClient` instead.\n *\n * ```diff\n * -import { getSocket } from 'viem/utils'\n * +import { getSocketClient } from 'viem/utils'\n *\n * -const socket = await getSocket(url)\n * +const socketClient = await getSocketClient(url)\n * +const socket = socketClient.socket\n * ```\n */\nexport async function getSocket(url: string) {\n  const client = await getWebSocketRpcClient(url)\n  return Object.assign(client.socket, {\n    requests: client.requests,\n    subscriptions: client.subscriptions,\n  })\n}\n\nexport const rpc = {\n  /**\n   * @deprecated use `getHttpRpcClient` instead.\n   *\n   * ```diff\n   * -import { rpc } from 'viem/utils'\n   * +import { getHttpRpcClient } from 'viem/utils'\n   *\n   * -rpc.http(url, params)\n   * +const httpClient = getHttpRpcClient(url)\n   * +httpClient.request(params)\n   * ```\n   */\n  http(url: string, params: HttpRequestParameters) {\n    return getHttpRpcClient(url).request(params)\n  },\n  /**\n   * @deprecated use `getWebSocketRpcClient` instead.\n   *\n   * ```diff\n   * -import { rpc } from 'viem/utils'\n   * +import { getWebSocketRpcClient } from 'viem/utils'\n   *\n   * -rpc.webSocket(url, params)\n   * +const webSocketClient = getWebSocketRpcClient(url)\n   * +webSocketClient.request(params)\n   * ```\n   */\n  webSocket,\n  /**\n   * @deprecated use `getWebSocketRpcClient` instead.\n   *\n   * ```diff\n   * -import { rpc } from 'viem/utils'\n   * +import { getWebSocketRpcClient } from 'viem/utils'\n   *\n   * -const response = await rpc.webSocketAsync(url, params)\n   * +const webSocketClient = getWebSocketRpcClient(url)\n   * +const response = await webSocketClient.requestAsync(params)\n   * ```\n   */\n  webSocketAsync,\n}\n/* c8 ignore end */\n", "export const presignMessagePrefix = '\\x19Ethereum Signed Message:\\n'\n", "import { presignMessagePrefix } from '../../constants/strings.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex, SignableMessage } from '../../types/misc.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport { size } from '../data/size.js'\nimport {\n  type BytesToHexErrorType,\n  bytesToHex,\n  type StringToHexErrorType,\n  stringToHex,\n} from '../encoding/toHex.js'\n\nexport type ToPrefixedMessageErrorType =\n  | ConcatErrorType\n  | StringToHexErrorType\n  | BytesToHexErrorType\n  | ErrorType\n\nexport function toPrefixedMessage(message_: SignableMessage): Hex {\n  const message = (() => {\n    if (typeof message_ === 'string') return stringToHex(message_)\n    if (typeof message_.raw === 'string') return message_.raw\n    return bytesToHex(message_.raw)\n  })()\n  const prefix = stringToHex(`${presignMessagePrefix}${size(message)}`)\n  return concat([prefix, message])\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex, SignableMessage } from '../../types/misc.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport { toPrefixedMessage } from './toPrefixedMessage.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type HashMessageReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type HashMessageErrorType = Keccak256ErrorType | ErrorType\n\nexport function hashMessage<to extends To = 'hex'>(\n  message: SignableMessage,\n  to_?: to | undefined,\n): HashMessageReturnType<to> {\n  return keccak256(toPrefixedMessage(message), to_)\n}\n", "import type { TypedData } from 'abitype'\n\nimport { stringify } from '../utils/stringify.js'\nimport { BaseError } from './base.js'\n\nexport type InvalidDomainErrorType = InvalidDomainError & {\n  name: 'InvalidDomainError'\n}\nexport class InvalidDomainError extends BaseError {\n  constructor({ domain }: { domain: unknown }) {\n    super(`Invalid domain \"${stringify(domain)}\".`, {\n      metaMessages: ['Must be a valid EIP-712 domain.'],\n    })\n  }\n}\n\nexport type InvalidPrimaryTypeErrorType = InvalidPrimaryTypeError & {\n  name: 'InvalidPrimaryTypeError'\n}\nexport class InvalidPrimaryTypeError extends BaseError {\n  constructor({\n    primaryType,\n    types,\n  }: { primaryType: string; types: TypedData | Record<string, unknown> }) {\n    super(\n      `Invalid primary type \\`${primaryType}\\` must be one of \\`${JSON.stringify(Object.keys(types))}\\`.`,\n      {\n        docsPath: '/api/glossary/Errors#typeddatainvalidprimarytypeerror',\n        metaMessages: ['Check that the primary type is a key in `types`.'],\n      },\n    )\n  }\n}\n\nexport type InvalidStructTypeErrorType = InvalidStructTypeError & {\n  name: 'InvalidStructTypeError'\n}\nexport class InvalidStructTypeError extends BaseError {\n  constructor({ type }: { type: string }) {\n    super(`Struct type \"${type}\" is invalid.`, {\n      metaMessages: ['Struct type must not be a Solidity type.'],\n      name: 'InvalidStructTypeError',\n    })\n  }\n}\n", "import type { TypedData, TypedDataDomain, TypedDataParameter } from 'abitype'\n\nimport { BytesSizeMismatchError } from '../errors/abi.js'\nimport { InvalidAddressError } from '../errors/address.js'\nimport {\n  InvalidDomainError,\n  InvalidPrimaryTypeError,\n  InvalidStructTypeError,\n} from '../errors/typedData.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { Hex } from '../types/misc.js'\nimport type { TypedDataDefinition } from '../types/typedData.js'\nimport { type IsAddressErrorType, isAddress } from './address/isAddress.js'\nimport { type SizeErrorType, size } from './data/size.js'\nimport { type NumberToHexErrorType, numberToHex } from './encoding/toHex.js'\nimport { bytesRegex, integerRegex } from './regex.js'\nimport {\n  type HashDomainErrorType,\n  hashDomain,\n} from './signature/hashTypedData.js'\nimport { stringify } from './stringify.js'\n\nexport type SerializeTypedDataErrorType =\n  | HashDomainErrorType\n  | IsAddressErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function serializeTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(parameters: TypedDataDefinition<typedData, primaryType>) {\n  const {\n    domain: domain_,\n    message: message_,\n    primaryType,\n    types,\n  } = parameters as unknown as TypedDataDefinition\n\n  const normalizeData = (\n    struct: readonly TypedDataParameter[],\n    data_: Record<string, unknown>,\n  ) => {\n    const data = { ...data_ }\n    for (const param of struct) {\n      const { name, type } = param\n      if (type === 'address') data[name] = (data[name] as string).toLowerCase()\n    }\n    return data\n  }\n\n  const domain = (() => {\n    if (!types.EIP712Domain) return {}\n    if (!domain_) return {}\n    return normalizeData(types.EIP712Domain, domain_)\n  })()\n\n  const message = (() => {\n    if (primaryType === 'EIP712Domain') return undefined\n    return normalizeData(types[primaryType], message_)\n  })()\n\n  return stringify({ domain, message, primaryType, types })\n}\n\nexport type ValidateTypedDataErrorType =\n  | HashDomainErrorType\n  | IsAddressErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function validateTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(parameters: TypedDataDefinition<typedData, primaryType>) {\n  const { domain, message, primaryType, types } =\n    parameters as unknown as TypedDataDefinition\n\n  const validateData = (\n    struct: readonly TypedDataParameter[],\n    data: Record<string, unknown>,\n  ) => {\n    for (const param of struct) {\n      const { name, type } = param\n      const value = data[name]\n\n      const integerMatch = type.match(integerRegex)\n      if (\n        integerMatch &&\n        (typeof value === 'number' || typeof value === 'bigint')\n      ) {\n        const [_type, base, size_] = integerMatch\n        // If number cannot be cast to a sized hex value, it is out of range\n        // and will throw.\n        numberToHex(value, {\n          signed: base === 'int',\n          size: Number.parseInt(size_, 10) / 8,\n        })\n      }\n\n      if (type === 'address' && typeof value === 'string' && !isAddress(value))\n        throw new InvalidAddressError({ address: value })\n\n      const bytesMatch = type.match(bytesRegex)\n      if (bytesMatch) {\n        const [_type, size_] = bytesMatch\n        if (size_ && size(value as Hex) !== Number.parseInt(size_, 10))\n          throw new BytesSizeMismatchError({\n            expectedSize: Number.parseInt(size_, 10),\n            givenSize: size(value as Hex),\n          })\n      }\n\n      const struct = types[type]\n      if (struct) {\n        validateReference(type)\n        validateData(struct, value as Record<string, unknown>)\n      }\n    }\n  }\n\n  // Validate domain types.\n  if (types.EIP712Domain && domain) {\n    if (typeof domain !== 'object') throw new InvalidDomainError({ domain })\n    validateData(types.EIP712Domain, domain)\n  }\n\n  // Validate message types.\n  if (primaryType !== 'EIP712Domain') {\n    if (types[primaryType]) validateData(types[primaryType], message)\n    else throw new InvalidPrimaryTypeError({ primaryType, types })\n  }\n}\n\nexport type GetTypesForEIP712DomainErrorType = ErrorType\n\nexport function getTypesForEIP712Domain({\n  domain,\n}: {\n  domain?: TypedDataDomain | undefined\n}): TypedDataParameter[] {\n  return [\n    typeof domain?.name === 'string' && { name: 'name', type: 'string' },\n    domain?.version && { name: 'version', type: 'string' },\n    (typeof domain?.chainId === 'number' ||\n      typeof domain?.chainId === 'bigint') && {\n      name: 'chainId',\n      type: 'uint256',\n    },\n    domain?.verifyingContract && {\n      name: 'verifyingContract',\n      type: 'address',\n    },\n    domain?.salt && { name: 'salt', type: 'bytes32' },\n  ].filter(Boolean) as TypedDataParameter[]\n}\n\nexport type DomainSeparatorErrorType =\n  | GetTypesForEIP712DomainErrorType\n  | HashDomainErrorType\n  | ErrorType\n\nexport function domainSeparator({ domain }: { domain: TypedDataDomain }): Hex {\n  return hashDomain({\n    domain,\n    types: {\n      EIP712Domain: getTypesForEIP712Domain({ domain }),\n    },\n  })\n}\n\n/** @internal */\nfunction validateReference(type: string) {\n  // Struct type must not be a Solidity type.\n  if (\n    type === 'address' ||\n    type === 'bool' ||\n    type === 'string' ||\n    type.startsWith('bytes') ||\n    type.startsWith('uint') ||\n    type.startsWith('int')\n  )\n    throw new InvalidStructTypeError({ type })\n}\n", "// Implementation forked and adapted from https://github.com/MetaMask/eth-sig-util/blob/main/src/sign-typed-data.ts\n\nimport type { AbiParameter, TypedData, TypedDataDomain } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from '../abi/encodeAbiParameters.js'\nimport { concat } from '../data/concat.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport {\n  type GetTypesForEIP712DomainErrorType,\n  getTypesForEIP712Domain,\n  type ValidateTypedDataErrorType,\n  validateTypedData,\n} from '../typedData.js'\n\ntype MessageTypeProperty = {\n  name: string\n  type: string\n}\n\nexport type HashTypedDataParameters<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n> = TypedDataDefinition<typedData, primaryType>\n\nexport type HashTypedDataReturnType = Hex\n\nexport type HashTypedDataErrorType =\n  | GetTypesForEIP712DomainErrorType\n  | HashDomainErrorType\n  | HashStructErrorType\n  | ValidateTypedDataErrorType\n  | ErrorType\n\nexport function hashTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(\n  parameters: HashTypedDataParameters<typedData, primaryType>,\n): HashTypedDataReturnType {\n  const {\n    domain = {},\n    message,\n    primaryType,\n  } = parameters as HashTypedDataParameters\n  const types = {\n    EIP712Domain: getTypesForEIP712Domain({ domain }),\n    ...parameters.types,\n  }\n\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n  // as we can't statically check this with TypeScript.\n  validateTypedData({\n    domain,\n    message,\n    primaryType,\n    types,\n  })\n\n  const parts: Hex[] = ['0x1901']\n  if (domain)\n    parts.push(\n      hashDomain({\n        domain,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n\n  if (primaryType !== 'EIP712Domain')\n    parts.push(\n      hashStruct({\n        data: message,\n        primaryType,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n\n  return keccak256(concat(parts))\n}\n\nexport type HashDomainErrorType = HashStructErrorType | ErrorType\n\nexport function hashDomain({\n  domain,\n  types,\n}: {\n  domain: TypedDataDomain\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  return hashStruct({\n    data: domain,\n    primaryType: 'EIP712Domain',\n    types,\n  })\n}\n\nexport type HashStructErrorType =\n  | EncodeDataErrorType\n  | Keccak256ErrorType\n  | ErrorType\n\nexport function hashStruct({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, readonly MessageTypeProperty[]>\n}) {\n  const encoded = encodeData({\n    data,\n    primaryType,\n    types,\n  })\n  return keccak256(encoded)\n}\n\ntype EncodeDataErrorType =\n  | EncodeAbiParametersErrorType\n  | EncodeFieldErrorType\n  | HashTypeErrorType\n  | ErrorType\n\nfunction encodeData({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, readonly MessageTypeProperty[]>\n}) {\n  const encodedTypes: AbiParameter[] = [{ type: 'bytes32' }]\n  const encodedValues: unknown[] = [hashType({ primaryType, types })]\n\n  for (const field of types[primaryType]) {\n    const [type, value] = encodeField({\n      types,\n      name: field.name,\n      type: field.type,\n      value: data[field.name],\n    })\n    encodedTypes.push(type)\n    encodedValues.push(value)\n  }\n\n  return encodeAbiParameters(encodedTypes, encodedValues)\n}\n\ntype HashTypeErrorType =\n  | ToHexErrorType\n  | EncodeTypeErrorType\n  | Keccak256ErrorType\n  | ErrorType\n\nfunction hashType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, readonly MessageTypeProperty[]>\n}) {\n  const encodedHashType = toHex(encodeType({ primaryType, types }))\n  return keccak256(encodedHashType)\n}\n\ntype EncodeTypeErrorType = FindTypeDependenciesErrorType\n\nexport function encodeType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, readonly MessageTypeProperty[]>\n}) {\n  let result = ''\n  const unsortedDeps = findTypeDependencies({ primaryType, types })\n  unsortedDeps.delete(primaryType)\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()]\n  for (const type of deps) {\n    result += `${type}(${types[type]\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`\n  }\n\n  return result\n}\n\ntype FindTypeDependenciesErrorType = ErrorType\n\nfunction findTypeDependencies(\n  {\n    primaryType: primaryType_,\n    types,\n  }: {\n    primaryType: string\n    types: Record<string, readonly MessageTypeProperty[]>\n  },\n  results: Set<string> = new Set(),\n): Set<string> {\n  const match = primaryType_.match(/^\\w*/u)\n  const primaryType = match?.[0]!\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results\n  }\n\n  results.add(primaryType)\n\n  for (const field of types[primaryType]) {\n    findTypeDependencies({ primaryType: field.type, types }, results)\n  }\n  return results\n}\n\ntype EncodeFieldErrorType =\n  | Keccak256ErrorType\n  | EncodeAbiParametersErrorType\n  | ToHexErrorType\n  | ErrorType\n\nfunction encodeField({\n  types,\n  name,\n  type,\n  value,\n}: {\n  types: Record<string, readonly MessageTypeProperty[]>\n  name: string\n  type: string\n  value: any\n}): [type: AbiParameter, value: any] {\n  if (types[type] !== undefined) {\n    return [\n      { type: 'bytes32' },\n      keccak256(encodeData({ data: value, primaryType: type, types })),\n    ]\n  }\n\n  if (type === 'bytes') {\n    const prepend = value.length % 2 ? '0' : ''\n    value = `0x${prepend + value.slice(2)}`\n    return [{ type: 'bytes32' }, keccak256(value)]\n  }\n\n  if (type === 'string') return [{ type: 'bytes32' }, keccak256(toHex(value))]\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    const parsedType = type.slice(0, type.lastIndexOf('['))\n    const typeValuePairs = (value as [AbiParameter, any][]).map((item) =>\n      encodeField({\n        name,\n        type: parsedType,\n        types,\n        value: item,\n      }),\n    )\n    return [\n      { type: 'bytes32' },\n      keccak256(\n        encodeAbiParameters(\n          typeValuePairs.map(([t]) => t),\n          typeValuePairs.map(([, v]) => v),\n        ),\n      ),\n    ]\n  }\n\n  return [{ type }, value]\n}\n", "export const erc6492MagicBytes =\n  '0x6492649264926492649264926492649264926492649264926492649264926492' as const\n\nexport const zeroHash =\n  '0x0000000000000000000000000000000000000000000000000000000000000000' as const\n", "import * as AbiParameters from '../core/AbiParameters.js'\nimport type * as Address from '../core/Address.js'\nimport * as Authorization from '../core/Authorization.js'\nimport * as Errors from '../core/Errors.js'\nimport * as Hex from '../core/Hex.js'\nimport * as Secp256k1 from '../core/Secp256k1.js'\nimport * as Signature from '../core/Signature.js'\n\n/** Unwrapped ERC-8010 signature. */\nexport type Unwrapped = {\n  /** Authorization signed by the delegatee. */\n  authorization: Authorization.Authorization<true>\n  /** Data to initialize the delegation. */\n  data?: Hex.Hex | undefined\n  /** The original signature. */\n  signature: Hex.Hex\n  /** Address of the initializer. */\n  to?: Address.Address | undefined\n}\n\n/** Wrapped ERC-8010 signature. */\nexport type Wrapped = Hex.Hex\n\n/**\n * Magic bytes used to identify ERC-8010 wrapped signatures.\n */\nexport const magicBytes =\n  '0x8010801080108010801080108010801080108010801080108010801080108010' as const\n\n/** Suffix ABI parameters for the ERC-8010 wrapped signature. */\nexport const suffixParameters = AbiParameters.from(\n  '(uint256 chainId, address delegation, uint256 nonce, uint8 yParity, uint256 r, uint256 s), address to, bytes data',\n)\n\n/**\n * Asserts that the wrapped signature is valid.\n *\n * @example\n * ```ts twoslash\n * import { SignatureErc8010 } from 'ox/erc8010'\n *\n * SignatureErc8010.assert('0xdeadbeef')\n * // @error: InvalidWrappedSignatureError: Value `0xdeadbeef` is an invalid ERC-8010 wrapped signature.\n * ```\n *\n * @param value - The value to assert.\n */\nexport function assert(value: Unwrapped | Wrapped) {\n  if (typeof value === 'string') {\n    if (Hex.slice(value, -32) !== magicBytes)\n      throw new InvalidWrappedSignatureError(value)\n  } else Signature.assert(value.authorization)\n}\n\nexport declare namespace assert {\n  type ErrorType =\n    | InvalidWrappedSignatureError\n    | Hex.slice.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Parses an [ERC-8010 wrapped signature](https://github.com/jxom/ERCs/blob/16f7e3891fff2e1e9c25dea0485497739db8a816/ERCS/erc-8010.md) into its constituent parts.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1 } from 'ox'\n * import { SignatureErc8010 } from 'ox/erc8010' // [!code focus]\n *\n * const signature = Secp256k1.sign({\n *   payload: '0x...',\n *   privateKey: '0x...',\n * })\n *\n * // Instantiate from serialized format. // [!code focus]\n * const wrapped = SignatureErc8010.from('0x...') // [!code focus]\n * // @log: { authorization: { ... }, data: '0x...', signature: { ... } } // [!code focus]\n *\n * // Instantiate from constituent parts. // [!code focus]\n * const wrapped = SignatureErc8010.from({ // [!code focus]\n *   authorization: { ... }, // [!code focus]\n *   data: '0x...', // [!code focus]\n *   signature, // [!code focus]\n * })\n * // @log: { authorization: { ... }, data: '0x...', signature: { ... } }\n * ```\n *\n * @param value - Value to parse.\n * @returns Parsed value.\n */\nexport function from(value: Unwrapped | Wrapped): Unwrapped {\n  if (typeof value === 'string') return unwrap(value)\n  return value\n}\n\nexport declare namespace from {\n  type ErrorType = unwrap.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Unwraps an [ERC-8010 wrapped signature](https://github.com/jxom/ERCs/blob/16f7e3891fff2e1e9c25dea0485497739db8a816/ERCS/erc-8010.md) into its constituent parts.\n *\n * @example\n * ```ts twoslash\n * import { SignatureErc8010 } from 'ox/erc8010'\n *\n * const { authorization, data, signature } = SignatureErc8010.unwrap('0x...')\n * ```\n *\n * @param wrapped - Wrapped signature to unwrap.\n * @returns Unwrapped signature.\n */\nexport function unwrap(wrapped: Wrapped): Unwrapped {\n  assert(wrapped)\n\n  const suffixLength = Hex.toNumber(Hex.slice(wrapped, -64, -32))\n  const suffix = Hex.slice(wrapped, -suffixLength - 64, -64)\n  const signature = Hex.slice(wrapped, 0, -suffixLength - 64)\n\n  const [auth, to, data] = AbiParameters.decode(suffixParameters, suffix)\n\n  const authorization = Authorization.from({\n    address: auth.delegation,\n    chainId: Number(auth.chainId),\n    nonce: auth.nonce,\n    yParity: auth.yParity,\n    r: auth.r,\n    s: auth.s,\n  })\n\n  return {\n    authorization,\n    signature,\n    ...(data && data !== '0x' ? { data, to } : {}),\n  }\n}\n\nexport declare namespace unwrap {\n  type ErrorType = assert.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Wraps a signature into [ERC-8010 format](https://github.com/jxom/ERCs/blob/16f7e3891fff2e1e9c25dea0485497739db8a816/ERCS/erc-8010.md).\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1, Signature } from 'ox'\n * import { SignatureErc8010 } from 'ox/erc8010' // [!code focus]\n *\n * const signature = Secp256k1.sign({\n *   payload: '0x...',\n *   privateKey: '0x...',\n * })\n *\n * const wrapped = SignatureErc8010.wrap({ // [!code focus]\n *   authorization: { ... }, // [!code focus]\n *   data: '0xdeadbeef', // [!code focus]\n *   signature: Signature.toHex(signature), // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param value - Values to wrap.\n * @returns Wrapped signature.\n */\nexport function wrap(value: Unwrapped): Wrapped {\n  const { data, signature } = value\n\n  assert(value)\n\n  const self = Secp256k1.recoverAddress({\n    payload: Authorization.getSignPayload(value.authorization),\n    signature: Signature.from(value.authorization),\n  })\n\n  const suffix = AbiParameters.encode(suffixParameters, [\n    {\n      ...value.authorization,\n      delegation: value.authorization.address,\n      chainId: BigInt(value.authorization.chainId),\n    },\n    value.to ?? self,\n    data ?? '0x',\n  ])\n  const suffixLength = Hex.fromNumber(Hex.size(suffix), { size: 32 })\n  return Hex.concat(signature, suffix, suffixLength, magicBytes)\n}\n\nexport declare namespace wrap {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Validates a wrapped signature. Returns `true` if the wrapped signature is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { SignatureErc8010 } from 'ox/erc8010'\n *\n * const valid = SignatureErc8010.validate('0xdeadbeef')\n * // @log: false\n * ```\n *\n * @param value - The value to validate.\n * @returns `true` if the value is valid, `false` otherwise.\n */\nexport function validate(value: Unwrapped | Wrapped): boolean {\n  try {\n    assert(value)\n    return true\n  } catch {\n    return false\n  }\n}\n\nexport declare namespace validate {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/** Thrown when the ERC-8010 wrapped signature is invalid. */\nexport class InvalidWrappedSignatureError extends Errors.BaseError {\n  override readonly name = 'SignatureErc8010.InvalidWrappedSignatureError'\n\n  constructor(wrapped: Wrapped) {\n    super(`Value \\`${wrapped}\\` is an invalid ERC-8010 wrapped signature.`)\n  }\n}\n", "/**\n * @internal\n *\n * Map with a LRU (Least recently used) policy.\n * @see https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\n */\nexport class LruMap<value = unknown> extends Map<string, value> {\n  maxSize: number\n\n  constructor(size: number) {\n    super()\n    this.maxSize = size\n  }\n\n  override get(key: string) {\n    const value = super.get(key)\n\n    if (super.has(key) && value !== undefined) {\n      this.delete(key)\n      super.set(key, value)\n    }\n\n    return value\n  }\n\n  override set(key: string, value: value) {\n    super.set(key, value)\n    if (this.maxSize && this.size > this.maxSize) {\n      const firstKey = this.keys().next().value\n      if (firstKey) this.delete(firstKey)\n    }\n    return this\n  }\n}\n", "import type * as Address from './Address.js'\nimport { LruMap } from './internal/lru.js'\n\nconst caches = {\n  checksum: /*#__PURE__*/ new LruMap<Address.Address>(8192),\n}\n\nexport const checksum = caches.checksum\n\n/**\n * Clears all global caches.\n *\n * @example\n * ```ts\n * import { Caches } from 'ox'\n * Caches.clear()\n * ```\n */\nexport function clear() {\n  for (const cache of Object.values(caches)) cache.clear()\n}\n", "import { ripemd160 as noble_ripemd160 } from '@noble/hashes/ripemd160'\nimport { keccak_256 as noble_keccak256 } from '@noble/hashes/sha3'\nimport { sha256 as noble_sha256 } from '@noble/hashes/sha256'\nimport * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\n\n/**\n * Calculates the [Keccak256](https://en.wikipedia.org/wiki/SHA-3) hash of a {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\n *\n * This function is a re-export of `keccak_256` from [`@noble/hashes`](https://github.com/paulmillr/noble-hashes), an audited & minimal JS hashing library.\n *\n * @example\n * ```ts twoslash\n * import { Hash } from 'ox'\n *\n * Hash.keccak256('0xdeadbeef')\n * // @log: '0xd4fd4e189132273036449fc9e11198c739161b4c0116a9a2dccdfa1c492006f1'\n * ```\n *\n * @example\n * ### Calculate Hash of a String\n *\n * ```ts twoslash\n * import { Hash, Hex } from 'ox'\n *\n * Hash.keccak256(Hex.fromString('hello world'))\n * // @log: '0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0'\n * ```\n *\n * @example\n * ### Configure Return Type\n *\n * ```ts twoslash\n * import { Hash } from 'ox'\n *\n * Hash.keccak256('0xdeadbeef', { as: 'Bytes' })\n * // @log: Uint8Array [...]\n * ```\n *\n * @param value - {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\n * @param options - Options.\n * @returns Keccak256 hash.\n */\nexport function keccak256<\n  value extends Hex.Hex | Bytes.Bytes,\n  as extends 'Hex' | 'Bytes' =\n    | (value extends Hex.Hex ? 'Hex' : never)\n    | (value extends Bytes.Bytes ? 'Bytes' : never),\n>(\n  value: value | Hex.Hex | Bytes.Bytes,\n  options: keccak256.Options<as> = {},\n): keccak256.ReturnType<as> {\n  const { as = typeof value === 'string' ? 'Hex' : 'Bytes' } = options\n  const bytes = noble_keccak256(Bytes.from(value))\n  if (as === 'Bytes') return bytes as never\n  return Hex.fromBytes(bytes) as never\n}\n\nexport declare namespace keccak256 {\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> = {\n    /** The return type. @default 'Hex' */\n    as?: as | 'Hex' | 'Bytes' | undefined\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\n    | (as extends 'Hex' ? Hex.Hex : never)\n\n  type ErrorType =\n    | Bytes.from.ErrorType\n    | Hex.fromBytes.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Calculates the [Ripemd160](https://en.wikipedia.org/wiki/RIPEMD) hash of a {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\n *\n * This function is a re-export of `ripemd160` from [`@noble/hashes`](https://github.com/paulmillr/noble-hashes), an audited & minimal JS hashing library.\n *\n * @example\n * ```ts twoslash\n * import { Hash } from 'ox'\n *\n * Hash.ripemd160('0xdeadbeef')\n * // '0x226821c2f5423e11fe9af68bd285c249db2e4b5a'\n * ```\n *\n * @param value - {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\n * @param options - Options.\n * @returns Ripemd160 hash.\n */\nexport function ripemd160<\n  value extends Hex.Hex | Bytes.Bytes,\n  as extends 'Hex' | 'Bytes' =\n    | (value extends Hex.Hex ? 'Hex' : never)\n    | (value extends Bytes.Bytes ? 'Bytes' : never),\n>(\n  value: value | Hex.Hex | Bytes.Bytes,\n  options: ripemd160.Options<as> = {},\n): ripemd160.ReturnType<as> {\n  const { as = typeof value === 'string' ? 'Hex' : 'Bytes' } = options\n  const bytes = noble_ripemd160(Bytes.from(value))\n  if (as === 'Bytes') return bytes as never\n  return Hex.fromBytes(bytes) as never\n}\n\nexport declare namespace ripemd160 {\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> = {\n    /** The return type. @default 'Hex' */\n    as?: as | 'Hex' | 'Bytes' | undefined\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\n    | (as extends 'Hex' ? Hex.Hex : never)\n\n  type ErrorType =\n    | Bytes.from.ErrorType\n    | Hex.fromBytes.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Calculates the [Sha256](https://en.wikipedia.org/wiki/SHA-256) hash of a {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\n *\n * This function is a re-export of `sha256` from [`@noble/hashes`](https://github.com/paulmillr/noble-hashes), an audited & minimal JS hashing library.\n *\n * @example\n * ```ts twoslash\n * import { Hash } from 'ox'\n *\n * Hash.sha256('0xdeadbeef')\n * // '0x5f78c33274e43fa9de5659265c1d917e25c03722dcb0b8d27db8d5feaa813953'\n * ```\n *\n * @param value - {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\n * @param options - Options.\n * @returns Sha256 hash.\n */\nexport function sha256<\n  value extends Hex.Hex | Bytes.Bytes,\n  as extends 'Hex' | 'Bytes' =\n    | (value extends Hex.Hex ? 'Hex' : never)\n    | (value extends Bytes.Bytes ? 'Bytes' : never),\n>(\n  value: value | Hex.Hex | Bytes.Bytes,\n  options: sha256.Options<as> = {},\n): sha256.ReturnType<as> {\n  const { as = typeof value === 'string' ? 'Hex' : 'Bytes' } = options\n  const bytes = noble_sha256(Bytes.from(value))\n  if (as === 'Bytes') return bytes as never\n  return Hex.fromBytes(bytes) as never\n}\n\nexport declare namespace sha256 {\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = {\n    /** The return type. @default 'Hex' */\n    as?: as | 'Hex' | 'Bytes' | undefined\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex'> =\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\n    | (as extends 'Hex' ? Hex.Hex : never)\n\n  type ErrorType =\n    | Bytes.from.ErrorType\n    | Hex.fromBytes.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Checks if a string is a valid hash value.\n *\n * @example\n * ```ts twoslash\n * import { Hash } from 'ox'\n *\n * Hash.validate('0x')\n * // @log: false\n *\n * Hash.validate('0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0')\n * // @log: true\n * ```\n *\n * @param value - Value to check.\n * @returns Whether the value is a valid hash.\n */\nexport function validate(value: string): value is Hex.Hex {\n  return Hex.validate(value) && Hex.size(value) === 32\n}\n\nexport declare namespace validate {\n  type ErrorType =\n    | Hex.validate.ErrorType\n    | Hex.size.ErrorType\n    | Errors.GlobalErrorType\n}\n", "import * as Bytes from './Bytes.js'\nimport * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport type { Compute, ExactPartial } from './internal/types.js'\nimport * as Json from './Json.js'\n\n/** Root type for an ECDSA Public Key. */\nexport type PublicKey<\n  compressed extends boolean = false,\n  bigintType = bigint,\n  numberType = number,\n> = Compute<\n  compressed extends true\n    ? {\n        prefix: numberType\n        x: bigintType\n        y?: undefined\n      }\n    : {\n        prefix: numberType\n        x: bigintType\n        y: bigintType\n      }\n>\n\n/**\n * Asserts that a {@link ox#PublicKey.PublicKey} is valid.\n *\n * @example\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * PublicKey.assert({\n *   prefix: 4,\n *   y: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * })\n * // @error: PublicKey.InvalidError: Value \\`{\"y\":\"1\"}\\` is not a valid public key.\n * // @error: Public key must contain:\n * // @error: - an `x` and `prefix` value (compressed)\n * // @error: - an `x`, `y`, and `prefix` value (uncompressed)\n * ```\n *\n * @param publicKey - The public key object to assert.\n */\nexport function assert(\n  publicKey: ExactPartial<PublicKey>,\n  options: assert.Options = {},\n): asserts publicKey is PublicKey {\n  const { compressed } = options\n  const { prefix, x, y } = publicKey\n\n  // Uncompressed\n  if (\n    compressed === false ||\n    (typeof x === 'bigint' && typeof y === 'bigint')\n  ) {\n    if (prefix !== 4)\n      throw new InvalidPrefixError({\n        prefix,\n        cause: new InvalidUncompressedPrefixError(),\n      })\n    return\n  }\n\n  // Compressed\n  if (\n    compressed === true ||\n    (typeof x === 'bigint' && typeof y === 'undefined')\n  ) {\n    if (prefix !== 3 && prefix !== 2)\n      throw new InvalidPrefixError({\n        prefix,\n        cause: new InvalidCompressedPrefixError(),\n      })\n    return\n  }\n\n  // Unknown/invalid\n  throw new InvalidError({ publicKey })\n}\n\nexport declare namespace assert {\n  type Options = {\n    /** Whether or not the public key should be compressed. */\n    compressed?: boolean\n  }\n\n  type ErrorType = InvalidError | InvalidPrefixError | Errors.GlobalErrorType\n}\n\n/**\n * Compresses a {@link ox#PublicKey.PublicKey}.\n *\n * @example\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.from({\n *   prefix: 4,\n *   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n *   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * })\n *\n * const compressed = PublicKey.compress(publicKey) // [!code focus]\n * // @log: {\n * // @log:   prefix: 3,\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log: }\n * ```\n *\n * @param publicKey - The public key to compress.\n * @returns The compressed public key.\n */\nexport function compress(publicKey: PublicKey<false>): PublicKey<true> {\n  const { x, y } = publicKey\n  return {\n    prefix: y % 2n === 0n ? 2 : 3,\n    x,\n  }\n}\n\nexport declare namespace compress {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Instantiates a typed {@link ox#PublicKey.PublicKey} object from a {@link ox#PublicKey.PublicKey}, {@link ox#Bytes.Bytes}, or {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.from({\n *   prefix: 4,\n *   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n *   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * })\n * // @log: {\n * // @log:   prefix: 4,\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log:   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.from('0x048318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5')\n * // @log: {\n * // @log:   prefix: 4,\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log:   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * // @log: }\n * ```\n *\n * @param value - The public key value to instantiate.\n * @returns The instantiated {@link ox#PublicKey.PublicKey}.\n */\nexport function from<\n  const publicKey extends\n    | CompressedPublicKey\n    | UncompressedPublicKey\n    | Hex.Hex\n    | Bytes.Bytes,\n>(value: from.Value<publicKey>): from.ReturnType<publicKey> {\n  const publicKey = (() => {\n    if (Hex.validate(value)) return fromHex(value)\n    if (Bytes.validate(value)) return fromBytes(value)\n\n    const { prefix, x, y } = value\n    if (typeof x === 'bigint' && typeof y === 'bigint')\n      return { prefix: prefix ?? 0x04, x, y }\n    return { prefix, x }\n  })()\n\n  assert(publicKey)\n\n  return publicKey as never\n}\n\n/** @internal */\ntype CompressedPublicKey = PublicKey<true>\n\n/** @internal */\ntype UncompressedPublicKey = Omit<PublicKey<false>, 'prefix'> & {\n  prefix?: PublicKey['prefix'] | undefined\n}\n\nexport declare namespace from {\n  type Value<\n    publicKey extends\n      | CompressedPublicKey\n      | UncompressedPublicKey\n      | Hex.Hex\n      | Bytes.Bytes = PublicKey,\n  > = publicKey | CompressedPublicKey | UncompressedPublicKey\n\n  type ReturnType<\n    publicKey extends\n      | CompressedPublicKey\n      | UncompressedPublicKey\n      | Hex.Hex\n      | Bytes.Bytes = PublicKey,\n  > = publicKey extends CompressedPublicKey | UncompressedPublicKey\n    ? publicKey extends UncompressedPublicKey\n      ? Compute<publicKey & { readonly prefix: 0x04 }>\n      : publicKey\n    : PublicKey\n\n  type ErrorType = assert.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Deserializes a {@link ox#PublicKey.PublicKey} from a {@link ox#Bytes.Bytes} value.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.fromBytes(new Uint8Array([128, 3, 131, ...]))\n * // @log: {\n * // @log:   prefix: 4,\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log:   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * // @log: }\n * ```\n *\n * @param publicKey - The serialized public key.\n * @returns The deserialized public key.\n */\nexport function fromBytes(publicKey: Bytes.Bytes): PublicKey {\n  return fromHex(Hex.fromBytes(publicKey))\n}\n\nexport declare namespace fromBytes {\n  type ErrorType =\n    | fromHex.ErrorType\n    | Hex.fromBytes.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Deserializes a {@link ox#PublicKey.PublicKey} from a {@link ox#Hex.Hex} value.\n *\n * @example\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.fromHex('0x8318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5')\n * // @log: {\n * // @log:   prefix: 4,\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log:   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * // @log: }\n * ```\n *\n * @example\n * ### Deserializing a Compressed Public Key\n *\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.fromHex('0x038318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed75')\n * // @log: {\n * // @log:   prefix: 3,\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log: }\n * ```\n *\n * @param publicKey - The serialized public key.\n * @returns The deserialized public key.\n */\nexport function fromHex(publicKey: Hex.Hex): PublicKey {\n  if (\n    publicKey.length !== 132 &&\n    publicKey.length !== 130 &&\n    publicKey.length !== 68\n  )\n    throw new InvalidSerializedSizeError({ publicKey })\n\n  if (publicKey.length === 130) {\n    const x = BigInt(Hex.slice(publicKey, 0, 32))\n    const y = BigInt(Hex.slice(publicKey, 32, 64))\n    return {\n      prefix: 4,\n      x,\n      y,\n    } as never\n  }\n\n  if (publicKey.length === 132) {\n    const prefix = Number(Hex.slice(publicKey, 0, 1))\n    const x = BigInt(Hex.slice(publicKey, 1, 33))\n    const y = BigInt(Hex.slice(publicKey, 33, 65))\n    return {\n      prefix,\n      x,\n      y,\n    } as never\n  }\n\n  const prefix = Number(Hex.slice(publicKey, 0, 1))\n  const x = BigInt(Hex.slice(publicKey, 1, 33))\n  return {\n    prefix,\n    x,\n  } as never\n}\n\nexport declare namespace fromHex {\n  type ErrorType = Hex.slice.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Serializes a {@link ox#PublicKey.PublicKey} to {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.from({\n *   prefix: 4,\n *   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n *   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * })\n *\n * const bytes = PublicKey.toBytes(publicKey) // [!code focus]\n * // @log: Uint8Array [128, 3, 131, ...]\n * ```\n *\n * @param publicKey - The public key to serialize.\n * @returns The serialized public key.\n */\nexport function toBytes(\n  publicKey: PublicKey<boolean>,\n  options: toBytes.Options = {},\n): Bytes.Bytes {\n  return Bytes.fromHex(toHex(publicKey, options))\n}\n\nexport declare namespace toBytes {\n  type Options = {\n    /**\n     * Whether to include the prefix in the serialized public key.\n     * @default true\n     */\n    includePrefix?: boolean | undefined\n  }\n\n  type ErrorType =\n    | Hex.fromNumber.ErrorType\n    | Bytes.fromHex.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Serializes a {@link ox#PublicKey.PublicKey} to {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.from({\n *   prefix: 4,\n *   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n *   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * })\n *\n * const hex = PublicKey.toHex(publicKey) // [!code focus]\n * // @log: '0x048318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5'\n * ```\n *\n * @param publicKey - The public key to serialize.\n * @returns The serialized public key.\n */\nexport function toHex(\n  publicKey: PublicKey<boolean>,\n  options: toHex.Options = {},\n): Hex.Hex {\n  assert(publicKey)\n\n  const { prefix, x, y } = publicKey\n  const { includePrefix = true } = options\n\n  const publicKey_ = Hex.concat(\n    includePrefix ? Hex.fromNumber(prefix, { size: 1 }) : '0x',\n    Hex.fromNumber(x, { size: 32 }),\n    // If the public key is not compressed, add the y coordinate.\n    typeof y === 'bigint' ? Hex.fromNumber(y, { size: 32 }) : '0x',\n  )\n\n  return publicKey_\n}\n\nexport declare namespace toHex {\n  type Options = {\n    /**\n     * Whether to include the prefix in the serialized public key.\n     * @default true\n     */\n    includePrefix?: boolean | undefined\n  }\n\n  type ErrorType = Hex.fromNumber.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Validates a {@link ox#PublicKey.PublicKey}. Returns `true` if valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const valid = PublicKey.validate({\n *   prefix: 4,\n *   y: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * })\n * // @log: false\n * ```\n *\n * @param publicKey - The public key object to assert.\n */\nexport function validate(\n  publicKey: ExactPartial<PublicKey>,\n  options: validate.Options = {},\n): boolean {\n  try {\n    assert(publicKey, options)\n    return true\n  } catch (_error) {\n    return false\n  }\n}\n\nexport declare namespace validate {\n  type Options = {\n    /** Whether or not the public key should be compressed. */\n    compressed?: boolean\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Thrown when a public key is invalid.\n *\n * @example\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * PublicKey.assert({ y: 1n })\n * // @error: PublicKey.InvalidError: Value `{\"y\":1n}` is not a valid public key.\n * // @error: Public key must contain:\n * // @error: - an `x` and `prefix` value (compressed)\n * // @error: - an `x`, `y`, and `prefix` value (uncompressed)\n * ```\n */\nexport class InvalidError extends Errors.BaseError {\n  override readonly name = 'PublicKey.InvalidError'\n\n  constructor({ publicKey }: { publicKey: unknown }) {\n    super(`Value \\`${Json.stringify(publicKey)}\\` is not a valid public key.`, {\n      metaMessages: [\n        'Public key must contain:',\n        '- an `x` and `prefix` value (compressed)',\n        '- an `x`, `y`, and `prefix` value (uncompressed)',\n      ],\n    })\n  }\n}\n\n/** Thrown when a public key has an invalid prefix. */\nexport class InvalidPrefixError<\n  cause extends InvalidCompressedPrefixError | InvalidUncompressedPrefixError =\n    | InvalidCompressedPrefixError\n    | InvalidUncompressedPrefixError,\n> extends Errors.BaseError<cause> {\n  override readonly name = 'PublicKey.InvalidPrefixError'\n\n  constructor({ prefix, cause }: { prefix: number | undefined; cause: cause }) {\n    super(`Prefix \"${prefix}\" is invalid.`, {\n      cause,\n    })\n  }\n}\n\n/** Thrown when the public key has an invalid prefix for a compressed public key. */\nexport class InvalidCompressedPrefixError extends Errors.BaseError {\n  override readonly name = 'PublicKey.InvalidCompressedPrefixError'\n\n  constructor() {\n    super('Prefix must be 2 or 3 for compressed public keys.')\n  }\n}\n\n/** Thrown when the public key has an invalid prefix for an uncompressed public key. */\nexport class InvalidUncompressedPrefixError extends Errors.BaseError {\n  override readonly name = 'PublicKey.InvalidUncompressedPrefixError'\n\n  constructor() {\n    super('Prefix must be 4 for uncompressed public keys.')\n  }\n}\n\n/** Thrown when the public key has an invalid serialized size. */\nexport class InvalidSerializedSizeError extends Errors.BaseError {\n  override readonly name = 'PublicKey.InvalidSerializedSizeError'\n\n  constructor({ publicKey }: { publicKey: Hex.Hex | Bytes.Bytes }) {\n    super(`Value \\`${publicKey}\\` is an invalid public key size.`, {\n      metaMessages: [\n        'Expected: 33 bytes (compressed + prefix), 64 bytes (uncompressed) or 65 bytes (uncompressed + prefix).',\n        `Received ${Hex.size(Hex.from(publicKey))} bytes.`,\n      ],\n    })\n  }\n}\n", "import type { Address as abitype_Address } from 'abitype'\nimport * as Bytes from './Bytes.js'\nimport * as Caches from './Caches.js'\nimport * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as PublicKey from './PublicKey.js'\n\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/\n\n/** Root type for Address. */\nexport type Address = abitype_Address\n\n/**\n * Asserts that the given value is a valid {@link ox#Address.Address}.\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.assert('0xA0Cf798816D4b9b9866b5330EEa46a18382f251e')\n * ```\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.assert('0xdeadbeef')\n * // @error: InvalidAddressError: Address \"0xdeadbeef\" is invalid.\n * ```\n *\n * @param value - Value to assert if it is a valid address.\n * @param options - Assertion options.\n */\nexport function assert(\n  value: string,\n  options: assert.Options = {},\n): asserts value is Address {\n  const { strict = true } = options\n\n  if (!addressRegex.test(value))\n    throw new InvalidAddressError({\n      address: value,\n      cause: new InvalidInputError(),\n    })\n\n  if (strict) {\n    if (value.toLowerCase() === value) return\n    if (checksum(value as Address) !== value)\n      throw new InvalidAddressError({\n        address: value,\n        cause: new InvalidChecksumError(),\n      })\n  }\n}\n\nexport declare namespace assert {\n  type Options = {\n    /**\n     * Enables strict mode. Whether or not to compare the address against its checksum.\n     *\n     * @default true\n     */\n    strict?: boolean | undefined\n  }\n\n  type ErrorType = InvalidAddressError | Errors.GlobalErrorType\n}\n\n/**\n * Computes the checksum address for the given {@link ox#Address.Address}.\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.checksum('0xa0cf798816d4b9b9866b5330eea46a18382f251e')\n * // @log: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'\n * ```\n *\n * @param address - The address to compute the checksum for.\n * @returns The checksummed address.\n */\nexport function checksum(address: string): Address {\n  if (Caches.checksum.has(address)) return Caches.checksum.get(address)!\n\n  assert(address, { strict: false })\n\n  const hexAddress = address.substring(2).toLowerCase()\n  const hash = Hash.keccak256(Bytes.fromString(hexAddress), { as: 'Bytes' })\n\n  const characters = hexAddress.split('')\n  for (let i = 0; i < 40; i += 2) {\n    if (hash[i >> 1]! >> 4 >= 8 && characters[i]) {\n      characters[i] = characters[i]!.toUpperCase()\n    }\n    if ((hash[i >> 1]! & 0x0f) >= 8 && characters[i + 1]) {\n      characters[i + 1] = characters[i + 1]!.toUpperCase()\n    }\n  }\n\n  const result = `0x${characters.join('')}` as const\n  Caches.checksum.set(address, result)\n  return result\n}\n\nexport declare namespace checksum {\n  type ErrorType =\n    | assert.ErrorType\n    | Hash.keccak256.ErrorType\n    | Bytes.fromString.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Converts a stringified address to a typed (checksummed) {@link ox#Address.Address}.\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.from('0xa0cf798816d4b9b9866b5330eea46a18382f251e')\n * // @log: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'\n * ```\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.from('0xa0cf798816d4b9b9866b5330eea46a18382f251e', {\n *   checksum: false\n * })\n * // @log: '0xa0cf798816d4b9b9866b5330eea46a18382f251e'\n * ```\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.from('hello')\n * // @error: InvalidAddressError: Address \"0xa\" is invalid.\n * ```\n *\n * @param address - An address string to convert to a typed Address.\n * @param options - Conversion options.\n * @returns The typed Address.\n */\nexport function from(address: string, options: from.Options = {}): Address {\n  const { checksum: checksumVal = false } = options\n  assert(address)\n  if (checksumVal) return checksum(address)\n  return address as Address\n}\n\nexport declare namespace from {\n  type Options = {\n    /**\n     * Whether to checksum the address.\n     *\n     * @default false\n     */\n    checksum?: boolean | undefined\n  }\n\n  type ErrorType =\n    | assert.ErrorType\n    | checksum.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Converts an ECDSA public key to an {@link ox#Address.Address}.\n *\n * @example\n * ```ts twoslash\n * import { Address, PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.from(\n *   '0x048318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5',\n * )\n * const address = Address.fromPublicKey(publicKey)\n * // @log: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n * ```\n *\n * @param publicKey - The ECDSA public key to convert to an {@link ox#Address.Address}.\n * @param options - Conversion options.\n * @returns The {@link ox#Address.Address} corresponding to the public key.\n */\nexport function fromPublicKey(\n  publicKey: PublicKey.PublicKey,\n  options: fromPublicKey.Options = {},\n): Address {\n  const address = Hash.keccak256(\n    `0x${PublicKey.toHex(publicKey).slice(4)}`,\n  ).substring(26)\n  return from(`0x${address}`, options)\n}\n\nexport declare namespace fromPublicKey {\n  type Options = {\n    /**\n     * Whether to checksum the address.\n     *\n     * @default false\n     */\n    checksum?: boolean | undefined\n  }\n\n  type ErrorType =\n    | Hash.keccak256.ErrorType\n    | PublicKey.toHex.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Checks if two {@link ox#Address.Address} are equal.\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.isEqual(\n *   '0xa0cf798816d4b9b9866b5330eea46a18382f251e',\n *   '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'\n * )\n * // @log: true\n * ```\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.isEqual(\n *   '0xa0cf798816d4b9b9866b5330eea46a18382f251e',\n *   '0xA0Cf798816D4b9b9866b5330EEa46a18382f251f'\n * )\n * // @log: false\n * ```\n *\n * @param addressA - The first address to compare.\n * @param addressB - The second address to compare.\n * @returns Whether the addresses are equal.\n */\nexport function isEqual(addressA: Address, addressB: Address): boolean {\n  assert(addressA, { strict: false })\n  assert(addressB, { strict: false })\n  return addressA.toLowerCase() === addressB.toLowerCase()\n}\n\nexport declare namespace isEqual {\n  type ErrorType = assert.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Checks if the given address is a valid {@link ox#Address.Address}.\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.validate('0xA0Cf798816D4b9b9866b5330EEa46a18382f251e')\n * // @log: true\n * ```\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.validate('0xdeadbeef')\n * // @log: false\n * ```\n *\n * @param address - Value to check if it is a valid address.\n * @param options - Check options.\n * @returns Whether the address is a valid address.\n */\nexport function validate(\n  address: string,\n  options: validate.Options = {},\n): address is Address {\n  const { strict = true } = options ?? {}\n  try {\n    assert(address, { strict })\n    return true\n  } catch {\n    return false\n  }\n}\n\nexport declare namespace validate {\n  type Options = {\n    /**\n     * Enables strict mode. Whether or not to compare the address against its checksum.\n     *\n     * @default true\n     */\n    strict?: boolean | undefined\n  }\n}\n\n/**\n * Thrown when an address is invalid.\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.from('0x123')\n * // @error: Address.InvalidAddressError: Address `0x123` is invalid.\n * ```\n */\nexport class InvalidAddressError<\n  cause extends InvalidInputError | InvalidChecksumError =\n    | InvalidInputError\n    | InvalidChecksumError,\n> extends Errors.BaseError<cause> {\n  override readonly name = 'Address.InvalidAddressError'\n\n  constructor({ address, cause }: { address: string; cause: cause }) {\n    super(`Address \"${address}\" is invalid.`, {\n      cause,\n    })\n  }\n}\n\n/** Thrown when an address is not a 20 byte (40 hexadecimal character) value. */\nexport class InvalidInputError extends Errors.BaseError {\n  override readonly name = 'Address.InvalidInputError'\n\n  constructor() {\n    super('Address is not a 20 byte (40 hexadecimal character) value.')\n  }\n}\n\n/** Thrown when an address does not match its checksum counterpart. */\nexport class InvalidChecksumError extends Errors.BaseError {\n  override readonly name = 'Address.InvalidChecksumError'\n\n  constructor() {\n    super('Address does not match its checksum counterpart.')\n  }\n}\n", "export const arrayRegex = /^(.*)\\[([0-9]*)\\]$/\n\n// `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n// https://regexr.com/6va55\nexport const bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/\n\n// `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n// https://regexr.com/6v8hp\nexport const integerRegex =\n  /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/\n\nexport const maxInt8 = 2n ** (8n - 1n) - 1n\nexport const maxInt16 = 2n ** (16n - 1n) - 1n\nexport const maxInt24 = 2n ** (24n - 1n) - 1n\nexport const maxInt32 = 2n ** (32n - 1n) - 1n\nexport const maxInt40 = 2n ** (40n - 1n) - 1n\nexport const maxInt48 = 2n ** (48n - 1n) - 1n\nexport const maxInt56 = 2n ** (56n - 1n) - 1n\nexport const maxInt64 = 2n ** (64n - 1n) - 1n\nexport const maxInt72 = 2n ** (72n - 1n) - 1n\nexport const maxInt80 = 2n ** (80n - 1n) - 1n\nexport const maxInt88 = 2n ** (88n - 1n) - 1n\nexport const maxInt96 = 2n ** (96n - 1n) - 1n\nexport const maxInt104 = 2n ** (104n - 1n) - 1n\nexport const maxInt112 = 2n ** (112n - 1n) - 1n\nexport const maxInt120 = 2n ** (120n - 1n) - 1n\nexport const maxInt128 = 2n ** (128n - 1n) - 1n\nexport const maxInt136 = 2n ** (136n - 1n) - 1n\nexport const maxInt144 = 2n ** (144n - 1n) - 1n\nexport const maxInt152 = 2n ** (152n - 1n) - 1n\nexport const maxInt160 = 2n ** (160n - 1n) - 1n\nexport const maxInt168 = 2n ** (168n - 1n) - 1n\nexport const maxInt176 = 2n ** (176n - 1n) - 1n\nexport const maxInt184 = 2n ** (184n - 1n) - 1n\nexport const maxInt192 = 2n ** (192n - 1n) - 1n\nexport const maxInt200 = 2n ** (200n - 1n) - 1n\nexport const maxInt208 = 2n ** (208n - 1n) - 1n\nexport const maxInt216 = 2n ** (216n - 1n) - 1n\nexport const maxInt224 = 2n ** (224n - 1n) - 1n\nexport const maxInt232 = 2n ** (232n - 1n) - 1n\nexport const maxInt240 = 2n ** (240n - 1n) - 1n\nexport const maxInt248 = 2n ** (248n - 1n) - 1n\nexport const maxInt256 = 2n ** (256n - 1n) - 1n\n\nexport const minInt8 = -(2n ** (8n - 1n))\nexport const minInt16 = -(2n ** (16n - 1n))\nexport const minInt24 = -(2n ** (24n - 1n))\nexport const minInt32 = -(2n ** (32n - 1n))\nexport const minInt40 = -(2n ** (40n - 1n))\nexport const minInt48 = -(2n ** (48n - 1n))\nexport const minInt56 = -(2n ** (56n - 1n))\nexport const minInt64 = -(2n ** (64n - 1n))\nexport const minInt72 = -(2n ** (72n - 1n))\nexport const minInt80 = -(2n ** (80n - 1n))\nexport const minInt88 = -(2n ** (88n - 1n))\nexport const minInt96 = -(2n ** (96n - 1n))\nexport const minInt104 = -(2n ** (104n - 1n))\nexport const minInt112 = -(2n ** (112n - 1n))\nexport const minInt120 = -(2n ** (120n - 1n))\nexport const minInt128 = -(2n ** (128n - 1n))\nexport const minInt136 = -(2n ** (136n - 1n))\nexport const minInt144 = -(2n ** (144n - 1n))\nexport const minInt152 = -(2n ** (152n - 1n))\nexport const minInt160 = -(2n ** (160n - 1n))\nexport const minInt168 = -(2n ** (168n - 1n))\nexport const minInt176 = -(2n ** (176n - 1n))\nexport const minInt184 = -(2n ** (184n - 1n))\nexport const minInt192 = -(2n ** (192n - 1n))\nexport const minInt200 = -(2n ** (200n - 1n))\nexport const minInt208 = -(2n ** (208n - 1n))\nexport const minInt216 = -(2n ** (216n - 1n))\nexport const minInt224 = -(2n ** (224n - 1n))\nexport const minInt232 = -(2n ** (232n - 1n))\nexport const minInt240 = -(2n ** (240n - 1n))\nexport const minInt248 = -(2n ** (248n - 1n))\nexport const minInt256 = -(2n ** (256n - 1n))\n\nexport const maxUint8 = 2n ** 8n - 1n\nexport const maxUint16 = 2n ** 16n - 1n\nexport const maxUint24 = 2n ** 24n - 1n\nexport const maxUint32 = 2n ** 32n - 1n\nexport const maxUint40 = 2n ** 40n - 1n\nexport const maxUint48 = 2n ** 48n - 1n\nexport const maxUint56 = 2n ** 56n - 1n\nexport const maxUint64 = 2n ** 64n - 1n\nexport const maxUint72 = 2n ** 72n - 1n\nexport const maxUint80 = 2n ** 80n - 1n\nexport const maxUint88 = 2n ** 88n - 1n\nexport const maxUint96 = 2n ** 96n - 1n\nexport const maxUint104 = 2n ** 104n - 1n\nexport const maxUint112 = 2n ** 112n - 1n\nexport const maxUint120 = 2n ** 120n - 1n\nexport const maxUint128 = 2n ** 128n - 1n\nexport const maxUint136 = 2n ** 136n - 1n\nexport const maxUint144 = 2n ** 144n - 1n\nexport const maxUint152 = 2n ** 152n - 1n\nexport const maxUint160 = 2n ** 160n - 1n\nexport const maxUint168 = 2n ** 168n - 1n\nexport const maxUint176 = 2n ** 176n - 1n\nexport const maxUint184 = 2n ** 184n - 1n\nexport const maxUint192 = 2n ** 192n - 1n\nexport const maxUint200 = 2n ** 200n - 1n\nexport const maxUint208 = 2n ** 208n - 1n\nexport const maxUint216 = 2n ** 216n - 1n\nexport const maxUint224 = 2n ** 224n - 1n\nexport const maxUint232 = 2n ** 232n - 1n\nexport const maxUint240 = 2n ** 240n - 1n\nexport const maxUint248 = 2n ** 248n - 1n\nexport const maxUint256 = 2n ** 256n - 1n\n", "import type {\n  AbiParameter,\n  AbiParameterKind,\n  AbiParametersToPrimitiveTypes,\n  AbiParameterToPrimitiveType,\n} from 'abitype'\nimport * as AbiParameters from '../AbiParameters.js'\nimport * as Address from '../Address.js'\nimport * as Bytes from '../Bytes.js'\nimport * as Errors from '../Errors.js'\nimport * as Hex from '../Hex.js'\nimport { integerRegex } from '../Solidity.js'\nimport type * as Cursor from './cursor.js'\nimport type { Compute, IsNarrowable, UnionToIntersection } from './types.js'\n\n/** @internal */\nexport type ParameterToPrimitiveType<\n  abiParameter extends AbiParameter | { name: string; type: unknown },\n  abiParameterKind extends AbiParameterKind = AbiParameterKind,\n> = AbiParameterToPrimitiveType<abiParameter, abiParameterKind>\n\n/** @internal */\nexport type PreparedParameter = { dynamic: boolean; encoded: Hex.Hex }\n\n/** @internal */\nexport type ToObject<\n  parameters extends readonly AbiParameter[],\n  kind extends AbiParameterKind = AbiParameterKind,\n> = IsNarrowable<parameters, AbiParameters.AbiParameters> extends true\n  ? Compute<\n      UnionToIntersection<\n        {\n          [index in keyof parameters]: parameters[index] extends {\n            name: infer name extends string\n          }\n            ? {\n                [key in name]: AbiParameterToPrimitiveType<\n                  parameters[index],\n                  kind\n                >\n              }\n            : {\n                [key in index]: AbiParameterToPrimitiveType<\n                  parameters[index],\n                  kind\n                >\n              }\n        }[number]\n      >\n    >\n  : unknown\n\n/** @internal */\nexport type ToPrimitiveTypes<\n  abiParameters extends readonly AbiParameter[],\n  abiParameterKind extends AbiParameterKind = AbiParameterKind,\n> = AbiParametersToPrimitiveTypes<abiParameters, abiParameterKind>\n\n/** @internal */\nexport type Tuple = ParameterToPrimitiveType<TupleAbiParameter>\n\n/** @internal */\nexport function decodeParameter(\n  cursor: Cursor.Cursor,\n  param: AbiParameters.Parameter,\n  options: { checksumAddress?: boolean | undefined; staticPosition: number },\n) {\n  const { checksumAddress, staticPosition } = options\n  const arrayComponents = getArrayComponents(param.type)\n  if (arrayComponents) {\n    const [length, type] = arrayComponents\n    return decodeArray(\n      cursor,\n      { ...param, type },\n      { checksumAddress, length, staticPosition },\n    )\n  }\n  if (param.type === 'tuple')\n    return decodeTuple(cursor, param as TupleAbiParameter, {\n      checksumAddress,\n      staticPosition,\n    })\n  if (param.type === 'address')\n    return decodeAddress(cursor, { checksum: checksumAddress })\n  if (param.type === 'bool') return decodeBool(cursor)\n  if (param.type.startsWith('bytes'))\n    return decodeBytes(cursor, param, { staticPosition })\n  if (param.type.startsWith('uint') || param.type.startsWith('int'))\n    return decodeNumber(cursor, param)\n  if (param.type === 'string') return decodeString(cursor, { staticPosition })\n  throw new AbiParameters.InvalidTypeError(param.type)\n}\n\nexport declare namespace decodeParameter {\n  type ErrorType =\n    | decodeArray.ErrorType\n    | decodeTuple.ErrorType\n    | decodeAddress.ErrorType\n    | decodeBool.ErrorType\n    | decodeBytes.ErrorType\n    | decodeNumber.ErrorType\n    | decodeString.ErrorType\n    | AbiParameters.InvalidTypeError\n    | Errors.GlobalErrorType\n}\n\nconst sizeOfLength = 32\nconst sizeOfOffset = 32\n\n/** @internal */\nexport function decodeAddress(\n  cursor: Cursor.Cursor,\n  options: { checksum?: boolean | undefined } = {},\n) {\n  const { checksum = false } = options\n  const value = cursor.readBytes(32)\n  const wrap = (address: Hex.Hex) =>\n    checksum ? Address.checksum(address) : address\n  return [wrap(Hex.fromBytes(Bytes.slice(value, -20))), 32]\n}\n\nexport declare namespace decodeAddress {\n  type ErrorType =\n    | Hex.fromBytes.ErrorType\n    | Bytes.slice.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function decodeArray(\n  cursor: Cursor.Cursor,\n  param: AbiParameters.Parameter,\n  options: {\n    checksumAddress?: boolean | undefined\n    length: number | null\n    staticPosition: number\n  },\n) {\n  const { checksumAddress, length, staticPosition } = options\n\n  // If the length of the array is not known in advance (dynamic array),\n  // this means we will need to wonder off to the pointer and decode.\n  if (!length) {\n    // Dealing with a dynamic type, so get the offset of the array data.\n    const offset = Bytes.toNumber(cursor.readBytes(sizeOfOffset))\n\n    // Start is the static position of current slot + offset.\n    const start = staticPosition + offset\n    const startOfData = start + sizeOfLength\n\n    // Get the length of the array from the offset.\n    cursor.setPosition(start)\n    const length = Bytes.toNumber(cursor.readBytes(sizeOfLength))\n\n    // Check if the array has any dynamic children.\n    const dynamicChild = hasDynamicChild(param)\n\n    let consumed = 0\n    const value: unknown[] = []\n    for (let i = 0; i < length; ++i) {\n      // If any of the children is dynamic, then all elements will be offset pointer, thus size of one slot (32 bytes).\n      // Otherwise, elements will be the size of their encoding (consumed bytes).\n      cursor.setPosition(startOfData + (dynamicChild ? i * 32 : consumed))\n      const [data, consumed_] = decodeParameter(cursor, param, {\n        checksumAddress,\n        staticPosition: startOfData,\n      })\n      consumed += consumed_\n      value.push(data)\n    }\n\n    // As we have gone wondering, restore to the original position + next slot.\n    cursor.setPosition(staticPosition + 32)\n    return [value, 32]\n  }\n\n  // If the length of the array is known in advance,\n  // and the length of an element deeply nested in the array is not known,\n  // we need to decode the offset of the array data.\n  if (hasDynamicChild(param)) {\n    // Dealing with dynamic types, so get the offset of the array data.\n    const offset = Bytes.toNumber(cursor.readBytes(sizeOfOffset))\n\n    // Start is the static position of current slot + offset.\n    const start = staticPosition + offset\n\n    const value: unknown[] = []\n    for (let i = 0; i < length; ++i) {\n      // Move cursor along to the next slot (next offset pointer).\n      cursor.setPosition(start + i * 32)\n      const [data] = decodeParameter(cursor, param, {\n        checksumAddress,\n        staticPosition: start,\n      })\n      value.push(data)\n    }\n\n    // As we have gone wondering, restore to the original position + next slot.\n    cursor.setPosition(staticPosition + 32)\n    return [value, 32]\n  }\n\n  // If the length of the array is known in advance and the array is deeply static,\n  // then we can just decode each element in sequence.\n  let consumed = 0\n  const value: unknown[] = []\n  for (let i = 0; i < length; ++i) {\n    const [data, consumed_] = decodeParameter(cursor, param, {\n      checksumAddress,\n      staticPosition: staticPosition + consumed,\n    })\n    consumed += consumed_\n    value.push(data)\n  }\n  return [value, consumed]\n}\n\nexport declare namespace decodeArray {\n  type ErrorType = Bytes.toNumber.ErrorType | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function decodeBool(cursor: Cursor.Cursor) {\n  return [Bytes.toBoolean(cursor.readBytes(32), { size: 32 }), 32]\n}\n\nexport declare namespace decodeBool {\n  type ErrorType = Bytes.toBoolean.ErrorType | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function decodeBytes(\n  cursor: Cursor.Cursor,\n  param: AbiParameters.Parameter,\n  { staticPosition }: { staticPosition: number },\n) {\n  const [_, size] = param.type.split('bytes')\n  if (!size) {\n    // Dealing with dynamic types, so get the offset of the bytes data.\n    const offset = Bytes.toNumber(cursor.readBytes(32))\n\n    // Set position of the cursor to start of bytes data.\n    cursor.setPosition(staticPosition + offset)\n\n    const length = Bytes.toNumber(cursor.readBytes(32))\n\n    // If there is no length, we have zero data.\n    if (length === 0) {\n      // As we have gone wondering, restore to the original position + next slot.\n      cursor.setPosition(staticPosition + 32)\n      return ['0x', 32]\n    }\n\n    const data = cursor.readBytes(length)\n\n    // As we have gone wondering, restore to the original position + next slot.\n    cursor.setPosition(staticPosition + 32)\n    return [Hex.fromBytes(data), 32]\n  }\n\n  const value = Hex.fromBytes(cursor.readBytes(Number.parseInt(size, 10), 32))\n  return [value, 32]\n}\n\nexport declare namespace decodeBytes {\n  type ErrorType =\n    | Hex.fromBytes.ErrorType\n    | Bytes.toNumber.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function decodeNumber(\n  cursor: Cursor.Cursor,\n  param: AbiParameters.Parameter,\n) {\n  const signed = param.type.startsWith('int')\n  const size = Number.parseInt(param.type.split('int')[1] || '256', 10)\n  const value = cursor.readBytes(32)\n  return [\n    size > 48\n      ? Bytes.toBigInt(value, { signed })\n      : Bytes.toNumber(value, { signed }),\n    32,\n  ]\n}\n\nexport declare namespace decodeNumber {\n  type ErrorType =\n    | Bytes.toNumber.ErrorType\n    | Bytes.toBigInt.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport type TupleAbiParameter = AbiParameters.Parameter & {\n  components: readonly AbiParameters.Parameter[]\n}\n\n/** @internal */\nexport function decodeTuple(\n  cursor: Cursor.Cursor,\n  param: TupleAbiParameter,\n  options: { checksumAddress?: boolean | undefined; staticPosition: number },\n) {\n  const { checksumAddress, staticPosition } = options\n\n  // Tuples can have unnamed components (i.e. they are arrays), so we must\n  // determine whether the tuple is named or unnamed. In the case of a named\n  // tuple, the value will be an object where each property is the name of the\n  // component. In the case of an unnamed tuple, the value will be an array.\n  const hasUnnamedChild =\n    param.components.length === 0 || param.components.some(({ name }) => !name)\n\n  // Initialize the value to an object or an array, depending on whether the\n  // tuple is named or unnamed.\n  const value: any = hasUnnamedChild ? [] : {}\n  let consumed = 0\n\n  // If the tuple has a dynamic child, we must first decode the offset to the\n  // tuple data.\n  if (hasDynamicChild(param)) {\n    // Dealing with dynamic types, so get the offset of the tuple data.\n    const offset = Bytes.toNumber(cursor.readBytes(sizeOfOffset))\n\n    // Start is the static position of referencing slot + offset.\n    const start = staticPosition + offset\n\n    for (let i = 0; i < param.components.length; ++i) {\n      const component = param.components[i]!\n      cursor.setPosition(start + consumed)\n      const [data, consumed_] = decodeParameter(cursor, component, {\n        checksumAddress,\n        staticPosition: start,\n      })\n      consumed += consumed_\n      value[hasUnnamedChild ? i : component?.name!] = data\n    }\n\n    // As we have gone wondering, restore to the original position + next slot.\n    cursor.setPosition(staticPosition + 32)\n    return [value, 32]\n  }\n\n  // If the tuple has static children, we can just decode each component\n  // in sequence.\n  for (let i = 0; i < param.components.length; ++i) {\n    const component = param.components[i]!\n    const [data, consumed_] = decodeParameter(cursor, component, {\n      checksumAddress,\n      staticPosition,\n    })\n    value[hasUnnamedChild ? i : component?.name!] = data\n    consumed += consumed_\n  }\n  return [value, consumed]\n}\n\nexport declare namespace decodeTuple {\n  type ErrorType = Bytes.toNumber.ErrorType | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function decodeString(\n  cursor: Cursor.Cursor,\n  { staticPosition }: { staticPosition: number },\n) {\n  // Get offset to start of string data.\n  const offset = Bytes.toNumber(cursor.readBytes(32))\n\n  // Start is the static position of current slot + offset.\n  const start = staticPosition + offset\n  cursor.setPosition(start)\n\n  const length = Bytes.toNumber(cursor.readBytes(32))\n\n  // If there is no length, we have zero data (empty string).\n  if (length === 0) {\n    cursor.setPosition(staticPosition + 32)\n    return ['', 32]\n  }\n\n  const data = cursor.readBytes(length, 32)\n  const value = Bytes.toString(Bytes.trimLeft(data))\n\n  // As we have gone wondering, restore to the original position + next slot.\n  cursor.setPosition(staticPosition + 32)\n\n  return [value, 32]\n}\n\nexport declare namespace decodeString {\n  type ErrorType =\n    | Bytes.toNumber.ErrorType\n    | Bytes.toString.ErrorType\n    | Bytes.trimLeft.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function prepareParameters<\n  const parameters extends AbiParameters.AbiParameters,\n>({\n  checksumAddress,\n  parameters,\n  values,\n}: {\n  checksumAddress?: boolean | undefined\n  parameters: parameters\n  values: parameters extends AbiParameters.AbiParameters\n    ? ToPrimitiveTypes<parameters>\n    : never\n}) {\n  const preparedParameters: PreparedParameter[] = []\n  for (let i = 0; i < parameters.length; i++) {\n    preparedParameters.push(\n      prepareParameter({\n        checksumAddress,\n        parameter: parameters[i]!,\n        value: values[i],\n      }),\n    )\n  }\n  return preparedParameters\n}\n\n/** @internal */\nexport declare namespace prepareParameters {\n  type ErrorType = prepareParameter.ErrorType | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function prepareParameter<\n  const parameter extends AbiParameters.Parameter,\n>({\n  checksumAddress = false,\n  parameter: parameter_,\n  value,\n}: {\n  parameter: parameter\n  value: parameter extends AbiParameters.Parameter\n    ? ParameterToPrimitiveType<parameter>\n    : never\n  checksumAddress?: boolean | undefined\n}): PreparedParameter {\n  const parameter = parameter_ as AbiParameters.Parameter\n\n  const arrayComponents = getArrayComponents(parameter.type)\n  if (arrayComponents) {\n    const [length, type] = arrayComponents\n    return encodeArray(value, {\n      checksumAddress,\n      length,\n      parameter: {\n        ...parameter,\n        type,\n      },\n    })\n  }\n  if (parameter.type === 'tuple') {\n    return encodeTuple(value as unknown as Tuple, {\n      checksumAddress,\n      parameter: parameter as TupleAbiParameter,\n    })\n  }\n  if (parameter.type === 'address') {\n    return encodeAddress(value as unknown as Hex.Hex, {\n      checksum: checksumAddress,\n    })\n  }\n  if (parameter.type === 'bool') {\n    return encodeBoolean(value as unknown as boolean)\n  }\n  if (parameter.type.startsWith('uint') || parameter.type.startsWith('int')) {\n    const signed = parameter.type.startsWith('int')\n    const [, , size = '256'] = integerRegex.exec(parameter.type) ?? []\n    return encodeNumber(value as unknown as number, {\n      signed,\n      size: Number(size),\n    })\n  }\n  if (parameter.type.startsWith('bytes')) {\n    return encodeBytes(value as unknown as Hex.Hex, { type: parameter.type })\n  }\n  if (parameter.type === 'string') {\n    return encodeString(value as unknown as string)\n  }\n  throw new AbiParameters.InvalidTypeError(parameter.type)\n}\n\n/** @internal */\nexport declare namespace prepareParameter {\n  type ErrorType =\n    | encodeArray.ErrorType\n    | encodeTuple.ErrorType\n    | encodeAddress.ErrorType\n    | encodeBoolean.ErrorType\n    | encodeBytes.ErrorType\n    | encodeString.ErrorType\n    | AbiParameters.InvalidTypeError\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function encode(preparedParameters: PreparedParameter[]): Hex.Hex {\n  // 1. Compute the size of the static part of the parameters.\n  let staticSize = 0\n  for (let i = 0; i < preparedParameters.length; i++) {\n    const { dynamic, encoded } = preparedParameters[i]!\n    if (dynamic) staticSize += 32\n    else staticSize += Hex.size(encoded)\n  }\n\n  // 2. Split the parameters into static and dynamic parts.\n  const staticParameters: Hex.Hex[] = []\n  const dynamicParameters: Hex.Hex[] = []\n  let dynamicSize = 0\n  for (let i = 0; i < preparedParameters.length; i++) {\n    const { dynamic, encoded } = preparedParameters[i]!\n    if (dynamic) {\n      staticParameters.push(\n        Hex.fromNumber(staticSize + dynamicSize, { size: 32 }),\n      )\n      dynamicParameters.push(encoded)\n      dynamicSize += Hex.size(encoded)\n    } else {\n      staticParameters.push(encoded)\n    }\n  }\n\n  // 3. Concatenate static and dynamic parts.\n  return Hex.concat(...staticParameters, ...dynamicParameters)\n}\n\n/** @internal */\nexport declare namespace encode {\n  type ErrorType =\n    | Hex.concat.ErrorType\n    | Hex.fromNumber.ErrorType\n    | Hex.size.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function encodeAddress(\n  value: Hex.Hex,\n  options: { checksum: boolean },\n): PreparedParameter {\n  const { checksum = false } = options\n  Address.assert(value, { strict: checksum })\n  return {\n    dynamic: false,\n    encoded: Hex.padLeft(value.toLowerCase() as Hex.Hex),\n  }\n}\n\n/** @internal */\nexport declare namespace encodeAddress {\n  type ErrorType =\n    | Address.assert.ErrorType\n    | Hex.padLeft.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function encodeArray<const parameter extends AbiParameters.Parameter>(\n  value: ParameterToPrimitiveType<parameter>,\n  options: {\n    checksumAddress?: boolean | undefined\n    length: number | null\n    parameter: parameter\n  },\n): PreparedParameter {\n  const { checksumAddress, length, parameter } = options\n\n  const dynamic = length === null\n\n  if (!Array.isArray(value)) throw new AbiParameters.InvalidArrayError(value)\n  if (!dynamic && value.length !== length)\n    throw new AbiParameters.ArrayLengthMismatchError({\n      expectedLength: length!,\n      givenLength: value.length,\n      type: `${parameter.type}[${length}]`,\n    })\n\n  let dynamicChild = false\n  const preparedParameters: PreparedParameter[] = []\n  for (let i = 0; i < value.length; i++) {\n    const preparedParam = prepareParameter({\n      checksumAddress,\n      parameter,\n      value: value[i],\n    })\n    if (preparedParam.dynamic) dynamicChild = true\n    preparedParameters.push(preparedParam)\n  }\n\n  if (dynamic || dynamicChild) {\n    const data = encode(preparedParameters)\n    if (dynamic) {\n      const length = Hex.fromNumber(preparedParameters.length, { size: 32 })\n      return {\n        dynamic: true,\n        encoded:\n          preparedParameters.length > 0 ? Hex.concat(length, data) : length,\n      }\n    }\n    if (dynamicChild) return { dynamic: true, encoded: data }\n  }\n  return {\n    dynamic: false,\n    encoded: Hex.concat(...preparedParameters.map(({ encoded }) => encoded)),\n  }\n}\n\n/** @internal */\nexport declare namespace encodeArray {\n  type ErrorType =\n    | AbiParameters.InvalidArrayError\n    | AbiParameters.ArrayLengthMismatchError\n    | Hex.concat.ErrorType\n    | Hex.fromNumber.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function encodeBytes(\n  value: Hex.Hex,\n  { type }: { type: string },\n): PreparedParameter {\n  const [, parametersize] = type.split('bytes')\n  const bytesSize = Hex.size(value)\n  if (!parametersize) {\n    let value_ = value\n    // If the size is not divisible by 32 bytes, pad the end\n    // with empty bytes to the ceiling 32 bytes.\n    if (bytesSize % 32 !== 0)\n      value_ = Hex.padRight(value_, Math.ceil((value.length - 2) / 2 / 32) * 32)\n    return {\n      dynamic: true,\n      encoded: Hex.concat(\n        Hex.padLeft(Hex.fromNumber(bytesSize, { size: 32 })),\n        value_,\n      ),\n    }\n  }\n  if (bytesSize !== Number.parseInt(parametersize, 10))\n    throw new AbiParameters.BytesSizeMismatchError({\n      expectedSize: Number.parseInt(parametersize, 10),\n      value,\n    })\n  return { dynamic: false, encoded: Hex.padRight(value) }\n}\n\n/** @internal */\nexport declare namespace encodeBytes {\n  type ErrorType =\n    | Hex.padLeft.ErrorType\n    | Hex.padRight.ErrorType\n    | Hex.fromNumber.ErrorType\n    | Hex.slice.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function encodeBoolean(value: boolean): PreparedParameter {\n  if (typeof value !== 'boolean')\n    throw new Errors.BaseError(\n      `Invalid boolean value: \"${value}\" (type: ${typeof value}). Expected: \\`true\\` or \\`false\\`.`,\n    )\n  return { dynamic: false, encoded: Hex.padLeft(Hex.fromBoolean(value)) }\n}\n\n/** @internal */\nexport declare namespace encodeBoolean {\n  type ErrorType =\n    | Hex.padLeft.ErrorType\n    | Hex.fromBoolean.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function encodeNumber(\n  value: number,\n  { signed, size }: { signed: boolean; size: number },\n): PreparedParameter {\n  if (typeof size === 'number') {\n    const max = 2n ** (BigInt(size) - (signed ? 1n : 0n)) - 1n\n    const min = signed ? -max - 1n : 0n\n    if (value > max || value < min)\n      throw new Hex.IntegerOutOfRangeError({\n        max: max.toString(),\n        min: min.toString(),\n        signed,\n        size: size / 8,\n        value: value.toString(),\n      })\n  }\n  return {\n    dynamic: false,\n    encoded: Hex.fromNumber(value, {\n      size: 32,\n      signed,\n    }),\n  }\n}\n\n/** @internal */\nexport declare namespace encodeNumber {\n  type ErrorType = Hex.fromNumber.ErrorType | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function encodeString(value: string): PreparedParameter {\n  const hexValue = Hex.fromString(value)\n  const partsLength = Math.ceil(Hex.size(hexValue) / 32)\n  const parts: Hex.Hex[] = []\n  for (let i = 0; i < partsLength; i++) {\n    parts.push(Hex.padRight(Hex.slice(hexValue, i * 32, (i + 1) * 32)))\n  }\n  return {\n    dynamic: true,\n    encoded: Hex.concat(\n      Hex.padRight(Hex.fromNumber(Hex.size(hexValue), { size: 32 })),\n      ...parts,\n    ),\n  }\n}\n\n/** @internal */\nexport declare namespace encodeString {\n  type ErrorType =\n    | Hex.fromNumber.ErrorType\n    | Hex.padRight.ErrorType\n    | Hex.slice.ErrorType\n    | Hex.size.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function encodeTuple<\n  const parameter extends AbiParameters.Parameter & {\n    components: readonly AbiParameters.Parameter[]\n  },\n>(\n  value: ParameterToPrimitiveType<parameter>,\n  options: {\n    checksumAddress?: boolean | undefined\n    parameter: parameter\n  },\n): PreparedParameter {\n  const { checksumAddress, parameter } = options\n\n  let dynamic = false\n  const preparedParameters: PreparedParameter[] = []\n  for (let i = 0; i < parameter.components.length; i++) {\n    const param_ = parameter.components[i]!\n    const index = Array.isArray(value) ? i : param_.name\n    const preparedParam = prepareParameter({\n      checksumAddress,\n      parameter: param_,\n      value: (value as any)[index!] as readonly unknown[],\n    })\n    preparedParameters.push(preparedParam)\n    if (preparedParam.dynamic) dynamic = true\n  }\n  return {\n    dynamic,\n    encoded: dynamic\n      ? encode(preparedParameters)\n      : Hex.concat(...preparedParameters.map(({ encoded }) => encoded)),\n  }\n}\n\n/** @internal */\nexport declare namespace encodeTuple {\n  type ErrorType = Hex.concat.ErrorType | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function getArrayComponents(\n  type: string,\n): [length: number | null, innerType: string] | undefined {\n  const matches = type.match(/^(.*)\\[(\\d+)?\\]$/)\n  return matches\n    ? // Return `null` if the array is dynamic.\n      [matches[2]! ? Number(matches[2]!) : null, matches[1]!]\n    : undefined\n}\n\n/** @internal */\nexport function hasDynamicChild(param: AbiParameters.Parameter) {\n  const { type } = param\n  if (type === 'string') return true\n  if (type === 'bytes') return true\n  if (type.endsWith('[]')) return true\n\n  if (type === 'tuple') return (param as any).components?.some(hasDynamicChild)\n\n  const arrayComponents = getArrayComponents(param.type)\n  if (\n    arrayComponents &&\n    hasDynamicChild({\n      ...param,\n      type: arrayComponents[1],\n    } as AbiParameters.Parameter)\n  )\n    return true\n\n  return false\n}\n", "import type { Bytes } from '../Bytes.js'\nimport * as Errors from '../Errors.js'\n\n/** @internal */\nexport type Cursor = {\n  bytes: Bytes\n  dataView: DataView\n  position: number\n  positionReadCount: Map<number, number>\n  recursiveReadCount: number\n  recursiveReadLimit: number\n  remaining: number\n  assertReadLimit(position?: number): void\n  assertPosition(position: number): void\n  decrementPosition(offset: number): void\n  getReadCount(position?: number): number\n  incrementPosition(offset: number): void\n  inspectByte(position?: number): Bytes[number]\n  inspectBytes(length: number, position?: number): Bytes\n  inspectUint8(position?: number): number\n  inspectUint16(position?: number): number\n  inspectUint24(position?: number): number\n  inspectUint32(position?: number): number\n  pushByte(byte: Bytes[number]): void\n  pushBytes(bytes: Bytes): void\n  pushUint8(value: number): void\n  pushUint16(value: number): void\n  pushUint24(value: number): void\n  pushUint32(value: number): void\n  readByte(): Bytes[number]\n  readBytes(length: number, size?: number): Bytes\n  readUint8(): number\n  readUint16(): number\n  readUint24(): number\n  readUint32(): number\n  setPosition(position: number): () => void\n  _touch(): void\n}\n\nconst staticCursor: Cursor = {\n  bytes: new Uint8Array(),\n  dataView: new DataView(new ArrayBuffer(0)),\n  position: 0,\n  positionReadCount: new Map(),\n  recursiveReadCount: 0,\n  recursiveReadLimit: Number.POSITIVE_INFINITY,\n  assertReadLimit() {\n    if (this.recursiveReadCount >= this.recursiveReadLimit)\n      throw new RecursiveReadLimitExceededError({\n        count: this.recursiveReadCount + 1,\n        limit: this.recursiveReadLimit,\n      })\n  },\n  assertPosition(position) {\n    if (position < 0 || position > this.bytes.length - 1)\n      throw new PositionOutOfBoundsError({\n        length: this.bytes.length,\n        position,\n      })\n  },\n  decrementPosition(offset) {\n    if (offset < 0) throw new NegativeOffsetError({ offset })\n    const position = this.position - offset\n    this.assertPosition(position)\n    this.position = position\n  },\n  getReadCount(position) {\n    return this.positionReadCount.get(position || this.position) || 0\n  },\n  incrementPosition(offset) {\n    if (offset < 0) throw new NegativeOffsetError({ offset })\n    const position = this.position + offset\n    this.assertPosition(position)\n    this.position = position\n  },\n  inspectByte(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position)\n    return this.bytes[position]!\n  },\n  inspectBytes(length, position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + length - 1)\n    return this.bytes.subarray(position, position + length)\n  },\n  inspectUint8(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position)\n    return this.bytes[position]!\n  },\n  inspectUint16(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + 1)\n    return this.dataView.getUint16(position)\n  },\n  inspectUint24(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + 2)\n    return (\n      (this.dataView.getUint16(position) << 8) +\n      this.dataView.getUint8(position + 2)\n    )\n  },\n  inspectUint32(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + 3)\n    return this.dataView.getUint32(position)\n  },\n  pushByte(byte: Bytes[number]) {\n    this.assertPosition(this.position)\n    this.bytes[this.position] = byte\n    this.position++\n  },\n  pushBytes(bytes: Bytes) {\n    this.assertPosition(this.position + bytes.length - 1)\n    this.bytes.set(bytes, this.position)\n    this.position += bytes.length\n  },\n  pushUint8(value: number) {\n    this.assertPosition(this.position)\n    this.bytes[this.position] = value\n    this.position++\n  },\n  pushUint16(value: number) {\n    this.assertPosition(this.position + 1)\n    this.dataView.setUint16(this.position, value)\n    this.position += 2\n  },\n  pushUint24(value: number) {\n    this.assertPosition(this.position + 2)\n    this.dataView.setUint16(this.position, value >> 8)\n    this.dataView.setUint8(this.position + 2, value & ~4294967040)\n    this.position += 3\n  },\n  pushUint32(value: number) {\n    this.assertPosition(this.position + 3)\n    this.dataView.setUint32(this.position, value)\n    this.position += 4\n  },\n  readByte() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectByte()\n    this.position++\n    return value\n  },\n  readBytes(length, size) {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectBytes(length)\n    this.position += size ?? length\n    return value\n  },\n  readUint8() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectUint8()\n    this.position += 1\n    return value\n  },\n  readUint16() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectUint16()\n    this.position += 2\n    return value\n  },\n  readUint24() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectUint24()\n    this.position += 3\n    return value\n  },\n  readUint32() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectUint32()\n    this.position += 4\n    return value\n  },\n  get remaining() {\n    return this.bytes.length - this.position\n  },\n  setPosition(position) {\n    const oldPosition = this.position\n    this.assertPosition(position)\n    this.position = position\n    return () => (this.position = oldPosition)\n  },\n  _touch() {\n    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY) return\n    const count = this.getReadCount()\n    this.positionReadCount.set(this.position, count + 1)\n    if (count > 0) this.recursiveReadCount++\n  },\n}\n\n/** @internal */\nexport function create(\n  bytes: Bytes,\n  { recursiveReadLimit = 8_192 }: create.Config = {},\n): Cursor {\n  const cursor: Cursor = Object.create(staticCursor)\n  cursor.bytes = bytes\n  cursor.dataView = new DataView(\n    bytes.buffer,\n    bytes.byteOffset,\n    bytes.byteLength,\n  )\n  cursor.positionReadCount = new Map()\n  cursor.recursiveReadLimit = recursiveReadLimit\n  return cursor\n}\n\n/** @internal */\nexport declare namespace create {\n  type Config = { recursiveReadLimit?: number | undefined }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/** @internal */\nexport class NegativeOffsetError extends Errors.BaseError {\n  override readonly name = 'Cursor.NegativeOffsetError'\n\n  constructor({ offset }: { offset: number }) {\n    super(`Offset \\`${offset}\\` cannot be negative.`)\n  }\n}\n\n/** @internal */\nexport class PositionOutOfBoundsError extends Errors.BaseError {\n  override readonly name = 'Cursor.PositionOutOfBoundsError'\n\n  constructor({ length, position }: { length: number; position: number }) {\n    super(\n      `Position \\`${position}\\` is out of bounds (\\`0 < position < ${length}\\`).`,\n    )\n  }\n}\n\n/** @internal */\nexport class RecursiveReadLimitExceededError extends Errors.BaseError {\n  override readonly name = 'Cursor.RecursiveReadLimitExceededError'\n\n  constructor({ count, limit }: { count: number; limit: number }) {\n    super(\n      `Recursive read limit of \\`${limit}\\` exceeded (recursive read count: \\`${count}\\`).`,\n    )\n  }\n}\n", "import * as abitype from 'abitype'\nimport * as Address from './Address.js'\nimport * as Bytes from './Bytes.js'\nimport * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport * as internal from './internal/abiParameters.js'\nimport * as Cursor from './internal/cursor.js'\nimport * as Solidity from './Solidity.js'\n\n/** Root type for ABI parameters. */\nexport type AbiParameters = readonly abitype.AbiParameter[]\n\n/** A parameter on an {@link ox#AbiParameters.AbiParameters}. */\nexport type Parameter = abitype.AbiParameter\n\n/** A packed ABI type. */\nexport type PackedAbiType =\n  | abitype.SolidityAddress\n  | abitype.SolidityBool\n  | abitype.SolidityBytes\n  | abitype.SolidityInt\n  | abitype.SolidityString\n  | abitype.SolidityArrayWithoutTuple\n\n/**\n * Decodes ABI-encoded data into its respective primitive values based on ABI Parameters.\n *\n * @example\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const data = AbiParameters.decode(\n *   AbiParameters.from(['string', 'uint', 'bool']),\n *   '0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000',\n * )\n * // @log: ['wagmi', 420n, true]\n * ```\n *\n * @example\n * ### JSON Parameters\n *\n * You can pass **JSON ABI** Parameters:\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const data = AbiParameters.decode(\n *   [\n *     { name: 'x', type: 'string' },\n *     { name: 'y', type: 'uint' },\n *     { name: 'z', type: 'bool' },\n *   ],\n *   '0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000',\n * )\n * // @log: ['wagmi', 420n, true]\n * ```\n *\n * @param parameters - The set of ABI parameters to decode, in the shape of the `inputs` or `outputs` attribute of an ABI Item. These parameters must include valid [ABI types](https://docs.soliditylang.org/en/latest/types.html).\n * @param data - ABI encoded data.\n * @param options - Decoding options.\n * @returns Array of decoded values.\n */\nexport function decode<\n  const parameters extends AbiParameters,\n  as extends 'Object' | 'Array' = 'Array',\n>(\n  parameters: parameters,\n  data: Bytes.Bytes | Hex.Hex,\n  options?: decode.Options<as>,\n): decode.ReturnType<parameters, as>\n\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function decode(\n  parameters: AbiParameters,\n  data: Bytes.Bytes | Hex.Hex,\n  options: {\n    as?: 'Array' | 'Object' | undefined\n    checksumAddress?: boolean | undefined\n  } = {},\n): readonly unknown[] | Record<string, unknown> {\n  const { as = 'Array', checksumAddress = false } = options\n\n  const bytes = typeof data === 'string' ? Bytes.fromHex(data) : data\n  const cursor = Cursor.create(bytes)\n\n  if (Bytes.size(bytes) === 0 && parameters.length > 0)\n    throw new ZeroDataError()\n  if (Bytes.size(bytes) && Bytes.size(bytes) < 32)\n    throw new DataSizeTooSmallError({\n      data: typeof data === 'string' ? data : Hex.fromBytes(data),\n      parameters: parameters as readonly Parameter[],\n      size: Bytes.size(bytes),\n    })\n\n  let consumed = 0\n  const values: any = as === 'Array' ? [] : {}\n  for (let i = 0; i < parameters.length; ++i) {\n    const param = parameters[i] as Parameter\n    cursor.setPosition(consumed)\n    const [data, consumed_] = internal.decodeParameter(cursor, param, {\n      checksumAddress,\n      staticPosition: 0,\n    })\n    consumed += consumed_\n    if (as === 'Array') values.push(data)\n    else values[param.name ?? i] = data\n  }\n  return values\n}\n\nexport declare namespace decode {\n  type Options<as extends 'Object' | 'Array'> = {\n    /**\n     * Whether the decoded values should be returned as an `Object` or `Array`.\n     *\n     * @default \"Array\"\n     */\n    as?: as | 'Object' | 'Array' | undefined\n    /**\n     * Whether decoded addresses should be checksummed.\n     *\n     * @default false\n     */\n    checksumAddress?: boolean | undefined\n  }\n\n  type ReturnType<\n    parameters extends AbiParameters = AbiParameters,\n    as extends 'Object' | 'Array' = 'Array',\n  > = parameters extends readonly []\n    ? as extends 'Object'\n      ? {}\n      : []\n    : as extends 'Object'\n      ? internal.ToObject<parameters>\n      : internal.ToPrimitiveTypes<parameters>\n\n  type ErrorType =\n    | Bytes.fromHex.ErrorType\n    | internal.decodeParameter.ErrorType\n    | ZeroDataError\n    | DataSizeTooSmallError\n    | Errors.GlobalErrorType\n}\n\n/**\n * Encodes primitive values into ABI encoded data as per the [Application Binary Interface (ABI) Specification](https://docs.soliditylang.org/en/latest/abi-spec).\n *\n * @example\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const data = AbiParameters.encode(\n *   AbiParameters.from(['string', 'uint', 'bool']),\n *   ['wagmi', 420n, true],\n * )\n * ```\n *\n * @example\n * ### JSON Parameters\n *\n * Specify **JSON ABI** Parameters as schema:\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const data = AbiParameters.encode(\n *   [\n *     { type: 'string', name: 'name' },\n *     { type: 'uint', name: 'age' },\n *     { type: 'bool', name: 'isOwner' },\n *   ],\n *   ['wagmi', 420n, true],\n * )\n * ```\n *\n * @param parameters - The set of ABI parameters to encode, in the shape of the `inputs` or `outputs` attribute of an ABI Item. These parameters must include valid [ABI types](https://docs.soliditylang.org/en/latest/types.html).\n * @param values - The set of primitive values that correspond to the ABI types defined in `parameters`.\n * @returns ABI encoded data.\n */\nexport function encode<\n  const parameters extends AbiParameters | readonly unknown[],\n>(\n  parameters: parameters,\n  values: parameters extends AbiParameters\n    ? internal.ToPrimitiveTypes<parameters>\n    : never,\n  options?: encode.Options,\n): Hex.Hex {\n  const { checksumAddress = false } = options ?? {}\n\n  if (parameters.length !== values.length)\n    throw new LengthMismatchError({\n      expectedLength: parameters.length as number,\n      givenLength: values.length as any,\n    })\n  // Prepare the parameters to determine dynamic types to encode.\n  const preparedParameters = internal.prepareParameters({\n    checksumAddress,\n    parameters: parameters as readonly Parameter[],\n    values: values as any,\n  })\n  const data = internal.encode(preparedParameters)\n  if (data.length === 0) return '0x'\n  return data\n}\n\nexport declare namespace encode {\n  type ErrorType =\n    | LengthMismatchError\n    | internal.encode.ErrorType\n    | internal.prepareParameters.ErrorType\n    | Errors.GlobalErrorType\n\n  type Options = {\n    /**\n     * Whether addresses should be checked against their checksum.\n     *\n     * @default false\n     */\n    checksumAddress?: boolean | undefined\n  }\n}\n\n/**\n * Encodes an array of primitive values to a [packed ABI encoding](https://docs.soliditylang.org/en/latest/abi-spec.html#non-standard-packed-mode).\n *\n * @example\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const encoded = AbiParameters.encodePacked(\n *   ['address', 'string'],\n *   ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 'hello world'],\n * )\n * // @log: '0xd8da6bf26964af9d7eed9e03e53415d37aa9604568656c6c6f20776f726c64'\n * ```\n *\n * @param types - Set of ABI types to pack encode.\n * @param values - The set of primitive values that correspond to the ABI types defined in `types`.\n * @returns The encoded packed data.\n */\nexport function encodePacked<\n  const packedAbiTypes extends readonly PackedAbiType[] | readonly unknown[],\n>(types: packedAbiTypes, values: encodePacked.Values<packedAbiTypes>): Hex.Hex {\n  if (types.length !== values.length)\n    throw new LengthMismatchError({\n      expectedLength: types.length as number,\n      givenLength: values.length as number,\n    })\n\n  const data: Hex.Hex[] = []\n  for (let i = 0; i < (types as unknown[]).length; i++) {\n    const type = types[i]\n    const value = values[i]\n    data.push(encodePacked.encode(type, value))\n  }\n  return Hex.concat(...data)\n}\n\nexport namespace encodePacked {\n  export type ErrorType =\n    | Hex.concat.ErrorType\n    | LengthMismatchError\n    | Errors.GlobalErrorType\n\n  export type Values<\n    packedAbiTypes extends readonly PackedAbiType[] | readonly unknown[],\n  > = {\n    [key in keyof packedAbiTypes]: packedAbiTypes[key] extends abitype.AbiType\n      ? abitype.AbiParameterToPrimitiveType<{ type: packedAbiTypes[key] }>\n      : unknown\n  }\n\n  // eslint-disable-next-line jsdoc/require-jsdoc\n  export function encode<const packedAbiType extends PackedAbiType | unknown>(\n    type: packedAbiType,\n    value: Values<[packedAbiType]>[0],\n    isArray = false,\n  ): Hex.Hex {\n    if (type === 'address') {\n      const address = value as Address.Address\n      Address.assert(address)\n      return Hex.padLeft(\n        address.toLowerCase() as Hex.Hex,\n        isArray ? 32 : 0,\n      ) as Address.Address\n    }\n    if (type === 'string') return Hex.fromString(value as string)\n    if (type === 'bytes') return value as Hex.Hex\n    if (type === 'bool')\n      return Hex.padLeft(Hex.fromBoolean(value as boolean), isArray ? 32 : 1)\n\n    const intMatch = (type as string).match(Solidity.integerRegex)\n    if (intMatch) {\n      const [_type, baseType, bits = '256'] = intMatch\n      const size = Number.parseInt(bits, 10) / 8\n      return Hex.fromNumber(value as number, {\n        size: isArray ? 32 : size,\n        signed: baseType === 'int',\n      })\n    }\n\n    const bytesMatch = (type as string).match(Solidity.bytesRegex)\n    if (bytesMatch) {\n      const [_type, size] = bytesMatch\n      if (Number.parseInt(size!, 10) !== ((value as Hex.Hex).length - 2) / 2)\n        throw new BytesSizeMismatchError({\n          expectedSize: Number.parseInt(size!, 10),\n          value: value as Hex.Hex,\n        })\n      return Hex.padRight(value as Hex.Hex, isArray ? 32 : 0) as Hex.Hex\n    }\n\n    const arrayMatch = (type as string).match(Solidity.arrayRegex)\n    if (arrayMatch && Array.isArray(value)) {\n      const [_type, childType] = arrayMatch\n      const data: Hex.Hex[] = []\n      for (let i = 0; i < value.length; i++) {\n        data.push(encode(childType, value[i], true))\n      }\n      if (data.length === 0) return '0x'\n      return Hex.concat(...data)\n    }\n\n    throw new InvalidTypeError(type as string)\n  }\n}\n\n/**\n * Formats {@link ox#AbiParameters.AbiParameters} into **Human Readable ABI Parameters**.\n *\n * @example\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const formatted = AbiParameters.format([\n *   {\n *     name: 'spender',\n *     type: 'address',\n *   },\n *   {\n *     name: 'amount',\n *     type: 'uint256',\n *   },\n * ])\n *\n * formatted\n * //    ^?\n *\n *\n * ```\n *\n * @param parameters - The ABI Parameters to format.\n * @returns The formatted ABI Parameters  .\n */\nexport function format<\n  const parameters extends readonly [\n    Parameter | abitype.AbiEventParameter,\n    ...(readonly (Parameter | abitype.AbiEventParameter)[]),\n  ],\n>(\n  parameters:\n    | parameters\n    | readonly [\n        Parameter | abitype.AbiEventParameter,\n        ...(readonly (Parameter | abitype.AbiEventParameter)[]),\n      ],\n): abitype.FormatAbiParameters<parameters> {\n  return abitype.formatAbiParameters(parameters)\n}\n\nexport declare namespace format {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Parses arbitrary **JSON ABI Parameters** or **Human Readable ABI Parameters** into typed {@link ox#AbiParameters.AbiParameters}.\n *\n * @example\n * ### JSON Parameters\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const parameters = AbiParameters.from([\n *   {\n *     name: 'spender',\n *     type: 'address',\n *   },\n *   {\n *     name: 'amount',\n *     type: 'uint256',\n *   },\n * ])\n *\n * parameters\n * //^?\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Human Readable Parameters\n *\n * Human Readable ABI Parameters can be parsed into a typed {@link ox#AbiParameters.AbiParameters}:\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const parameters = AbiParameters.from('address spender, uint256 amount')\n *\n * parameters\n * //^?\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * It is possible to specify `struct`s along with your definitions:\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const parameters = AbiParameters.from([\n *   'struct Foo { address spender; uint256 amount; }', // [!code hl]\n *   'Foo foo, address bar',\n * ])\n *\n * parameters\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n *\n *\n * @param parameters - The ABI Parameters to parse.\n * @returns The typed ABI Parameters.\n */\nexport function from<\n  const parameters extends AbiParameters | string | readonly string[],\n>(\n  parameters: parameters | AbiParameters | string | readonly string[],\n): from.ReturnType<parameters> {\n  if (Array.isArray(parameters) && typeof parameters[0] === 'string')\n    return abitype.parseAbiParameters(parameters) as never\n  if (typeof parameters === 'string')\n    return abitype.parseAbiParameters(parameters) as never\n  return parameters as never\n}\n\nexport declare namespace from {\n  type ReturnType<\n    parameters extends AbiParameters | string | readonly string[],\n  > = parameters extends string\n    ? abitype.ParseAbiParameters<parameters>\n    : parameters extends readonly string[]\n      ? abitype.ParseAbiParameters<parameters>\n      : parameters\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Throws when the data size is too small for the given parameters.\n *\n * @example\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * AbiParameters.decode([{ type: 'uint256' }], '0x010f')\n * //                                             ↑ ❌ 2 bytes\n * // @error: AbiParameters.DataSizeTooSmallError: Data size of 2 bytes is too small for given parameters.\n * // @error: Params: (uint256)\n * // @error: Data:   0x010f (2 bytes)\n * ```\n *\n * ### Solution\n *\n * Pass a valid data size.\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * AbiParameters.decode([{ type: 'uint256' }], '0x00000000000000000000000000000000000000000000000000000000000010f')\n * //                                             ↑ ✅ 32 bytes\n * ```\n */\nexport class DataSizeTooSmallError extends Errors.BaseError {\n  override readonly name = 'AbiParameters.DataSizeTooSmallError'\n  constructor({\n    data,\n    parameters,\n    size,\n  }: { data: Hex.Hex; parameters: readonly Parameter[]; size: number }) {\n    super(`Data size of ${size} bytes is too small for given parameters.`, {\n      metaMessages: [\n        `Params: (${abitype.formatAbiParameters(parameters as readonly [Parameter])})`,\n        `Data:   ${data} (${size} bytes)`,\n      ],\n    })\n  }\n}\n\n/**\n * Throws when zero data is provided, but data is expected.\n *\n * @example\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * AbiParameters.decode([{ type: 'uint256' }], '0x')\n * //                                           ↑ ❌ zero data\n * // @error: AbiParameters.DataSizeTooSmallError: Data size of 2 bytes is too small for given parameters.\n * // @error: Params: (uint256)\n * // @error: Data:   0x010f (2 bytes)\n * ```\n *\n * ### Solution\n *\n * Pass valid data.\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * AbiParameters.decode([{ type: 'uint256' }], '0x00000000000000000000000000000000000000000000000000000000000010f')\n * //                                             ↑ ✅ 32 bytes\n * ```\n */\nexport class ZeroDataError extends Errors.BaseError {\n  override readonly name = 'AbiParameters.ZeroDataError'\n  constructor() {\n    super('Cannot decode zero data (\"0x\") with ABI parameters.')\n  }\n}\n\n/**\n * The length of the array value does not match the length specified in the corresponding ABI parameter.\n *\n * ### Example\n *\n * ```ts twoslash\n * // @noErrors\n * import { AbiParameters } from 'ox'\n * // ---cut---\n * AbiParameters.encode(AbiParameters.from('uint256[3]'), [[69n, 420n]])\n * //                                               ↑ expected: 3  ↑ ❌ length: 2\n * // @error: AbiParameters.ArrayLengthMismatchError: ABI encoding array length mismatch\n * // @error: for type `uint256[3]`. Expected: `3`. Given: `2`.\n * ```\n *\n * ### Solution\n *\n * Pass an array of the correct length.\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n * // ---cut---\n * AbiParameters.encode(AbiParameters.from(['uint256[3]']), [[69n, 420n, 69n]])\n * //                                                         ↑ ✅ length: 3\n * ```\n */\nexport class ArrayLengthMismatchError extends Errors.BaseError {\n  override readonly name = 'AbiParameters.ArrayLengthMismatchError'\n  constructor({\n    expectedLength,\n    givenLength,\n    type,\n  }: { expectedLength: number; givenLength: number; type: string }) {\n    super(\n      `Array length mismatch for type \\`${type}\\`. Expected: \\`${expectedLength}\\`. Given: \\`${givenLength}\\`.`,\n    )\n  }\n}\n\n/**\n * The size of the bytes value does not match the size specified in the corresponding ABI parameter.\n *\n * ### Example\n *\n * ```ts twoslash\n * // @noErrors\n * import { AbiParameters } from 'ox'\n * // ---cut---\n * AbiParameters.encode(AbiParameters.from('bytes8'), [['0xdeadbeefdeadbeefdeadbeef']])\n * //                                            ↑ expected: 8 bytes  ↑ ❌ size: 12 bytes\n * // @error: BytesSizeMismatchError: Size of bytes \"0xdeadbeefdeadbeefdeadbeef\"\n * // @error: (bytes12) does not match expected size (bytes8).\n * ```\n *\n * ### Solution\n *\n * Pass a bytes value of the correct size.\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n * // ---cut---\n * AbiParameters.encode(AbiParameters.from(['bytes8']), ['0xdeadbeefdeadbeef'])\n * //                                                       ↑ ✅ size: 8 bytes\n * ```\n */\nexport class BytesSizeMismatchError extends Errors.BaseError {\n  override readonly name = 'AbiParameters.BytesSizeMismatchError'\n  constructor({\n    expectedSize,\n    value,\n  }: { expectedSize: number; value: Hex.Hex }) {\n    super(\n      `Size of bytes \"${value}\" (bytes${Hex.size(\n        value,\n      )}) does not match expected size (bytes${expectedSize}).`,\n    )\n  }\n}\n\n/**\n * The length of the values to encode does not match the length of the ABI parameters.\n *\n * ### Example\n *\n * ```ts twoslash\n * // @noErrors\n * import { AbiParameters } from 'ox'\n * // ---cut---\n * AbiParameters.encode(AbiParameters.from(['string', 'uint256']), ['hello'])\n * // @error: LengthMismatchError: ABI encoding params/values length mismatch.\n * // @error: Expected length (params): 2\n * // @error: Given length (values): 1\n * ```\n *\n * ### Solution\n *\n * Pass the correct number of values to encode.\n *\n * ### Solution\n *\n * Pass a [valid ABI type](https://docs.soliditylang.org/en/develop/abi-spec.html#types).\n */\nexport class LengthMismatchError extends Errors.BaseError {\n  override readonly name = 'AbiParameters.LengthMismatchError'\n  constructor({\n    expectedLength,\n    givenLength,\n  }: { expectedLength: number; givenLength: number }) {\n    super(\n      [\n        'ABI encoding parameters/values length mismatch.',\n        `Expected length (parameters): ${expectedLength}`,\n        `Given length (values): ${givenLength}`,\n      ].join('\\n'),\n    )\n  }\n}\n\n/**\n * The value provided is not a valid array as specified in the corresponding ABI parameter.\n *\n * ### Example\n *\n * ```ts twoslash\n * // @noErrors\n * import { AbiParameters } from 'ox'\n * // ---cut---\n * AbiParameters.encode(AbiParameters.from(['uint256[3]']), [69])\n * ```\n *\n * ### Solution\n *\n * Pass an array value.\n */\nexport class InvalidArrayError extends Errors.BaseError {\n  override readonly name = 'AbiParameters.InvalidArrayError'\n  constructor(value: unknown) {\n    super(`Value \\`${value}\\` is not a valid array.`)\n  }\n}\n\n/**\n * Throws when the ABI parameter type is invalid.\n *\n * @example\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * AbiParameters.decode([{ type: 'lol' }], '0x00000000000000000000000000000000000000000000000000000000000010f')\n * //                             ↑ ❌ invalid type\n * // @error: AbiParameters.InvalidTypeError: Type `lol` is not a valid ABI Type.\n * ```\n */\nexport class InvalidTypeError extends Errors.BaseError {\n  override readonly name = 'AbiParameters.InvalidTypeError'\n  constructor(type: string) {\n    super(`Type \\`${type}\\` is not a valid ABI Type.`)\n  }\n}\n", "import * as Bytes from './Bytes.js'\nimport * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport * as Cursor from './internal/cursor.js'\nimport type { ExactPartial, RecursiveArray } from './internal/types.js'\n\n/**\n * Decodes a Recursive-Length Prefix (RLP) value into a {@link ox#Bytes.Bytes} value.\n *\n * @example\n * ```ts twoslash\n * import { Rlp } from 'ox'\n * Rlp.toBytes('0x8b68656c6c6f20776f726c64')\n * // Uint8Array([139, 104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100])\n * ```\n *\n * @param value - The value to decode.\n * @returns The decoded {@link ox#Bytes.Bytes} value.\n */\nexport function toBytes(\n  value: Bytes.Bytes | Hex.Hex,\n): RecursiveArray<Bytes.Bytes> {\n  return to(value, 'Bytes')\n}\n\nexport declare namespace toBytes {\n  type ErrorType = to.ErrorType\n}\n\n/**\n * Decodes a Recursive-Length Prefix (RLP) value into a {@link ox#Hex.Hex} value.\n *\n * @example\n * ```ts twoslash\n * import { Rlp } from 'ox'\n * Rlp.toHex('0x8b68656c6c6f20776f726c64')\n * // 0x68656c6c6f20776f726c64\n * ```\n *\n * @param value - The value to decode.\n * @returns The decoded {@link ox#Hex.Hex} value.\n */\nexport function toHex(value: Bytes.Bytes | Hex.Hex): RecursiveArray<Hex.Hex> {\n  return to(value, 'Hex')\n}\n\nexport declare namespace toHex {\n  type ErrorType = to.ErrorType\n}\n\n/////////////////////////////////////////////////////////////////////////////////\n// Internal\n/////////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport function to<\n  value extends Bytes.Bytes | Hex.Hex,\n  to extends 'Hex' | 'Bytes',\n>(value: value, to: to | 'Hex' | 'Bytes'): to.ReturnType<to> {\n  const to_ = to ?? (typeof value === 'string' ? 'Hex' : 'Bytes')\n\n  const bytes = (() => {\n    if (typeof value === 'string') {\n      if (value.length > 3 && value.length % 2 !== 0)\n        throw new Hex.InvalidLengthError(value)\n      return Bytes.fromHex(value)\n    }\n    return value as Bytes.Bytes\n  })()\n\n  const cursor = Cursor.create(bytes, {\n    recursiveReadLimit: Number.POSITIVE_INFINITY,\n  })\n  const result = decodeRlpCursor(cursor, to_)\n\n  return result as to.ReturnType<to>\n}\n\n/** @internal */\nexport declare namespace to {\n  type ReturnType<to extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\n    | (to extends 'Bytes' ? RecursiveArray<Bytes.Bytes> : never)\n    | (to extends 'Hex' ? RecursiveArray<Hex.Hex> : never)\n\n  type ErrorType =\n    | Bytes.fromHex.ErrorType\n    | decodeRlpCursor.ErrorType\n    | Cursor.create.ErrorType\n    | Hex.InvalidLengthError\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\n\n/** @internal */\nexport function decodeRlpCursor<to extends 'Hex' | 'Bytes' = 'Hex'>(\n  cursor: Cursor.Cursor,\n  to: to | 'Hex' | 'Bytes' | undefined = 'Hex',\n): decodeRlpCursor.ReturnType<to> {\n  if (cursor.bytes.length === 0)\n    return (\n      to === 'Hex' ? Hex.fromBytes(cursor.bytes) : cursor.bytes\n    ) as decodeRlpCursor.ReturnType<to>\n\n  const prefix = cursor.readByte()\n  if (prefix < 0x80) cursor.decrementPosition(1)\n\n  // bytes\n  if (prefix < 0xc0) {\n    const length = readLength(cursor, prefix, 0x80)\n    const bytes = cursor.readBytes(length)\n    return (\n      to === 'Hex' ? Hex.fromBytes(bytes) : bytes\n    ) as decodeRlpCursor.ReturnType<to>\n  }\n\n  // list\n  const length = readLength(cursor, prefix, 0xc0)\n  return readList(cursor, length, to) as {} as decodeRlpCursor.ReturnType<to>\n}\n\n/** @internal */\nexport declare namespace decodeRlpCursor {\n  type ReturnType<to extends 'Hex' | 'Bytes' = 'Hex'> = to.ReturnType<to>\n  type ErrorType =\n    | Hex.fromBytes.ErrorType\n    | readLength.ErrorType\n    | readList.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function readLength(\n  cursor: Cursor.Cursor,\n  prefix: number,\n  offset: number,\n) {\n  if (offset === 0x80 && prefix < 0x80) return 1\n  if (prefix <= offset + 55) return prefix - offset\n  if (prefix === offset + 55 + 1) return cursor.readUint8()\n  if (prefix === offset + 55 + 2) return cursor.readUint16()\n  if (prefix === offset + 55 + 3) return cursor.readUint24()\n  if (prefix === offset + 55 + 4) return cursor.readUint32()\n  throw new Errors.BaseError('Invalid RLP prefix')\n}\n\n/** @internal */\nexport declare namespace readLength {\n  type ErrorType = Errors.BaseError | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function readList<to extends 'Hex' | 'Bytes'>(\n  cursor: Cursor.Cursor,\n  length: number,\n  to: to | 'Hex' | 'Bytes',\n) {\n  const position = cursor.position\n  const value: decodeRlpCursor.ReturnType<to>[] = []\n  while (cursor.position - position < length)\n    value.push(decodeRlpCursor(cursor, to))\n  return value\n}\n\n/** @internal */\nexport declare namespace readList {\n  type ErrorType = Errors.GlobalErrorType\n}\n\ntype Encodable = {\n  length: number\n  encode(cursor: Cursor.Cursor): void\n}\n\n/**\n * Encodes a {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value into a Recursive-Length Prefix (RLP) value.\n *\n * @example\n * ```ts twoslash\n * import { Bytes, Rlp } from 'ox'\n *\n * Rlp.from('0x68656c6c6f20776f726c64', { as: 'Hex' })\n * // @log: 0x8b68656c6c6f20776f726c64\n *\n * Rlp.from(Bytes.from([139, 104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100]), { as: 'Bytes' })\n * // @log: Uint8Array([104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100])\n * ```\n *\n * @param value - The {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value to encode.\n * @param options - Options.\n * @returns The RLP value.\n */\nexport function from<as extends 'Hex' | 'Bytes'>(\n  value: RecursiveArray<Bytes.Bytes> | RecursiveArray<Hex.Hex>,\n  options: from.Options<as>,\n): from.ReturnType<as> {\n  const { as } = options\n\n  const encodable = getEncodable(value)\n  const cursor = Cursor.create(new Uint8Array(encodable.length))\n  encodable.encode(cursor)\n\n  if (as === 'Hex') return Hex.fromBytes(cursor.bytes) as from.ReturnType<as>\n  return cursor.bytes as from.ReturnType<as>\n}\n\nexport declare namespace from {\n  type Options<as extends 'Hex' | 'Bytes'> = {\n    /** The type to convert the RLP value to. */\n    as: as | 'Hex' | 'Bytes'\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes'> =\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\n    | (as extends 'Hex' ? Hex.Hex : never)\n\n  type ErrorType =\n    | Cursor.create.ErrorType\n    | Hex.fromBytes.ErrorType\n    | Bytes.fromHex.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Encodes a {@link ox#Bytes.Bytes} value into a Recursive-Length Prefix (RLP) value.\n *\n * @example\n * ```ts twoslash\n * import { Bytes, Rlp } from 'ox'\n *\n * Rlp.fromBytes(Bytes.from([139, 104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100]))\n * // @log: Uint8Array([104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100])\n * ```\n *\n * @param bytes - The {@link ox#Bytes.Bytes} value to encode.\n * @param options - Options.\n * @returns The RLP value.\n */\nexport function fromBytes<as extends 'Hex' | 'Bytes' = 'Bytes'>(\n  bytes: RecursiveArray<Bytes.Bytes>,\n  options: fromBytes.Options<as> = {},\n): fromBytes.ReturnType<as> {\n  const { as = 'Bytes' } = options\n  return from(bytes, { as }) as never\n}\n\nexport declare namespace fromBytes {\n  type Options<as extends 'Hex' | 'Bytes' = 'Bytes'> = ExactPartial<\n    from.Options<as>\n  >\n\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Bytes'> = from.ReturnType<as>\n\n  type ErrorType = from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Encodes a {@link ox#Hex.Hex} value into a Recursive-Length Prefix (RLP) value.\n *\n * @example\n * ```ts twoslash\n * import { Rlp } from 'ox'\n *\n * Rlp.fromHex('0x68656c6c6f20776f726c64')\n * // @log: 0x8b68656c6c6f20776f726c64\n * ```\n *\n * @param hex - The {@link ox#Hex.Hex} value to encode.\n * @param options - Options.\n * @returns The RLP value.\n */\nexport function fromHex<as extends 'Hex' | 'Bytes' = 'Hex'>(\n  hex: RecursiveArray<Hex.Hex>,\n  options: fromHex.Options<as> = {},\n): fromHex.ReturnType<as> {\n  const { as = 'Hex' } = options\n  return from(hex, { as }) as never\n}\n\nexport declare namespace fromHex {\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = ExactPartial<\n    from.Options<as>\n  >\n\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex'> = from.ReturnType<as>\n\n  type ErrorType = from.ErrorType | Errors.GlobalErrorType\n}\n\n/////////////////////////////////////////////////////////////////////////////////\n// Internal\n/////////////////////////////////////////////////////////////////////////////////\n\nfunction getEncodable(\n  bytes: RecursiveArray<Bytes.Bytes> | RecursiveArray<Hex.Hex>,\n): Encodable {\n  if (Array.isArray(bytes))\n    return getEncodableList(bytes.map((x) => getEncodable(x)))\n  return getEncodableBytes(bytes as any)\n}\n\nfunction getEncodableList(list: Encodable[]): Encodable {\n  const bodyLength = list.reduce((acc, x) => acc + x.length, 0)\n\n  const sizeOfBodyLength = getSizeOfLength(bodyLength)\n  const length = (() => {\n    if (bodyLength <= 55) return 1 + bodyLength\n    return 1 + sizeOfBodyLength + bodyLength\n  })()\n\n  return {\n    length,\n    encode(cursor: Cursor.Cursor) {\n      if (bodyLength <= 55) {\n        cursor.pushByte(0xc0 + bodyLength)\n      } else {\n        cursor.pushByte(0xc0 + 55 + sizeOfBodyLength)\n        if (sizeOfBodyLength === 1) cursor.pushUint8(bodyLength)\n        else if (sizeOfBodyLength === 2) cursor.pushUint16(bodyLength)\n        else if (sizeOfBodyLength === 3) cursor.pushUint24(bodyLength)\n        else cursor.pushUint32(bodyLength)\n      }\n      for (const { encode } of list) {\n        encode(cursor)\n      }\n    },\n  }\n}\n\nfunction getEncodableBytes(bytesOrHex: Bytes.Bytes | Hex.Hex): Encodable {\n  const bytes =\n    typeof bytesOrHex === 'string' ? Bytes.fromHex(bytesOrHex) : bytesOrHex\n\n  const sizeOfBytesLength = getSizeOfLength(bytes.length)\n  const length = (() => {\n    if (bytes.length === 1 && bytes[0]! < 0x80) return 1\n    if (bytes.length <= 55) return 1 + bytes.length\n    return 1 + sizeOfBytesLength + bytes.length\n  })()\n\n  return {\n    length,\n    encode(cursor: Cursor.Cursor) {\n      if (bytes.length === 1 && bytes[0]! < 0x80) {\n        cursor.pushBytes(bytes)\n      } else if (bytes.length <= 55) {\n        cursor.pushByte(0x80 + bytes.length)\n        cursor.pushBytes(bytes)\n      } else {\n        cursor.pushByte(0x80 + 55 + sizeOfBytesLength)\n        if (sizeOfBytesLength === 1) cursor.pushUint8(bytes.length)\n        else if (sizeOfBytesLength === 2) cursor.pushUint16(bytes.length)\n        else if (sizeOfBytesLength === 3) cursor.pushUint24(bytes.length)\n        else cursor.pushUint32(bytes.length)\n        cursor.pushBytes(bytes)\n      }\n    },\n  }\n}\n\nfunction getSizeOfLength(length: number) {\n  if (length < 2 ** 8) return 1\n  if (length < 2 ** 16) return 2\n  if (length < 2 ** 24) return 3\n  if (length < 2 ** 32) return 4\n  throw new Errors.BaseError('Length is too large.')\n}\n", "import { secp256k1 } from '@noble/curves/secp256k1'\nimport * as Bytes from './Bytes.js'\nimport * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport type { Compute, ExactPartial, OneOf } from './internal/types.js'\nimport * as Json from './Json.js'\nimport * as Solidity from './Solidity.js'\n\n/** Root type for an ECDSA signature. */\nexport type Signature<\n  recovered extends boolean = true,\n  bigintType = bigint,\n  numberType = number,\n> = Compute<\n  recovered extends true\n    ? {\n        r: bigintType\n        s: bigintType\n        yParity: numberType\n      }\n    : {\n        r: bigintType\n        s: bigintType\n        yParity?: numberType | undefined\n      }\n>\n\n/** RPC-formatted ECDSA signature. */\nexport type Rpc<recovered extends boolean = true> = Signature<\n  recovered,\n  Hex.Hex,\n  Hex.Hex\n>\n\n/** (Legacy) ECDSA signature. */\nexport type Legacy<bigintType = bigint, numberType = number> = {\n  r: bigintType\n  s: bigintType\n  v: numberType\n}\n\n/** RPC-formatted (Legacy) ECDSA signature. */\nexport type LegacyRpc = Legacy<Hex.Hex, Hex.Hex>\n\nexport type Tuple = readonly [yParity: Hex.Hex, r: Hex.Hex, s: Hex.Hex]\n\n/**\n * Asserts that a Signature is valid.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.assert({\n *   r: -49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1,\n * })\n * // @error: InvalidSignatureRError:\n * // @error: Value `-549...n` is an invalid r value.\n * // @error: r must be a positive integer less than 2^256.\n * ```\n *\n * @param signature - The signature object to assert.\n */\nexport function assert(\n  signature: ExactPartial<Signature>,\n  options: assert.Options = {},\n): asserts signature is Signature {\n  const { recovered } = options\n  if (typeof signature.r === 'undefined')\n    throw new MissingPropertiesError({ signature })\n  if (typeof signature.s === 'undefined')\n    throw new MissingPropertiesError({ signature })\n  if (recovered && typeof signature.yParity === 'undefined')\n    throw new MissingPropertiesError({ signature })\n  if (signature.r < 0n || signature.r > Solidity.maxUint256)\n    throw new InvalidRError({ value: signature.r })\n  if (signature.s < 0n || signature.s > Solidity.maxUint256)\n    throw new InvalidSError({ value: signature.s })\n  if (\n    typeof signature.yParity === 'number' &&\n    signature.yParity !== 0 &&\n    signature.yParity !== 1\n  )\n    throw new InvalidYParityError({ value: signature.yParity })\n}\n\nexport declare namespace assert {\n  type Options = {\n    /** Whether or not the signature should be recovered (contain `yParity`). */\n    recovered?: boolean\n  }\n\n  type ErrorType =\n    | MissingPropertiesError\n    | InvalidRError\n    | InvalidSError\n    | InvalidYParityError\n    | Errors.GlobalErrorType\n}\n\n/**\n * Deserializes a {@link ox#Bytes.Bytes} signature into a structured {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Signature } from 'ox'\n *\n * Signature.fromBytes(new Uint8Array([128, 3, 131, ...]))\n * // @log: { r: 5231...n, s: 3522...n, yParity: 0 }\n * ```\n *\n * @param signature - The serialized signature.\n * @returns The deserialized {@link ox#Signature.Signature}.\n */\nexport function fromBytes(signature: Bytes.Bytes): Signature {\n  return fromHex(Hex.fromBytes(signature))\n}\n\nexport declare namespace fromBytes {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Deserializes a {@link ox#Hex.Hex} signature into a structured {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.fromHex('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c')\n * // @log: { r: 5231...n, s: 3522...n, yParity: 0 }\n * ```\n *\n * @param serialized - The serialized signature.\n * @returns The deserialized {@link ox#Signature.Signature}.\n */\nexport function fromHex(signature: Hex.Hex): Signature {\n  if (signature.length !== 130 && signature.length !== 132)\n    throw new InvalidSerializedSizeError({ signature })\n\n  const r = BigInt(Hex.slice(signature, 0, 32))\n  const s = BigInt(Hex.slice(signature, 32, 64))\n\n  const yParity = (() => {\n    const yParity = Number(`0x${signature.slice(130)}`)\n    if (Number.isNaN(yParity)) return undefined\n    try {\n      return vToYParity(yParity)\n    } catch {\n      throw new InvalidYParityError({ value: yParity })\n    }\n  })()\n\n  if (typeof yParity === 'undefined')\n    return {\n      r,\n      s,\n    } as never\n  return {\n    r,\n    s,\n    yParity,\n  } as never\n}\n\nexport declare namespace fromHex {\n  type ErrorType =\n    | Hex.from.ErrorType\n    | InvalidSerializedSizeError\n    | Errors.GlobalErrorType\n}\n\n/**\n * Extracts a {@link ox#Signature.Signature} from an arbitrary object that may include signature properties.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Signature } from 'ox'\n *\n * Signature.extract({\n *   baz: 'barry',\n *   foo: 'bar',\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1,\n *   zebra: 'stripes',\n * })\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log:   yParity: 1\n * // @log: }\n * ```\n *\n * @param value - The arbitrary object to extract the signature from.\n * @returns The extracted {@link ox#Signature.Signature}.\n */\nexport function extract(value: extract.Value): Signature | undefined {\n  if (typeof value.r === 'undefined') return undefined\n  if (typeof value.s === 'undefined') return undefined\n  return from(value as any)\n}\n\nexport declare namespace extract {\n  type Value = {\n    r?: bigint | Hex.Hex | undefined\n    s?: bigint | Hex.Hex | undefined\n    yParity?: number | Hex.Hex | undefined\n    v?: number | Hex.Hex | undefined\n  }\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Instantiates a typed {@link ox#Signature.Signature} object from a {@link ox#Signature.Signature}, {@link ox#Signature.Legacy}, {@link ox#Bytes.Bytes}, or {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.from({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1,\n * })\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log:   yParity: 1\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.from('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db801')\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log:   yParity: 1,\n * // @log: }\n * ```\n *\n * @example\n * ### From Legacy\n *\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.from({\n *   r: 47323457007453657207889730243826965761922296599680473886588287015755652701072n,\n *   s: 57228803202727131502949358313456071280488184270258293674242124340113824882788n,\n *   v: 27,\n * })\n * // @log: {\n * // @log:   r: 47323457007453657207889730243826965761922296599680473886588287015755652701072n,\n * // @log:   s: 57228803202727131502949358313456071280488184270258293674242124340113824882788n,\n * // @log:   yParity: 0\n * // @log: }\n * ```\n *\n * @param signature - The signature value to instantiate.\n * @returns The instantiated {@link ox#Signature.Signature}.\n */\nexport function from<\n  const signature extends\n    | OneOf<Signature<boolean> | Rpc<boolean> | Legacy | LegacyRpc>\n    | Hex.Hex\n    | Bytes.Bytes,\n>(\n  signature:\n    | signature\n    | OneOf<Signature<boolean> | Rpc<boolean> | Legacy | LegacyRpc>\n    | Hex.Hex\n    | Bytes.Bytes,\n): from.ReturnType<signature> {\n  const signature_ = (() => {\n    if (typeof signature === 'string') return fromHex(signature)\n    if (signature instanceof Uint8Array) return fromBytes(signature)\n    if (typeof signature.r === 'string') return fromRpc(signature)\n    if (signature.v) return fromLegacy(signature)\n    return {\n      r: signature.r,\n      s: signature.s,\n      ...(typeof signature.yParity !== 'undefined'\n        ? { yParity: signature.yParity }\n        : {}),\n    }\n  })()\n  assert(signature_)\n  return signature_ as never\n}\n\nexport declare namespace from {\n  type ReturnType<\n    signature extends\n      | OneOf<Signature<boolean> | Rpc<boolean> | Legacy | LegacyRpc>\n      | Hex.Hex\n      | Bytes.Bytes,\n  > = signature extends Signature<boolean> & { v?: undefined }\n    ? signature\n    : Signature\n\n  type ErrorType =\n    | assert.ErrorType\n    | fromBytes.ErrorType\n    | fromHex.ErrorType\n    | vToYParity.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Converts a DER-encoded signature to a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Signature } from 'ox'\n *\n * const signature = Signature.fromDerBytes(new Uint8Array([132, 51, 23, ...]))\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log: }\n * ```\n *\n * @param signature - The DER-encoded signature to convert.\n * @returns The {@link ox#Signature.Signature}.\n */\nexport function fromDerBytes(signature: Bytes.Bytes): Signature<false> {\n  return fromDerHex(Hex.fromBytes(signature))\n}\n\nexport declare namespace fromDerBytes {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a DER-encoded signature to a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.fromDerHex('0x304402206e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf02204a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8')\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log: }\n * ```\n *\n * @param signature - The DER-encoded signature to convert.\n * @returns The {@link ox#Signature.Signature}.\n */\nexport function fromDerHex(signature: Hex.Hex): Signature<false> {\n  const { r, s } = secp256k1.Signature.fromDER(Hex.from(signature).slice(2))\n  return { r, s }\n}\n\nexport declare namespace fromDerHex {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Signature.Legacy} into a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const legacy = Signature.fromLegacy({ r: 1n, s: 2n, v: 28 })\n * // @log: { r: 1n, s: 2n, yParity: 1 }\n * ```\n *\n * @param signature - The {@link ox#Signature.Legacy} to convert.\n * @returns The converted {@link ox#Signature.Signature}.\n */\nexport function fromLegacy(signature: Legacy): Signature {\n  return {\n    r: signature.r,\n    s: signature.s,\n    yParity: vToYParity(signature.v),\n  }\n}\n\nexport declare namespace fromLegacy {\n  type ErrorType = vToYParity.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Signature.Rpc} into a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.fromRpc({\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n * })\n * ```\n *\n * @param signature - The {@link ox#Signature.Rpc} to convert.\n * @returns The converted {@link ox#Signature.Signature}.\n */\nexport function fromRpc(signature: {\n  r: Hex.Hex\n  s: Hex.Hex\n  yParity?: Hex.Hex | undefined\n  v?: Hex.Hex | undefined\n}): Signature {\n  const yParity = (() => {\n    const v = signature.v ? Number(signature.v) : undefined\n    let yParity = signature.yParity ? Number(signature.yParity) : undefined\n    if (typeof v === 'number' && typeof yParity !== 'number')\n      yParity = vToYParity(v)\n    if (typeof yParity !== 'number')\n      throw new InvalidYParityError({ value: signature.yParity })\n    return yParity\n  })()\n\n  return {\n    r: BigInt(signature.r),\n    s: BigInt(signature.s),\n    yParity,\n  }\n}\n\nexport declare namespace fromRpc {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Signature.Tuple} to a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.fromTuple(['0x01', '0x7b', '0x1c8'])\n * // @log: {\n * // @log:   r: 123n,\n * // @log:   s: 456n,\n * // @log:   yParity: 1,\n * // @log: }\n * ```\n *\n * @param tuple - The {@link ox#Signature.Tuple} to convert.\n * @returns The {@link ox#Signature.Signature}.\n */\nexport function fromTuple(tuple: Tuple): Signature {\n  const [yParity, r, s] = tuple\n  return from({\n    r: r === '0x' ? 0n : BigInt(r),\n    s: s === '0x' ? 0n : BigInt(s),\n    yParity: yParity === '0x' ? 0 : Number(yParity),\n  })\n}\n\nexport declare namespace fromTuple {\n  type ErrorType = from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Serializes a {@link ox#Signature.Signature} to {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.toBytes({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1\n * })\n * // @log: Uint8Array [102, 16, 10, ...]\n * ```\n *\n * @param signature - The signature to serialize.\n * @returns The serialized signature.\n */\nexport function toBytes(signature: Signature<boolean>): Bytes.Bytes {\n  return Bytes.fromHex(toHex(signature))\n}\n\nexport declare namespace toBytes {\n  type ErrorType =\n    | toHex.ErrorType\n    | Bytes.fromHex.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Serializes a {@link ox#Signature.Signature} to {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.toHex({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1\n * })\n * // @log: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c'\n * ```\n *\n * @param signature - The signature to serialize.\n * @returns The serialized signature.\n */\nexport function toHex(signature: Signature<boolean>): Hex.Hex {\n  assert(signature)\n\n  const r = signature.r\n  const s = signature.s\n\n  const signature_ = Hex.concat(\n    Hex.fromNumber(r, { size: 32 }),\n    Hex.fromNumber(s, { size: 32 }),\n    // If the signature is recovered, add the recovery byte to the signature.\n    typeof signature.yParity === 'number'\n      ? Hex.fromNumber(yParityToV(signature.yParity), { size: 1 })\n      : '0x',\n  )\n\n  return signature_\n}\n\nexport declare namespace toHex {\n  type ErrorType =\n    | Hex.concat.ErrorType\n    | Hex.fromNumber.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Signature.Signature} to DER-encoded format.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.from({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * })\n *\n * const signature_der = Signature.toDerBytes(signature)\n * // @log: Uint8Array [132, 51, 23, ...]\n * ```\n *\n * @param signature - The signature to convert.\n * @returns The DER-encoded signature.\n */\nexport function toDerBytes(signature: Signature<boolean>): Bytes.Bytes {\n  const sig = new secp256k1.Signature(signature.r, signature.s)\n  return sig.toDERRawBytes()\n}\n\nexport declare namespace toDerBytes {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Signature.Signature} to DER-encoded format.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.from({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * })\n *\n * const signature_der = Signature.toDerHex(signature)\n * // @log: '0x304402206e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf02204a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8'\n * ```\n *\n * @param signature - The signature to convert.\n * @returns The DER-encoded signature.\n */\nexport function toDerHex(signature: Signature<boolean>): Hex.Hex {\n  const sig = new secp256k1.Signature(signature.r, signature.s)\n  return `0x${sig.toDERHex()}`\n}\n\nexport declare namespace toDerHex {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Signature.Signature} into a {@link ox#Signature.Legacy}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const legacy = Signature.toLegacy({ r: 1n, s: 2n, yParity: 1 })\n * // @log: { r: 1n, s: 2n, v: 28 }\n * ```\n *\n * @param signature - The {@link ox#Signature.Signature} to convert.\n * @returns The converted {@link ox#Signature.Legacy}.\n */\nexport function toLegacy(signature: Signature): Legacy {\n  return {\n    r: signature.r,\n    s: signature.s,\n    v: yParityToV(signature.yParity),\n  }\n}\n\nexport declare namespace toLegacy {\n  type ErrorType = yParityToV.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Signature.Signature} into a {@link ox#Signature.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.toRpc({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1\n * })\n * ```\n *\n * @param signature - The {@link ox#Signature.Signature} to convert.\n * @returns The converted {@link ox#Signature.Rpc}.\n */\nexport function toRpc(signature: Signature): Rpc {\n  const { r, s, yParity } = signature\n  return {\n    r: Hex.fromNumber(r, { size: 32 }),\n    s: Hex.fromNumber(s, { size: 32 }),\n    yParity: yParity === 0 ? '0x0' : '0x1',\n  }\n}\n\nexport declare namespace toRpc {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Signature.Signature} to a serialized {@link ox#Signature.Tuple} to be used for signatures in Transaction Envelopes, EIP-7702 Authorization Lists, etc.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signatureTuple = Signature.toTuple({\n *   r: 123n,\n *   s: 456n,\n *   yParity: 1,\n * })\n * // @log: [yParity: '0x01', r: '0x7b', s: '0x1c8']\n * ```\n *\n * @param signature - The {@link ox#Signature.Signature} to convert.\n * @returns The {@link ox#Signature.Tuple}.\n */\nexport function toTuple(signature: Signature): Tuple {\n  const { r, s, yParity } = signature\n\n  return [\n    yParity ? '0x01' : '0x',\n    r === 0n ? '0x' : Hex.trimLeft(Hex.fromNumber(r!)),\n    s === 0n ? '0x' : Hex.trimLeft(Hex.fromNumber(s!)),\n  ] as const\n}\n\nexport declare namespace toTuple {\n  type ErrorType =\n    | Hex.trimLeft.ErrorType\n    | Hex.fromNumber.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Validates a Signature. Returns `true` if the signature is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const valid = Signature.validate({\n *   r: -49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1,\n * })\n * // @log: false\n * ```\n *\n * @param signature - The signature object to assert.\n */\nexport function validate(\n  signature: ExactPartial<Signature>,\n  options: validate.Options = {},\n): boolean {\n  try {\n    assert(signature, options)\n    return true\n  } catch {\n    return false\n  }\n}\n\nexport declare namespace validate {\n  type Options = {\n    /** Whether or not the signature should be recovered (contain `yParity`). */\n    recovered?: boolean\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a ECDSA `v` value to a `yParity` value.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const yParity = Signature.vToYParity(28)\n * // @log: 1\n * ```\n *\n * @param v - The ECDSA `v` value to convert.\n * @returns The `yParity` value.\n */\nexport function vToYParity(v: number): Signature['yParity'] {\n  if (v === 0 || v === 27) return 0\n  if (v === 1 || v === 28) return 1\n  if (v >= 35) return v % 2 === 0 ? 1 : 0\n  throw new InvalidVError({ value: v })\n}\n\nexport declare namespace vToYParity {\n  type ErrorType = InvalidVError | Errors.GlobalErrorType\n}\n\n/**\n * Converts a ECDSA `v` value to a `yParity` value.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const v = Signature.yParityToV(1)\n * // @log: 28\n * ```\n *\n * @param yParity - The ECDSA `yParity` value to convert.\n * @returns The `v` value.\n */\nexport function yParityToV(yParity: number): number {\n  if (yParity === 0) return 27\n  if (yParity === 1) return 28\n  throw new InvalidYParityError({ value: yParity })\n}\n\nexport declare namespace yParityToV {\n  type ErrorType = InvalidVError | Errors.GlobalErrorType\n}\n\n/** Thrown when the serialized signature is of an invalid size. */\nexport class InvalidSerializedSizeError extends Errors.BaseError {\n  override readonly name = 'Signature.InvalidSerializedSizeError'\n\n  constructor({ signature }: { signature: Hex.Hex | Bytes.Bytes }) {\n    super(`Value \\`${signature}\\` is an invalid signature size.`, {\n      metaMessages: [\n        'Expected: 64 bytes or 65 bytes.',\n        `Received ${Hex.size(Hex.from(signature))} bytes.`,\n      ],\n    })\n  }\n}\n\n/** Thrown when the signature is missing either an `r`, `s`, or `yParity` property. */\nexport class MissingPropertiesError extends Errors.BaseError {\n  override readonly name = 'Signature.MissingPropertiesError'\n\n  constructor({ signature }: { signature: unknown }) {\n    super(\n      `Signature \\`${Json.stringify(signature)}\\` is missing either an \\`r\\`, \\`s\\`, or \\`yParity\\` property.`,\n    )\n  }\n}\n\n/** Thrown when the signature has an invalid `r` value. */\nexport class InvalidRError extends Errors.BaseError {\n  override readonly name = 'Signature.InvalidRError'\n\n  constructor({ value }: { value: unknown }) {\n    super(\n      `Value \\`${value}\\` is an invalid r value. r must be a positive integer less than 2^256.`,\n    )\n  }\n}\n\n/** Thrown when the signature has an invalid `s` value. */\nexport class InvalidSError extends Errors.BaseError {\n  override readonly name = 'Signature.InvalidSError'\n\n  constructor({ value }: { value: unknown }) {\n    super(\n      `Value \\`${value}\\` is an invalid s value. s must be a positive integer less than 2^256.`,\n    )\n  }\n}\n\n/** Thrown when the signature has an invalid `yParity` value. */\nexport class InvalidYParityError extends Errors.BaseError {\n  override readonly name = 'Signature.InvalidYParityError'\n\n  constructor({ value }: { value: unknown }) {\n    super(\n      `Value \\`${value}\\` is an invalid y-parity value. Y-parity must be 0 or 1.`,\n    )\n  }\n}\n\n/** Thrown when the signature has an invalid `v` value. */\nexport class InvalidVError extends Errors.BaseError {\n  override readonly name = 'Signature.InvalidVError'\n\n  constructor({ value }: { value: number }) {\n    super(`Value \\`${value}\\` is an invalid v value. v must be 27, 28 or >=35.`)\n  }\n}\n", "import type * as Address from './Address.js'\nimport type * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport type { Compute, Mutable, Undefined } from './internal/types.js'\nimport * as Rlp from './Rlp.js'\nimport * as Signature from './Signature.js'\n\n/** Root type for an EIP-7702 Authorization. */\nexport type Authorization<\n  signed extends boolean = boolean,\n  bigintType = bigint,\n  numberType = number,\n> = Compute<\n  {\n    /** Address of the contract to set as code for the Authority. */\n    address: Address.Address\n    /** Chain ID to authorize. */\n    chainId: numberType\n    /** Nonce of the Authority to authorize. */\n    nonce: bigintType\n  } & (signed extends true\n    ? Signature.Signature<true, bigintType, numberType>\n    : Undefined<Signature.Signature>)\n>\n\n/** RPC representation of an {@link ox#Authorization.Authorization}. */\nexport type Rpc = Authorization<true, Hex.Hex, Hex.Hex>\n\n/** List of {@link ox#Authorization.Authorization}. */\nexport type List<\n  signed extends boolean = boolean,\n  bigintType = bigint,\n  numberType = number,\n> = Compute<readonly Authorization<signed, bigintType, numberType>[]>\n\n/** RPC representation of an {@link ox#Authorization.List}. */\nexport type ListRpc = List<true, Hex.Hex, Hex.Hex>\n\n/** Signed representation of a list of {@link ox#Authorization.Authorization}. */\nexport type ListSigned<bigintType = bigint, numberType = number> = List<\n  true,\n  bigintType,\n  numberType\n>\n\n/** Signed representation of an {@link ox#Authorization.Authorization}. */\nexport type Signed<bigintType = bigint, numberType = number> = Authorization<\n  true,\n  bigintType,\n  numberType\n>\n\n/** Tuple representation of an {@link ox#Authorization.Authorization}. */\nexport type Tuple<signed extends boolean = boolean> = signed extends true\n  ? readonly [\n      chainId: Hex.Hex,\n      address: Hex.Hex,\n      nonce: Hex.Hex,\n      yParity: Hex.Hex,\n      r: Hex.Hex,\n      s: Hex.Hex,\n    ]\n  : readonly [chainId: Hex.Hex, address: Hex.Hex, nonce: Hex.Hex]\n\n/** Tuple representation of a signed {@link ox#Authorization.Authorization}. */\nexport type TupleSigned = Tuple<true>\n\n/** Tuple representation of a list of {@link ox#Authorization.Authorization}. */\nexport type TupleList<signed extends boolean = boolean> =\n  readonly Tuple<signed>[]\n\n/** Tuple representation of a list of signed {@link ox#Authorization.Authorization}. */\nexport type TupleListSigned = TupleList<true>\n\n/**\n * Converts an [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization object into a typed {@link ox#Authorization.Authorization}.\n *\n * @example\n * An Authorization can be instantiated from an [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple in object format.\n *\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * A {@link ox#Signature.Signature} can be attached with the `signature` option. The example below demonstrates signing\n * an Authorization with {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * import { Authorization, Secp256k1 } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n *   chainId: 1,\n *   nonce: 40n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: Authorization.getSignPayload(authorization),\n *   privateKey: '0x...',\n * })\n *\n * const authorization_signed = Authorization.from(authorization, { signature }) // [!code focus]\n * ```\n *\n * @param authorization - An [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple in object format.\n * @param options - Authorization options.\n * @returns The {@link ox#Authorization.Authorization}.\n */\nexport function from<\n  const authorization extends Authorization | Rpc,\n  const signature extends Signature.Signature | undefined = undefined,\n>(\n  authorization: authorization | Authorization,\n  options: from.Options<signature> = {},\n): from.ReturnType<authorization, signature> {\n  if (typeof authorization.chainId === 'string')\n    return fromRpc(authorization) as never\n  return { ...authorization, ...options.signature } as never\n}\n\nexport declare namespace from {\n  type Options<\n    signature extends Signature.Signature | undefined =\n      | Signature.Signature\n      | undefined,\n  > = {\n    /** The {@link ox#Signature.Signature} to attach to the Authorization. */\n    signature?: signature | Signature.Signature | undefined\n  }\n\n  type ReturnType<\n    authorization extends Authorization | Rpc = Authorization,\n    signature extends Signature.Signature | undefined =\n      | Signature.Signature\n      | undefined,\n  > = Compute<\n    authorization extends Rpc\n      ? Signed\n      : authorization &\n          (signature extends Signature.Signature ? Readonly<signature> : {})\n  >\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#Authorization.Rpc} to an {@link ox#Authorization.Authorization}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.fromRpc({\n *   address: '0x0000000000000000000000000000000000000000',\n *   chainId: '0x1',\n *   nonce: '0x1',\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n * })\n * ```\n *\n * @param authorization - The RPC-formatted Authorization.\n * @returns A signed {@link ox#Authorization.Authorization}.\n */\nexport function fromRpc(authorization: Rpc): Signed {\n  const { address, chainId, nonce } = authorization\n  const signature = Signature.extract(authorization)!\n\n  return {\n    address,\n    chainId: Number(chainId),\n    nonce: BigInt(nonce),\n    ...signature,\n  }\n}\n\nexport declare namespace fromRpc {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#Authorization.ListRpc} to an {@link ox#Authorization.List}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorizationList = Authorization.fromRpcList([{\n *   address: '0x0000000000000000000000000000000000000000',\n *   chainId: '0x1',\n *   nonce: '0x1',\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n * }])\n * ```\n *\n * @param authorizationList - The RPC-formatted Authorization list.\n * @returns A signed {@link ox#Authorization.List}.\n */\nexport function fromRpcList(authorizationList: ListRpc): ListSigned {\n  return authorizationList.map(fromRpc)\n}\n\nexport declare namespace fromRpcList {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#Authorization.Tuple} to an {@link ox#Authorization.Authorization}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.fromTuple([\n *   '0x1',\n *   '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n *   '0x3'\n * ])\n * // @log: {\n * // @log:   address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:   chainId: 1,\n * // @log:   nonce: 3n\n * // @log: }\n * ```\n *\n * @example\n * It is also possible to append a Signature tuple to the end of an Authorization tuple.\n *\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.fromTuple([\n *   '0x1',\n *   '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n *   '0x3',\n *   '0x1',\n *   '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n *   '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * ])\n * // @log: {\n * // @log:   address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:   chainId: 1,\n * // @log:   nonce: 3n\n * // @log:   r: BigInt('0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90'),\n * // @log:   s: BigInt('0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'),\n * // @log:   yParity: 0,\n * // @log: }\n * ```\n *\n * @param tuple - The [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple.\n * @returns The {@link ox#Authorization.Authorization}.\n */\nexport function fromTuple<const tuple extends Tuple>(\n  tuple: tuple,\n): fromTuple.ReturnType<tuple> {\n  const [chainId, address, nonce, yParity, r, s] = tuple\n  let args = {\n    address,\n    chainId: chainId === '0x' ? 0 : Number(chainId),\n    nonce: nonce === '0x' ? 0n : BigInt(nonce),\n  }\n  if (yParity && r && s)\n    args = { ...args, ...Signature.fromTuple([yParity, r, s]) }\n  return from(args) as never\n}\n\nexport declare namespace fromTuple {\n  type ReturnType<authorization extends Tuple = Tuple> = Compute<\n    Authorization<authorization extends Tuple<true> ? true : false>\n  >\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#Authorization.TupleList} to an {@link ox#Authorization.List}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorizationList = Authorization.fromTupleList([\n *   ['0x1', '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c', '0x3'],\n *   ['0x3', '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c', '0x14'],\n * ])\n * // @log: [\n * // @log:   {\n * // @log:     address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:     chainId: 1,\n * // @log:     nonce: 3n,\n * // @log:   },\n * // @log:   {\n * // @log:     address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:     chainId: 3,\n * // @log:     nonce: 20n,\n * // @log:   },\n * // @log: ]\n * ```\n *\n * @example\n * It is also possible to append a Signature tuple to the end of an Authorization tuple.\n *\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorizationList = Authorization.fromTupleList([\n *   ['0x1', '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c', '0x3', '0x1', '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90', '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'],\n *   ['0x3', '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c', '0x14', '0x1', '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90', '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'],\n * ])\n * // @log: [\n * // @log:   {\n * // @log:     address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:     chainId: 1,\n * // @log:     nonce: 3n,\n * // @log:     r: BigInt('0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90'),\n * // @log:     s: BigInt('0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'),\n * // @log:     yParity: 0,\n * // @log:   },\n * // @log:   {\n * // @log:     address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:     chainId: 3,\n * // @log:     nonce: 20n,\n * // @log:     r: BigInt('0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90'),\n * // @log:     s: BigInt('0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'),\n * // @log:     yParity: 0,\n * // @log:   },\n * // @log: ]\n * ```\n *\n * @param tupleList - The [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple list.\n * @returns An {@link ox#Authorization.List}.\n */\nexport function fromTupleList<const tupleList extends TupleList>(\n  tupleList: tupleList,\n): fromTupleList.ReturnType<tupleList> {\n  const list: Mutable<List> = []\n  for (const tuple of tupleList) list.push(fromTuple(tuple))\n  return list as never\n}\n\nexport declare namespace fromTupleList {\n  type ReturnType<tupleList extends TupleList> = Compute<\n    TupleList<tupleList extends TupleList<true> ? true : false>\n  >\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Computes the sign payload for an {@link ox#Authorization.Authorization} in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n *\n * @example\n * The example below demonstrates computing the sign payload for an {@link ox#Authorization.Authorization}. This payload\n * can then be passed to signing functions like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * import { Authorization, Secp256k1 } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n *\n * const payload = Authorization.getSignPayload(authorization) // [!code focus]\n *\n * const signature = Secp256k1.sign({\n *   payload,\n *   privateKey: '0x...',\n * })\n * ```\n *\n * @param authorization - The {@link ox#Authorization.Authorization}.\n * @returns The sign payload.\n */\nexport function getSignPayload(authorization: Authorization): Hex.Hex {\n  return hash(authorization, { presign: true })\n}\n\nexport declare namespace getSignPayload {\n  type ErrorType = hash.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Computes the hash for an {@link ox#Authorization.Authorization} in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n *\n * const hash = Authorization.hash(authorization) // [!code focus]\n * ```\n *\n * @param authorization - The {@link ox#Authorization.Authorization}.\n * @returns The hash.\n */\nexport function hash(\n  authorization: Authorization,\n  options: hash.Options = {},\n): Hex.Hex {\n  const { presign } = options\n  return Hash.keccak256(\n    Hex.concat(\n      '0x05',\n      Rlp.fromHex(\n        toTuple(\n          presign\n            ? {\n                address: authorization.address,\n                chainId: authorization.chainId,\n                nonce: authorization.nonce,\n              }\n            : authorization,\n        ),\n      ),\n    ),\n  )\n}\n\nexport declare namespace hash {\n  type ErrorType =\n    | toTuple.ErrorType\n    | Hash.keccak256.ErrorType\n    | Hex.concat.ErrorType\n    | Rlp.fromHex.ErrorType\n    | Errors.GlobalErrorType\n\n  type Options = {\n    /** Whether to hash this authorization for signing. @default false */\n    presign?: boolean | undefined\n  }\n}\n\n/**\n * Converts an {@link ox#Authorization.Authorization} to an {@link ox#Authorization.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.toRpc({\n *   address: '0x0000000000000000000000000000000000000000',\n *   chainId: 1,\n *   nonce: 1n,\n *   r: 44944627813007772897391531230081695102703289123332187696115181104739239197517n,\n *   s: 36528503505192438307355164441104001310566505351980369085208178712678799181120n,\n *   yParity: 0,\n * })\n * ```\n *\n * @param authorization - An Authorization.\n * @returns An RPC-formatted Authorization.\n */\nexport function toRpc(authorization: Signed): Rpc {\n  const { address, chainId, nonce, ...signature } = authorization\n\n  return {\n    address,\n    chainId: Hex.fromNumber(chainId),\n    nonce: Hex.fromNumber(nonce),\n    ...Signature.toRpc(signature),\n  }\n}\n\nexport declare namespace toRpc {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#Authorization.List} to an {@link ox#Authorization.ListRpc}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.toRpcList([{\n *   address: '0x0000000000000000000000000000000000000000',\n *   chainId: 1,\n *   nonce: 1n,\n *   r: 44944627813007772897391531230081695102703289123332187696115181104739239197517n,\n *   s: 36528503505192438307355164441104001310566505351980369085208178712678799181120n,\n *   yParity: 0,\n * }])\n * ```\n *\n * @param authorizationList - An Authorization List.\n * @returns An RPC-formatted Authorization List.\n */\nexport function toRpcList(authorizationList: ListSigned): ListRpc {\n  return authorizationList.map(toRpc)\n}\n\nexport declare namespace toRpcList {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#Authorization.Authorization} to an {@link ox#Authorization.Tuple}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n *\n * const tuple = Authorization.toTuple(authorization) // [!code focus]\n * // @log: [\n * // @log:   address: '0x1234567890abcdef1234567890abcdef12345678',\n * // @log:   chainId: 1,\n * // @log:   nonce: 69n,\n * // @log: ]\n * ```\n *\n * @param authorization - The {@link ox#Authorization.Authorization}.\n * @returns An [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple.\n */\nexport function toTuple<const authorization extends Authorization>(\n  authorization: authorization,\n): toTuple.ReturnType<authorization> {\n  const { address, chainId, nonce } = authorization\n  const signature = Signature.extract(authorization)\n  return [\n    chainId ? Hex.fromNumber(chainId) : '0x',\n    address,\n    nonce ? Hex.fromNumber(nonce) : '0x',\n    ...(signature ? Signature.toTuple(signature) : []),\n  ] as never\n}\n\nexport declare namespace toTuple {\n  type ReturnType<authorization extends Authorization = Authorization> =\n    Compute<Tuple<authorization extends Signature.Signature ? true : false>>\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#Authorization.List} to an {@link ox#Authorization.TupleList}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization_1 = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n * const authorization_2 = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 3,\n *   nonce: 20n,\n * })\n *\n * const tuple = Authorization.toTupleList([authorization_1, authorization_2]) // [!code focus]\n * // @log: [\n * // @log:   [\n * // @log:     address: '0x1234567890abcdef1234567890abcdef12345678',\n * // @log:     chainId: 1,\n * // @log:     nonce: 69n,\n * // @log:   ],\n * // @log:   [\n * // @log:     address: '0x1234567890abcdef1234567890abcdef12345678',\n * // @log:     chainId: 3,\n * // @log:     nonce: 20n,\n * // @log:   ],\n * // @log: ]\n * ```\n *\n * @param list - An {@link ox#Authorization.List}.\n * @returns An [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple list.\n */\nexport function toTupleList<\n  const list extends\n    | readonly Authorization<true>[]\n    | readonly Authorization<false>[],\n>(list?: list | undefined): toTupleList.ReturnType<list> {\n  if (!list || list.length === 0) return []\n\n  const tupleList: Mutable<TupleList> = []\n  for (const authorization of list) tupleList.push(toTuple(authorization))\n\n  return tupleList as never\n}\n\nexport declare namespace toTupleList {\n  type ReturnType<\n    list extends\n      | readonly Authorization<true>[]\n      | readonly Authorization<false>[],\n  > = Compute<\n    TupleList<list extends readonly Authorization<true>[] ? true : false>\n  >\n\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import { secp256k1 } from '@noble/curves/secp256k1'\nimport * as Address from './Address.js'\nimport * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport * as Entropy from './internal/entropy.js'\nimport type { OneOf } from './internal/types.js'\nimport * as PublicKey from './PublicKey.js'\nimport type * as Signature from './Signature.js'\n\n/** Re-export of noble/curves secp256k1 utilities. */\nexport const noble = secp256k1\n\n/**\n * Creates a new secp256k1 ECDSA key pair consisting of a private key and its corresponding public key.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const { privateKey, publicKey } = Secp256k1.createKeyPair()\n * ```\n *\n * @param options - The options to generate the key pair.\n * @returns The generated key pair containing both private and public keys.\n */\nexport function createKeyPair<as extends 'Hex' | 'Bytes' = 'Hex'>(\n  options: createKeyPair.Options<as> = {},\n): createKeyPair.ReturnType<as> {\n  const { as = 'Hex' } = options\n  const privateKey = randomPrivateKey({ as })\n  const publicKey = getPublicKey({ privateKey })\n\n  return {\n    privateKey: privateKey as never,\n    publicKey,\n  }\n}\n\nexport declare namespace createKeyPair {\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = {\n    /**\n     * Format of the returned private key.\n     * @default 'Hex'\n     */\n    as?: as | 'Hex' | 'Bytes' | undefined\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes'> = {\n    privateKey:\n      | (as extends 'Bytes' ? Bytes.Bytes : never)\n      | (as extends 'Hex' ? Hex.Hex : never)\n    publicKey: PublicKey.PublicKey\n  }\n\n  type ErrorType =\n    | Hex.fromBytes.ErrorType\n    | PublicKey.from.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Computes the secp256k1 ECDSA public key from a provided private key.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const publicKey = Secp256k1.getPublicKey({ privateKey: '0x...' })\n * ```\n *\n * @param options - The options to compute the public key.\n * @returns The computed public key.\n */\nexport function getPublicKey(\n  options: getPublicKey.Options,\n): PublicKey.PublicKey {\n  const { privateKey } = options\n  const point = secp256k1.ProjectivePoint.fromPrivateKey(\n    Hex.from(privateKey).slice(2),\n  )\n  return PublicKey.from(point)\n}\n\nexport declare namespace getPublicKey {\n  type Options = {\n    /**\n     * Private key to compute the public key from.\n     */\n    privateKey: Hex.Hex | Bytes.Bytes\n  }\n\n  type ErrorType =\n    | Hex.from.ErrorType\n    | PublicKey.from.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Computes a shared secret using ECDH (Elliptic Curve Diffie-Hellman) between a private key and a public key.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const { privateKey: privateKeyA } = Secp256k1.createKeyPair()\n * const { publicKey: publicKeyB } = Secp256k1.createKeyPair()\n *\n * const sharedSecret = Secp256k1.getSharedSecret({\n *   privateKey: privateKeyA,\n *   publicKey: publicKeyB\n * })\n * ```\n *\n * @param options - The options to compute the shared secret.\n * @returns The computed shared secret.\n */\nexport function getSharedSecret<as extends 'Hex' | 'Bytes' = 'Hex'>(\n  options: getSharedSecret.Options<as>,\n): getSharedSecret.ReturnType<as> {\n  const { as = 'Hex', privateKey, publicKey } = options\n  const point = secp256k1.ProjectivePoint.fromHex(\n    PublicKey.toHex(publicKey).slice(2),\n  )\n  const sharedPoint = point.multiply(\n    secp256k1.utils.normPrivateKeyToScalar(Hex.from(privateKey).slice(2)),\n  )\n  const sharedSecret = sharedPoint.toRawBytes(true) // compressed format\n  if (as === 'Hex') return Hex.fromBytes(sharedSecret) as never\n  return sharedSecret as never\n}\n\nexport declare namespace getSharedSecret {\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = {\n    /**\n     * Format of the returned shared secret.\n     * @default 'Hex'\n     */\n    as?: as | 'Hex' | 'Bytes' | undefined\n    /**\n     * Private key to use for the shared secret computation.\n     */\n    privateKey: Hex.Hex | Bytes.Bytes\n    /**\n     * Public key to use for the shared secret computation.\n     */\n    publicKey: PublicKey.PublicKey<boolean>\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes'> =\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\n    | (as extends 'Hex' ? Hex.Hex : never)\n\n  type ErrorType =\n    | Hex.from.ErrorType\n    | PublicKey.toHex.ErrorType\n    | Hex.fromBytes.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Generates a random ECDSA private key on the secp256k1 curve.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const privateKey = Secp256k1.randomPrivateKey()\n * ```\n *\n * @param options - The options to generate the private key.\n * @returns The generated private key.\n */\nexport function randomPrivateKey<as extends 'Hex' | 'Bytes' = 'Hex'>(\n  options: randomPrivateKey.Options<as> = {},\n): randomPrivateKey.ReturnType<as> {\n  const { as = 'Hex' } = options\n  const bytes = secp256k1.utils.randomPrivateKey()\n  if (as === 'Hex') return Hex.fromBytes(bytes) as never\n  return bytes as never\n}\n\nexport declare namespace randomPrivateKey {\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = {\n    /**\n     * Format of the returned private key.\n     * @default 'Hex'\n     */\n    as?: as | 'Hex' | 'Bytes' | undefined\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes'> =\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\n    | (as extends 'Hex' ? Hex.Hex : never)\n\n  type ErrorType = Hex.fromBytes.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Recovers the signing address from the signed payload and signature.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n *\n * const address = Secp256k1.recoverAddress({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The recovery options.\n * @returns The recovered address.\n */\nexport function recoverAddress(\n  options: recoverAddress.Options,\n): recoverAddress.ReturnType {\n  return Address.fromPublicKey(recoverPublicKey(options))\n}\n\nexport declare namespace recoverAddress {\n  type Options = {\n    /** Payload that was signed. */\n    payload: Hex.Hex | Bytes.Bytes\n    /** Signature of the payload. */\n    signature: Signature.Signature\n  }\n\n  type ReturnType = Address.Address\n\n  type ErrorType =\n    | Address.fromPublicKey.ErrorType\n    | recoverPublicKey.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Recovers the signing public key from the signed payload and signature.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n *\n * const publicKey = Secp256k1.recoverPublicKey({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The recovery options.\n * @returns The recovered public key.\n */\nexport function recoverPublicKey(\n  options: recoverPublicKey.Options,\n): PublicKey.PublicKey {\n  const { payload, signature } = options\n  const { r, s, yParity } = signature\n  const signature_ = new secp256k1.Signature(\n    BigInt(r),\n    BigInt(s),\n  ).addRecoveryBit(yParity)\n  const point = signature_.recoverPublicKey(Hex.from(payload).substring(2))\n  return PublicKey.from(point)\n}\n\nexport declare namespace recoverPublicKey {\n  type Options = {\n    /** Payload that was signed. */\n    payload: Hex.Hex | Bytes.Bytes\n    /** Signature of the payload. */\n    signature: Signature.Signature\n  }\n\n  type ErrorType =\n    | PublicKey.from.ErrorType\n    | Hex.from.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Signs the payload with the provided private key.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   privateKey: '0x...' // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The signing options.\n * @returns The ECDSA {@link ox#Signature.Signature}.\n */\nexport function sign(options: sign.Options): Signature.Signature {\n  const {\n    extraEntropy = Entropy.extraEntropy,\n    hash,\n    payload,\n    privateKey,\n  } = options\n  const { r, s, recovery } = secp256k1.sign(\n    Bytes.from(payload),\n    Bytes.from(privateKey),\n    {\n      extraEntropy:\n        typeof extraEntropy === 'boolean'\n          ? extraEntropy\n          : Hex.from(extraEntropy).slice(2),\n      lowS: true,\n      ...(hash ? { prehash: true } : {}),\n    },\n  )\n  return {\n    r,\n    s,\n    yParity: recovery,\n  }\n}\n\nexport declare namespace sign {\n  type Options = {\n    /**\n     * Extra entropy to add to the signing process. Setting to `false` will disable it.\n     * @default true\n     */\n    extraEntropy?: boolean | Hex.Hex | Bytes.Bytes | undefined\n    /**\n     *  If set to `true`, the payload will be hashed (sha256) before being signed.\n     */\n    hash?: boolean | undefined\n    /**\n     * Payload to sign.\n     */\n    payload: Hex.Hex | Bytes.Bytes\n    /**\n     * ECDSA private key.\n     */\n    privateKey: Hex.Hex | Bytes.Bytes\n  }\n\n  type ErrorType = Bytes.from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Verifies a payload was signed by the provided address.\n *\n * @example\n * ### Verify with Ethereum Address\n *\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n *\n * const verified = Secp256k1.verify({ // [!code focus]\n *   address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @example\n * ### Verify with Public Key\n *\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const privateKey = '0x...'\n * const publicKey = Secp256k1.getPublicKey({ privateKey })\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey })\n *\n * const verified = Secp256k1.verify({ // [!code focus]\n *   publicKey, // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The verification options.\n * @returns Whether the payload was signed by the provided address.\n */\nexport function verify(options: verify.Options): boolean {\n  const { address, hash, payload, publicKey, signature } = options\n  if (address)\n    return Address.isEqual(address, recoverAddress({ payload, signature }))\n  return secp256k1.verify(\n    signature,\n    Bytes.from(payload),\n    PublicKey.toBytes(publicKey),\n    ...(hash ? [{ prehash: true, lowS: true }] : []),\n  )\n}\n\nexport declare namespace verify {\n  type Options = {\n    /** If set to `true`, the payload will be hashed (sha256) before being verified. */\n    hash?: boolean | undefined\n    /** Payload that was signed. */\n    payload: Hex.Hex | Bytes.Bytes\n  } & OneOf<\n    | {\n        /** Address that signed the payload. */\n        address: Address.Address\n        /** Signature of the payload. */\n        signature: Signature.Signature\n      }\n    | {\n        /** Public key that signed the payload. */\n        publicKey: PublicKey.PublicKey<boolean>\n        /** Signature of the payload. */\n        signature: Signature.Signature<false>\n      }\n  >\n\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import type { Address } from 'abitype'\nimport { erc6492MagicBytes } from '../../constants/bytes.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { encodeAbiParameters } from '../abi/encodeAbiParameters.js'\nimport { concatHex } from '../data/concat.js'\nimport { hexToBytes } from '../encoding/toBytes.js'\n\ntype To = 'bytes' | 'hex'\n\nexport type SerializeErc6492SignatureParameters<to extends To = 'hex'> = {\n  /** The ERC-4337 Account Factory address to use for counterfactual verification. */\n  address: Address\n  /** Calldata to pass to deploy account (if not deployed) for counterfactual verification. */\n  data: Hex\n  /** The original signature. */\n  signature: Hex\n  to?: to | To | undefined\n}\n\nexport type SerializeErc6492SignatureReturnType<to extends To = 'hex'> =\n  | (to extends 'hex' ? Hex : never)\n  | (to extends 'bytes' ? ByteArray : never)\n\nexport type SerializeErc6492SignatureErrorType = ErrorType\n\n/**\n * @description Serializes a ERC-6492 flavoured signature into hex format.\n *\n * @param signature ERC-6492 signature in object format.\n * @returns ERC-6492 signature in hex format.\n *\n * @example\n * serializeSignature({ address: '0x...', data: '0x...', signature: '0x...' })\n * // '0x000000000000000000000000cafebabecafebabecafebabecafebabecafebabe000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004deadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041a461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b000000000000000000000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492'\n */\nexport function serializeErc6492Signature<to extends To = 'hex'>(\n  parameters: SerializeErc6492SignatureParameters<to>,\n): SerializeErc6492SignatureReturnType<to> {\n  const { address, data, signature, to = 'hex' } = parameters\n  const signature_ = concatHex([\n    encodeAbiParameters(\n      [{ type: 'address' }, { type: 'bytes' }, { type: 'bytes' }],\n      [address, data, signature],\n    ),\n    erc6492MagicBytes,\n  ])\n\n  if (to === 'hex') return signature_ as SerializeErc6492SignatureReturnType<to>\n  return hexToBytes(signature_) as SerializeErc6492SignatureReturnType<to>\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Proof } from '../../types/proof.js'\nimport type { RpcProof } from '../../types/rpc.js'\nimport type { ExactPartial } from '../../types/utils.js'\nimport { hexToNumber } from '../index.js'\n\nexport type FormatProofErrorType = ErrorType\n\nfunction formatStorageProof(storageProof: RpcProof['storageProof']) {\n  return storageProof.map((proof) => ({\n    ...proof,\n    value: BigInt(proof.value),\n  }))\n}\n\nexport function formatProof(proof: ExactPartial<RpcProof>) {\n  return {\n    ...proof,\n    balance: proof.balance ? BigInt(proof.balance) : undefined,\n    nonce: proof.nonce ? hexToNumber(proof.nonce) : undefined,\n    storageProof: proof.storageProof\n      ? formatStorageProof(proof.storageProof)\n      : undefined,\n  } as Proof\n}\n", "import type { Address } from 'abitype'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { Proof } from '../../types/proof.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormatProofErrorType,\n  formatProof,\n} from '../../utils/formatters/proof.js'\n\nexport type GetProofParameters = {\n  /** Account address. */\n  address: Address\n  /** Array of storage-keys that should be proofed and included. */\n  storageKeys: Hash[]\n} & (\n  | {\n      /** The block number. */\n      blockNumber?: bigint | undefined\n      blockTag?: undefined\n    }\n  | {\n      blockNumber?: undefined\n      /**\n       * The block tag.\n       * @default 'latest'\n       */\n      blockTag?: BlockTag | undefined\n    }\n)\n\nexport type GetProofReturnType = Proof\n\nexport type GetProofErrorType =\n  | NumberToHexErrorType\n  | FormatProofErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the account and storage values of the specified account including the Merkle-proof.\n *\n * - Docs: https://viem.sh/docs/actions/public/getProof\n * - JSON-RPC Methods:\n *   - Calls [`eth_getProof`](https://eips.ethereum.org/EIPS/eip-1186)\n *\n * @param client - Client to use\n * @param parameters - {@link GetProofParameters}\n * @returns Proof data. {@link GetProofReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getProof } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const block = await getProof(client, {\n *  address: '0x...',\n *  storageKeys: ['0x...'],\n * })\n */\nexport async function getProof<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    address,\n    blockNumber,\n    blockTag: blockTag_,\n    storageKeys,\n  }: GetProofParameters,\n): Promise<GetProofReturnType> {\n  const blockTag = blockTag_ ?? 'latest'\n\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n\n  const proof = await client.request({\n    method: 'eth_getProof',\n    params: [address, storageKeys, blockNumberHex || blockTag],\n  })\n\n  return formatProof(proof)\n}\n", "import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetStorageAtParameters = {\n  address: Address\n  slot: Hex\n} & (\n  | {\n      blockNumber?: undefined\n      blockTag?: BlockTag | undefined\n    }\n  | {\n      blockNumber?: bigint | undefined\n      blockTag?: undefined\n    }\n)\n\nexport type GetStorageAtReturnType = Hex | undefined\n\nexport type GetStorageAtErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the value from a storage slot at a given address.\n *\n * - Docs: https://viem.sh/docs/contract/getStorageAt\n * - JSON-RPC Methods: [`eth_getStorageAt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getstorageat)\n *\n * @param client - Client to use\n * @param parameters - {@link GetStorageAtParameters}\n * @returns The value of the storage slot. {@link GetStorageAtReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getStorageAt } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const code = await getStorageAt(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   slot: toHex(0),\n * })\n */\nexport async function getStorageAt<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  { address, blockNumber, blockTag = 'latest', slot }: GetStorageAtParameters,\n): Promise<GetStorageAtReturnType> {\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n  const data = await client.request({\n    method: 'eth_getStorageAt',\n    params: [address, slot, blockNumberHex || blockTag],\n  })\n  return data\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  TransactionNotFoundError,\n  type TransactionNotFoundErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RpcTransaction } from '../../types/rpc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormattedTransaction,\n  formatTransaction,\n} from '../../utils/formatters/transaction.js'\n\nexport type GetTransactionParameters<blockTag extends BlockTag = 'latest'> =\n  | {\n      /** The block hash */\n      blockHash: Hash\n      blockNumber?: undefined\n      blockTag?: undefined\n      hash?: undefined\n      /** The index of the transaction on the block. */\n      index: number\n    }\n  | {\n      blockHash?: undefined\n      /** The block number */\n      blockNumber: bigint\n      blockTag?: undefined\n      hash?: undefined\n      /** The index of the transaction on the block. */\n      index: number\n    }\n  | {\n      blockHash?: undefined\n      blockNumber?: undefined\n      /** The block tag. */\n      blockTag: blockTag | BlockTag\n      hash?: undefined\n      /** The index of the transaction on the block. */\n      index: number\n    }\n  | {\n      blockHash?: undefined\n      blockNumber?: undefined\n      blockTag?: undefined\n      /** The hash of the transaction. */\n      hash: Hash\n      index?: number | undefined\n    }\n\nexport type GetTransactionReturnType<\n  chain extends Chain | undefined = undefined,\n  blockTag extends BlockTag = 'latest',\n> = Prettify<FormattedTransaction<chain, blockTag>>\n\nexport type GetTransactionErrorType =\n  | TransactionNotFoundErrorType\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns information about a [Transaction](https://viem.sh/docs/glossary/terms#transaction) given a hash or block identifier.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransaction\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionByHash)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionParameters}\n * @returns The transaction information. {@link GetTransactionReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransaction } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transaction = await getTransaction(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransaction<\n  chain extends Chain | undefined,\n  blockTag extends BlockTag = 'latest',\n>(\n  client: Client<Transport, chain>,\n  {\n    blockHash,\n    blockNumber,\n    blockTag: blockTag_,\n    hash,\n    index,\n  }: GetTransactionParameters<blockTag>,\n): Promise<GetTransactionReturnType<chain, blockTag>> {\n  const blockTag = blockTag_ || 'latest'\n\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n\n  let transaction: RpcTransaction | null = null\n  if (hash) {\n    transaction = await client.request(\n      {\n        method: 'eth_getTransactionByHash',\n        params: [hash],\n      },\n      { dedupe: true },\n    )\n  } else if (blockHash) {\n    transaction = await client.request(\n      {\n        method: 'eth_getTransactionByBlockHashAndIndex',\n        params: [blockHash, numberToHex(index)],\n      },\n      { dedupe: true },\n    )\n  } else if (blockNumberHex || blockTag) {\n    transaction = await client.request(\n      {\n        method: 'eth_getTransactionByBlockNumberAndIndex',\n        params: [blockNumberHex || blockTag, numberToHex(index)],\n      },\n      { dedupe: Boolean(blockNumberHex) },\n    )\n  }\n\n  if (!transaction)\n    throw new TransactionNotFoundError({\n      blockHash,\n      blockNumber,\n      blockTag,\n      hash,\n      index,\n    })\n\n  const format =\n    client.chain?.formatters?.transaction?.format || formatTransaction\n  return format(transaction, 'getTransaction')\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { FormattedTransactionReceipt } from '../../utils/formatters/transactionReceipt.js'\nimport { getAction } from '../../utils/getAction.js'\n\nimport {\n  type GetBlockNumberErrorType,\n  getBlockNumber,\n} from './getBlockNumber.js'\nimport {\n  type GetTransactionErrorType,\n  getTransaction,\n} from './getTransaction.js'\n\nexport type GetTransactionConfirmationsParameters<\n  chain extends Chain | undefined = Chain,\n> =\n  | {\n      /** The transaction hash. */\n      hash: Hash\n      transactionReceipt?: undefined\n    }\n  | {\n      hash?: undefined\n      /** The transaction receipt. */\n      transactionReceipt: FormattedTransactionReceipt<chain>\n    }\n\nexport type GetTransactionConfirmationsReturnType = bigint\n\nexport type GetTransactionConfirmationsErrorType =\n  | GetBlockNumberErrorType\n  | GetTransactionErrorType\n  | ErrorType\n\n/**\n * Returns the number of blocks passed (confirmations) since the transaction was processed on a block.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionConfirmations\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionConfirmations`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionConfirmations)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionConfirmationsParameters}\n * @returns The number of blocks passed since the transaction was processed. If confirmations is 0, then the Transaction has not been confirmed & processed yet. {@link GetTransactionConfirmationsReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionConfirmations } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const confirmations = await getTransactionConfirmations(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransactionConfirmations<\n  chain extends Chain | undefined,\n>(\n  client: Client<Transport, chain>,\n  { hash, transactionReceipt }: GetTransactionConfirmationsParameters<chain>,\n): Promise<GetTransactionConfirmationsReturnType> {\n  const [blockNumber, transaction] = await Promise.all([\n    getAction(client, getBlockNumber, 'getBlockNumber')({}),\n    hash\n      ? getAction(client, getTransaction, 'getTransaction')({ hash })\n      : undefined,\n  ])\n  const transactionBlockNumber =\n    transactionReceipt?.blockNumber || transaction?.blockNumber\n  if (!transactionBlockNumber) return 0n\n  return blockNumber - transactionBlockNumber! + 1n\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  TransactionReceiptNotFoundError,\n  type TransactionReceiptNotFoundErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type FormattedTransactionReceipt,\n  formatTransactionReceipt,\n} from '../../utils/formatters/transactionReceipt.js'\n\nexport type GetTransactionReceiptParameters = {\n  /** The hash of the transaction. */\n  hash: Hash\n}\n\nexport type GetTransactionReceiptReturnType<\n  chain extends Chain | undefined = undefined,\n> = FormattedTransactionReceipt<chain>\n\nexport type GetTransactionReceiptErrorType =\n  | RequestErrorType\n  | TransactionReceiptNotFoundErrorType\n  | ErrorType\n\n/**\n * Returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt) given a [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionReceipt\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionReceiptParameters}\n * @returns The transaction receipt. {@link GetTransactionReceiptReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionReceipt } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionReceipt = await getTransactionReceipt(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransactionReceipt<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  { hash }: GetTransactionReceiptParameters,\n) {\n  const receipt = await client.request(\n    {\n      method: 'eth_getTransactionReceipt',\n      params: [hash],\n    },\n    { dedupe: true },\n  )\n\n  if (!receipt) throw new TransactionReceiptNotFoundError({ hash })\n\n  const format =\n    client.chain?.formatters?.transactionReceipt?.format ||\n    formatTransactionReceipt\n  return format(\n    receipt,\n    'getTransactionReceipt',\n  ) as GetTransactionReceiptReturnType<chain>\n}\n", "import type { AbiStateMutability, Address, Narrow } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { multicall3Abi } from '../../constants/abis.js'\nimport { multicall3Bytecode } from '../../constants/contracts.js'\nimport { AbiDecodingZeroDataError } from '../../errors/abi.js'\nimport { BaseError } from '../../errors/base.js'\nimport { RawContractError } from '../../errors/contract.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ContractFunctionParameters } from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type {\n  MulticallContracts,\n  MulticallResults,\n} from '../../types/multicall.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from '../../utils/errors/getContractError.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type { CallParameters } from './call.js'\nimport { type ReadContractErrorType, readContract } from './readContract.js'\n\nexport type MulticallParameters<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n  options extends {\n    optional?: boolean\n    properties?: Record<string, any>\n  } = {},\n> = Pick<\n  CallParameters,\n  | 'authorizationList'\n  | 'blockNumber'\n  | 'blockOverrides'\n  | 'blockTag'\n  | 'stateOverride'\n> & {\n  /** The account to use for the multicall. */\n  account?: Address | undefined\n  /** Whether to allow failures. */\n  allowFailure?: allowFailure | boolean | undefined\n  /** The size of each batch of calls. */\n  batchSize?: number | undefined\n  /** Enable deployless multicall. */\n  deployless?: boolean | undefined\n  /** The contracts to call. */\n  contracts: MulticallContracts<\n    Narrow<contracts>,\n    { mutability: AbiStateMutability } & options\n  >\n  /** The address of the multicall3 contract to use. */\n  multicallAddress?: Address | undefined\n}\n\nexport type MulticallReturnType<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n  options extends {\n    error?: Error\n  } = { error: Error },\n> = MulticallResults<\n  Narrow<contracts>,\n  allowFailure,\n  { mutability: AbiStateMutability } & options\n>\n\nexport type MulticallErrorType =\n  | GetChainContractAddressErrorType\n  | ReadContractErrorType\n  | GetContractErrorReturnType<\n      EncodeFunctionDataErrorType | DecodeFunctionResultErrorType\n    >\n  | ErrorType\n\n/**\n * Similar to [`readContract`](https://viem.sh/docs/contract/readContract), but batches up multiple functions on a contract in a single RPC call via the [`multicall3` contract](https://github.com/mds1/multicall).\n *\n * - Docs: https://viem.sh/docs/contract/multicall\n *\n * @param client - Client to use\n * @param parameters - {@link MulticallParameters}\n * @returns An array of results with accompanying status. {@link MulticallReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { multicall } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const abi = parseAbi([\n *   'function balanceOf(address) view returns (uint256)',\n *   'function totalSupply() view returns (uint256)',\n * ])\n * const results = await multicall(client, {\n *   contracts: [\n *     {\n *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *       abi,\n *       functionName: 'balanceOf',\n *       args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n *     },\n *     {\n *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *       abi,\n *       functionName: 'totalSupply',\n *     },\n *   ],\n * })\n * // [{ result: 424122n, status: 'success' }, { result: 1000000n, status: 'success' }]\n */\nexport async function multicall<\n  const contracts extends readonly unknown[],\n  chain extends Chain | undefined,\n  allowFailure extends boolean = true,\n>(\n  client: Client<Transport, chain>,\n  parameters: MulticallParameters<contracts, allowFailure>,\n): Promise<MulticallReturnType<contracts, allowFailure>> {\n  const {\n    account,\n    authorizationList,\n    allowFailure = true,\n    blockNumber,\n    blockOverrides,\n    blockTag,\n    stateOverride,\n  } = parameters\n  const contracts = parameters.contracts as ContractFunctionParameters[]\n\n  const {\n    batchSize = parameters.batchSize ?? 1024,\n    deployless = parameters.deployless ?? false,\n  } = typeof client.batch?.multicall === 'object' ? client.batch.multicall : {}\n\n  const multicallAddress = (() => {\n    if (parameters.multicallAddress) return parameters.multicallAddress\n    if (deployless) return null\n    if (client.chain) {\n      return getChainContractAddress({\n        blockNumber,\n        chain: client.chain,\n        contract: 'multicall3',\n      })\n    }\n    throw new Error(\n      'client chain not configured. multicallAddress is required.',\n    )\n  })()\n\n  type Aggregate3Calls = {\n    allowFailure: boolean\n    callData: Hex\n    target: Address\n  }[]\n\n  const chunkedCalls: Aggregate3Calls[] = [[]]\n  let currentChunk = 0\n  let currentChunkSize = 0\n  for (let i = 0; i < contracts.length; i++) {\n    const { abi, address, args, functionName } = contracts[i]\n    try {\n      const callData = encodeFunctionData({ abi, args, functionName })\n\n      currentChunkSize += (callData.length - 2) / 2\n      // Check to see if we need to create a new chunk.\n      if (\n        // Check if batching is enabled.\n        batchSize > 0 &&\n        // Check if the current size of the batch exceeds the size limit.\n        currentChunkSize > batchSize &&\n        // Check if the current chunk is not already empty.\n        chunkedCalls[currentChunk].length > 0\n      ) {\n        currentChunk++\n        currentChunkSize = (callData.length - 2) / 2\n        chunkedCalls[currentChunk] = []\n      }\n\n      chunkedCalls[currentChunk] = [\n        ...chunkedCalls[currentChunk],\n        {\n          allowFailure: true,\n          callData,\n          target: address,\n        },\n      ]\n    } catch (err) {\n      const error = getContractError(err as BaseError, {\n        abi,\n        address,\n        args,\n        docsPath: '/docs/contract/multicall',\n        functionName,\n        sender: account,\n      })\n      if (!allowFailure) throw error\n      chunkedCalls[currentChunk] = [\n        ...chunkedCalls[currentChunk],\n        {\n          allowFailure: true,\n          callData: '0x' as Hex,\n          target: address,\n        },\n      ]\n    }\n  }\n\n  const aggregate3Results = await Promise.allSettled(\n    chunkedCalls.map((calls) =>\n      getAction(\n        client,\n        readContract,\n        'readContract',\n      )({\n        ...(multicallAddress === null\n          ? { code: multicall3Bytecode }\n          : { address: multicallAddress }),\n        abi: multicall3Abi,\n        account,\n        args: [calls],\n        authorizationList,\n        blockNumber,\n        blockOverrides,\n        blockTag,\n        functionName: 'aggregate3',\n        stateOverride,\n      }),\n    ),\n  )\n\n  const results = []\n  for (let i = 0; i < aggregate3Results.length; i++) {\n    const result = aggregate3Results[i]\n\n    // If an error occurred in a `readContract` invocation (ie. network error),\n    // then append the failure reason to each contract result.\n    if (result.status === 'rejected') {\n      if (!allowFailure) throw result.reason\n      for (let j = 0; j < chunkedCalls[i].length; j++) {\n        results.push({\n          status: 'failure',\n          error: result.reason,\n          result: undefined,\n        })\n      }\n      continue\n    }\n\n    // If the `readContract` call was successful, then decode the results.\n    const aggregate3Result = result.value\n    for (let j = 0; j < aggregate3Result.length; j++) {\n      // Extract the response from `readContract`\n      const { returnData, success } = aggregate3Result[j]\n\n      // Extract the request call data from the original call.\n      const { callData } = chunkedCalls[i][j]\n\n      // Extract the contract config for this call from the `contracts` argument\n      // for decoding.\n      const { abi, address, functionName, args } = contracts[\n        results.length\n      ] as ContractFunctionParameters\n\n      try {\n        if (callData === '0x') throw new AbiDecodingZeroDataError()\n        if (!success) throw new RawContractError({ data: returnData })\n        const result = decodeFunctionResult({\n          abi,\n          args,\n          data: returnData,\n          functionName,\n        })\n        results.push(allowFailure ? { result, status: 'success' } : result)\n      } catch (err) {\n        const error = getContractError(err as BaseError, {\n          abi,\n          address,\n          args,\n          docsPath: '/docs/contract/multicall',\n          functionName,\n        })\n        if (!allowFailure) throw error\n        results.push({ error, result: undefined, status: 'failure' })\n      }\n    }\n  }\n\n  if (results.length !== contracts.length)\n    throw new BaseError('multicall results mismatch')\n  return results as MulticallReturnType<contracts, allowFailure>\n}\n", "import type { Abi, AbiStateMutability, Address, Narrow } from 'abitype'\nimport * as BlockOverrides from 'ox/BlockOverrides'\n\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AbiDecodingZeroDataError } from '../../errors/abi.js'\nimport type { BaseError } from '../../errors/base.js'\nimport { RawContractError } from '../../errors/contract.js'\nimport { UnknownNodeError } from '../../errors/node.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Block, BlockTag } from '../../types/block.js'\nimport type { Call, Calls } from '../../types/calls.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Log } from '../../types/log.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { MulticallResults } from '../../types/multicall.js'\nimport type { StateOverride } from '../../types/stateOverride.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { ExactPartial, UnionOmit } from '../../types/utils.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport { concat } from '../../utils/data/concat.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport { getContractError } from '../../utils/errors/getContractError.js'\nimport {\n  type GetNodeErrorReturnType,\n  getNodeError,\n} from '../../utils/errors/getNodeError.js'\nimport {\n  type FormatBlockErrorType,\n  formatBlock,\n} from '../../utils/formatters/block.js'\nimport { formatLog } from '../../utils/formatters/log.js'\nimport {\n  type FormatTransactionRequestErrorType,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport {\n  type SerializeStateOverrideErrorType,\n  serializeStateOverride,\n} from '../../utils/stateOverride.js'\nimport {\n  type AssertRequestErrorType,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\n\ntype CallExtraProperties = ExactPartial<\n  UnionOmit<\n    TransactionRequest,\n    'blobs' | 'data' | 'kzg' | 'to' | 'sidecars' | 'value'\n  >\n> & {\n  /** Account attached to the call (msg.sender). */\n  account?: Account | Address | undefined\n  /** Recipient. `null` if contract deployment. */\n  to?: Address | null | undefined\n}\n\nexport type SimulateBlocksParameters<\n  calls extends readonly unknown[] = readonly unknown[],\n> = {\n  /** Blocks to simulate. */\n  blocks: readonly {\n    /** Block overrides. */\n    blockOverrides?: BlockOverrides.BlockOverrides | undefined\n    /** Calls to execute. */\n    calls: Calls<Narrow<calls>, CallExtraProperties>\n    /** State overrides. */\n    stateOverrides?: StateOverride | undefined\n  }[]\n  /** Whether to return the full transactions. */\n  returnFullTransactions?: boolean | undefined\n  /** Whether to trace transfers. */\n  traceTransfers?: boolean | undefined\n  /** Whether to enable validation mode. */\n  validation?: boolean | undefined\n} & (\n  | {\n      /** The balance of the account at a block number. */\n      blockNumber?: bigint | undefined\n      blockTag?: undefined\n    }\n  | {\n      blockNumber?: undefined\n      /**\n       * The balance of the account at a block tag.\n       * @default 'latest'\n       */\n      blockTag?: BlockTag | undefined\n    }\n)\n\nexport type SimulateBlocksReturnType<\n  calls extends readonly unknown[] = readonly unknown[],\n> = readonly (Block & {\n  calls: MulticallResults<\n    Narrow<calls>,\n    true,\n    {\n      extraProperties: {\n        data: Hex\n        gasUsed: bigint\n        logs?: Log[] | undefined\n      }\n      error: Error\n      mutability: AbiStateMutability\n    }\n  >\n})[]\n\nexport type SimulateBlocksErrorType =\n  | AssertRequestErrorType\n  | DecodeFunctionResultErrorType\n  | EncodeFunctionDataErrorType\n  | FormatBlockErrorType\n  | FormatTransactionRequestErrorType\n  | GetNodeErrorReturnType\n  | ParseAccountErrorType\n  | SerializeStateOverrideErrorType\n  | NumberToHexErrorType\n  | ErrorType\n\n/**\n * Simulates a set of calls on block(s) with optional block and state overrides.\n *\n * @example\n * ```ts\n * import { createClient, http, parseEther } from 'viem'\n * import { simulate } from 'viem/actions'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const result = await simulate(client, {\n *   blocks: [{\n *     blockOverrides: {\n *       number: 69420n,\n *     },\n *     calls: [{\n *       {\n *         account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n *         data: '0xdeadbeef',\n *         to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *       },\n *       {\n *         account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n *         to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *         value: parseEther('1'),\n *       },\n *     }],\n *     stateOverrides: [{\n *       address: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n *       balance: parseEther('10'),\n *     }],\n *   }]\n * })\n * ```\n *\n * @param client - Client to use.\n * @param parameters - {@link SimulateBlocksParameters}\n * @returns Simulated blocks. {@link SimulateBlocksReturnType}\n */\nexport async function simulateBlocks<\n  chain extends Chain | undefined,\n  const calls extends readonly unknown[],\n>(\n  client: Client<Transport, chain>,\n  parameters: SimulateBlocksParameters<calls>,\n): Promise<SimulateBlocksReturnType<calls>> {\n  const {\n    blockNumber,\n    blockTag = client.experimental_blockTag ?? 'latest',\n    blocks,\n    returnFullTransactions,\n    traceTransfers,\n    validation,\n  } = parameters\n\n  try {\n    const blockStateCalls = []\n    for (const block of blocks) {\n      const blockOverrides = block.blockOverrides\n        ? BlockOverrides.toRpc(block.blockOverrides)\n        : undefined\n      const calls = block.calls.map((call_) => {\n        const call = call_ as Call<unknown, CallExtraProperties>\n        const account = call.account ? parseAccount(call.account) : undefined\n        const data = call.abi ? encodeFunctionData(call) : call.data\n        const request = {\n          ...call,\n          account,\n          data: call.dataSuffix\n            ? concat([data || '0x', call.dataSuffix])\n            : data,\n          from: call.from ?? account?.address,\n        } as const\n        assertRequest(request)\n        return formatTransactionRequest(request)\n      })\n      const stateOverrides = block.stateOverrides\n        ? serializeStateOverride(block.stateOverrides)\n        : undefined\n\n      blockStateCalls.push({\n        blockOverrides,\n        calls,\n        stateOverrides,\n      })\n    }\n\n    const blockNumberHex =\n      typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined\n    const block = blockNumberHex || blockTag\n\n    const result = await client.request({\n      method: 'eth_simulateV1',\n      params: [\n        { blockStateCalls, returnFullTransactions, traceTransfers, validation },\n        block,\n      ],\n    })\n\n    return result.map((block, i) => ({\n      ...formatBlock(block),\n      calls: block.calls.map((call, j) => {\n        const { abi, args, functionName, to } = blocks[i].calls[j] as Call<\n          unknown,\n          CallExtraProperties\n        >\n\n        const data = call.error?.data ?? call.returnData\n        const gasUsed = BigInt(call.gasUsed)\n        const logs = call.logs?.map((log) => formatLog(log))\n        const status = call.status === '0x1' ? 'success' : 'failure'\n\n        const result =\n          abi && status === 'success' && data !== '0x'\n            ? decodeFunctionResult({\n                abi,\n                data,\n                functionName,\n              })\n            : null\n\n        const error = (() => {\n          if (status === 'success') return undefined\n\n          let error: Error | undefined\n          if (call.error?.data === '0x') error = new AbiDecodingZeroDataError()\n          else if (call.error) error = new RawContractError(call.error)\n\n          if (!error) return undefined\n          return getContractError(error, {\n            abi: (abi ?? []) as Abi,\n            address: to ?? '0x',\n            args,\n            functionName: functionName ?? '<unknown>',\n          })\n        })()\n\n        return {\n          data,\n          gasUsed,\n          logs,\n          status,\n          ...(status === 'success'\n            ? {\n                result,\n              }\n            : {\n                error,\n              }),\n        }\n      }),\n    })) as unknown as SimulateBlocksReturnType<calls>\n  } catch (e) {\n    const cause = e as BaseError\n    const error = getNodeError(cause, {})\n    if (error instanceof UnknownNodeError) throw cause\n    throw error\n  }\n}\n", "import type * as abitype from 'abitype'\nimport type * as Abi from '../Abi.js'\nimport type * as AbiItem from '../AbiItem.js'\nimport type * as AbiParameters from '../AbiParameters.js'\nimport * as Address from '../Address.js'\nimport * as Errors from '../Errors.js'\nimport type {\n  Compute,\n  IsNever,\n  IsUnion,\n  TypeErrorMessage,\n  UnionToTuple,\n} from './types.js'\n\n/** @internal */\nexport type ExtractArgs<\n  abi extends Abi.Abi | readonly unknown[] = Abi.Abi,\n  name extends AbiItem.Name<abi> = AbiItem.Name<abi>,\n> = abitype.AbiParametersToPrimitiveTypes<\n  AbiItem.FromAbi<abi extends Abi.Abi ? abi : Abi.Abi, name>['inputs'],\n  'inputs'\n> extends infer args\n  ? [args] extends [never]\n    ? readonly unknown[]\n    : args\n  : readonly unknown[]\n\n/** @internal */\nexport type ExtractForArgs<\n  abi extends Abi.Abi,\n  name extends AbiItem.Name<abi>,\n  args extends ExtractArgs<abi, name>,\n> = IsUnion<name> extends true\n  ? {\n      [key in keyof abi]: abi[key] extends { name: name } ? abi[key] : never\n    }[number]\n  : AbiItem.FromAbi<abi, name> extends infer abiItem extends AbiItem.AbiItem & {\n        inputs: readonly abitype.AbiParameter[]\n      }\n    ? IsUnion<abiItem> extends true // narrow overloads using `args` by converting to tuple and filtering out overloads that don't match\n      ? UnionToTuple<abiItem> extends infer abiItems extends\n          readonly (AbiItem.AbiItem & {\n            inputs: readonly abitype.AbiParameter[]\n          })[]\n        ? IsNever<TupleToUnion<abiItems, abi, name, args>> extends true\n          ? Compute<\n              abiItems[0] & {\n                readonly overloads: UnionToTuple<\n                  Exclude<abiItems[number], abiItems[0]>\n                >\n              }\n            >\n          : TupleToUnion<abiItems, abi, name, args> // convert back to union (removes `never` tuple entries: `['foo', never, 'bar'][number]` => `'foo' | 'bar'`)\n        : never\n      : abiItem\n    : never\n\n/** @internal */\nexport type TupleToUnion<\n  abiItems extends readonly {\n    inputs: readonly abitype.AbiParameter[]\n  }[],\n  abi extends Abi.Abi,\n  name extends AbiItem.Name<abi>,\n  args extends ExtractArgs<abi, name>,\n> = {\n  [k in keyof abiItems]: (\n    readonly [] extends args\n      ? readonly [] // fallback to `readonly []` if `args` has no value (e.g. `args` property not provided)\n      : args\n  ) extends abitype.AbiParametersToPrimitiveTypes<\n    abiItems[k]['inputs'],\n    'inputs'\n  >\n    ? abiItems[k]\n    : never\n}[number]\n\n/** @internal */\nexport type ErrorSignature<\n  name extends string = string,\n  parameters extends string = string,\n> = `error ${name}(${parameters})`\n\n/** @internal */\nexport type IsErrorSignature<signature extends string> =\n  signature extends ErrorSignature<infer name> ? IsName<name> : false\n\n/** @internal */\nexport type EventSignature<\n  name extends string = string,\n  parameters extends string = string,\n> = `event ${name}(${parameters})`\n\n/** @internal */\nexport type IsEventSignature<signature extends string> =\n  signature extends EventSignature<infer name> ? IsName<name> : false\n\n/** @internal */\nexport type FunctionSignature<\n  name extends string = string,\n  tail extends string = string,\n> = `function ${name}(${tail}`\nexport type IsFunctionSignature<signature> =\n  signature extends FunctionSignature<infer name>\n    ? IsName<name> extends true\n      ? signature extends ValidFunctionSignatures\n        ? true\n        : // Check that `Parameters` is not absorbing other types (e.g. `returns`)\n          signature extends `function ${string}(${infer parameters})`\n          ? parameters extends InvalidFunctionParameters\n            ? false\n            : true\n          : false\n      : false\n    : false\n/** @internal */\nexport type Scope = 'public' | 'external' // `internal` or `private` functions wouldn't make it to ABI so can ignore\n\n/** @internal */\nexport type Returns = `returns (${string})` | `returns(${string})`\n\n// Almost all valid function signatures, except `function ${string}(${infer parameters})` since `parameters` can absorb returns\n/** @internal */\nexport type ValidFunctionSignatures =\n  | `function ${string}()`\n  // basic\n  | `function ${string}() ${Returns}`\n  | `function ${string}() ${abitype.AbiStateMutability}`\n  | `function ${string}() ${Scope}`\n  // combinations\n  | `function ${string}() ${abitype.AbiStateMutability} ${Returns}`\n  | `function ${string}() ${Scope} ${Returns}`\n  | `function ${string}() ${Scope} ${abitype.AbiStateMutability}`\n  | `function ${string}() ${Scope} ${abitype.AbiStateMutability} ${Returns}`\n  // Parameters\n  | `function ${string}(${string}) ${Returns}`\n  | `function ${string}(${string}) ${abitype.AbiStateMutability}`\n  | `function ${string}(${string}) ${Scope}`\n  | `function ${string}(${string}) ${abitype.AbiStateMutability} ${Returns}`\n  | `function ${string}(${string}) ${Scope} ${Returns}`\n  | `function ${string}(${string}) ${Scope} ${abitype.AbiStateMutability}`\n  | `function ${string}(${string}) ${Scope} ${abitype.AbiStateMutability} ${Returns}`\n\n/** @internal */\nexport type StructSignature<\n  name extends string = string,\n  properties extends string = string,\n> = `struct ${name} {${properties}}`\n\n/** @internal */\nexport type IsStructSignature<signature extends string> =\n  signature extends StructSignature<infer name> ? IsName<name> : false\n\n/** @internal */\nexport type ConstructorSignature<tail extends string = string> =\n  `constructor(${tail}`\n\n/** @internal */\nexport type IsConstructorSignature<signature> =\n  signature extends ConstructorSignature\n    ? signature extends ValidConstructorSignatures\n      ? true\n      : false\n    : false\n\n/** @internal */\nexport type ValidConstructorSignatures =\n  | `constructor(${string})`\n  | `constructor(${string}) payable`\n\n/** @internal */\nexport type FallbackSignature<abiStateMutability extends '' | ' payable' = ''> =\n  `fallback() external${abiStateMutability}`\n\n/** @internal */\nexport type ReceiveSignature = 'receive() external payable'\n\n// TODO: Maybe use this for signature validation one day\n// https://twitter.com/devanshj__/status/1610423724708343808\n/** @internal */\nexport type IsSignature<type extends string> =\n  | (IsErrorSignature<type> extends true ? true : never)\n  | (IsEventSignature<type> extends true ? true : never)\n  | (IsFunctionSignature<type> extends true ? true : never)\n  | (IsStructSignature<type> extends true ? true : never)\n  | (IsConstructorSignature<type> extends true ? true : never)\n  | (type extends FallbackSignature ? true : never)\n  | (type extends ReceiveSignature ? true : never) extends infer condition\n  ? [condition] extends [never]\n    ? false\n    : true\n  : false\n\n/** @internal */\nexport type Signature<\n  string1 extends string,\n  string2 extends string | unknown = unknown,\n> = IsSignature<string1> extends true\n  ? string1\n  : string extends string1 // if exactly `string` (not narrowed), then pass through as valid\n    ? string1\n    : TypeErrorMessage<`Signature \"${string1}\" is invalid${string2 extends string\n        ? ` at position ${string2}`\n        : ''}.`>\n\n/** @internal */\nexport type Signatures<signatures extends readonly string[]> = {\n  [key in keyof signatures]: Signature<signatures[key], key>\n}\n\n/** @internal */\nexport type IsName<name extends string> = name extends ''\n  ? false\n  : ValidateName<name> extends name\n    ? true\n    : false\n\n/** @internal */\nexport type ValidateName<\n  name extends string,\n  checkCharacters extends boolean = false,\n> = name extends `${string}${' '}${string}`\n  ? TypeErrorMessage<`Identifier \"${name}\" cannot contain whitespace.`>\n  : IsSolidityKeyword<name> extends true\n    ? TypeErrorMessage<`\"${name}\" is a protected Solidity keyword.`>\n    : name extends `${number}`\n      ? TypeErrorMessage<`Identifier \"${name}\" cannot be a number string.`>\n      : name extends `${number}${string}`\n        ? TypeErrorMessage<`Identifier \"${name}\" cannot start with a number.`>\n        : checkCharacters extends true\n          ? IsValidCharacter<name> extends true\n            ? name\n            : TypeErrorMessage<`\"${name}\" contains invalid character.`>\n          : name\n\n/** @internal */\nexport type IsSolidityKeyword<type extends string> =\n  type extends SolidityKeywords ? true : false\n\n/** @internal */\nexport type SolidityKeywords =\n  | 'after'\n  | 'alias'\n  | 'anonymous'\n  | 'apply'\n  | 'auto'\n  | 'byte'\n  | 'calldata'\n  | 'case'\n  | 'catch'\n  | 'constant'\n  | 'copyof'\n  | 'default'\n  | 'defined'\n  | 'error'\n  | 'event'\n  | 'external'\n  | 'false'\n  | 'final'\n  | 'function'\n  | 'immutable'\n  | 'implements'\n  | 'in'\n  | 'indexed'\n  | 'inline'\n  | 'internal'\n  | 'let'\n  | 'mapping'\n  | 'match'\n  | 'memory'\n  | 'mutable'\n  | 'null'\n  | 'of'\n  | 'override'\n  | 'partial'\n  | 'private'\n  | 'promise'\n  | 'public'\n  | 'pure'\n  | 'reference'\n  | 'relocatable'\n  | 'return'\n  | 'returns'\n  | 'sizeof'\n  | 'static'\n  | 'storage'\n  | 'struct'\n  | 'super'\n  | 'supports'\n  | 'switch'\n  | 'this'\n  | 'true'\n  | 'try'\n  | 'typedef'\n  | 'typeof'\n  | 'var'\n  | 'view'\n  | 'virtual'\n  | `address${`[${string}]` | ''}`\n  | `bool${`[${string}]` | ''}`\n  | `string${`[${string}]` | ''}`\n  | `tuple${`[${string}]` | ''}`\n  | `bytes${number | ''}${`[${string}]` | ''}`\n  | `${'u' | ''}int${number | ''}${`[${string}]` | ''}`\n\n/** @internal */\nexport type IsValidCharacter<character extends string> =\n  character extends `${ValidCharacters}${infer tail}`\n    ? tail extends ''\n      ? true\n      : IsValidCharacter<tail>\n    : false\n\n// biome-ignore format: no formatting\n/** @internal */\nexport type ValidCharacters =\n  // uppercase letters\n  | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'\n  // lowercase letters\n  | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'\n  // numbers\n  | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'\n  // special characters\n  | '_' | '$'\n\n// Template string inference can absorb `returns`:\n// type Result = `function foo(string) return s (uint256)` extends `function ${string}(${infer Parameters})` ? Parameters : never\n// //   ^? type Result = \"string ) return s (uint256\"\n// So we need to validate against `returns` keyword with all combinations of whitespace\n/** @internal */\nexport type InvalidFunctionParameters =\n  | `${string}${MangledReturns} (${string}`\n  | `${string}) ${MangledReturns}${string}`\n  | `${string})${string}${MangledReturns}${string}(${string}`\n\n// r_e_t_u_r_n_s\n/** @internal */\nexport type MangledReturns =\n  // Single\n  | `r${string}eturns`\n  | `re${string}turns`\n  | `ret${string}urns`\n  | `retu${string}rns`\n  | `retur${string}ns`\n  | `return${string}s`\n  // Double\n  // `r_e*`\n  | `r${string}e${string}turns`\n  | `r${string}et${string}urns`\n  | `r${string}etu${string}rns`\n  | `r${string}etur${string}ns`\n  | `r${string}eturn${string}s`\n  // `re_t*`\n  | `re${string}t${string}urns`\n  | `re${string}tu${string}rns`\n  | `re${string}tur${string}ns`\n  | `re${string}turn${string}s`\n  // `ret_u*`\n  | `ret${string}u${string}rns`\n  | `ret${string}ur${string}ns`\n  | `ret${string}urn${string}s`\n  // `retu_r*`\n  | `retu${string}r${string}ns`\n  | `retu${string}rn${string}s`\n  // `retur_n*`\n  | `retur${string}n${string}s`\n  // Triple\n  // `r_e_t*`\n  | `r${string}e${string}t${string}urns`\n  | `r${string}e${string}tu${string}rns`\n  | `r${string}e${string}tur${string}ns`\n  | `r${string}e${string}turn${string}s`\n  // `re_t_u*`\n  | `re${string}t${string}u${string}rns`\n  | `re${string}t${string}ur${string}ns`\n  | `re${string}t${string}urn${string}s`\n  // `ret_u_r*`\n  | `ret${string}u${string}r${string}ns`\n  | `ret${string}u${string}rn${string}s`\n  // `retu_r_n*`\n  | `retu${string}r${string}n${string}s`\n  // Quadruple\n  // `r_e_t_u*`\n  | `r${string}e${string}t${string}u${string}rns`\n  | `r${string}e${string}t${string}ur${string}ns`\n  | `r${string}e${string}t${string}urn${string}s`\n  // `re_t_u_r*`\n  | `re${string}t${string}u${string}r${string}ns`\n  | `re${string}t${string}u${string}rn${string}s`\n  // `ret_u_r_n*`\n  | `ret${string}u${string}r${string}n${string}s`\n  // Quintuple\n  // `r_e_t_u_r*`\n  | `r${string}e${string}t${string}u${string}r${string}ns`\n  | `r${string}e${string}t${string}u${string}rn${string}s`\n  // `re_t_u_r_n*`\n  | `re${string}t${string}u${string}r${string}n${string}s`\n  // Sextuple\n  // `r_e_t_u_r_n_s`\n  | `r${string}e${string}t${string}u${string}r${string}n${string}s`\n\n/** @internal */\nexport type Widen<type> =\n  | ([unknown] extends [type] ? unknown : never)\n  | (type extends Function ? type : never)\n  | (type extends abitype.ResolvedRegister['bigIntType'] ? bigint : never)\n  | (type extends boolean ? boolean : never)\n  | (type extends abitype.ResolvedRegister['intType'] ? number : never)\n  | (type extends string\n      ? type extends abitype.ResolvedRegister['addressType']\n        ? abitype.ResolvedRegister['addressType']\n        : type extends abitype.ResolvedRegister['bytesType']['inputs']\n          ? abitype.ResolvedRegister['bytesType']\n          : string\n      : never)\n  | (type extends readonly [] ? readonly [] : never)\n  | (type extends Record<string, unknown>\n      ? { [K in keyof type]: Widen<type[K]> }\n      : never)\n  | (type extends { length: number }\n      ? {\n          [K in keyof type]: Widen<type[K]>\n        } extends infer Val extends readonly unknown[]\n        ? readonly [...Val]\n        : never\n      : never)\n\n/** @internal */\nexport function normalizeSignature(signature: string): string {\n  let active = true\n  let current = ''\n  let level = 0\n  let result = ''\n  let valid = false\n\n  for (let i = 0; i < signature.length; i++) {\n    const char = signature[i]!\n\n    // If the character is a separator, we want to reactivate.\n    if (['(', ')', ','].includes(char)) active = true\n\n    // If the character is a \"level\" token, we want to increment/decrement.\n    if (char === '(') level++\n    if (char === ')') level--\n\n    // If we aren't active, we don't want to mutate the result.\n    if (!active) continue\n\n    // If level === 0, we are at the definition level.\n    if (level === 0) {\n      if (char === ' ' && ['event', 'function', 'error', ''].includes(result))\n        result = ''\n      else {\n        result += char\n\n        // If we are at the end of the definition, we must be finished.\n        if (char === ')') {\n          valid = true\n          break\n        }\n      }\n\n      continue\n    }\n\n    // Ignore spaces\n    if (char === ' ') {\n      // If the previous character is a separator, and the current section isn't empty, we want to deactivate.\n      if (signature[i - 1] !== ',' && current !== ',' && current !== ',(') {\n        current = ''\n        active = false\n      }\n      continue\n    }\n\n    result += char\n    current += char\n  }\n\n  if (!valid) throw new Errors.BaseError('Unable to normalize signature.')\n\n  return result\n}\n\n/** @internal */\nexport declare namespace normalizeSignature {\n  export type ErrorType = Errors.BaseError | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function isArgOfType(\n  arg: unknown,\n  abiParameter: AbiParameters.Parameter,\n): boolean {\n  const argType = typeof arg\n  const abiParameterType = abiParameter.type\n  switch (abiParameterType) {\n    case 'address':\n      return Address.validate(arg as Address.Address, { strict: false })\n    case 'bool':\n      return argType === 'boolean'\n    case 'function':\n      return argType === 'string'\n    case 'string':\n      return argType === 'string'\n    default: {\n      if (abiParameterType === 'tuple' && 'components' in abiParameter)\n        return Object.values(abiParameter.components).every(\n          (component, index) => {\n            return isArgOfType(\n              Object.values(arg as unknown[] | Record<string, unknown>)[index],\n              component as AbiParameters.Parameter,\n            )\n          },\n        )\n\n      // `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n      // https://regexr.com/6v8hp\n      if (\n        /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(\n          abiParameterType,\n        )\n      )\n        return argType === 'number' || argType === 'bigint'\n\n      // `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n      // https://regexr.com/6va55\n      if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType))\n        return argType === 'string' || arg instanceof Uint8Array\n\n      // fixed-length (`<type>[M]`) and dynamic (`<type>[]`) arrays\n      // https://regexr.com/6va6i\n      if (/[a-z]+[1-9]{0,3}(\\[[0-9]{0,}\\])+$/.test(abiParameterType)) {\n        return (\n          Array.isArray(arg) &&\n          arg.every((x: unknown) =>\n            isArgOfType(x, {\n              ...abiParameter,\n              // Pop off `[]` or `[M]` from end of type\n              type: abiParameterType.replace(/(\\[[0-9]{0,}\\])$/, ''),\n            } as AbiParameters.Parameter),\n          )\n        )\n      }\n\n      return false\n    }\n  }\n}\n\n/** @internal */\nexport function getAmbiguousTypes(\n  sourceParameters: readonly AbiParameters.Parameter[],\n  targetParameters: readonly AbiParameters.Parameter[],\n  args: ExtractArgs,\n): AbiParameters.Parameter['type'][] | undefined {\n  for (const parameterIndex in sourceParameters) {\n    const sourceParameter = sourceParameters[parameterIndex]!\n    const targetParameter = targetParameters[parameterIndex]!\n\n    if (\n      sourceParameter.type === 'tuple' &&\n      targetParameter.type === 'tuple' &&\n      'components' in sourceParameter &&\n      'components' in targetParameter\n    )\n      return getAmbiguousTypes(\n        sourceParameter.components,\n        targetParameter.components,\n        (args as any)[parameterIndex],\n      )\n\n    const types = [sourceParameter.type, targetParameter.type]\n\n    const ambiguous = (() => {\n      if (types.includes('address') && types.includes('bytes20')) return true\n      if (types.includes('address') && types.includes('string'))\n        return Address.validate(args[parameterIndex] as Address.Address, {\n          strict: false,\n        })\n      if (types.includes('address') && types.includes('bytes'))\n        return Address.validate(args[parameterIndex] as Address.Address, {\n          strict: false,\n        })\n      return false\n    })()\n\n    if (ambiguous) return types\n  }\n\n  return\n}\n", "import * as abitype from 'abitype'\nimport type * as Abi from './Abi.js'\nimport * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport * as internal from './internal/abiItem.js'\nimport type { UnionCompute } from './internal/types.js'\n\n/** Root type for an item on an {@link ox#Abi.Abi}. */\nexport type AbiItem = Abi.Abi[number]\n\n/**\n * Extracts an {@link ox#AbiItem.AbiItem} item from an {@link ox#Abi.Abi}, given a name.\n *\n * @example\n * ```ts twoslash\n * import { Abi, AbiItem } from 'ox'\n *\n * const abi = Abi.from([\n *   'error Foo(string)',\n *   'function foo(string)',\n *   'event Bar(uint256)',\n * ])\n *\n * type Foo = AbiItem.FromAbi<typeof abi, 'Foo'>\n * //   ^?\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n */\nexport type FromAbi<\n  abi extends Abi.Abi,\n  name extends ExtractNames<abi>,\n> = Extract<abi[number], { name: name }>\n\n/**\n * Extracts the names of all {@link ox#AbiItem.AbiItem} items in an {@link ox#Abi.Abi}.\n *\n * @example\n * ```ts twoslash\n * import { Abi, AbiItem } from 'ox'\n *\n * const abi = Abi.from([\n *   'error Foo(string)',\n *   'function foo(string)',\n *   'event Bar(uint256)',\n * ])\n *\n * type names = AbiItem.Name<typeof abi>\n * //   ^?\n *\n * ```\n */\nexport type Name<abi extends Abi.Abi | readonly unknown[] = Abi.Abi> =\n  abi extends Abi.Abi ? ExtractNames<abi> : string\n\nexport type ExtractNames<abi extends Abi.Abi> = Extract<\n  abi[number],\n  { name: string }\n>['name']\n\n/**\n * Formats an {@link ox#AbiItem.AbiItem} into a **Human Readable ABI Item**.\n *\n * @example\n * ```ts twoslash\n * import { AbiItem } from 'ox'\n *\n * const formatted = AbiItem.format({\n *   type: 'function',\n *   name: 'approve',\n *   stateMutability: 'nonpayable',\n *   inputs: [\n *     {\n *       name: 'spender',\n *       type: 'address',\n *     },\n *     {\n *       name: 'amount',\n *       type: 'uint256',\n *     },\n *   ],\n *   outputs: [{ type: 'bool' }],\n * })\n *\n * formatted\n * //    ^?\n *\n *\n * ```\n *\n * @param abiItem - The ABI Item to format.\n * @returns The formatted ABI Item  .\n */\nexport function format<const abiItem extends AbiItem>(\n  abiItem: abiItem | AbiItem,\n): abitype.FormatAbiItem<abiItem> {\n  return abitype.formatAbiItem(abiItem) as never\n}\n\nexport declare namespace format {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Parses an arbitrary **JSON ABI Item** or **Human Readable ABI Item** into a typed {@link ox#AbiItem.AbiItem}.\n *\n * @example\n * ### JSON ABIs\n *\n * ```ts twoslash\n * import { AbiItem } from 'ox'\n *\n * const abiItem = AbiItem.from({\n *   type: 'function',\n *   name: 'approve',\n *   stateMutability: 'nonpayable',\n *   inputs: [\n *     {\n *       name: 'spender',\n *       type: 'address',\n *     },\n *     {\n *       name: 'amount',\n *       type: 'uint256',\n *     },\n *   ],\n *   outputs: [{ type: 'bool' }],\n * })\n *\n * abiItem\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Human Readable ABIs\n *\n * A Human Readable ABI can be parsed into a typed ABI object:\n *\n * ```ts twoslash\n * import { AbiItem } from 'ox'\n *\n * const abiItem = AbiItem.from(\n *   'function approve(address spender, uint256 amount) returns (bool)' // [!code hl]\n * )\n *\n * abiItem\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * It is possible to specify `struct`s along with your definitions:\n *\n * ```ts twoslash\n * import { AbiItem } from 'ox'\n *\n * const abiItem = AbiItem.from([\n *   'struct Foo { address spender; uint256 amount; }', // [!code hl]\n *   'function approve(Foo foo) returns (bool)',\n * ])\n *\n * abiItem\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n *\n *\n * @param abiItem - The ABI Item to parse.\n * @returns The typed ABI Item.\n */\nexport function from<\n  const abiItem extends AbiItem | string | readonly string[],\n>(\n  abiItem: (abiItem | AbiItem | string | readonly string[]) &\n    (\n      | (abiItem extends string ? internal.Signature<abiItem> : never)\n      | (abiItem extends readonly string[]\n          ? internal.Signatures<abiItem>\n          : never)\n      | AbiItem\n    ),\n  options: from.Options = {},\n): from.ReturnType<abiItem> {\n  const { prepare = true } = options\n  const item = (() => {\n    if (Array.isArray(abiItem)) return abitype.parseAbiItem(abiItem)\n    if (typeof abiItem === 'string')\n      return abitype.parseAbiItem(abiItem as never)\n    return abiItem\n  })() as AbiItem\n  return {\n    ...item,\n    ...(prepare ? { hash: getSignatureHash(item) } : {}),\n  } as never\n}\n\nexport declare namespace from {\n  type Options = {\n    /**\n     * Whether or not to prepare the extracted item (optimization for encoding performance).\n     * When `true`, the `hash` property is computed and included in the returned value.\n     *\n     * @default true\n     */\n    prepare?: boolean | undefined\n  }\n\n  type ReturnType<abiItem extends AbiItem | string | readonly string[]> =\n    abiItem extends string\n      ? abitype.ParseAbiItem<abiItem>\n      : abiItem extends readonly string[]\n        ? abitype.ParseAbiItem<abiItem>\n        : abiItem\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Extracts an {@link ox#AbiItem.AbiItem} from an {@link ox#Abi.Abi} given a name and optional arguments.\n *\n * @example\n * ABI Items can be extracted by their name using the `name` option:\n *\n * ```ts twoslash\n * import { Abi, AbiItem } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'event Transfer(address owner, address to, uint256 tokenId)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n *\n * const item = AbiItem.fromAbi(abi, 'Transfer') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Extracting by Selector\n *\n * ABI Items can be extract by their selector when {@link ox#Hex.Hex} is provided to `name`.\n *\n * ```ts twoslash\n * import { Abi, AbiItem } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'event Transfer(address owner, address to, uint256 tokenId)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n * const item = AbiItem.fromAbi(abi, '0x095ea7b3') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * :::note\n *\n * Extracting via a hex selector is useful when extracting an ABI Item from an `eth_call` RPC response,\n * a Transaction `input`, or from Event Log `topics`.\n *\n * :::\n *\n * @param abi - The ABI to extract from.\n * @param name - The name (or selector) of the ABI item to extract.\n * @param options - Extraction options.\n * @returns The ABI item.\n */\nexport function fromAbi<\n  const abi extends Abi.Abi | readonly unknown[],\n  name extends Name<abi>,\n  const args extends internal.ExtractArgs<abi, name> | undefined = undefined,\n  //\n  allNames = Name<abi>,\n>(\n  abi: abi | Abi.Abi | readonly unknown[],\n  name: Hex.Hex | (name extends allNames ? name : never),\n  options?: fromAbi.Options<abi, name, args>,\n): fromAbi.ReturnType<abi, name, args> {\n  const { args = [], prepare = true } = (options ??\n    {}) as unknown as fromAbi.Options\n\n  const isSelector = Hex.validate(name, { strict: false })\n  const abiItems = (abi as Abi.Abi).filter((abiItem) => {\n    if (isSelector) {\n      if (abiItem.type === 'function' || abiItem.type === 'error')\n        return getSelector(abiItem) === Hex.slice(name, 0, 4)\n      if (abiItem.type === 'event') return getSignatureHash(abiItem) === name\n      return false\n    }\n    return 'name' in abiItem && abiItem.name === name\n  })\n\n  if (abiItems.length === 0) throw new NotFoundError({ name: name as string })\n  if (abiItems.length === 1)\n    return {\n      ...abiItems[0],\n      ...(prepare ? { hash: getSignatureHash(abiItems[0]!) } : {}),\n    } as never\n\n  let matchedAbiItem: AbiItem | undefined\n  for (const abiItem of abiItems) {\n    if (!('inputs' in abiItem)) continue\n    if (!args || args.length === 0) {\n      if (!abiItem.inputs || abiItem.inputs.length === 0)\n        return {\n          ...abiItem,\n          ...(prepare ? { hash: getSignatureHash(abiItem) } : {}),\n        } as never\n      continue\n    }\n    if (!abiItem.inputs) continue\n    if (abiItem.inputs.length === 0) continue\n    if (abiItem.inputs.length !== args.length) continue\n    const matched = args.every((arg, index) => {\n      const abiParameter = 'inputs' in abiItem && abiItem.inputs![index]\n      if (!abiParameter) return false\n      return internal.isArgOfType(arg, abiParameter)\n    })\n    if (matched) {\n      // Check for ambiguity against already matched parameters (e.g. `address` vs `bytes20`).\n      if (\n        matchedAbiItem &&\n        'inputs' in matchedAbiItem &&\n        matchedAbiItem.inputs\n      ) {\n        const ambiguousTypes = internal.getAmbiguousTypes(\n          abiItem.inputs,\n          matchedAbiItem.inputs,\n          args as readonly unknown[],\n        )\n        if (ambiguousTypes)\n          throw new AmbiguityError(\n            {\n              abiItem,\n              type: ambiguousTypes[0]!,\n            },\n            {\n              abiItem: matchedAbiItem,\n              type: ambiguousTypes[1]!,\n            },\n          )\n      }\n\n      matchedAbiItem = abiItem\n    }\n  }\n\n  const abiItem = (() => {\n    if (matchedAbiItem) return matchedAbiItem\n    const [abiItem, ...overloads] = abiItems\n    return { ...abiItem!, overloads }\n  })()\n\n  if (!abiItem) throw new NotFoundError({ name: name as string })\n  return {\n    ...abiItem,\n    ...(prepare ? { hash: getSignatureHash(abiItem) } : {}),\n  } as never\n}\n\nexport declare namespace fromAbi {\n  type Options<\n    abi extends Abi.Abi | readonly unknown[] = Abi.Abi,\n    name extends Name<abi> = Name<abi>,\n    args extends\n      | internal.ExtractArgs<abi, name>\n      | undefined = internal.ExtractArgs<abi, name>,\n    ///\n    allArgs = internal.ExtractArgs<abi, name>,\n  > = {\n    /**\n     * Whether or not to prepare the extracted item (optimization for encoding performance).\n     * When `true`, the `hash` property is computed and included in the returned value.\n     *\n     * @default true\n     */\n    prepare?: boolean | undefined\n  } & UnionCompute<\n    readonly [] extends allArgs\n      ? {\n          args?:\n            | allArgs // show all options\n            // infer value, widen inferred value of `args` conditionally to match `allArgs`\n            | (abi extends Abi.Abi\n                ? args extends allArgs\n                  ? internal.Widen<args>\n                  : never\n                : never)\n            | undefined\n        }\n      : {\n          args?:\n            | allArgs // show all options\n            | (internal.Widen<args> & (args extends allArgs ? unknown : never)) // infer value, widen inferred value of `args` match `allArgs` (e.g. avoid union `args: readonly [123n] | readonly [bigint]`)\n            | undefined\n        }\n  >\n\n  type ReturnType<\n    abi extends Abi.Abi | readonly unknown[] = Abi.Abi,\n    name extends Name<abi> = Name<abi>,\n    args extends\n      | internal.ExtractArgs<abi, name>\n      | undefined = internal.ExtractArgs<abi, name>,\n    fallback = AbiItem,\n  > = abi extends Abi.Abi\n    ? Abi.Abi extends abi\n      ? fallback\n      : internal.ExtractForArgs<\n          abi,\n          name,\n          args extends internal.ExtractArgs<abi, name>\n            ? args\n            : internal.ExtractArgs<abi, name>\n        >\n    : fallback\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Computes the [4-byte selector](https://solidity-by-example.org/function-selector/) for an {@link ox#AbiItem.AbiItem}.\n *\n * Useful for computing function selectors for calldata.\n *\n * @example\n * ```ts twoslash\n * import { AbiItem } from 'ox'\n *\n * const selector = AbiItem.getSelector('function ownerOf(uint256 tokenId)')\n * // @log: '0x6352211e'\n * ```\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiItem } from 'ox'\n *\n * const erc20Abi = Abi.from([...])\n *\n * const selector = AbiItem.getSelector(erc20Abi, 'ownerOf')\n * // @log: '0x6352211e'\n * ```\n *\n * @example\n * ```ts twoslash\n * import { AbiItem } from 'ox'\n *\n * const selector = AbiItem.getSelector({\n *   inputs: [{ type: 'uint256' }],\n *   name: 'ownerOf',\n *   outputs: [],\n *   stateMutability: 'view',\n *   type: 'function'\n * })\n * // @log: '0x6352211e'\n * ```\n *\n * @param abiItem - The ABI item to compute the selector for. Can be a signature or an ABI item for an error, event, function, etc.\n * @returns The first 4 bytes of the {@link ox#Hash.(keccak256:function)} hash of the function signature.\n */\nexport function getSelector<\n  abi extends Abi.Abi | readonly unknown[],\n  name extends Name<abi>,\n>(abi: abi | Abi.Abi | readonly unknown[], name: name): Hex.Hex\nexport function getSelector(abiItem: string | AbiItem): Hex.Hex\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function getSelector(\n  ...parameters:\n    | [abi: Abi.Abi | readonly unknown[], name: string]\n    | [string | AbiItem]\n): Hex.Hex {\n  const abiItem = (() => {\n    if (Array.isArray(parameters[0])) {\n      const [abi, name] = parameters as [Abi.Abi | readonly unknown[], string]\n      return fromAbi(abi, name)\n    }\n    return parameters[0] as string | AbiItem\n  })()\n  return Hex.slice(getSignatureHash(abiItem), 0, 4)\n}\n\nexport declare namespace getSelector {\n  type ErrorType =\n    | getSignatureHash.ErrorType\n    | Hex.slice.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Computes the stringified signature for a given {@link ox#AbiItem.AbiItem}.\n *\n * @example\n * ```ts twoslash\n * import { AbiItem } from 'ox'\n *\n * const signature = AbiItem.getSignature('function ownerOf(uint256 tokenId)')\n * // @log: 'ownerOf(uint256)'\n * ```\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiItem } from 'ox'\n *\n * const erc20Abi = Abi.from([...])\n *\n * const signature = AbiItem.getSignature(erc20Abi, 'ownerOf')\n * // @log: 'ownerOf(uint256)'\n * ```\n *\n * @example\n * ```ts twoslash\n * import { AbiItem } from 'ox'\n *\n * const signature = AbiItem.getSignature({\n *   name: 'ownerOf',\n *   type: 'function',\n *   inputs: [{ name: 'tokenId', type: 'uint256' }],\n *   outputs: [],\n *   stateMutability: 'view',\n * })\n * // @log: 'ownerOf(uint256)'\n * ```\n *\n * @param abiItem - The ABI Item to compute the signature for.\n * @returns The stringified signature of the ABI Item.\n */\nexport function getSignature<\n  abi extends Abi.Abi | readonly unknown[],\n  name extends Name<abi>,\n>(abi: abi | Abi.Abi | readonly unknown[], name: name): string\nexport function getSignature(abiItem: string | AbiItem): string\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function getSignature(\n  ...parameters:\n    | [abi: Abi.Abi | readonly unknown[], name: string]\n    | [string | AbiItem]\n): string {\n  const abiItem = (() => {\n    if (Array.isArray(parameters[0])) {\n      const [abi, name] = parameters as [Abi.Abi | readonly unknown[], string]\n      return fromAbi(abi, name)\n    }\n    return parameters[0] as string | AbiItem\n  })()\n  const signature = (() => {\n    if (typeof abiItem === 'string') return abiItem\n    return abitype.formatAbiItem(abiItem)\n  })()\n  return internal.normalizeSignature(signature)\n}\n\nexport declare namespace getSignature {\n  type ErrorType =\n    | internal.normalizeSignature.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Computes the signature hash for an {@link ox#AbiItem.AbiItem}.\n *\n * Useful for computing Event Topic values.\n *\n * @example\n * ```ts twoslash\n * import { AbiItem } from 'ox'\n *\n * const hash = AbiItem.getSignatureHash('event Transfer(address indexed from, address indexed to, uint256 amount)')\n * // @log: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n * ```\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiItem } from 'ox'\n *\n * const erc20Abi = Abi.from([...])\n *\n * const hash = AbiItem.getSignatureHash(erc20Abi, 'Transfer')\n * // @log: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n * ```\n *\n * @example\n * ```ts twoslash\n * import { AbiItem } from 'ox'\n *\n * const hash = AbiItem.getSignatureHash({\n *   name: 'Transfer',\n *   type: 'event',\n *   inputs: [\n *     { name: 'from', type: 'address', indexed: true },\n *     { name: 'to', type: 'address', indexed: true },\n *     { name: 'amount', type: 'uint256', indexed: false },\n *   ],\n * })\n * // @log: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n * ```\n *\n * @param abiItem - The ABI Item to compute the signature hash for.\n * @returns The {@link ox#Hash.(keccak256:function)} hash of the ABI item's signature.\n */\nexport function getSignatureHash<\n  abi extends Abi.Abi | readonly unknown[],\n  name extends Name<abi>,\n>(abi: abi | Abi.Abi | readonly unknown[], name: name): Hex.Hex\nexport function getSignatureHash(abiItem: string | AbiItem): Hex.Hex\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function getSignatureHash(\n  ...parameters:\n    | [abi: Abi.Abi | readonly unknown[], name: string]\n    | [string | AbiItem]\n): Hex.Hex {\n  const abiItem = (() => {\n    if (Array.isArray(parameters[0])) {\n      const [abi, name] = parameters as [Abi.Abi | readonly unknown[], string]\n      return fromAbi(abi, name)\n    }\n    return parameters[0] as string | AbiItem\n  })()\n  if (typeof abiItem !== 'string' && 'hash' in abiItem && abiItem.hash)\n    return abiItem.hash as Hex.Hex\n  return Hash.keccak256(Hex.fromString(getSignature(abiItem)))\n}\n\nexport declare namespace getSignatureHash {\n  type ErrorType =\n    | getSignature.ErrorType\n    | Hash.keccak256.ErrorType\n    | Hex.fromString.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Throws when ambiguous types are found on overloaded ABI items.\n *\n * @example\n * ```ts twoslash\n * import { Abi, AbiFunction } from 'ox'\n *\n * const foo = Abi.from(['function foo(address)', 'function foo(bytes20)'])\n * AbiFunction.fromAbi(foo, 'foo', {\n *   args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n * })\n * // @error: AbiItem.AmbiguityError: Found ambiguous types in overloaded ABI Items.\n * // @error: `bytes20` in `foo(bytes20)`, and\n * // @error: `address` in `foo(address)`\n * // @error: These types encode differently and cannot be distinguished at runtime.\n * // @error: Remove one of the ambiguous items in the ABI.\n * ```\n *\n * ### Solution\n *\n * Remove one of the ambiguous types from the ABI.\n *\n * ```ts twoslash\n * import { Abi, AbiFunction } from 'ox'\n *\n * const foo = Abi.from([\n *   'function foo(address)',\n *   'function foo(bytes20)' // [!code --]\n * ])\n * AbiFunction.fromAbi(foo, 'foo', {\n *   args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n * })\n * // @error: AbiItem.AmbiguityError: Found ambiguous types in overloaded ABI Items.\n * // @error: `bytes20` in `foo(bytes20)`, and\n * // @error: `address` in `foo(address)`\n * // @error: These types encode differently and cannot be distinguished at runtime.\n * // @error: Remove one of the ambiguous items in the ABI.\n * ```\n */\nexport class AmbiguityError extends Errors.BaseError {\n  override readonly name = 'AbiItem.AmbiguityError'\n  constructor(\n    x: { abiItem: Abi.Abi[number]; type: string },\n    y: { abiItem: Abi.Abi[number]; type: string },\n  ) {\n    super('Found ambiguous types in overloaded ABI Items.', {\n      metaMessages: [\n        // TODO: abitype to add support for signature-formatted ABI items.\n        `\\`${x.type}\\` in \\`${internal.normalizeSignature(abitype.formatAbiItem(x.abiItem))}\\`, and`,\n        `\\`${y.type}\\` in \\`${internal.normalizeSignature(abitype.formatAbiItem(y.abiItem))}\\``,\n        '',\n        'These types encode differently and cannot be distinguished at runtime.',\n        'Remove one of the ambiguous items in the ABI.',\n      ],\n    })\n  }\n}\n\n/**\n * Throws when an ABI item is not found in the ABI.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiFunction } from 'ox'\n *\n * const foo = Abi.from([\n *   'function foo(address)',\n *   'function bar(uint)'\n * ])\n * AbiFunction.fromAbi(foo, 'baz')\n * // @error: AbiItem.NotFoundError: ABI function with name \"baz\" not found.\n * ```\n *\n * ### Solution\n *\n * Ensure the ABI item exists on the ABI.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiFunction } from 'ox'\n *\n * const foo = Abi.from([\n *   'function foo(address)',\n *   'function bar(uint)',\n *   'function baz(bool)' // [!code ++]\n * ])\n * AbiFunction.fromAbi(foo, 'baz')\n * ```\n */\nexport class NotFoundError extends Errors.BaseError {\n  override readonly name = 'AbiItem.NotFoundError'\n  constructor({\n    name,\n    data,\n    type = 'item',\n  }: {\n    name?: string | undefined\n    data?: Hex.Hex | undefined\n    type?: string | undefined\n  }) {\n    const selector = (() => {\n      if (name) return ` with name \"${name}\"`\n      if (data) return ` with data \"${data}\"`\n      return ''\n    })()\n    super(`ABI ${type}${selector} not found.`)\n  }\n}\n\n/**\n * Throws when the selector size is invalid.\n *\n * @example\n * ```ts twoslash\n * import { Abi, AbiFunction } from 'ox'\n *\n * const foo = Abi.from([\n *   'function foo(address)',\n *   'function bar(uint)'\n * ])\n * AbiFunction.fromAbi(foo, '0xaaa')\n * // @error: AbiItem.InvalidSelectorSizeError: Selector size is invalid. Expected 4 bytes. Received 2 bytes (\"0xaaa\").\n * ```\n *\n * ### Solution\n *\n * Ensure the selector size is 4 bytes.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiFunction } from 'ox'\n *\n * const foo = Abi.from([\n *   'function foo(address)',\n *   'function bar(uint)'\n * ])\n * AbiFunction.fromAbi(foo, '0x7af82b1a')\n * ```\n */\nexport class InvalidSelectorSizeError extends Errors.BaseError {\n  override readonly name = 'AbiItem.InvalidSelectorSizeError'\n  constructor({ data }: { data: Hex.Hex }) {\n    super(\n      `Selector size is invalid. Expected 4 bytes. Received ${Hex.size(data)} bytes (\"${data}\").`,\n    )\n  }\n}\n", "import * as abitype from 'abitype'\nimport type * as Abi from './Abi.js'\nimport * as AbiItem from './AbiItem.js'\nimport * as AbiParameters from './AbiParameters.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport type * as internal from './internal/abiConstructor.js'\nimport type { IsNarrowable } from './internal/types.js'\n\n/** Root type for an {@link ox#AbiItem.AbiItem} with a `constructor` type. */\nexport type AbiConstructor = abitype.AbiConstructor\n\n/**\n * ABI-decodes the provided constructor input (`inputs`).\n *\n * @example\n * ```ts twoslash\n * import { AbiConstructor } from 'ox'\n *\n * const constructor = AbiConstructor.from('constructor(address, uint256)')\n *\n * const bytecode = '0x...'\n *\n * const data = AbiConstructor.encode(constructor, {\n *   bytecode,\n *   args: ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 123n],\n * })\n *\n * const decoded = AbiConstructor.decode(constructor, { // [!code focus]\n *   bytecode, // [!code focus]\n *   data, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @example\n * ### ABI-shorthand\n *\n * You can also specify an entire ABI object as a parameter to `AbiConstructor.decode`.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiConstructor } from 'ox'\n *\n * const abi = Abi.from([...])\n *\n * const data = AbiConstructor.encode(abi, {\n *   bytecode: '0x...',\n *   args: ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 123n],\n * })\n *\n * const decoded = AbiConstructor.decode(abi, { // [!code focus]\n *   bytecode: '0x...', // [!code focus]\n *   data, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param abiConstructor - The ABI Constructor to decode.\n * @param options - Decoding options.\n * @returns The decoded constructor inputs.\n */\nexport function decode<\n  const abi extends Abi.Abi | readonly unknown[],\n  abiConstructor extends\n    AbiConstructor = fromAbi.ReturnType<abi> extends AbiConstructor\n    ? fromAbi.ReturnType<abi>\n    : never,\n>(\n  abi: abi | Abi.Abi | readonly unknown[],\n  options: decode.Options,\n): decode.ReturnType<abiConstructor>\nexport function decode<const abiConstructor extends AbiConstructor>(\n  abiConstructor: abiConstructor | AbiConstructor,\n  options: decode.Options,\n): decode.ReturnType<abiConstructor>\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function decode(\n  ...parameters:\n    | [abi: Abi.Abi | readonly unknown[], options: decode.Options]\n    | [abiConstructor: AbiConstructor, options: decode.Options]\n): decode.ReturnType {\n  const [abiConstructor, options] = (() => {\n    if (Array.isArray(parameters[0])) {\n      const [abi, options] = parameters as [\n        Abi.Abi | readonly unknown[],\n        decode.Options,\n      ]\n      return [fromAbi(abi), options] as [AbiConstructor, decode.Options]\n    }\n    return parameters as [AbiConstructor, decode.Options]\n  })()\n\n  const { bytecode } = options\n  if (abiConstructor.inputs.length === 0) return undefined\n  const data = options.data.replace(bytecode, '0x') as Hex.Hex\n  return AbiParameters.decode(abiConstructor.inputs, data)\n}\n\nexport declare namespace decode {\n  interface Options {\n    /** The bytecode of the contract. */\n    bytecode: Hex.Hex\n    /** The encoded constructor. */\n    data: Hex.Hex\n  }\n\n  type ReturnType<abiConstructor extends AbiConstructor = AbiConstructor> =\n    | (abiConstructor['inputs']['length'] extends 0\n        ? undefined\n        : abitype.AbiParametersToPrimitiveTypes<abiConstructor['inputs']>)\n    | (IsNarrowable<abiConstructor, AbiConstructor> extends true\n        ? never\n        : undefined)\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * ABI-encodes the provided constructor input (`inputs`).\n *\n * @example\n * ```ts twoslash\n * import { AbiConstructor } from 'ox'\n *\n * const constructor = AbiConstructor.from('constructor(address, uint256)')\n *\n * const data = AbiConstructor.encode(constructor, {\n *   bytecode: '0x...',\n *   args: ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 123n],\n * })\n * ```\n *\n * @example\n * ### ABI-shorthand\n *\n * You can also specify an entire ABI object as a parameter to `AbiConstructor.encode`.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiConstructor } from 'ox'\n *\n * const abi = Abi.from([...])\n *\n * const data = AbiConstructor.encode(abi, { // [!code focus]\n *   bytecode: '0x...', // [!code focus]\n *   args: ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 123n], // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @example\n * ### End-to-end\n *\n * Below is an end-to-end example of using `AbiConstructor.encode` to encode the constructor of a contract and deploy it.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { AbiConstructor, Hex } from 'ox'\n *\n * // 1. Instantiate the ABI Constructor.\n * const constructor = AbiConstructor.from(\n *   'constructor(address owner, uint256 amount)',\n * )\n *\n * // 2. Encode the ABI Constructor.\n * const data = AbiConstructor.encode(constructor, {\n *   bytecode: '0x...',\n *   args: ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 123n],\n * })\n *\n * // 3. Deploy the contract.\n * const hash = await window.ethereum!.request({\n *   method: 'eth_sendTransaction',\n *   params: [{ data }],\n * })\n * ```\n *\n * :::note\n *\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\n * type of JSON-RPC interface.\n *\n * :::\n *\n * @param abiConstructor - The ABI Constructor to encode.\n * @param options - Encoding options.\n * @returns The encoded constructor.\n */\nexport function encode<\n  const abi extends Abi.Abi | readonly unknown[],\n  abiConstructor extends\n    AbiConstructor = fromAbi.ReturnType<abi> extends AbiConstructor\n    ? fromAbi.ReturnType<abi>\n    : never,\n>(\n  abi: abi | Abi.Abi | readonly unknown[],\n  options: encode.Options<abiConstructor>,\n): encode.ReturnType\nexport function encode<const abiConstructor extends AbiConstructor>(\n  abiConstructor: abiConstructor | AbiConstructor,\n  options: encode.Options<abiConstructor>,\n): encode.ReturnType\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function encode(\n  ...parameters:\n    | [abi: Abi.Abi | readonly unknown[], options: encode.Options]\n    | [abiConstructor: AbiConstructor, options: encode.Options]\n): encode.ReturnType {\n  const [abiConstructor, options] = (() => {\n    if (Array.isArray(parameters[0])) {\n      const [abi, options] = parameters as [\n        Abi.Abi | readonly unknown[],\n        encode.Options,\n      ]\n      return [fromAbi(abi), options] as [AbiConstructor, encode.Options]\n    }\n\n    return parameters as [AbiConstructor, encode.Options]\n  })()\n\n  const { bytecode, args } = options\n  return Hex.concat(\n    bytecode,\n    abiConstructor.inputs?.length && args?.length\n      ? AbiParameters.encode(abiConstructor.inputs, args as readonly unknown[])\n      : '0x',\n  )\n}\n\nexport declare namespace encode {\n  type Options<\n    abiConstructor extends AbiConstructor = AbiConstructor,\n    ///\n    args extends abitype.AbiParametersToPrimitiveTypes<\n      abiConstructor['inputs']\n    > = abitype.AbiParametersToPrimitiveTypes<abiConstructor['inputs']>,\n  > = {\n    /** The bytecode of the contract. */\n    bytecode: Hex.Hex\n    /** The constructor arguments to encode. */\n    args?: args | undefined\n  } & (readonly [] extends args\n    ? {}\n    : {\n        /** The constructor arguments to encode. */\n        args: args\n      })\n\n  type ReturnType = Hex.Hex\n\n  type ErrorType =\n    | Hex.concat.ErrorType\n    | AbiParameters.encode.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function format<const abiConstructor extends AbiConstructor>(\n  abiConstructor: abiConstructor,\n): format.ReturnType<abiConstructor>\n/**\n * Formats an {@link ox#AbiConstructor.AbiConstructor} into a **Human Readable ABI Function**.\n *\n * @example\n * ```ts twoslash\n * import { AbiConstructor } from 'ox'\n *\n * const formatted = AbiConstructor.format({\n *   inputs: [\n *     { name: 'owner', type: 'address' },\n *   ],\n *   payable: false,\n *   stateMutability: 'nonpayable',\n *   type: 'constructor',\n * })\n *\n * formatted\n * //    ^?\n *\n *\n * ```\n *\n * @param abiConstructor - The ABI Constructor to format.\n * @returns The formatted ABI Constructor.\n */\nexport function format(abiConstructor: AbiConstructor): string\n/** @internal */\nexport function format(abiConstructor: AbiConstructor): format.ReturnType {\n  return abitype.formatAbiItem(abiConstructor)\n}\n\nexport declare namespace format {\n  type ReturnType<abiConstructor extends AbiConstructor = AbiConstructor> =\n    abitype.FormatAbiItem<abiConstructor>\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function from<\n  const abiConstructor extends AbiConstructor | string | readonly string[],\n>(\n  abiConstructor: (abiConstructor | string | readonly string[]) &\n    (\n      | (abiConstructor extends string\n          ? internal.Signature<abiConstructor>\n          : never)\n      | (abiConstructor extends readonly string[]\n          ? internal.Signatures<abiConstructor>\n          : never)\n      | AbiConstructor\n    ),\n): from.ReturnType<abiConstructor>\n/**\n * Parses an arbitrary **JSON ABI Constructor** or **Human Readable ABI Constructor** into a typed {@link ox#AbiConstructor.AbiConstructor}.\n *\n * @example\n * ### JSON ABIs\n *\n * ```ts twoslash\n * import { AbiConstructor } from 'ox'\n *\n * const constructor = AbiConstructor.from({\n *   inputs: [\n *     { name: 'owner', type: 'address' },\n *   ],\n *   payable: false,\n *   stateMutability: 'nonpayable',\n *   type: 'constructor',\n * })\n *\n * constructor\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Human Readable ABIs\n *\n * A Human Readable ABI can be parsed into a typed ABI object:\n *\n * ```ts twoslash\n * import { AbiConstructor } from 'ox'\n *\n * const constructor = AbiConstructor.from(\n *   'constructor(address owner)' // [!code hl]\n * )\n *\n * constructor\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * It is possible to specify `struct`s along with your definitions:\n *\n * ```ts twoslash\n * import { AbiConstructor } from 'ox'\n *\n * const constructor = AbiConstructor.from([\n *   'struct Foo { address owner; uint256 amount; }', // [!code hl]\n *   'constructor(Foo foo)',\n * ])\n *\n * constructor\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n *\n *\n * @param abiConstructor - The ABI Constructor to parse.\n * @returns Typed ABI Constructor.\n */\nexport function from(\n  abiConstructor: AbiConstructor | string | readonly string[],\n): AbiConstructor\n/** @internal */\nexport function from(\n  abiConstructor: AbiConstructor | string | readonly string[],\n): from.ReturnType {\n  return AbiItem.from(abiConstructor as AbiConstructor)\n}\n\nexport declare namespace from {\n  type ReturnType<\n    abiConstructor extends\n      | AbiConstructor\n      | string\n      | readonly string[] = AbiConstructor,\n  > = AbiItem.from.ReturnType<abiConstructor>\n\n  type ErrorType = AbiItem.from.ErrorType | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function fromAbi<const abi extends Abi.Abi | readonly unknown[]>(\n  abi: abi | Abi.Abi | readonly unknown[],\n): fromAbi.ReturnType<abi>\n/**\n * Extracts an {@link ox#AbiConstructor.AbiConstructor} from an {@link ox#Abi.Abi} given a name and optional arguments.\n *\n * @example\n * ### Extracting by Name\n *\n * ABI Events can be extracted by their name using the `name` option:\n *\n * ```ts twoslash\n * import { Abi, AbiConstructor } from 'ox'\n *\n * const abi = Abi.from([\n *   'constructor(address owner)',\n *   'function foo()',\n *   'event Transfer(address owner, address to, uint256 tokenId)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n *\n * const item = AbiConstructor.fromAbi(abi) // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @returns The ABI constructor.\n */\nexport function fromAbi(abi: Abi.Abi | readonly unknown[]): AbiConstructor\n/** @internal */\nexport function fromAbi(abi: Abi.Abi | readonly unknown[]): fromAbi.ReturnType {\n  const item = (abi as Abi.Abi).find((item) => item.type === 'constructor')\n  if (!item) throw new AbiItem.NotFoundError({ name: 'constructor' })\n  return item\n}\n\nexport declare namespace fromAbi {\n  type ReturnType<abi extends Abi.Abi | readonly unknown[] = Abi.Abi> = Extract<\n    abi[number],\n    { type: 'constructor' }\n  >\n\n  type ErrorType = AbiItem.NotFoundError | Errors.GlobalErrorType\n}\n", "import * as abitype from 'abitype'\nimport type * as Abi from './Abi.js'\nimport * as AbiItem from './AbiItem.js'\nimport * as AbiParameters from './AbiParameters.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport type * as internal from './internal/abiFunction.js'\nimport type * as AbiItem_internal from './internal/abiItem.js'\nimport type * as AbiParameters_internal from './internal/abiParameters.js'\nimport type { IsNarrowable } from './internal/types.js'\n\n/** Root type for an {@link ox#AbiItem.AbiItem} with a `function` type. */\nexport type AbiFunction = abitype.AbiFunction & {\n  hash?: Hex.Hex | undefined\n  overloads?: readonly AbiFunction[] | undefined\n}\n\n/**\n * Extracts an {@link ox#AbiFunction.AbiFunction} item from an {@link ox#Abi.Abi}, given a name.\n *\n * @example\n * ```ts twoslash\n * import { Abi, AbiFunction } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo(string)',\n *   'function bar(uint256)',\n * ])\n *\n * type Foo = AbiFunction.FromAbi<typeof abi, 'foo'>\n * //   ^?\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n */\nexport type FromAbi<\n  abi extends Abi.Abi,\n  name extends ExtractNames<abi>,\n> = abitype.ExtractAbiFunction<abi, name>\n\n/**\n * Extracts the names of all {@link ox#AbiFunction.AbiFunction} items in an {@link ox#Abi.Abi}.\n *\n * @example\n * ```ts twoslash\n * import { Abi, AbiFunction } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo(string)',\n *   'function bar(uint256)',\n * ])\n *\n * type names = AbiFunction.Name<typeof abi>\n * //   ^?\n *\n *\n * ```\n */\nexport type Name<abi extends Abi.Abi | readonly unknown[] = Abi.Abi> =\n  abi extends Abi.Abi ? ExtractNames<abi> : string\n\nexport type ExtractNames<\n  abi extends Abi.Abi,\n  abiStateMutability extends\n    abitype.AbiStateMutability = abitype.AbiStateMutability,\n> = abitype.ExtractAbiFunctionNames<abi, abiStateMutability>\n\n/**\n * ABI-decodes function arguments according to the ABI Item's input types (`inputs`).\n *\n * @example\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const approve = AbiFunction.from('function approve(address, uint256)')\n *\n * const data = AbiFunction.encodeData(\n *   approve,\n *   ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 69420n]\n * )\n * // '0x095ea7b3000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa960450000000000000000000000000000000000000000000000000000000000010f2c'\n *\n * const input = AbiFunction.decodeData(approve, data) // [!code focus]\n * // @log: ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 69420n]\n * ```\n *\n * @example\n * ### ABI-shorthand\n *\n * You can also specify an entire ABI object and a function name as parameters to {@link ox#AbiFunction.(decodeData:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiFunction } from 'ox'\n *\n * const abi = Abi.from([...])\n * const data = '0x...\n *\n * const input = AbiFunction.decodeData(\n *   abi, // [!code focus]\n *   'approve', // [!code focus]\n *   data\n * )\n * // @log: ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 69420n]\n * ```\n *\n * @param abiFunction - The ABI Item to decode.\n * @param data - The data to decode.\n */\nexport function decodeData<\n  const abi extends Abi.Abi | readonly unknown[],\n  name extends Name<abi>,\n  const args extends\n    | AbiItem_internal.ExtractArgs<abi, name>\n    | undefined = undefined,\n  //\n  abiFunction extends AbiFunction = AbiItem.fromAbi.ReturnType<\n    abi,\n    name,\n    args,\n    AbiFunction\n  >,\n  allNames = Name<abi>,\n>(\n  abi: abi | Abi.Abi | readonly unknown[],\n  name: Hex.Hex | (name extends allNames ? name : never),\n  data: Hex.Hex,\n): decodeData.ReturnType<abiFunction>\nexport function decodeData<const abiItem extends AbiFunction>(\n  abiFunction: abiItem | AbiFunction,\n  data: Hex.Hex,\n): decodeData.ReturnType<abiItem>\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function decodeData(\n  ...parameters:\n    | [abi: Abi.Abi | readonly unknown[], name: Hex.Hex | string, data: Hex.Hex]\n    | [abiFunction: AbiFunction, data: Hex.Hex]\n) {\n  const [abiFunction, data] = (() => {\n    if (Array.isArray(parameters[0])) {\n      const [abi, name, data] = parameters as [\n        Abi.Abi | readonly unknown[],\n        Hex.Hex | string,\n        Hex.Hex,\n      ]\n      return [fromAbi(abi, name), data]\n    }\n    return parameters as [AbiFunction, Hex.Hex]\n  })()\n\n  const { overloads } = abiFunction\n\n  if (Hex.size(data) < 4) throw new AbiItem.InvalidSelectorSizeError({ data })\n  if (abiFunction.inputs.length === 0) return undefined\n\n  const item = overloads\n    ? fromAbi([abiFunction, ...overloads], data as never)\n    : abiFunction\n\n  if (Hex.size(data) <= 4) return undefined\n  return AbiParameters.decode(item.inputs, Hex.slice(data, 4))\n}\n\nexport declare namespace decodeData {\n  type ReturnType<abiFunction extends AbiFunction = AbiFunction> = IsNarrowable<\n    abiFunction,\n    AbiFunction\n  > extends true\n    ? abiFunction['inputs'] extends readonly []\n      ? undefined\n      :\n          | AbiParameters_internal.ToPrimitiveTypes<abiFunction['inputs']>\n          | (abiFunction['overloads'] extends readonly AbiFunction[]\n              ? AbiParameters_internal.ToPrimitiveTypes<\n                  abiFunction['overloads'][number]['inputs']\n                >\n              : never)\n    : unknown\n\n  type ErrorType =\n    | fromAbi.ErrorType\n    | AbiParameters.decode.ErrorType\n    | Hex.size.ErrorType\n    | Hex.slice.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * ABI-decodes a function's result according to the ABI Item's output types (`outputs`).\n *\n * :::tip\n *\n * This function is typically used to decode contract function return values (e.g. the response of an `eth_call` or the `input` property of a Transaction).\n *\n * See the [End-to-end Example](#end-to-end).\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const data = '0x000000000000000000000000000000000000000000000000000000000000002a'\n *\n * const totalSupply = AbiFunction.from('function totalSupply() returns (uint256)')\n *\n * const output = AbiFunction.decodeResult(totalSupply, data)\n * // @log: 42n\n * ```\n *\n * @example\n * You can extract an ABI Function from a JSON ABI with {@link ox#AbiFunction.(fromAbi:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiFunction } from 'ox'\n *\n * const data = '0x000000000000000000000000000000000000000000000000000000000000002a'\n *\n * const erc20Abi = Abi.from([...]) // [!code hl]\n * const totalSupply = AbiFunction.fromAbi(erc20Abi, 'totalSupply') // [!code hl]\n *\n * const output = AbiFunction.decodeResult(totalSupply, data)\n * // @log: 42n\n * ```\n *\n * @example\n * ### ABI-shorthand\n *\n * You can also specify an entire ABI object and a function name as parameters to {@link ox#AbiFunction.(decodeResult:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiFunction } from 'ox'\n *\n * const data = '0x000000000000000000000000000000000000000000000000000000000000002a'\n *\n * const erc20Abi = Abi.from([...])\n *\n * const output = AbiFunction.decodeResult(\n *   erc20Abi, // [!code focus]\n *   'totalSupply', // [!code focus]\n *   data\n * )\n * // @log: 42n\n * ```\n *\n * @example\n * ### End-to-end\n *\n * Below is an end-to-end example of using `AbiFunction.decodeResult` to decode the result of a `balanceOf` contract call on the [Wagmi Mint Example contract](https://etherscan.io/address/0xfba3912ca04dd458c843e2ee08967fc04f3579c2).\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { Abi, AbiFunction } from 'ox'\n *\n * // 1. Extract the Function from the Contract's ABI.\n * const abi = Abi.from([\n *   // ...\n *   {\n *     name: 'balanceOf',\n *     type: 'function',\n *     inputs: [{ name: 'account', type: 'address' }],\n *     outputs: [{ name: 'balance', type: 'uint256' }],\n *     stateMutability: 'view',\n *   },\n *   // ...\n * ])\n * const balanceOf = AbiFunction.fromAbi(abi, 'balanceOf')\n *\n * // 2. Encode the Function Input.\n * const data = AbiFunction.encodeData(\n *   balanceOf,\n *   ['0xd2135CfB216b74109775236E36d4b433F1DF507B']\n * )\n *\n * // 3. Perform the Contract Call.\n * const response = await window.ethereum!.request({\n *   method: 'eth_call',\n *   params: [\n *     {\n *       data,\n *       to: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *     },\n *   ],\n * })\n *\n * // 4. Decode the Function Output. // [!code focus]\n * const balance = AbiFunction.decodeResult(balanceOf, response) // [!code focus]\n * // @log: 42n\n * ```\n *\n * :::note\n *\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\n * type of JSON-RPC interface.\n *\n * :::\n *\n * @param abiFunction - ABI Function to decode\n * @param data - ABI-encoded function output\n * @param options - Decoding options\n * @returns Decoded function output\n */\nexport function decodeResult<\n  const abi extends Abi.Abi | readonly unknown[],\n  name extends Name<abi>,\n  const args extends\n    | AbiItem_internal.ExtractArgs<abi, name>\n    | undefined = undefined,\n  //\n  abiFunction extends AbiFunction = AbiItem.fromAbi.ReturnType<\n    abi,\n    name,\n    args,\n    AbiFunction\n  >,\n  allNames = Name<abi>,\n  as extends 'Object' | 'Array' = 'Array',\n>(\n  abi: abi | Abi.Abi | readonly unknown[],\n  name: Hex.Hex | (name extends allNames ? name : never),\n  data: Hex.Hex,\n  options?: decodeResult.Options<as> | undefined,\n): decodeResult.ReturnType<abiFunction, as>\nexport function decodeResult<\n  const abiFunction extends AbiFunction,\n  as extends 'Object' | 'Array' = 'Array',\n>(\n  abiFunction: abiFunction | AbiFunction,\n  data: Hex.Hex,\n  options?: decodeResult.Options<as> | undefined,\n): decodeResult.ReturnType<abiFunction, as>\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function decodeResult(\n  ...parameters:\n    | [\n        abi: Abi.Abi | readonly unknown[],\n        name: Hex.Hex | string,\n        data: Hex.Hex,\n        options?: decodeResult.Options | undefined,\n      ]\n    | [\n        abiFunction: AbiFunction,\n        data: Hex.Hex,\n        options?: decodeResult.Options | undefined,\n      ]\n) {\n  const [abiFunction, data, options = {}] = (() => {\n    if (Array.isArray(parameters[0])) {\n      const [abi, name, data, options] = parameters as [\n        Abi.Abi | readonly unknown[],\n        Hex.Hex | string,\n        Hex.Hex,\n        decodeResult.Options | undefined,\n      ]\n      return [fromAbi(abi, name), data, options]\n    }\n    return parameters as [\n      AbiFunction,\n      Hex.Hex,\n      decodeResult.Options | undefined,\n    ]\n  })()\n\n  const values = AbiParameters.decode(abiFunction.outputs, data, options)\n  if (values && Object.keys(values).length === 0) return undefined\n  if (values && Object.keys(values).length === 1) {\n    if (Array.isArray(values)) return values[0]\n    return Object.values(values)[0]\n  }\n  return values\n}\n\nexport declare namespace decodeResult {\n  type Options<as extends 'Object' | 'Array' = 'Array'> = {\n    /**\n     * Whether the decoded values should be returned as an `Object` or `Array`.\n     *\n     * @default \"Array\"\n     */\n    as?: as | 'Array' | 'Object' | undefined\n  }\n\n  type ReturnType<\n    abiFunction extends AbiFunction = AbiFunction,\n    as extends 'Object' | 'Array' = 'Array',\n  > = IsNarrowable<abiFunction, AbiFunction> extends true\n    ? abiFunction['outputs'] extends readonly []\n      ? undefined\n      : abiFunction['outputs'] extends readonly [\n            infer type extends abitype.AbiParameter,\n          ]\n        ? abitype.AbiParameterToPrimitiveType<type>\n        : AbiParameters.decode.ReturnType<\n              abiFunction['outputs'],\n              as\n            > extends infer types\n          ? types extends readonly []\n            ? undefined\n            : types extends readonly [infer type]\n              ? type\n              : types\n          : never\n    : unknown\n\n  type ErrorType = AbiParameters.decode.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * ABI-encodes function arguments (`inputs`), prefixed with the 4 byte function selector.\n *\n * :::tip\n *\n * This function is typically used to encode a contract function and its arguments for contract calls (e.g. `data` parameter of an `eth_call` or `eth_sendTransaction`).\n *\n * See the [End-to-end Example](#end-to-end).\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const approve = AbiFunction.from('function approve(address, uint256)')\n *\n * const data = AbiFunction.encodeData( // [!code focus]\n *   approve, // [!code focus]\n *   ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 69420n] // [!code focus]\n * ) // [!code focus]\n * // @log: '0x095ea7b3000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa960450000000000000000000000000000000000000000000000000000000000010f2c'\n * ```\n *\n * @example\n * You can extract an ABI Function from a JSON ABI with {@link ox#AbiFunction.(fromAbi:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiFunction } from 'ox'\n *\n * const erc20Abi = Abi.from([...]) // [!code hl]\n * const approve = AbiFunction.fromAbi(erc20Abi, 'approve') // [!code hl]\n *\n * const data = AbiFunction.encodeData(\n *   approve,\n *   ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 69420n]\n * )\n * // @log: '0x095ea7b3000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa960450000000000000000000000000000000000000000000000000000000000010f2c'\n * ```\n *\n * @example\n * ### ABI-shorthand\n *\n * You can specify an entire ABI object and a function name as parameters to {@link ox#AbiFunction.(encodeData:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiFunction } from 'ox'\n *\n * const erc20Abi = Abi.from([...])\n *\n * const data = AbiFunction.encodeData(\n *   erc20Abi, // [!code focus]\n *   'approve', // [!code focus]\n *   ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 69420n]\n * )\n * ```\n *\n * @example\n * ### End-to-end\n *\n * Below is an end-to-end example of using `AbiFunction.encodeData` to encode the input of a `balanceOf` contract call on the [Wagmi Mint Example contract](https://etherscan.io/address/0xfba3912ca04dd458c843e2ee08967fc04f3579c2).\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { Abi, AbiFunction } from 'ox'\n *\n * // 1. Extract the Function from the Contract's ABI.\n * const abi = Abi.from([\n *   // ...\n *   {\n *     name: 'balanceOf',\n *     type: 'function',\n *     inputs: [{ name: 'account', type: 'address' }],\n *     outputs: [{ name: 'balance', type: 'uint256' }],\n *     stateMutability: 'view',\n *   },\n *   // ...\n * ])\n * const balanceOf = AbiFunction.fromAbi(abi, 'balanceOf')\n *\n * // 2. Encode the Function Input. // [!code focus]\n * const data = AbiFunction.encodeData( // [!code focus]\n *   balanceOf, // [!code focus]\n *   ['0xd2135CfB216b74109775236E36d4b433F1DF507B'] // [!code focus]\n * ) // [!code focus]\n *\n * // 3. Perform the Contract Call.\n * const response = await window.ethereum!.request({\n *   method: 'eth_call',\n *   params: [\n *     {\n *       data,\n *       to: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *     },\n *   ],\n * })\n *\n * // 4. Decode the Function Output.\n * const balance = AbiFunction.decodeResult(balanceOf, response)\n * ```\n *\n * :::note\n *\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\n * type of JSON-RPC interface.\n *\n * :::\n *\n * @param abiFunction - ABI Function to encode\n * @param args - Function arguments\n * @returns ABI-encoded function name and arguments\n */\nexport function encodeData<\n  const abi extends Abi.Abi | readonly unknown[],\n  name extends Name<abi>,\n  const args extends\n    | AbiItem_internal.ExtractArgs<abi, name>\n    | undefined = undefined,\n  //\n  abiFunction extends AbiFunction = AbiItem.fromAbi.ReturnType<\n    abi,\n    name,\n    args,\n    AbiFunction\n  >,\n  allNames = Name<abi>,\n>(\n  abi: abi | Abi.Abi | readonly unknown[],\n  name: Hex.Hex | (name extends allNames ? name : never),\n  ...args: encodeData.Args<abiFunction>\n): Hex.Hex\nexport function encodeData<const abiFunction extends AbiFunction>(\n  abiFunction: abiFunction | AbiFunction,\n  ...args: encodeData.Args<abiFunction>\n): Hex.Hex\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function encodeData(\n  ...parameters:\n    | [\n        abi: Abi.Abi | readonly unknown[],\n        name: Hex.Hex | string,\n        ...args: readonly unknown[],\n      ]\n    | [abiFunction: AbiFunction, ...args: readonly unknown[]]\n) {\n  const [abiFunction, args = []] = (() => {\n    if (Array.isArray(parameters[0])) {\n      const [abi, name, args] = parameters as [\n        Abi.Abi | readonly unknown[],\n        Hex.Hex | string,\n        readonly unknown[],\n      ]\n      return [fromAbi(abi, name, { args }), args]\n    }\n    const [abiFunction, args] = parameters as [AbiFunction, readonly unknown[]]\n    return [abiFunction, args]\n  })()\n\n  const { overloads } = abiFunction\n\n  const item = overloads\n    ? (fromAbi([abiFunction as AbiFunction, ...overloads], abiFunction.name, {\n        args,\n      }) as AbiFunction)\n    : abiFunction\n\n  const selector = getSelector(item)\n\n  const data =\n    args.length > 0 ? AbiParameters.encode(item.inputs, args) : undefined\n\n  return data ? Hex.concat(selector, data) : selector\n}\n\nexport declare namespace encodeData {\n  type Args<abiFunction extends AbiFunction = AbiFunction> = IsNarrowable<\n    abiFunction,\n    AbiFunction\n  > extends true\n    ?\n        | (abitype.AbiParametersToPrimitiveTypes<\n            abiFunction['inputs']\n          > extends readonly []\n            ? []\n            : [abitype.AbiParametersToPrimitiveTypes<abiFunction['inputs']>])\n        | (abiFunction['overloads'] extends readonly AbiFunction[]\n            ? [\n                abitype.AbiParametersToPrimitiveTypes<\n                  abiFunction['overloads'][number]['inputs']\n                >,\n              ]\n            : [])\n    : readonly unknown[]\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * ABI-encodes a function's result (`outputs`).\n *\n * @example\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const totalSupply = AbiFunction.from('function totalSupply() returns (uint256)')\n * const output = AbiFunction.decodeResult(totalSupply, '0x000000000000000000000000000000000000000000000000000000000000002a')\n * // 42n\n *\n * const data = AbiFunction.encodeResult(totalSupply, 42n) // [!code focus]\n * // @log: '0x000000000000000000000000000000000000000000000000000000000000002a'\n * ```\n *\n * @example\n * ### ABI-shorthand\n *\n * You can also specify an entire ABI object and a function name as parameters to {@link ox#AbiFunction.(encodeResult:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiFunction } from 'ox'\n *\n * const abi = Abi.from([...])\n *\n * const data = AbiFunction.encodeResult(\n *   abi, // [!code focus]\n *   'totalSupply', // [!code focus]\n *   42n\n * )\n * // @log: '0x000000000000000000000000000000000000000000000000000000000000002a'\n * ```\n *\n * @param abiFunction - The ABI item to encode the function output for.\n * @param output - The function output to encode.\n * @param options - Encoding options.\n * @returns The encoded function output.\n */\nexport function encodeResult<\n  const abi extends Abi.Abi | readonly unknown[],\n  name extends Name<abi>,\n  const args extends\n    | AbiItem_internal.ExtractArgs<abi, name>\n    | undefined = undefined,\n  as extends 'Object' | 'Array' = 'Array',\n  //\n  abiFunction extends AbiFunction = AbiItem.fromAbi.ReturnType<\n    abi,\n    name,\n    args,\n    AbiFunction\n  >,\n  allNames = Name<abi>,\n>(\n  abi: abi | Abi.Abi | readonly unknown[],\n  name: Hex.Hex | (name extends allNames ? name : never),\n  output: encodeResult.Output<abiFunction, as>,\n  options?: encodeResult.Options<as>,\n): Hex.Hex\nexport function encodeResult<\n  const abiFunction extends AbiFunction,\n  as extends 'Object' | 'Array' = 'Array',\n>(\n  abiFunction: abiFunction | AbiFunction,\n  output: encodeResult.Output<abiFunction, as>,\n  options?: encodeResult.Options<as>,\n): Hex.Hex\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function encodeResult(\n  ...parameters:\n    | [\n        abi: Abi.Abi | readonly unknown[],\n        name: Hex.Hex | string,\n        output: any,\n        options?: encodeResult.Options<any> | undefined,\n      ]\n    | [\n        abiFunction: AbiFunction,\n        output: any,\n        options?: encodeResult.Options<any> | undefined,\n      ]\n) {\n  const [abiFunction, output, options = {}] = (() => {\n    if (Array.isArray(parameters[0])) {\n      const [abi, name, output, options] = parameters as [\n        Abi.Abi | readonly unknown[],\n        Hex.Hex | string,\n        any,\n        encodeResult.Options<any> | undefined,\n      ]\n      return [fromAbi(abi, name), output, options]\n    }\n    return parameters as [\n      AbiFunction,\n      any,\n      encodeResult.Options<any> | undefined,\n    ]\n  })()\n\n  const { as = 'Array' } = options\n\n  const values = (() => {\n    if (abiFunction.outputs.length === 1) return [output]\n    if (Array.isArray(output)) return output\n    if (as === 'Object') return Object.values(output as any)\n    return [output]\n  })()\n\n  return AbiParameters.encode(abiFunction.outputs, values)\n}\n\nexport declare namespace encodeResult {\n  type Output<\n    abiFunction extends AbiFunction = AbiFunction,\n    as extends 'Object' | 'Array' = 'Array',\n  > = abiFunction['outputs'] extends readonly []\n    ? never\n    : abiFunction['outputs']['length'] extends 1\n      ? AbiParameters_internal.ToPrimitiveTypes<abiFunction['outputs']>[0]\n      : as extends 'Object'\n        ? AbiParameters_internal.ToObject<abiFunction['outputs']>\n        : AbiParameters_internal.ToPrimitiveTypes<abiFunction['outputs']>\n\n  type Options<as extends 'Object' | 'Array'> = {\n    as?: as | 'Object' | 'Array' | undefined\n  }\n\n  type ErrorType = AbiParameters.encode.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Formats an {@link ox#AbiFunction.AbiFunction} into a **Human Readable ABI Function**.\n *\n * @example\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const formatted = AbiFunction.format({\n *   type: 'function',\n *   name: 'approve',\n *   stateMutability: 'nonpayable',\n *   inputs: [\n *     {\n *       name: 'spender',\n *       type: 'address',\n *     },\n *     {\n *       name: 'amount',\n *       type: 'uint256',\n *     },\n *   ],\n *   outputs: [{ type: 'bool' }],\n * })\n *\n * formatted\n * //    ^?\n *\n *\n * ```\n *\n * @param abiFunction - The ABI Function to format.\n * @returns The formatted ABI Function.\n */\nexport function format<const abiFunction extends AbiFunction>(\n  abiFunction: abiFunction | AbiFunction,\n): abitype.FormatAbiItem<abiFunction> {\n  return abitype.formatAbiItem(abiFunction) as never\n}\n\nexport declare namespace format {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Parses an arbitrary **JSON ABI Function** or **Human Readable ABI Function** into a typed {@link ox#AbiFunction.AbiFunction}.\n *\n * @example\n * ### JSON ABIs\n *\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const approve = AbiFunction.from({\n *   type: 'function',\n *   name: 'approve',\n *   stateMutability: 'nonpayable',\n *   inputs: [\n *     {\n *       name: 'spender',\n *       type: 'address',\n *     },\n *     {\n *       name: 'amount',\n *       type: 'uint256',\n *     },\n *   ],\n *   outputs: [{ type: 'bool' }],\n * })\n *\n * approve\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Human Readable ABIs\n *\n * A Human Readable ABI can be parsed into a typed ABI object:\n *\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const approve = AbiFunction.from(\n *   'function approve(address spender, uint256 amount) returns (bool)' // [!code hl]\n * )\n *\n * approve\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * It is possible to specify `struct`s along with your definitions:\n *\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const approve = AbiFunction.from([\n *   'struct Foo { address spender; uint256 amount; }', // [!code hl]\n *   'function approve(Foo foo) returns (bool)',\n * ])\n *\n * approve\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n *\n *\n * @param abiFunction - The ABI Function to parse.\n * @returns Typed ABI Function.\n */\nexport function from<\n  const abiFunction extends AbiFunction | string | readonly string[],\n>(\n  abiFunction: (abiFunction | AbiFunction | string | readonly string[]) &\n    (\n      | (abiFunction extends string ? internal.Signature<abiFunction> : never)\n      | (abiFunction extends readonly string[]\n          ? internal.Signatures<abiFunction>\n          : never)\n      | AbiFunction\n    ),\n  options: from.Options = {},\n): from.ReturnType<abiFunction> {\n  return AbiItem.from(abiFunction as AbiFunction, options) as never\n}\n\nexport declare namespace from {\n  type Options = {\n    /**\n     * Whether or not to prepare the extracted function (optimization for encoding performance).\n     * When `true`, the `hash` property is computed and included in the returned value.\n     *\n     * @default true\n     */\n    prepare?: boolean | undefined\n  }\n\n  type ReturnType<\n    abiFunction extends AbiFunction | string | readonly string[],\n  > = AbiItem.from.ReturnType<abiFunction>\n\n  type ErrorType = AbiItem.from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Extracts an {@link ox#AbiFunction.AbiFunction} from an {@link ox#Abi.Abi} given a name and optional arguments.\n *\n * @example\n * ### Extracting by Name\n *\n * ABI Functions can be extracted by their name using the `name` option:\n *\n * ```ts twoslash\n * import { Abi, AbiFunction } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'event Transfer(address owner, address to, uint256 tokenId)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n *\n * const item = AbiFunction.fromAbi(abi, 'foo') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Extracting by Selector\n *\n * ABI Functions can be extract by their selector when {@link ox#Hex.Hex} is provided to `name`.\n *\n * ```ts twoslash\n * import { Abi, AbiFunction } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'event Transfer(address owner, address to, uint256 tokenId)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n * const item = AbiFunction.fromAbi(abi, '0x095ea7b3') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * :::note\n *\n * Extracting via a hex selector is useful when extracting an ABI Function from an `eth_call` RPC response or\n * from a Transaction `input`.\n *\n * :::\n *\n * @param abi - The ABI to extract from.\n * @param name - The name (or selector) of the ABI item to extract.\n * @param options - Extraction options.\n * @returns The ABI item.\n */\nexport function fromAbi<\n  const abi extends Abi.Abi | readonly unknown[],\n  name extends Name<abi>,\n  const args extends\n    | AbiItem_internal.ExtractArgs<abi, name>\n    | undefined = undefined,\n  //\n  allNames = Name<abi>,\n>(\n  abi: abi | Abi.Abi | readonly unknown[],\n  name: Hex.Hex | (name extends allNames ? name : never),\n  options?: AbiItem.fromAbi.Options<\n    abi,\n    name,\n    args,\n    AbiItem_internal.ExtractArgs<abi, name>\n  >,\n): AbiItem.fromAbi.ReturnType<abi, name, args, AbiFunction> {\n  const item = AbiItem.fromAbi(abi, name, options as any)\n  if (item.type !== 'function')\n    throw new AbiItem.NotFoundError({ name, type: 'function' })\n  return item as never\n}\n\nexport declare namespace fromAbi {\n  type ErrorType = AbiItem.fromAbi.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Computes the [4-byte selector](https://solidity-by-example.org/function-selector/) for an {@link ox#AbiFunction.AbiFunction}.\n *\n * Useful for computing function selectors for calldata.\n *\n * @example\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const selector = AbiFunction.getSelector('function ownerOf(uint256 tokenId)')\n * // @log: '0x6352211e'\n * ```\n *\n * @example\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const selector = AbiFunction.getSelector({\n *   inputs: [{ type: 'uint256' }],\n *   name: 'ownerOf',\n *   outputs: [],\n *   stateMutability: 'view',\n *   type: 'function'\n * })\n * // @log: '0x6352211e'\n * ```\n *\n * @param abiItem - The ABI item to compute the selector for.\n * @returns The first 4 bytes of the {@link ox#Hash.(keccak256:function)} hash of the function signature.\n */\nexport function getSelector(abiItem: string | AbiFunction): Hex.Hex {\n  return AbiItem.getSelector(abiItem)\n}\n\nexport declare namespace getSelector {\n  type ErrorType = AbiItem.getSelector.ErrorType | Errors.GlobalErrorType\n}\n", "export const entryPoint06Address =\n  '0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789' as const\nexport const entryPoint07Address =\n  '0x0000000071727De22E5E9d8BAf0edAc6f37da032' as const\nexport const entryPoint08Address =\n  '0x4337084D9E255Ff0702461CF8895CE9E3b5Ff108' as const\n\nexport const ethAddress = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' as const\n\nexport const zeroAddress = '0x0000000000000000000000000000000000000000' as const\n", "import type { AbiStateMutability, Address, Narrow } from 'abitype'\nimport * as AbiConstructor from 'ox/AbiConstructor'\nimport * as AbiFunction from 'ox/AbiFunction'\n\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { ethAddress, zeroAddress } from '../../constants/address.js'\nimport { deploylessCallViaBytecodeBytecode } from '../../constants/contracts.js'\nimport { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Block } from '../../types/block.js'\nimport type { Call, Calls } from '../../types/calls.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Log } from '../../types/log.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { MulticallResults } from '../../types/multicall.js'\nimport type { StateOverride } from '../../types/stateOverride.js'\nimport type { Mutable } from '../../types/utils.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport { hexToBigInt } from '../../utils/index.js'\nimport {\n  type CreateAccessListErrorType,\n  createAccessList,\n} from './createAccessList.js'\nimport {\n  type SimulateBlocksErrorType,\n  type SimulateBlocksParameters,\n  simulateBlocks,\n} from './simulateBlocks.js'\n\nconst getBalanceCode =\n  '0x6080604052348015600e575f80fd5b5061016d8061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063f8b2cb4f1461002d575b5f80fd5b610047600480360381019061004291906100db565b61005d565b604051610054919061011e565b60405180910390f35b5f8173ffffffffffffffffffffffffffffffffffffffff16319050919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100aa82610081565b9050919050565b6100ba816100a0565b81146100c4575f80fd5b50565b5f813590506100d5816100b1565b92915050565b5f602082840312156100f0576100ef61007d565b5b5f6100fd848285016100c7565b91505092915050565b5f819050919050565b61011881610106565b82525050565b5f6020820190506101315f83018461010f565b9291505056fea26469706673582212203b9fe929fe995c7cf9887f0bdba8a36dd78e8b73f149b17d2d9ad7cd09d2dc6264736f6c634300081a0033'\n\nexport type SimulateCallsParameters<\n  calls extends readonly unknown[] = readonly unknown[],\n  account extends Account | Address | undefined = Account | Address | undefined,\n> = Omit<SimulateBlocksParameters, 'blocks' | 'returnFullTransactions'> & {\n  /** Account attached to the calls (msg.sender). */\n  account?: account | undefined\n  /** Calls to simulate. */\n  calls: Calls<Narrow<calls>>\n  /** State overrides. */\n  stateOverrides?: StateOverride | undefined\n  /** Whether to trace asset changes. */\n  traceAssetChanges?: boolean | undefined\n}\n\nexport type SimulateCallsReturnType<\n  calls extends readonly unknown[] = readonly unknown[],\n> = {\n  /** Asset changes. */\n  assetChanges: readonly {\n    token: {\n      address: Address\n      decimals?: number | undefined\n      symbol?: string | undefined\n    }\n    value: { pre: bigint; post: bigint; diff: bigint }\n  }[]\n  /** Block results. */\n  block: Block\n  /** Call results. */\n  results: MulticallResults<\n    Narrow<calls>,\n    true,\n    {\n      extraProperties: {\n        data: Hex\n        gasUsed: bigint\n        logs?: Log[] | undefined\n      }\n      error: Error\n      mutability: AbiStateMutability\n    }\n  >\n}\n\nexport type SimulateCallsErrorType =\n  | AbiFunction.encodeData.ErrorType\n  | AbiFunction.from.ErrorType\n  | CreateAccessListErrorType\n  | EncodeFunctionDataErrorType\n  | SimulateBlocksErrorType\n  | ErrorType\n\n/**\n * Simulates execution of a batch of calls.\n *\n * @param client - Client to use\n * @param parameters - {@link SimulateCallsParameters}\n * @returns Results. {@link SimulateCallsReturnType}\n *\n * @example\n * ```ts\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { simulateCalls } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const result = await simulateCalls(client, {\n *   account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n *   calls: [{\n *     {\n *       data: '0xdeadbeef',\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *     },\n *     {\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *       value: parseEther('1'),\n *     },\n *   ]\n * })\n * ```\n */\nexport async function simulateCalls<\n  const calls extends readonly unknown[],\n  chain extends Chain | undefined,\n  account extends Account | Address | undefined = undefined,\n>(\n  client: Client<Transport, chain>,\n  parameters: SimulateCallsParameters<calls, account>,\n): Promise<SimulateCallsReturnType<calls>> {\n  const {\n    blockNumber,\n    blockTag,\n    calls,\n    stateOverrides,\n    traceAssetChanges,\n    traceTransfers,\n    validation,\n  } = parameters\n\n  const account = parameters.account\n    ? parseAccount(parameters.account)\n    : undefined\n\n  if (traceAssetChanges && !account)\n    throw new BaseError(\n      '`account` is required when `traceAssetChanges` is true',\n    )\n\n  // Derive bytecode to extract ETH balance via a contract call.\n  const getBalanceData = account\n    ? AbiConstructor.encode(AbiConstructor.from('constructor(bytes, bytes)'), {\n        bytecode: deploylessCallViaBytecodeBytecode,\n        args: [\n          getBalanceCode,\n          AbiFunction.encodeData(\n            AbiFunction.from('function getBalance(address)'),\n            [account.address],\n          ),\n        ],\n      })\n    : undefined\n\n  // Fetch ERC20/721 addresses that were \"touched\" from the calls.\n  const assetAddresses = traceAssetChanges\n    ? await Promise.all(\n        parameters.calls.map(async (call: any) => {\n          if (!call.data && !call.abi) return\n          const { accessList } = await createAccessList(client, {\n            account: account!.address,\n            ...call,\n            data: call.abi ? encodeFunctionData(call) : call.data,\n          })\n          return accessList.map(({ address, storageKeys }) =>\n            storageKeys.length > 0 ? address : null,\n          )\n        }),\n      ).then((x) => x.flat().filter(Boolean))\n    : []\n\n  const blocks = await simulateBlocks(client, {\n    blockNumber,\n    blockTag: blockTag as undefined,\n    blocks: [\n      ...(traceAssetChanges\n        ? [\n            // ETH pre balances\n            {\n              calls: [{ data: getBalanceData }],\n              stateOverrides,\n            },\n\n            // Asset pre balances\n            {\n              calls: assetAddresses.map((address, i) => ({\n                abi: [\n                  AbiFunction.from(\n                    'function balanceOf(address) returns (uint256)',\n                  ),\n                ],\n                functionName: 'balanceOf',\n                args: [account!.address],\n                to: address,\n                from: zeroAddress,\n                nonce: i,\n              })),\n              stateOverrides: [\n                {\n                  address: zeroAddress,\n                  nonce: 0,\n                },\n              ],\n            },\n          ]\n        : []),\n\n      {\n        calls: [...calls, {}].map((call) => ({\n          ...(call as Call),\n          from: account?.address,\n        })) as any,\n        stateOverrides,\n      },\n\n      ...(traceAssetChanges\n        ? [\n            // ETH post balances\n            {\n              calls: [{ data: getBalanceData }],\n            },\n\n            // Asset post balances\n            {\n              calls: assetAddresses.map((address, i) => ({\n                abi: [\n                  AbiFunction.from(\n                    'function balanceOf(address) returns (uint256)',\n                  ),\n                ],\n                functionName: 'balanceOf',\n                args: [account!.address],\n                to: address,\n                from: zeroAddress,\n                nonce: i,\n              })),\n              stateOverrides: [\n                {\n                  address: zeroAddress,\n                  nonce: 0,\n                },\n              ],\n            },\n\n            // Decimals\n            {\n              calls: assetAddresses.map((address, i) => ({\n                to: address,\n                abi: [\n                  AbiFunction.from('function decimals() returns (uint256)'),\n                ],\n                functionName: 'decimals',\n                from: zeroAddress,\n                nonce: i,\n              })),\n              stateOverrides: [\n                {\n                  address: zeroAddress,\n                  nonce: 0,\n                },\n              ],\n            },\n\n            // Token URI\n            {\n              calls: assetAddresses.map((address, i) => ({\n                to: address,\n                abi: [\n                  AbiFunction.from(\n                    'function tokenURI(uint256) returns (string)',\n                  ),\n                ],\n                functionName: 'tokenURI',\n                args: [0n],\n                from: zeroAddress,\n                nonce: i,\n              })),\n              stateOverrides: [\n                {\n                  address: zeroAddress,\n                  nonce: 0,\n                },\n              ],\n            },\n\n            // Symbols\n            {\n              calls: assetAddresses.map((address, i) => ({\n                to: address,\n                abi: [AbiFunction.from('function symbol() returns (string)')],\n                functionName: 'symbol',\n                from: zeroAddress,\n                nonce: i,\n              })),\n              stateOverrides: [\n                {\n                  address: zeroAddress,\n                  nonce: 0,\n                },\n              ],\n            },\n          ]\n        : []),\n    ],\n    traceTransfers,\n    validation,\n  })\n\n  const block_results = traceAssetChanges ? blocks[2] : blocks[0]\n  const [\n    block_ethPre,\n    block_assetsPre,\n    ,\n    block_ethPost,\n    block_assetsPost,\n    block_decimals,\n    block_tokenURI,\n    block_symbols,\n  ] = traceAssetChanges ? blocks : []\n\n  // Extract call results from the simulation.\n  const { calls: block_calls, ...block } = block_results\n  const results = block_calls.slice(0, -1) ?? []\n\n  // Extract pre-execution ETH and asset balances.\n  const ethPre = block_ethPre?.calls ?? []\n  const assetsPre = block_assetsPre?.calls ?? []\n  const balancesPre = [...ethPre, ...assetsPre].map((call) =>\n    call.status === 'success' ? hexToBigInt(call.data) : null,\n  )\n\n  // Extract post-execution ETH and asset balances.\n  const ethPost = block_ethPost?.calls ?? []\n  const assetsPost = block_assetsPost?.calls ?? []\n  const balancesPost = [...ethPost, ...assetsPost].map((call) =>\n    call.status === 'success' ? hexToBigInt(call.data) : null,\n  )\n\n  // Extract asset symbols & decimals.\n  const decimals = (block_decimals?.calls ?? []).map((x) =>\n    x.status === 'success' ? x.result : null,\n  ) as (number | null)[]\n  const symbols = (block_symbols?.calls ?? []).map((x) =>\n    x.status === 'success' ? x.result : null,\n  ) as (string | null)[]\n  const tokenURI = (block_tokenURI?.calls ?? []).map((x) =>\n    x.status === 'success' ? x.result : null,\n  ) as (string | null)[]\n\n  const changes: Mutable<SimulateCallsReturnType<calls>['assetChanges']> = []\n  for (const [i, balancePost] of balancesPost.entries()) {\n    const balancePre = balancesPre[i]\n\n    if (typeof balancePost !== 'bigint') continue\n    if (typeof balancePre !== 'bigint') continue\n\n    const decimals_ = decimals[i - 1]\n    const symbol_ = symbols[i - 1]\n    const tokenURI_ = tokenURI[i - 1]\n\n    const token = (() => {\n      if (i === 0)\n        return {\n          address: ethAddress,\n          decimals: 18,\n          symbol: 'ETH',\n        }\n\n      return {\n        address: assetAddresses[i - 1]! as Address,\n        decimals: tokenURI_ || decimals_ ? Number(decimals_ ?? 1) : undefined,\n        symbol: symbol_ ?? undefined,\n      }\n    })()\n\n    if (changes.some((change) => change.token.address === token.address))\n      continue\n\n    changes.push({\n      token,\n      value: {\n        pre: balancePre,\n        post: balancePost,\n        diff: balancePost - balancePre,\n      },\n    })\n  }\n\n  return {\n    assetChanges: changes,\n    block,\n    results,\n  } as unknown as SimulateCallsReturnType<calls>\n}\n", "import type * as Abi from '../core/Abi.js'\nimport * as AbiParameters from '../core/AbiParameters.js'\nimport type * as Address from '../core/Address.js'\nimport * as Errors from '../core/Errors.js'\nimport * as Hex from '../core/Hex.js'\nimport type * as Signature from '../core/Signature.js'\n\n/** Unwrapped ERC-6492 signature. */\nexport type Unwrapped = {\n  /** Calldata to pass to the target address for counterfactual verification. */\n  data: Hex.Hex\n  /** The original signature. */\n  signature: Hex.Hex\n  /** The target address to use for counterfactual verification. */\n  to: Address.Address\n}\n\n/** Wrapped ERC-6492 signature. */\nexport type Wrapped = Hex.Hex\n\n/**\n * Magic bytes used to identify ERC-6492 wrapped signatures.\n */\nexport const magicBytes =\n  '0x6492649264926492649264926492649264926492649264926492649264926492' as const\n\n/**\n * Deployless ERC-6492 signature verification bytecode.\n */\nexport const universalSignatureValidatorBytecode =\n  '0x608060405234801561001057600080fd5b5060405161069438038061069483398101604081905261002f9161051e565b600061003c848484610048565b9050806000526001601ff35b60007f64926492649264926492649264926492649264926492649264926492649264926100748361040c565b036101e7576000606080848060200190518101906100929190610577565b60405192955090935091506000906001600160a01b038516906100b69085906105dd565b6000604051808303816000865af19150503d80600081146100f3576040519150601f19603f3d011682016040523d82523d6000602084013e6100f8565b606091505b50509050876001600160a01b03163b60000361016057806101605760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90610190908b9087906004016105f9565b602060405180830381865afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d19190610633565b6001600160e01b03191614945050505050610405565b6001600160a01b0384163b1561027a57604051630b135d3f60e11b808252906001600160a01b03861690631626ba7e9061022790879087906004016105f9565b602060405180830381865afa158015610244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102689190610633565b6001600160e01b031916149050610405565b81516041146102df5760405162461bcd60e51b815260206004820152603a602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e6774680000000000006064820152608401610157565b6102e7610425565b5060208201516040808401518451859392600091859190811061030c5761030c61065d565b016020015160f81c9050601b811480159061032b57508060ff16601c14155b1561038c5760405162461bcd60e51b815260206004820152603b602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c756500000000006064820152608401610157565b60408051600081526020810180835289905260ff83169181019190915260608101849052608081018390526001600160a01b0389169060019060a0016020604051602081039080840390855afa1580156103ea573d6000803e3d6000fd5b505050602060405103516001600160a01b0316149450505050505b9392505050565b600060208251101561041d57600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461045857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561048c578181015183820152602001610474565b50506000910152565b600082601f8301126104a657600080fd5b81516001600160401b038111156104bf576104bf61045b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156104ed576104ed61045b565b60405281815283820160200185101561050557600080fd5b610516826020830160208701610471565b949350505050565b60008060006060848603121561053357600080fd5b835161053e81610443565b6020850151604086015191945092506001600160401b0381111561056157600080fd5b61056d86828701610495565b9150509250925092565b60008060006060848603121561058c57600080fd5b835161059781610443565b60208501519093506001600160401b038111156105b357600080fd5b6105bf86828701610495565b604086015190935090506001600160401b0381111561056157600080fd5b600082516105ef818460208701610471565b9190910192915050565b828152604060208201526000825180604084015261061e816060850160208701610471565b601f01601f1916919091016060019392505050565b60006020828403121561064557600080fd5b81516001600160e01b03198116811461040557600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572'\n\n/**\n * ABI for the ERC-6492 universal deployless signature validator contract.\n *\n * Constructor return value is `0x1` (valid) or `0x0` (invalid).\n */\nexport const universalSignatureValidatorAbi = [\n  {\n    inputs: [\n      {\n        name: '_signer',\n        type: 'address',\n      },\n      {\n        name: '_hash',\n        type: 'bytes32',\n      },\n      {\n        name: '_signature',\n        type: 'bytes',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  {\n    inputs: [\n      {\n        name: '_signer',\n        type: 'address',\n      },\n      {\n        name: '_hash',\n        type: 'bytes32',\n      },\n      {\n        name: '_signature',\n        type: 'bytes',\n      },\n    ],\n    outputs: [\n      {\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n    name: 'isValidSig',\n  },\n] as const satisfies Abi.Abi\n\n/**\n * Asserts that the wrapped signature is valid.\n *\n * @example\n * ```ts twoslash\n * import { SignatureErc6492 } from 'ox/erc6492'\n *\n * SignatureErc6492.assert('0xdeadbeef')\n * // @error: InvalidWrappedSignatureError: Value `0xdeadbeef` is an invalid ERC-6492 wrapped signature.\n * ```\n *\n * @param wrapped - The wrapped signature to assert.\n */\nexport function assert(wrapped: Wrapped) {\n  if (Hex.slice(wrapped, -32) !== magicBytes)\n    throw new InvalidWrappedSignatureError(wrapped)\n}\n\nexport declare namespace assert {\n  type ErrorType =\n    | InvalidWrappedSignatureError\n    | Hex.slice.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Parses an [ERC-6492 wrapped signature](https://eips.ethereum.org/EIPS/eip-6492#specification) into its constituent parts.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1 } from 'ox'\n * import { SignatureErc6492 } from 'ox/erc6492' // [!code focus]\n *\n * const signature = Secp256k1.sign({\n *   payload: '0x...',\n *   privateKey: '0x...',\n * })\n *\n * // Instantiate from serialized format. // [!code focus]\n * const wrapped = SignatureErc6492.from('0x...') // [!code focus]\n * // @log: { data: '0x...', signature: { ... }, to: '0x...', } // [!code focus]\n *\n * // Instantiate from constituent parts. // [!code focus]\n * const wrapped = SignatureErc6492.from({ // [!code focus]\n *   data: '0x...', // [!code focus]\n *   signature, // [!code focus]\n *   to: '0x...', // [!code focus]\n * })\n * // @log: { data: '0x...', signature: { ... }, to: '0x...', }\n * ```\n *\n * @param wrapped - Wrapped signature to parse.\n * @returns Wrapped signature.\n */\nexport function from(wrapped: Unwrapped | Wrapped): Unwrapped {\n  if (typeof wrapped === 'string') return unwrap(wrapped)\n  return wrapped\n}\n\nexport declare namespace from {\n  type ReturnType = Unwrapped\n\n  type ErrorType =\n    | AbiParameters.from.ErrorType\n    | AbiParameters.decode.ErrorType\n    | Signature.fromHex.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Parses an [ERC-6492 wrapped signature](https://eips.ethereum.org/EIPS/eip-6492#specification) into its constituent parts.\n *\n * @example\n * ```ts twoslash\n * import { SignatureErc6492 } from 'ox/erc6492'\n *\n * const { data, signature, to } = SignatureErc6492.unwrap('0x...')\n * ```\n *\n * @param wrapped - Wrapped signature to parse.\n * @returns Wrapped signature.\n */\nexport function unwrap(wrapped: Wrapped): Unwrapped {\n  assert(wrapped)\n\n  const [to, data, signature] = AbiParameters.decode(\n    AbiParameters.from('address, bytes, bytes'),\n    wrapped,\n  )\n\n  return { data, signature, to }\n}\n\nexport declare namespace unwrap {\n  type ErrorType =\n    | AbiParameters.from.ErrorType\n    | AbiParameters.decode.ErrorType\n    | Signature.fromHex.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Serializes an [ERC-6492 wrapped signature](https://eips.ethereum.org/EIPS/eip-6492#specification).\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1, Signature } from 'ox'\n * import { SignatureErc6492 } from 'ox/erc6492' // [!code focus]\n *\n * const signature = Secp256k1.sign({\n *   payload: '0x...',\n *   privateKey: '0x...',\n * })\n *\n * const wrapped = SignatureErc6492.wrap({ // [!code focus]\n *   data: '0xdeadbeef', // [!code focus]\n *   signature: Signature.toHex(signature), // [!code focus]\n *   to: '0x00000000219ab540356cBB839Cbe05303d7705Fa', // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param value - Wrapped signature to serialize.\n * @returns Serialized wrapped signature.\n */\nexport function wrap(value: Unwrapped): Wrapped {\n  const { data, signature, to } = value\n\n  return Hex.concat(\n    AbiParameters.encode(AbiParameters.from('address, bytes, bytes'), [\n      to,\n      data,\n      signature,\n    ]),\n    magicBytes,\n  )\n}\n\nexport declare namespace wrap {\n  type ErrorType =\n    | AbiParameters.encode.ErrorType\n    | Hex.concat.ErrorType\n    | Signature.toHex.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Validates a wrapped signature. Returns `true` if the wrapped signature is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { SignatureErc6492 } from 'ox/erc6492'\n *\n * const valid = SignatureErc6492.validate('0xdeadbeef')\n * // @log: false\n * ```\n *\n * @param wrapped - The wrapped signature to validate.\n * @returns `true` if the wrapped signature is valid, `false` otherwise.\n */\nexport function validate(wrapped: Wrapped): boolean {\n  try {\n    assert(wrapped)\n    return true\n  } catch {\n    return false\n  }\n}\n\nexport declare namespace validate {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/** Thrown when the ERC-6492 wrapped signature is invalid. */\nexport class InvalidWrappedSignatureError extends Errors.BaseError {\n  override readonly name = 'SignatureErc6492.InvalidWrappedSignatureError'\n\n  constructor(wrapped: Wrapped) {\n    super(`Value \\`${wrapped}\\` is an invalid ERC-6492 wrapped signature.`)\n  }\n}\n", "import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\nimport { type HexToBigIntErrorType, hexToBigInt } from '../encoding/fromHex.js'\nimport { hexToBytes } from '../encoding/toBytes.js'\nimport type { ToHexErrorType } from '../encoding/toHex.js'\n\ntype To = 'bytes' | 'hex'\n\nexport type SerializeSignatureParameters<to extends To = 'hex'> = Signature & {\n  to?: to | To | undefined\n}\n\nexport type SerializeSignatureReturnType<to extends To = 'hex'> =\n  | (to extends 'hex' ? Hex : never)\n  | (to extends 'bytes' ? ByteArray : never)\n\nexport type SerializeSignatureErrorType =\n  | HexToBigIntErrorType\n  | ToHexErrorType\n  | ErrorType\n\n/**\n * @description Converts a signature into hex format.\n *\n * @param signature The signature to convert.\n * @returns The signature in hex format.\n *\n * @example\n * serializeSignature({\n *   r: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf',\n *   s: '0x4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8',\n *   yParity: 1\n * })\n * // \"0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c\"\n */\nexport function serializeSignature<to extends To = 'hex'>({\n  r,\n  s,\n  to = 'hex',\n  v,\n  yParity,\n}: SerializeSignatureParameters<to>): SerializeSignatureReturnType<to> {\n  const yParity_ = (() => {\n    if (yParity === 0 || yParity === 1) return yParity\n    if (v && (v === 27n || v === 28n || v >= 35n)) return v % 2n === 0n ? 1 : 0\n    throw new Error('Invalid `v` or `yParity` value')\n  })()\n  const signature = `0x${new secp256k1.Signature(\n    hexToBigInt(r),\n    hexToBigInt(s),\n  ).toCompactHex()}${yParity_ === 0 ? '1b' : '1c'}` as const\n\n  if (to === 'hex') return signature as SerializeSignatureReturnType<to>\n  return hexToBytes(signature) as SerializeSignatureReturnType<to>\n}\n", "import type { Address } from 'abitype'\nimport { SignatureErc6492 } from 'ox/erc6492'\nimport { SignatureErc8010 } from 'ox/erc8010'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  erc1271Abi,\n  erc6492SignatureValidatorAbi,\n  multicall3Abi,\n} from '../../constants/abis.js'\nimport {\n  erc6492SignatureValidatorByteCode,\n  multicall3Bytecode,\n} from '../../constants/contracts.js'\nimport {\n  CallExecutionError,\n  ContractFunctionExecutionError,\n} from '../../errors/contract.js'\nimport type { InvalidHexBooleanError } from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\nimport type { OneOf } from '../../types/utils.js'\nimport {\n  type EncodeDeployDataErrorType,\n  encodeDeployData,\n} from '../../utils/abi/encodeDeployData.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetAddressErrorType,\n  getAddress,\n} from '../../utils/address/getAddress.js'\nimport {\n  type IsAddressEqualErrorType,\n  isAddressEqual,\n} from '../../utils/address/isAddressEqual.js'\nimport { verifyAuthorization } from '../../utils/authorization/verifyAuthorization.js'\nimport { type ConcatHexErrorType, concatHex } from '../../utils/data/concat.js'\nimport { type IsHexErrorType, isHex } from '../../utils/data/isHex.js'\nimport { hexToBool } from '../../utils/encoding/fromHex.js'\nimport {\n  type BytesToHexErrorType,\n  bytesToHex,\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type RecoverAddressErrorType,\n  recoverAddress,\n} from '../../utils/signature/recoverAddress.js'\nimport {\n  type SerializeSignatureErrorType,\n  serializeSignature,\n} from '../../utils/signature/serializeSignature.js'\nimport { type CallErrorType, type CallParameters, call } from './call.js'\nimport { type GetCodeErrorType, getCode } from './getCode.js'\nimport { type ReadContractErrorType, readContract } from './readContract.js'\n\nexport type VerifyHashParameters = Pick<\n  CallParameters,\n  'blockNumber' | 'blockTag'\n> & {\n  /** The address that signed the original message. */\n  address: Address\n  /** The address of the ERC-6492 signature verifier contract. */\n  erc6492VerifierAddress?: Address | undefined\n  /** The hash to be verified. */\n  hash: Hex\n  /** Multicall3 address for ERC-8010 verification. */\n  multicallAddress?: Address | undefined\n  /** The signature that was generated by signing the message with the address's private key. */\n  signature: Hex | ByteArray | Signature\n  /** @deprecated use `erc6492VerifierAddress` instead. */\n  universalSignatureVerifierAddress?: Address | undefined\n} & OneOf<{ factory: Address; factoryData: Hex } | {}>\n\nexport type VerifyHashReturnType = boolean\n\nexport type VerifyHashErrorType =\n  | BytesToHexErrorType\n  | CallErrorType\n  | ConcatHexErrorType\n  | EncodeDeployDataErrorType\n  | EncodeFunctionDataErrorType\n  | ErrorType\n  | GetAddressErrorType\n  | GetCodeErrorType\n  | InvalidHexBooleanError\n  | IsAddressEqualErrorType\n  | IsHexErrorType\n  | NumberToHexErrorType\n  | ReadContractErrorType\n  | RecoverAddressErrorType\n  | SerializeSignatureErrorType\n\n/**\n * Verifies a message hash onchain using ERC-6492.\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyHashParameters}\n * @returns Whether or not the signature is valid. {@link VerifyHashReturnType}\n */\nexport async function verifyHash<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  parameters: VerifyHashParameters,\n): Promise<VerifyHashReturnType> {\n  const {\n    address,\n    hash,\n    erc6492VerifierAddress:\n      verifierAddress = parameters.universalSignatureVerifierAddress ??\n      client.chain?.contracts?.erc6492Verifier?.address,\n    multicallAddress = parameters.multicallAddress ??\n      client.chain?.contracts?.multicall3?.address,\n  } = parameters\n\n  const signature = (() => {\n    const signature = parameters.signature\n    if (isHex(signature)) return signature\n    if (typeof signature === 'object' && 'r' in signature && 's' in signature)\n      return serializeSignature(signature)\n    return bytesToHex(signature)\n  })()\n\n  try {\n    if (SignatureErc8010.validate(signature))\n      return await verifyErc8010(client, {\n        ...parameters,\n        multicallAddress,\n        signature,\n      })\n    return await verifyErc6492(client, {\n      ...parameters,\n      verifierAddress,\n      signature,\n    })\n  } catch (error) {\n    // Fallback attempt to verify the signature via ECDSA recovery.\n    try {\n      const verified = isAddressEqual(\n        getAddress(address),\n        await recoverAddress({ hash, signature }),\n      )\n      if (verified) return true\n    } catch {}\n\n    if (error instanceof VerificationError) {\n      // if the execution fails, the signature was not valid and an internal method inside of the validator reverted\n      // this can happen for many reasons, for example if signer can not be recovered from the signature\n      // or if the signature has no valid format\n      return false\n    }\n\n    throw error\n  }\n}\n\n/** @internal */\nexport async function verifyErc8010(\n  client: Client,\n  parameters: verifyErc8010.Parameters,\n) {\n  const { address, blockNumber, blockTag, hash, multicallAddress } = parameters\n\n  const {\n    authorization: authorization_ox,\n    data: initData,\n    signature,\n    to,\n  } = SignatureErc8010.unwrap(parameters.signature)\n\n  // Check if already delegated\n  const code = await getCode(client, {\n    address,\n    blockNumber,\n    blockTag,\n  } as never)\n\n  // If already delegated, perform standard ERC-1271 verification.\n  if (code === concatHex(['0xef0100', authorization_ox.address]))\n    return await verifyErc1271(client, {\n      address,\n      blockNumber,\n      blockTag,\n      hash,\n      signature,\n    })\n\n  const authorization = {\n    address: authorization_ox.address,\n    chainId: Number(authorization_ox.chainId),\n    nonce: Number(authorization_ox.nonce),\n    r: numberToHex(authorization_ox.r, { size: 32 }),\n    s: numberToHex(authorization_ox.s, { size: 32 }),\n    yParity: authorization_ox.yParity,\n  } as const\n\n  const valid = await verifyAuthorization({\n    address,\n    authorization,\n  })\n  if (!valid) throw new VerificationError()\n\n  // Deployless verification.\n  const results = await getAction(\n    client,\n    readContract,\n    'readContract',\n  )({\n    ...(multicallAddress\n      ? { address: multicallAddress }\n      : { code: multicall3Bytecode }),\n    authorizationList: [authorization],\n    abi: multicall3Abi,\n    blockNumber,\n    blockTag: 'pending',\n    functionName: 'aggregate3',\n    args: [\n      [\n        ...(initData\n          ? [\n              {\n                allowFailure: true,\n                target: to ?? address,\n                callData: initData,\n              },\n            ]\n          : []),\n        {\n          allowFailure: true,\n          target: address,\n          callData: encodeFunctionData({\n            abi: erc1271Abi,\n            functionName: 'isValidSignature',\n            args: [hash, signature],\n          }),\n        },\n      ],\n    ],\n  })\n\n  const data = results[results.length - 1]?.returnData\n\n  if (data?.startsWith('0x1626ba7e')) return true\n  throw new VerificationError()\n}\n\nexport namespace verifyErc8010 {\n  export type Parameters = Pick<CallParameters, 'blockNumber' | 'blockTag'> & {\n    /** The address that signed the original message. */\n    address: Address\n    /** The hash to be verified. */\n    hash: Hex\n    /** Multicall3 address for ERC-8010 verification. */\n    multicallAddress?: Address | undefined\n    /** The signature that was generated by signing the message with the address's private key. */\n    signature: Hex\n  }\n}\n\n/** @internal */\n// biome-ignore lint/correctness/noUnusedVariables: _\nasync function verifyErc6492(\n  client: Client,\n  parameters: verifyErc6492.Parameters,\n) {\n  const {\n    address,\n    factory,\n    factoryData,\n    hash,\n    signature,\n    verifierAddress,\n    ...rest\n  } = parameters\n\n  const wrappedSignature = await (async () => {\n    // If no `factory` or `factoryData` is provided, it is assumed that the\n    // address is not a Smart Account, or the Smart Account is already deployed.\n    if (!factory && !factoryData) return signature\n\n    // If the signature is already wrapped, return the signature.\n    if (SignatureErc6492.validate(signature)) return signature\n\n    // If the Smart Account is not deployed, wrap the signature with a 6492 wrapper\n    // to perform counterfactual validation.\n    return SignatureErc6492.wrap({\n      data: factoryData!,\n      signature,\n      to: factory!,\n    })\n  })()\n\n  const args = verifierAddress\n    ? ({\n        to: verifierAddress,\n        data: encodeFunctionData({\n          abi: erc6492SignatureValidatorAbi,\n          functionName: 'isValidSig',\n          args: [address, hash, wrappedSignature],\n        }),\n        ...rest,\n      } as unknown as CallParameters)\n    : ({\n        data: encodeDeployData({\n          abi: erc6492SignatureValidatorAbi,\n          args: [address, hash, wrappedSignature],\n          bytecode: erc6492SignatureValidatorByteCode,\n        }),\n        ...rest,\n      } as unknown as CallParameters)\n\n  const { data } = await getAction(\n    client,\n    call,\n    'call',\n  )(args).catch((error) => {\n    if (error instanceof CallExecutionError) throw new VerificationError()\n    throw error\n  })\n\n  if (hexToBool(data ?? '0x0')) return true\n  throw new VerificationError()\n}\n\nexport namespace verifyErc6492 {\n  export type Parameters = Pick<CallParameters, 'blockNumber' | 'blockTag'> & {\n    /** The address that signed the original message. */\n    address: Address\n    /** The hash to be verified. */\n    hash: Hex\n    /** The signature that was generated by signing the message with the address's private key. */\n    signature: Hex\n    /** The address of the ERC-6492 signature verifier contract. */\n    verifierAddress?: Address | undefined\n  } & OneOf<{ factory: Address; factoryData: Hex } | {}>\n}\n\n/** @internal */\nexport async function verifyErc1271(\n  client: Client,\n  parameters: verifyErc1271.Parameters,\n) {\n  const { address, blockNumber, blockTag, hash, signature } = parameters\n\n  const result = await getAction(\n    client,\n    readContract,\n    'readContract',\n  )({\n    address,\n    abi: erc1271Abi,\n    args: [hash, signature],\n    blockNumber,\n    blockTag,\n    functionName: 'isValidSignature',\n  }).catch((error) => {\n    if (error instanceof ContractFunctionExecutionError)\n      throw new VerificationError()\n    throw error\n  })\n\n  if (result.startsWith('0x1626ba7e')) return true\n  throw new VerificationError()\n}\n\nexport namespace verifyErc1271 {\n  export type Parameters = Pick<CallParameters, 'blockNumber' | 'blockTag'> & {\n    /** The address that signed the original message. */\n    address: Address\n    /** The hash to be verified. */\n    hash: Hex\n    /** The signature that was generated by signing the message with the address's private key. */\n    signature: Hex\n  }\n}\n\nclass VerificationError extends Error {}\n", "import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ByteArray,\n  Hex,\n  SignableMessage,\n  Signature,\n} from '../../types/misc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport type { HashMessageErrorType } from '../../utils/signature/hashMessage.js'\nimport { hashMessage } from '../../utils/signature/hashMessage.js'\nimport {\n  type VerifyHashErrorType,\n  type VerifyHashParameters,\n  verifyHash,\n} from './verifyHash.js'\n\nexport type VerifyMessageParameters = Prettify<\n  Omit<VerifyHashParameters, 'hash'> & {\n    /** The address that signed the original message. */\n    address: Address\n    /** The message to be verified. */\n    message: SignableMessage\n    /** The signature that was generated by signing the message with the address's private key. */\n    signature: Hex | ByteArray | Signature\n  }\n>\n\nexport type VerifyMessageReturnType = boolean\n\nexport type VerifyMessageErrorType =\n  | HashMessageErrorType\n  | VerifyHashErrorType\n  | ErrorType\n\n/**\n * Verify that a message was signed by the provided address.\n *\n * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyMessage}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\n */\nexport async function verifyMessage<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    address,\n    message,\n    factory,\n    factoryData,\n    signature,\n    ...callRequest\n  }: VerifyMessageParameters,\n): Promise<VerifyMessageReturnType> {\n  const hash = hashMessage(message)\n  return verifyHash(client, {\n    address,\n    factory: factory!,\n    factoryData: factoryData!,\n    hash,\n    signature,\n    ...callRequest,\n  })\n}\n", "import type { Address, TypedData } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport {\n  type HashTypedDataErrorType,\n  hashTypedData,\n} from '../../utils/signature/hashTypedData.js'\nimport {\n  type VerifyHashErrorType,\n  type VerifyHashParameters,\n  verifyHash,\n} from './verifyHash.js'\n\nexport type VerifyTypedDataParameters<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n> = Omit<VerifyHashParameters, 'hash'> &\n  TypedDataDefinition<typedData, primaryType> & {\n    /** The address to verify the typed data for. */\n    address: Address\n    /** The signature to verify */\n    signature: Hex | ByteArray | Signature\n  }\n\nexport type VerifyTypedDataReturnType = boolean\n\nexport type VerifyTypedDataErrorType =\n  | HashTypedDataErrorType\n  | VerifyHashErrorType\n  | ErrorType\n\n/**\n * Verify that typed data was signed by the provided address.\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyTypedData}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyTypedDataParameters}\n * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\n */\nexport async function verifyTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n  chain extends Chain | undefined,\n>(\n  client: Client<Transport, chain>,\n  parameters: VerifyTypedDataParameters<typedData, primaryType>,\n): Promise<VerifyTypedDataReturnType> {\n  const {\n    address,\n    factory,\n    factoryData,\n    signature,\n    message,\n    primaryType,\n    types,\n    domain,\n    ...callRequest\n  } = parameters as VerifyTypedDataParameters\n  const hash = hashTypedData({ message, primaryType, types, domain })\n  return verifyHash(client, {\n    address,\n    factory: factory!,\n    factoryData: factoryData!,\n    hash,\n    signature,\n    ...callRequest,\n  })\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { HasTransportType } from '../../types/transport.js'\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { observe } from '../../utils/observe.js'\nimport { type PollErrorType, poll } from '../../utils/poll.js'\nimport { stringify } from '../../utils/stringify.js'\n\nimport {\n  type GetBlockNumberReturnType,\n  getBlockNumber,\n} from './getBlockNumber.js'\n\nexport type OnBlockNumberParameter = GetBlockNumberReturnType\nexport type OnBlockNumberFn = (\n  blockNumber: OnBlockNumberParameter,\n  prevBlockNumber: OnBlockNumberParameter | undefined,\n) => void\n\nexport type WatchBlockNumberParameters<\n  transport extends Transport = Transport,\n> = {\n  /** The callback to call when a new block number is received. */\n  onBlockNumber: OnBlockNumberFn\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: ((error: Error) => void) | undefined\n} & (\n  | (HasTransportType<transport, 'webSocket' | 'ipc'> extends true\n      ? {\n          emitMissed?: undefined\n          emitOnBegin?: undefined\n          /** Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`. */\n          poll?: false | undefined\n          pollingInterval?: undefined\n        }\n      : never)\n  | {\n      /** Whether or not to emit the missed block numbers to the callback. */\n      emitMissed?: boolean | undefined\n      /** Whether or not to emit the latest block number to the callback when the subscription opens. */\n      emitOnBegin?: boolean | undefined\n      poll?: true | undefined\n      /** Polling frequency (in ms). Defaults to Client's pollingInterval config. */\n      pollingInterval?: number | undefined\n    }\n)\n\nexport type WatchBlockNumberReturnType = () => void\n\nexport type WatchBlockNumberErrorType = PollErrorType | ErrorType\n\n/**\n * Watches and returns incoming block numbers.\n *\n * - Docs: https://viem.sh/docs/actions/public/watchBlockNumber\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_watching-blocks\n * - JSON-RPC Methods:\n *   - When `poll: true`, calls [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber) on a polling interval.\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchBlockNumberParameters}\n * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlockNumberReturnType}\n *\n * @example\n * import { createPublicClient, watchBlockNumber, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchBlockNumber(client, {\n *   onBlockNumber: (blockNumber) => console.log(blockNumber),\n * })\n */\nexport function watchBlockNumber<\n  chain extends Chain | undefined,\n  transport extends Transport,\n>(\n  client: Client<transport, chain>,\n  {\n    emitOnBegin = false,\n    emitMissed = false,\n    onBlockNumber,\n    onError,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n  }: WatchBlockNumberParameters<transport>,\n): WatchBlockNumberReturnType {\n  const enablePolling = (() => {\n    if (typeof poll_ !== 'undefined') return poll_\n    if (\n      client.transport.type === 'webSocket' ||\n      client.transport.type === 'ipc'\n    )\n      return false\n    if (\n      client.transport.type === 'fallback' &&\n      (client.transport.transports[0].config.type === 'webSocket' ||\n        client.transport.transports[0].config.type === 'ipc')\n    )\n      return false\n    return true\n  })()\n\n  let prevBlockNumber: GetBlockNumberReturnType | undefined\n\n  const pollBlockNumber = () => {\n    const observerId = stringify([\n      'watchBlockNumber',\n      client.uid,\n      emitOnBegin,\n      emitMissed,\n      pollingInterval,\n    ])\n\n    return observe(observerId, { onBlockNumber, onError }, (emit) =>\n      poll(\n        async () => {\n          try {\n            const blockNumber = await getAction(\n              client,\n              getBlockNumber,\n              'getBlockNumber',\n            )({ cacheTime: 0 })\n\n            if (prevBlockNumber !== undefined) {\n              // If the current block number is the same as the previous,\n              // we can skip.\n              if (blockNumber === prevBlockNumber) return\n\n              // If we have missed out on some previous blocks, and the\n              // `emitMissed` flag is truthy, let's emit those blocks.\n              if (blockNumber - prevBlockNumber > 1 && emitMissed) {\n                for (let i = prevBlockNumber + 1n; i < blockNumber; i++) {\n                  emit.onBlockNumber(i, prevBlockNumber)\n                  prevBlockNumber = i\n                }\n              }\n            }\n\n            // If the next block number is greater than the previous,\n            // it is not in the past, and we can emit the new block number.\n            if (\n              prevBlockNumber === undefined ||\n              blockNumber > prevBlockNumber\n            ) {\n              emit.onBlockNumber(blockNumber, prevBlockNumber)\n              prevBlockNumber = blockNumber\n            }\n          } catch (err) {\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin,\n          interval: pollingInterval,\n        },\n      ),\n    )\n  }\n\n  const subscribeBlockNumber = () => {\n    const observerId = stringify([\n      'watchBlockNumber',\n      client.uid,\n      emitOnBegin,\n      emitMissed,\n    ])\n\n    return observe(observerId, { onBlockNumber, onError }, (emit) => {\n      let active = true\n      let unsubscribe = () => (active = false)\n      ;(async () => {\n        try {\n          const transport = (() => {\n            if (client.transport.type === 'fallback') {\n              const transport = client.transport.transports.find(\n                (transport: ReturnType<Transport>) =>\n                  transport.config.type === 'webSocket' ||\n                  transport.config.type === 'ipc',\n              )\n              if (!transport) return client.transport\n              return transport.value\n            }\n            return client.transport\n          })()\n\n          const { unsubscribe: unsubscribe_ } = await transport.subscribe({\n            params: ['newHeads'],\n            onData(data: any) {\n              if (!active) return\n              const blockNumber = hexToBigInt(data.result?.number)\n              emit.onBlockNumber(blockNumber, prevBlockNumber)\n              prevBlockNumber = blockNumber\n            },\n            onError(error: Error) {\n              emit.onError?.(error)\n            },\n          })\n          unsubscribe = unsubscribe_\n          if (!active) unsubscribe()\n        } catch (err) {\n          onError?.(err as Error)\n        }\n      })()\n      return () => unsubscribe()\n    })\n  }\n\n  return enablePolling ? pollBlockNumber() : subscribeBlockNumber()\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { BlockNotFoundError } from '../../errors/block.js'\nimport {\n  TransactionNotFoundError,\n  TransactionReceiptNotFoundError,\n  WaitForTransactionReceiptTimeoutError,\n  type WaitForTransactionReceiptTimeoutErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { Transaction } from '../../types/transaction.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport { withResolvers } from '../../utils/promise/withResolvers.js'\nimport {\n  type WithRetryParameters,\n  withRetry,\n} from '../../utils/promise/withRetry.js'\nimport { stringify } from '../../utils/stringify.js'\n\nimport { type GetBlockErrorType, getBlock } from './getBlock.js'\nimport {\n  type GetTransactionErrorType,\n  type GetTransactionReturnType,\n  getTransaction,\n} from './getTransaction.js'\nimport {\n  type GetTransactionReceiptErrorType,\n  type GetTransactionReceiptReturnType,\n  getTransactionReceipt,\n} from './getTransactionReceipt.js'\nimport {\n  type WatchBlockNumberErrorType,\n  watchBlockNumber,\n} from './watchBlockNumber.js'\n\nexport type ReplacementReason = 'cancelled' | 'replaced' | 'repriced'\nexport type ReplacementReturnType<\n  chain extends Chain | undefined = Chain | undefined,\n> = {\n  reason: ReplacementReason\n  replacedTransaction: Transaction\n  transaction: Transaction\n  transactionReceipt: GetTransactionReceiptReturnType<chain>\n}\n\nexport type WaitForTransactionReceiptReturnType<\n  chain extends Chain | undefined = Chain | undefined,\n> = GetTransactionReceiptReturnType<chain>\n\nexport type WaitForTransactionReceiptParameters<\n  chain extends Chain | undefined = Chain | undefined,\n> = {\n  /**\n   * Whether to check for transaction replacements.\n   * @default true\n   */\n  checkReplacement?: boolean | undefined\n  /**\n   * The number of confirmations (blocks that have passed) to wait before resolving.\n   * @default 1\n   */\n  confirmations?: number | undefined\n  /** The hash of the transaction. */\n  hash: Hash\n  /** Optional callback to emit if the transaction has been replaced. */\n  onReplaced?: ((response: ReplacementReturnType<chain>) => void) | undefined\n  /**\n   * Polling frequency (in ms). Defaults to the client's pollingInterval config.\n   * @default client.pollingInterval\n   */\n  pollingInterval?: number | undefined\n  /**\n   * Number of times to retry if the transaction or block is not found.\n   * @default 6 (exponential backoff)\n   */\n  retryCount?: WithRetryParameters['retryCount'] | undefined\n  /**\n   * Time to wait (in ms) between retries.\n   * @default `({ count }) => ~~(1 << count) * 200` (exponential backoff)\n   */\n  retryDelay?: WithRetryParameters['delay'] | undefined\n  /**\n   * Optional timeout (in milliseconds) to wait before stopping polling.\n   * @default 180_000\n   */\n  timeout?: number | undefined\n}\n\nexport type WaitForTransactionReceiptErrorType =\n  | ObserveErrorType\n  | GetBlockErrorType\n  | GetTransactionErrorType\n  | GetTransactionReceiptErrorType\n  | WatchBlockNumberErrorType\n  | WaitForTransactionReceiptTimeoutErrorType\n  | ErrorType\n\n/**\n * Waits for the [Transaction](https://viem.sh/docs/glossary/terms#transaction) to be included on a [Block](https://viem.sh/docs/glossary/terms#block) (one confirmation), and then returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt).\n *\n * - Docs: https://viem.sh/docs/actions/public/waitForTransactionReceipt\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions\n * - JSON-RPC Methods:\n *   - Polls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt) on each block until it has been processed.\n *   - If a Transaction has been replaced:\n *     - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) and extracts the transactions\n *     - Checks if one of the Transactions is a replacement\n *     - If so, calls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt).\n *\n * The `waitForTransactionReceipt` action additionally supports Replacement detection (e.g. sped up Transactions).\n *\n * Transactions can be replaced when a user modifies their transaction in their wallet (to speed up or cancel). Transactions are replaced when they are sent from the same nonce.\n *\n * There are 3 types of Transaction Replacement reasons:\n *\n * - `repriced`: The gas price has been modified (e.g. different `maxFeePerGas`)\n * - `cancelled`: The Transaction has been cancelled (e.g. `value === 0n`)\n * - `replaced`: The Transaction has been replaced (e.g. different `value` or `data`)\n *\n * @param client - Client to use\n * @param parameters - {@link WaitForTransactionReceiptParameters}\n * @returns The transaction receipt. {@link WaitForTransactionReceiptReturnType}\n *\n * @example\n * import { createPublicClient, waitForTransactionReceipt, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionReceipt = await waitForTransactionReceipt(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function waitForTransactionReceipt<\n  chain extends Chain | undefined,\n>(\n  client: Client<Transport, chain>,\n  parameters: WaitForTransactionReceiptParameters<chain>,\n): Promise<WaitForTransactionReceiptReturnType<chain>> {\n  const {\n    checkReplacement = true,\n    confirmations = 1,\n    hash,\n    onReplaced,\n    retryCount = 6,\n    retryDelay = ({ count }) => ~~(1 << count) * 200, // exponential backoff\n    timeout = 180_000,\n  } = parameters\n\n  const observerId = stringify(['waitForTransactionReceipt', client.uid, hash])\n\n  const pollingInterval = (() => {\n    if (parameters.pollingInterval) return parameters.pollingInterval\n    if (client.chain?.experimental_preconfirmationTime)\n      return client.chain.experimental_preconfirmationTime\n    return client.pollingInterval\n  })()\n\n  let transaction: GetTransactionReturnType<chain> | undefined\n  let replacedTransaction: GetTransactionReturnType<chain> | undefined\n  let receipt: GetTransactionReceiptReturnType<chain> | undefined\n  let retrying = false\n\n  let _unobserve: () => void\n  let _unwatch: () => void\n\n  const { promise, resolve, reject } =\n    withResolvers<WaitForTransactionReceiptReturnType<chain>>()\n\n  const timer = timeout\n    ? setTimeout(() => {\n        _unwatch?.()\n        _unobserve?.()\n        reject(new WaitForTransactionReceiptTimeoutError({ hash }))\n      }, timeout)\n    : undefined\n\n  _unobserve = observe(\n    observerId,\n    { onReplaced, resolve, reject },\n    async (emit) => {\n      receipt = await getAction(\n        client,\n        getTransactionReceipt,\n        'getTransactionReceipt',\n      )({ hash }).catch(() => undefined)\n\n      if (receipt && confirmations <= 1) {\n        clearTimeout(timer)\n        emit.resolve(receipt)\n        _unobserve?.()\n        return\n      }\n\n      _unwatch = getAction(\n        client,\n        watchBlockNumber,\n        'watchBlockNumber',\n      )({\n        emitMissed: true,\n        emitOnBegin: true,\n        poll: true,\n        pollingInterval,\n        async onBlockNumber(blockNumber_) {\n          const done = (fn: () => void) => {\n            clearTimeout(timer)\n            _unwatch?.()\n            fn()\n            _unobserve?.()\n          }\n\n          let blockNumber = blockNumber_\n\n          if (retrying) return\n\n          try {\n            // If we already have a valid receipt, let's check if we have enough\n            // confirmations. If we do, then we can resolve.\n            if (receipt) {\n              if (\n                confirmations > 1 &&\n                (!receipt.blockNumber ||\n                  blockNumber - receipt.blockNumber + 1n < confirmations)\n              )\n                return\n\n              done(() => emit.resolve(receipt!))\n              return\n            }\n\n            // Get the transaction to check if it's been replaced.\n            // We need to retry as some RPC Providers may be slow to sync\n            // up mined transactions.\n            if (checkReplacement && !transaction) {\n              retrying = true\n              await withRetry(\n                async () => {\n                  transaction = (await getAction(\n                    client,\n                    getTransaction,\n                    'getTransaction',\n                  )({ hash })) as GetTransactionReturnType<chain>\n                  if (transaction.blockNumber)\n                    blockNumber = transaction.blockNumber\n                },\n                {\n                  delay: retryDelay,\n                  retryCount,\n                },\n              )\n              retrying = false\n            }\n\n            // Get the receipt to check if it's been processed.\n            receipt = await getAction(\n              client,\n              getTransactionReceipt,\n              'getTransactionReceipt',\n            )({ hash })\n\n            // Check if we have enough confirmations. If not, continue polling.\n            if (\n              confirmations > 1 &&\n              (!receipt.blockNumber ||\n                blockNumber - receipt.blockNumber + 1n < confirmations)\n            )\n              return\n\n            done(() => emit.resolve(receipt!))\n          } catch (err) {\n            // If the receipt is not found, the transaction will be pending.\n            // We need to check if it has potentially been replaced.\n            if (\n              err instanceof TransactionNotFoundError ||\n              err instanceof TransactionReceiptNotFoundError\n            ) {\n              if (!transaction) {\n                retrying = false\n                return\n              }\n\n              try {\n                replacedTransaction = transaction\n\n                // Let's retrieve the transactions from the current block.\n                // We need to retry as some RPC Providers may be slow to sync\n                // up mined blocks.\n                retrying = true\n                const block = await withRetry(\n                  () =>\n                    getAction(\n                      client,\n                      getBlock,\n                      'getBlock',\n                    )({\n                      blockNumber,\n                      includeTransactions: true,\n                    }),\n                  {\n                    delay: retryDelay,\n                    retryCount,\n                    shouldRetry: ({ error }) =>\n                      error instanceof BlockNotFoundError,\n                  },\n                )\n                retrying = false\n\n                const replacementTransaction = (\n                  block.transactions as {} as Transaction[]\n                ).find(\n                  ({ from, nonce }) =>\n                    from === replacedTransaction!.from &&\n                    nonce === replacedTransaction!.nonce,\n                )\n\n                // If we couldn't find a replacement transaction, continue polling.\n                if (!replacementTransaction) return\n\n                // If we found a replacement transaction, return it's receipt.\n                receipt = await getAction(\n                  client,\n                  getTransactionReceipt,\n                  'getTransactionReceipt',\n                )({\n                  hash: replacementTransaction.hash,\n                })\n\n                // Check if we have enough confirmations. If not, continue polling.\n                if (\n                  confirmations > 1 &&\n                  (!receipt.blockNumber ||\n                    blockNumber - receipt.blockNumber + 1n < confirmations)\n                )\n                  return\n\n                let reason: ReplacementReason = 'replaced'\n                if (\n                  replacementTransaction.to === replacedTransaction.to &&\n                  replacementTransaction.value === replacedTransaction.value &&\n                  replacementTransaction.input === replacedTransaction.input\n                ) {\n                  reason = 'repriced'\n                } else if (\n                  replacementTransaction.from === replacementTransaction.to &&\n                  replacementTransaction.value === 0n\n                ) {\n                  reason = 'cancelled'\n                }\n\n                done(() => {\n                  emit.onReplaced?.({\n                    reason,\n                    replacedTransaction: replacedTransaction! as any,\n                    transaction: replacementTransaction,\n                    transactionReceipt: receipt!,\n                  })\n                  emit.resolve(receipt!)\n                })\n              } catch (err_) {\n                done(() => emit.reject(err_))\n              }\n            } else {\n              done(() => emit.reject(err))\n            }\n          }\n        },\n      })\n    },\n  )\n\n  return promise\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { HasTransportType } from '../../types/transport.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { observe } from '../../utils/observe.js'\nimport { type PollErrorType, poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\n\nimport { type GetBlockReturnType, getBlock } from './getBlock.js'\n\nexport type OnBlockParameter<\n  chain extends Chain | undefined = Chain,\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n> = GetBlockReturnType<chain, includeTransactions, blockTag>\n\nexport type OnBlock<\n  chain extends Chain | undefined = Chain,\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n> = (\n  block: OnBlockParameter<chain, includeTransactions, blockTag>,\n  prevBlock: OnBlockParameter<chain, includeTransactions, blockTag> | undefined,\n) => void\n\nexport type WatchBlocksParameters<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain,\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n> = {\n  /** The callback to call when a new block is received. */\n  onBlock: OnBlock<chain, includeTransactions, blockTag>\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: ((error: Error) => void) | undefined\n} & (\n  | (HasTransportType<transport, 'webSocket' | 'ipc'> extends true\n      ? {\n          blockTag?: undefined\n          emitMissed?: undefined\n          emitOnBegin?: undefined\n          includeTransactions?: undefined\n          /** Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`. */\n          poll?: false | undefined\n          pollingInterval?: undefined\n        }\n      : never)\n  | {\n      /** The block tag. Defaults to \"latest\". */\n      blockTag?: blockTag | BlockTag | undefined\n      /** Whether or not to emit the missed blocks to the callback. */\n      emitMissed?: boolean | undefined\n      /** Whether or not to emit the block to the callback when the subscription opens. */\n      emitOnBegin?: boolean | undefined\n      /** Whether or not to include transaction data in the response. */\n      includeTransactions?: includeTransactions | undefined\n      poll?: true | undefined\n      /** Polling frequency (in ms). Defaults to the client's pollingInterval config. */\n      pollingInterval?: number | undefined\n    }\n)\n\nexport type WatchBlocksReturnType = () => void\n\nexport type WatchBlocksErrorType =\n  | StringifyErrorType\n  | PollErrorType\n  | ErrorType\n\n/**\n * Watches and returns information for incoming blocks.\n *\n * - Docs: https://viem.sh/docs/actions/public/watchBlocks\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_watching-blocks\n * - JSON-RPC Methods:\n *   - When `poll: true`, calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getBlockByNumber) on a polling interval.\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchBlocksParameters}\n * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlocksReturnType}\n *\n * @example\n * import { createPublicClient, watchBlocks, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchBlocks(client, {\n *   onBlock: (block) => console.log(block),\n * })\n */\nexport function watchBlocks<\n  transport extends Transport,\n  chain extends Chain | undefined,\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n>(\n  client: Client<transport, chain>,\n  {\n    blockTag = client.experimental_blockTag ?? 'latest',\n    emitMissed = false,\n    emitOnBegin = false,\n    onBlock,\n    onError,\n    includeTransactions: includeTransactions_,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n  }: WatchBlocksParameters<transport, chain, includeTransactions, blockTag>,\n): WatchBlocksReturnType {\n  const enablePolling = (() => {\n    if (typeof poll_ !== 'undefined') return poll_\n    if (\n      client.transport.type === 'webSocket' ||\n      client.transport.type === 'ipc'\n    )\n      return false\n    if (\n      client.transport.type === 'fallback' &&\n      (client.transport.transports[0].config.type === 'webSocket' ||\n        client.transport.transports[0].config.type === 'ipc')\n    )\n      return false\n    return true\n  })()\n  const includeTransactions = includeTransactions_ ?? false\n\n  let prevBlock:\n    | GetBlockReturnType<chain, false | includeTransactions, 'latest'>\n    | undefined\n\n  const pollBlocks = () => {\n    const observerId = stringify([\n      'watchBlocks',\n      client.uid,\n      blockTag,\n      emitMissed,\n      emitOnBegin,\n      includeTransactions,\n      pollingInterval,\n    ])\n\n    return observe(observerId, { onBlock, onError }, (emit) =>\n      poll(\n        async () => {\n          try {\n            const block = await getAction(\n              client,\n              getBlock,\n              'getBlock',\n            )({\n              blockTag,\n              includeTransactions,\n            })\n            if (block.number !== null && prevBlock?.number != null) {\n              // If the current block number is the same as the previous,\n              // we can skip.\n              if (block.number === prevBlock.number) return\n\n              // If we have missed out on some previous blocks, and the\n              // `emitMissed` flag is truthy, let's emit those blocks.\n              if (block.number - prevBlock.number > 1 && emitMissed) {\n                for (let i = prevBlock?.number + 1n; i < block.number; i++) {\n                  const block = (await getAction(\n                    client,\n                    getBlock,\n                    'getBlock',\n                  )({\n                    blockNumber: i,\n                    includeTransactions,\n                  })) as GetBlockReturnType<chain>\n                  emit.onBlock(block as any, prevBlock as any)\n                  prevBlock = block\n                }\n              }\n            }\n\n            if (\n              // If no previous block exists, emit.\n              prevBlock?.number == null ||\n              // If the block tag is \"pending\" with no block number, emit.\n              (blockTag === 'pending' && block?.number == null) ||\n              // If the next block number is greater than the previous block number, emit.\n              // We don't want to emit blocks in the past.\n              (block.number !== null && block.number > prevBlock.number)\n            ) {\n              emit.onBlock(block as any, prevBlock as any)\n              prevBlock = block as any\n            }\n          } catch (err) {\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin,\n          interval: pollingInterval,\n        },\n      ),\n    )\n  }\n\n  const subscribeBlocks = () => {\n    let active = true\n    let emitFetched = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        if (emitOnBegin) {\n          getAction(\n            client,\n            getBlock,\n            'getBlock',\n          )({\n            blockTag,\n            includeTransactions,\n          })\n            .then((block) => {\n              if (!active) return\n              if (!emitFetched) return\n              onBlock(block as any, undefined)\n              emitFetched = false\n            })\n            .catch(onError)\n        }\n\n        const transport = (() => {\n          if (client.transport.type === 'fallback') {\n            const transport = client.transport.transports.find(\n              (transport: ReturnType<Transport>) =>\n                transport.config.type === 'webSocket' ||\n                transport.config.type === 'ipc',\n            )\n            if (!transport) return client.transport\n            return transport.value\n          }\n          return client.transport\n        })()\n\n        const { unsubscribe: unsubscribe_ } = await transport.subscribe({\n          params: ['newHeads'],\n          async onData(data: any) {\n            if (!active) return\n            const block = (await getAction(\n              client,\n              getBlock,\n              'getBlock',\n            )({\n              blockNumber: data.result?.number,\n              includeTransactions,\n            }).catch(() => {})) as GetBlockReturnType<chain>\n            if (!active) return\n            onBlock(block as any, prevBlock as any)\n            emitFetched = false\n            prevBlock = block\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return () => unsubscribe()\n  }\n\n  return enablePolling ? pollBlocks() : subscribeBlocks()\n}\n", "import type { AbiEvent, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport { InvalidInputRpcError } from '../../errors/rpc.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\nimport type { LogTopic } from '../../types/misc.js'\nimport type { GetPollOptions } from '../../types/transport.js'\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js'\nimport {\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport { formatLog } from '../../utils/formatters/log.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport { poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\nimport {\n  type CreateEventFilterParameters,\n  createEventFilter,\n} from './createEventFilter.js'\nimport { getBlockNumber } from './getBlockNumber.js'\nimport { getFilterChanges } from './getFilterChanges.js'\nimport { type GetLogsParameters, getLogs } from './getLogs.js'\nimport { uninstallFilter } from './uninstallFilter.js'\n\nexport type WatchEventOnLogsParameter<\n  abiEvent extends AbiEvent | undefined = undefined,\n  abiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n  strict extends boolean | undefined = undefined,\n  eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\n> = Log<bigint, number, false, abiEvent, strict, abiEvents, eventName>[]\nexport type WatchEventOnLogsFn<\n  abiEvent extends AbiEvent | undefined = undefined,\n  abiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n  strict extends boolean | undefined = undefined,\n  //\n  _eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\n> = (\n  logs: WatchEventOnLogsParameter<abiEvent, abiEvents, strict, _eventName>,\n) => void\n\nexport type WatchEventParameters<\n  abiEvent extends AbiEvent | undefined = undefined,\n  abiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n  strict extends boolean | undefined = undefined,\n  transport extends Transport = Transport,\n  //\n  _eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\n> = {\n  /** The address of the contract. */\n  address?: Address | Address[] | undefined\n  /** Block to start listening from. */\n  fromBlock?: BlockNumber<bigint> | undefined\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: ((error: Error) => void) | undefined\n  /** The callback to call when new event logs are received. */\n  onLogs: WatchEventOnLogsFn<abiEvent, abiEvents, strict, _eventName>\n} & GetPollOptions<transport> &\n  (\n    | {\n        event: abiEvent\n        events?: undefined\n        args?: MaybeExtractEventArgsFromAbi<abiEvents, _eventName> | undefined\n        /**\n         * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n         * @default false\n         */\n        strict?: strict | undefined\n      }\n    | {\n        event?: undefined\n        events?: abiEvents | undefined\n        args?: undefined\n        /**\n         * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n         * @default false\n         */\n        strict?: strict | undefined\n      }\n    | {\n        event?: undefined\n        events?: undefined\n        args?: undefined\n        strict?: undefined\n      }\n  )\n\nexport type WatchEventReturnType = () => void\n\nexport type WatchEventErrorType =\n  | StringifyErrorType\n  | ObserveErrorType\n  | ErrorType\n\n/**\n * Watches and returns emitted [Event Logs](https://viem.sh/docs/glossary/terms#event-log).\n *\n * - Docs: https://viem.sh/docs/actions/public/watchEvent\n * - JSON-RPC Methods:\n *   - **RPC Provider supports `eth_newFilter`:**\n *     - Calls [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter) to create a filter (called on initialize).\n *     - On a polling interval, it will call [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n *   - **RPC Provider does not support `eth_newFilter`:**\n *     - Calls [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs) for each block between the polling interval.\n *\n * This Action will batch up all the Event Logs found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/actions/public/watchEvent#onLogs).\n *\n * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/actions/public/createEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchEventParameters}\n * @returns A function that can be invoked to stop watching for new Event Logs. {@link WatchEventReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchEvent } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchEvent(client, {\n *   onLogs: (logs) => console.log(logs),\n * })\n */\nexport function watchEvent<\n  chain extends Chain | undefined,\n  const abiEvent extends AbiEvent | undefined = undefined,\n  const abiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n  strict extends boolean | undefined = undefined,\n  transport extends Transport = Transport,\n  _eventName extends string | undefined = undefined,\n>(\n  client: Client<transport, chain>,\n  {\n    address,\n    args,\n    batch = true,\n    event,\n    events,\n    fromBlock,\n    onError,\n    onLogs,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n    strict: strict_,\n  }: WatchEventParameters<abiEvent, abiEvents, strict, transport>,\n): WatchEventReturnType {\n  const enablePolling = (() => {\n    if (typeof poll_ !== 'undefined') return poll_\n    if (typeof fromBlock === 'bigint') return true\n    if (\n      client.transport.type === 'webSocket' ||\n      client.transport.type === 'ipc'\n    )\n      return false\n    if (\n      client.transport.type === 'fallback' &&\n      (client.transport.transports[0].config.type === 'webSocket' ||\n        client.transport.transports[0].config.type === 'ipc')\n    )\n      return false\n    return true\n  })()\n  const strict = strict_ ?? false\n\n  const pollEvent = () => {\n    const observerId = stringify([\n      'watchEvent',\n      address,\n      args,\n      batch,\n      client.uid,\n      event,\n      pollingInterval,\n      fromBlock,\n    ])\n\n    return observe(observerId, { onLogs, onError }, (emit) => {\n      let previousBlockNumber: bigint\n      if (fromBlock !== undefined) previousBlockNumber = fromBlock - 1n\n      let filter: Filter<'event', abiEvents, _eventName, any>\n      let initialized = false\n\n      const unwatch = poll(\n        async () => {\n          if (!initialized) {\n            try {\n              filter = (await getAction(\n                client,\n                createEventFilter as any,\n                'createEventFilter',\n              )({\n                address,\n                args,\n                event: event!,\n                events,\n                strict,\n                fromBlock,\n              } as unknown as CreateEventFilterParameters)) as unknown as Filter<\n                'event',\n                abiEvents,\n                _eventName\n              >\n            } catch {}\n            initialized = true\n            return\n          }\n\n          try {\n            let logs: Log[]\n            if (filter) {\n              logs = await getAction(\n                client,\n                getFilterChanges,\n                'getFilterChanges',\n              )({ filter })\n            } else {\n              // If the filter doesn't exist, we will fall back to use `getLogs`.\n              // The fall back exists because some RPC Providers do not support filters.\n\n              // Fetch the block number to use for `getLogs`.\n              const blockNumber = await getAction(\n                client,\n                getBlockNumber,\n                'getBlockNumber',\n              )({})\n\n              // If the block number has changed, we will need to fetch the logs.\n              // If the block number doesn't exist, we are yet to reach the first poll interval,\n              // so do not emit any logs.\n              if (previousBlockNumber && previousBlockNumber !== blockNumber) {\n                logs = await getAction(\n                  client,\n                  getLogs,\n                  'getLogs',\n                )({\n                  address,\n                  args,\n                  event: event!,\n                  events,\n                  fromBlock: previousBlockNumber + 1n,\n                  toBlock: blockNumber,\n                } as unknown as GetLogsParameters)\n              } else {\n                logs = []\n              }\n              previousBlockNumber = blockNumber\n            }\n\n            if (logs.length === 0) return\n            if (batch) emit.onLogs(logs as any)\n            else for (const log of logs) emit.onLogs([log] as any)\n          } catch (err) {\n            // If a filter has been set and gets uninstalled, providers will throw an InvalidInput error.\n            // Reinitialize the filter when this occurs\n            if (filter && err instanceof InvalidInputRpcError)\n              initialized = false\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin: true,\n          interval: pollingInterval,\n        },\n      )\n\n      return async () => {\n        if (filter)\n          await getAction(\n            client,\n            uninstallFilter,\n            'uninstallFilter',\n          )({ filter })\n        unwatch()\n      }\n    })\n  }\n\n  const subscribeEvent = () => {\n    let active = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        const transport = (() => {\n          if (client.transport.type === 'fallback') {\n            const transport = client.transport.transports.find(\n              (transport: ReturnType<Transport>) =>\n                transport.config.type === 'webSocket' ||\n                transport.config.type === 'ipc',\n            )\n            if (!transport) return client.transport\n            return transport.value\n          }\n          return client.transport\n        })()\n\n        const events_ = events ?? (event ? [event] : undefined)\n        let topics: LogTopic[] = []\n        if (events_) {\n          const encoded = (events_ as AbiEvent[]).flatMap((event) =>\n            encodeEventTopics({\n              abi: [event],\n              eventName: (event as AbiEvent).name,\n              args,\n            } as EncodeEventTopicsParameters),\n          )\n          // TODO: Clean up type casting\n          topics = [encoded as LogTopic]\n          if (event) topics = topics[0] as LogTopic[]\n        }\n\n        const { unsubscribe: unsubscribe_ } = await transport.subscribe({\n          params: ['logs', { address, topics }],\n          onData(data: any) {\n            if (!active) return\n            const log = data.result\n            try {\n              const { eventName, args } = decodeEventLog({\n                abi: events_ ?? [],\n                data: log.data,\n                topics: log.topics,\n                strict,\n              })\n              const formatted = formatLog(log, { args, eventName })\n              onLogs([formatted] as any)\n            } catch (err) {\n              let eventName: string | undefined\n              let isUnnamed: boolean | undefined\n              if (\n                err instanceof DecodeLogDataMismatch ||\n                err instanceof DecodeLogTopicsMismatch\n              ) {\n                // If strict mode is on, and log data/topics do not match event definition, skip.\n                if (strict_) return\n                eventName = err.abiItem.name\n                isUnnamed = err.abiItem.inputs?.some(\n                  (x) => !('name' in x && x.name),\n                )\n              }\n\n              // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n              const formatted = formatLog(log, {\n                args: isUnnamed ? [] : {},\n                eventName,\n              })\n              onLogs([formatted] as any)\n            }\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return () => unsubscribe()\n  }\n\n  return enablePolling ? pollEvent() : subscribeEvent()\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { GetPollOptions } from '../../types/transport.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport { poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\n\nimport { createPendingTransactionFilter } from './createPendingTransactionFilter.js'\nimport { getFilterChanges } from './getFilterChanges.js'\nimport { uninstallFilter } from './uninstallFilter.js'\n\nexport type OnTransactionsParameter = Hash[]\nexport type OnTransactionsFn = (transactions: OnTransactionsParameter) => void\n\nexport type WatchPendingTransactionsParameters<\n  transport extends Transport = Transport,\n> = {\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: ((error: Error) => void) | undefined\n  /** The callback to call when new transactions are received. */\n  onTransactions: OnTransactionsFn\n} & GetPollOptions<transport>\n\nexport type WatchPendingTransactionsReturnType = () => void\n\nexport type WatchPendingTransactionsErrorType =\n  | StringifyErrorType\n  | ObserveErrorType\n  | ErrorType\n\n/**\n * Watches and returns pending transaction hashes.\n *\n * - Docs: https://viem.sh/docs/actions/public/watchPendingTransactions\n * - JSON-RPC Methods:\n *   - When `poll: true`\n *     - Calls [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter) to initialize the filter.\n *     - Calls [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getFilterChanges) on a polling interval.\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newPendingTransactions\"` event.\n *\n * This Action will batch up all the pending transactions found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchPendingTransactions#pollinginterval-optional), and invoke them via [`onTransactions`](https://viem.sh/docs/actions/public/watchPendingTransactions#ontransactions).\n *\n * @param client - Client to use\n * @param parameters - {@link WatchPendingTransactionsParameters}\n * @returns A function that can be invoked to stop watching for new pending transaction hashes. {@link WatchPendingTransactionsReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchPendingTransactions } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = await watchPendingTransactions(client, {\n *   onTransactions: (hashes) => console.log(hashes),\n * })\n */\nexport function watchPendingTransactions<\n  transport extends Transport,\n  chain extends Chain | undefined,\n>(\n  client: Client<transport, chain>,\n  {\n    batch = true,\n    onError,\n    onTransactions,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n  }: WatchPendingTransactionsParameters<transport>,\n) {\n  const enablePolling =\n    typeof poll_ !== 'undefined'\n      ? poll_\n      : client.transport.type !== 'webSocket' && client.transport.type !== 'ipc'\n\n  const pollPendingTransactions = () => {\n    const observerId = stringify([\n      'watchPendingTransactions',\n      client.uid,\n      batch,\n      pollingInterval,\n    ])\n    return observe(observerId, { onTransactions, onError }, (emit) => {\n      let filter: Filter<'transaction'>\n\n      const unwatch = poll(\n        async () => {\n          try {\n            if (!filter) {\n              try {\n                filter = await getAction(\n                  client,\n                  createPendingTransactionFilter,\n                  'createPendingTransactionFilter',\n                )({})\n                return\n              } catch (err) {\n                unwatch()\n                throw err\n              }\n            }\n\n            const hashes = await getAction(\n              client,\n              getFilterChanges,\n              'getFilterChanges',\n            )({ filter })\n            if (hashes.length === 0) return\n            if (batch) emit.onTransactions(hashes)\n            else for (const hash of hashes) emit.onTransactions([hash])\n          } catch (err) {\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin: true,\n          interval: pollingInterval,\n        },\n      )\n\n      return async () => {\n        if (filter)\n          await getAction(\n            client,\n            uninstallFilter,\n            'uninstallFilter',\n          )({ filter })\n        unwatch()\n      }\n    })\n  }\n\n  const subscribePendingTransactions = () => {\n    let active = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\n          params: ['newPendingTransactions'],\n          onData(data: any) {\n            if (!active) return\n            const transaction = data.result\n            onTransactions([transaction])\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return () => unsubscribe()\n  }\n\n  return enablePolling\n    ? pollPendingTransactions()\n    : subscribePendingTransactions()\n}\n", "import type { Address } from 'abitype'\n\nimport type { ExactPartial, Prettify } from '../../types/utils.js'\nimport type { SiweMessage } from './types.js'\n\n/**\n * @description Parses EIP-4361 formatted message into message fields object.\n *\n * @see https://eips.ethereum.org/EIPS/eip-4361\n *\n * @returns EIP-4361 fields object\n */\nexport function parseSiweMessage(\n  message: string,\n): Prettify<ExactPartial<SiweMessage>> {\n  const { scheme, statement, ...prefix } = (message.match(prefixRegex)\n    ?.groups ?? {}) as {\n    address: Address\n    domain: string\n    scheme?: string\n    statement?: string\n  }\n  const { chainId, expirationTime, issuedAt, notBefore, requestId, ...suffix } =\n    (message.match(suffixRegex)?.groups ?? {}) as {\n      chainId: string\n      expirationTime?: string\n      issuedAt?: string\n      nonce: string\n      notBefore?: string\n      requestId?: string\n      uri: string\n      version: '1'\n    }\n  const resources = message.split('Resources:')[1]?.split('\\n- ').slice(1)\n  return {\n    ...prefix,\n    ...suffix,\n    ...(chainId ? { chainId: Number(chainId) } : {}),\n    ...(expirationTime ? { expirationTime: new Date(expirationTime) } : {}),\n    ...(issuedAt ? { issuedAt: new Date(issuedAt) } : {}),\n    ...(notBefore ? { notBefore: new Date(notBefore) } : {}),\n    ...(requestId ? { requestId } : {}),\n    ...(resources ? { resources } : {}),\n    ...(scheme ? { scheme } : {}),\n    ...(statement ? { statement } : {}),\n  }\n}\n\n// https://regexr.com/80gdj\nconst prefixRegex =\n  /^(?:(?<scheme>[a-zA-Z][a-zA-Z0-9+-.]*):\\/\\/)?(?<domain>[a-zA-Z0-9+-.]*(?::[0-9]{1,5})?) (?:wants you to sign in with your Ethereum account:\\n)(?<address>0x[a-fA-F0-9]{40})\\n\\n(?:(?<statement>.*)\\n\\n)?/\n\n// https://regexr.com/80gf9\nconst suffixRegex =\n  /(?:URI: (?<uri>.+))\\n(?:Version: (?<version>.+))\\n(?:Chain ID: (?<chainId>\\d+))\\n(?:Nonce: (?<nonce>[a-zA-Z0-9]+))\\n(?:Issued At: (?<issuedAt>.+))(?:\\nExpiration Time: (?<expirationTime>.+))?(?:\\nNot Before: (?<notBefore>.+))?(?:\\nRequest ID: (?<requestId>.+))?/\n", "import type { Address } from 'abitype'\n\nimport type { ExactPartial } from '../../types/utils.js'\nimport { isAddress } from '../address/isAddress.js'\nimport { isAddressEqual } from '../address/isAddressEqual.js'\nimport type { SiweMessage } from './types.js'\n\nexport type ValidateSiweMessageParameters = {\n  /**\n   * Ethereum address to check against.\n   */\n  address?: Address | undefined\n  /**\n   * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) authority to check against.\n   */\n  domain?: string | undefined\n  /**\n   * EIP-4361 message fields.\n   */\n  message: ExactPartial<SiweMessage>\n  /**\n   * Random string to check against.\n   */\n  nonce?: string | undefined\n  /**\n   * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) URI scheme to check against.\n   */\n  scheme?: string | undefined\n  /**\n   * Current time to check optional `expirationTime` and `notBefore` fields.\n   *\n   * @default new Date()\n   */\n  time?: Date | undefined\n}\n\nexport type ValidateSiweMessageReturnType = boolean\n\n/**\n * @description Validates EIP-4361 message.\n *\n * @see https://eips.ethereum.org/EIPS/eip-4361\n */\nexport function validateSiweMessage(\n  parameters: ValidateSiweMessageParameters,\n): ValidateSiweMessageReturnType {\n  const {\n    address,\n    domain,\n    message,\n    nonce,\n    scheme,\n    time = new Date(),\n  } = parameters\n\n  if (domain && message.domain !== domain) return false\n  if (nonce && message.nonce !== nonce) return false\n  if (scheme && message.scheme !== scheme) return false\n\n  if (message.expirationTime && time >= message.expirationTime) return false\n  if (message.notBefore && time < message.notBefore) return false\n\n  try {\n    if (!message.address) return false\n    if (!isAddress(message.address, { strict: false })) return false\n    if (address && !isAddressEqual(message.address, address)) return false\n  } catch {\n    return false\n  }\n\n  return true\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport type { HashMessageErrorType } from '../../utils/signature/hashMessage.js'\nimport { hashMessage } from '../../utils/signature/hashMessage.js'\nimport { parseSiweMessage } from '../../utils/siwe/parseSiweMessage.js'\nimport {\n  type ValidateSiweMessageParameters,\n  validateSiweMessage,\n} from '../../utils/siwe/validateSiweMessage.js'\nimport {\n  type VerifyHashErrorType,\n  type VerifyHashParameters,\n  verifyHash,\n} from '../public/verifyHash.js'\n\nexport type VerifySiweMessageParameters = Prettify<\n  Pick<VerifyHashParameters, 'blockNumber' | 'blockTag'> &\n    Pick<\n      ValidateSiweMessageParameters,\n      'address' | 'domain' | 'nonce' | 'scheme' | 'time'\n    > & {\n      /**\n       * EIP-4361 formatted message.\n       */\n      message: string\n      /**\n       * Signature to check against.\n       */\n      signature: Hex\n    }\n>\n\nexport type VerifySiweMessageReturnType = boolean\n\nexport type VerifySiweMessageErrorType =\n  | HashMessageErrorType\n  | VerifyHashErrorType\n  | ErrorType\n\n/**\n * Verifies [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message was signed.\n *\n * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n *\n * - Docs {@link https://viem.sh/docs/siwe/actions/verifySiweMessage}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifySiweMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifySiweMessageReturnType}\n */\nexport async function verifySiweMessage<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  parameters: VerifySiweMessageParameters,\n): Promise<VerifySiweMessageReturnType> {\n  const {\n    address,\n    domain,\n    message,\n    nonce,\n    scheme,\n    signature,\n    time = new Date(),\n    ...callRequest\n  } = parameters\n\n  const parsed = parseSiweMessage(message)\n  if (!parsed.address) return false\n\n  const isValid = validateSiweMessage({\n    address,\n    domain,\n    message: parsed,\n    nonce,\n    scheme,\n    time,\n  })\n  if (!isValid) return false\n\n  const hash = hashMessage(message)\n  return verifyHash(client, {\n    address: parsed.address,\n    hash,\n    signature,\n    ...callRequest,\n  })\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { TransactionReceiptRevertedError } from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { TransactionSerializedGeneric } from '../../types/transaction.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { formatTransactionReceipt } from '../../utils/formatters/transactionReceipt.js'\nimport {\n  type FormattedTransactionReceipt,\n  numberToHex,\n} from '../../utils/index.js'\n\nexport type SendRawTransactionSyncParameters = {\n  /** The signed serialized transaction. */\n  serializedTransaction: TransactionSerializedGeneric\n  /** Whether to throw an error if the transaction was detected as reverted. @default true */\n  throwOnReceiptRevert?: boolean | undefined\n  /** The timeout for the transaction. */\n  timeout?: number | undefined\n}\n\nexport type SendRawTransactionSyncReturnType<\n  chain extends Chain | undefined = undefined,\n> = FormattedTransactionReceipt<chain>\n\nexport type SendRawTransactionSyncErrorType = RequestErrorType | ErrorType\n\n/**\n * Sends a **signed** transaction to the network synchronously,\n * and waits for the transaction to be included in a block.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransactionSync\n * - JSON-RPC Method: [`eth_sendRawTransactionSync`](https://eips.ethereum.org/EIPS/eip-7966)\n *\n * @param client - Client to use\n * @param parameters - {@link SendRawTransactionParameters}\n * @returns The transaction receipt. {@link SendRawTransactionSyncReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendRawTransactionSync } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * const receipt = await sendRawTransactionSync(client, {\n *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n * })\n */\nexport async function sendRawTransactionSync<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    serializedTransaction,\n    throwOnReceiptRevert,\n    timeout,\n  }: SendRawTransactionSyncParameters,\n): Promise<SendRawTransactionSyncReturnType<chain>> {\n  const receipt = await client.request(\n    {\n      method: 'eth_sendRawTransactionSync',\n      params: timeout\n        ? [serializedTransaction, numberToHex(timeout)]\n        : [serializedTransaction],\n    },\n    { retryCount: 0 },\n  )\n  const format =\n    client.chain?.formatters?.transactionReceipt?.format ||\n    formatTransactionReceipt\n\n  const formatted = format(receipt) as SendRawTransactionSyncReturnType<chain>\n  if (formatted.status === 'reverted' && throwOnReceiptRevert)\n    throw new TransactionReceiptRevertedError({ receipt: formatted })\n  return formatted\n}\n", "import type { Abi, AbiEvent, Address } from 'abitype'\n\nimport {\n  type GetEnsAddressParameters,\n  type GetEnsAddressReturnType,\n  getEnsAddress,\n} from '../../actions/ens/getEnsAddress.js'\nimport {\n  type GetEnsAvatarParameters,\n  type GetEnsAvatarReturnType,\n  getEnsAvatar,\n} from '../../actions/ens/getEnsAvatar.js'\nimport {\n  type GetEnsNameParameters,\n  type GetEnsNameReturnType,\n  getEnsName,\n} from '../../actions/ens/getEnsName.js'\nimport {\n  type GetEnsResolverParameters,\n  type GetEnsResolverReturnType,\n  getEnsResolver,\n} from '../../actions/ens/getEnsResolver.js'\nimport {\n  type GetEnsTextParameters,\n  type GetEnsTextReturnType,\n  getEnsText,\n} from '../../actions/ens/getEnsText.js'\nimport {\n  type CallParameters,\n  type CallReturnType,\n  call,\n} from '../../actions/public/call.js'\nimport {\n  type CreateAccessListParameters,\n  type CreateAccessListReturnType,\n  createAccessList,\n} from '../../actions/public/createAccessList.js'\nimport {\n  type CreateBlockFilterReturnType,\n  createBlockFilter,\n} from '../../actions/public/createBlockFilter.js'\nimport {\n  type CreateContractEventFilterParameters,\n  type CreateContractEventFilterReturnType,\n  createContractEventFilter,\n} from '../../actions/public/createContractEventFilter.js'\nimport {\n  type CreateEventFilterParameters,\n  type CreateEventFilterReturnType,\n  createEventFilter,\n} from '../../actions/public/createEventFilter.js'\nimport {\n  type CreatePendingTransactionFilterReturnType,\n  createPendingTransactionFilter,\n} from '../../actions/public/createPendingTransactionFilter.js'\nimport {\n  type EstimateContractGasParameters,\n  type EstimateContractGasReturnType,\n  estimateContractGas,\n} from '../../actions/public/estimateContractGas.js'\nimport {\n  type EstimateFeesPerGasParameters,\n  type EstimateFeesPerGasReturnType,\n  estimateFeesPerGas,\n} from '../../actions/public/estimateFeesPerGas.js'\nimport {\n  type EstimateGasParameters,\n  type EstimateGasReturnType,\n  estimateGas,\n} from '../../actions/public/estimateGas.js'\nimport {\n  type EstimateMaxPriorityFeePerGasParameters,\n  type EstimateMaxPriorityFeePerGasReturnType,\n  estimateMaxPriorityFeePerGas,\n} from '../../actions/public/estimateMaxPriorityFeePerGas.js'\nimport {\n  type GetBalanceParameters,\n  type GetBalanceReturnType,\n  getBalance,\n} from '../../actions/public/getBalance.js'\nimport {\n  type GetBlobBaseFeeReturnType,\n  getBlobBaseFee,\n} from '../../actions/public/getBlobBaseFee.js'\nimport {\n  type GetBlockParameters,\n  type GetBlockReturnType,\n  getBlock,\n} from '../../actions/public/getBlock.js'\nimport {\n  type GetBlockNumberParameters,\n  type GetBlockNumberReturnType,\n  getBlockNumber,\n} from '../../actions/public/getBlockNumber.js'\nimport {\n  type GetBlockTransactionCountParameters,\n  type GetBlockTransactionCountReturnType,\n  getBlockTransactionCount,\n} from '../../actions/public/getBlockTransactionCount.js'\nimport {\n  type GetChainIdReturnType,\n  getChainId,\n} from '../../actions/public/getChainId.js'\nimport {\n  type GetCodeParameters,\n  type GetCodeReturnType,\n  getCode,\n} from '../../actions/public/getCode.js'\nimport {\n  type GetContractEventsParameters,\n  type GetContractEventsReturnType,\n  getContractEvents,\n} from '../../actions/public/getContractEvents.js'\nimport {\n  type GetEip712DomainParameters,\n  type GetEip712DomainReturnType,\n  getEip712Domain,\n} from '../../actions/public/getEip712Domain.js'\nimport {\n  type GetFeeHistoryParameters,\n  type GetFeeHistoryReturnType,\n  getFeeHistory,\n} from '../../actions/public/getFeeHistory.js'\nimport {\n  type GetFilterChangesParameters,\n  type GetFilterChangesReturnType,\n  getFilterChanges,\n} from '../../actions/public/getFilterChanges.js'\nimport {\n  type GetFilterLogsParameters,\n  type GetFilterLogsReturnType,\n  getFilterLogs,\n} from '../../actions/public/getFilterLogs.js'\nimport {\n  type GetGasPriceReturnType,\n  getGasPrice,\n} from '../../actions/public/getGasPrice.js'\nimport {\n  type GetLogsParameters,\n  type GetLogsReturnType,\n  getLogs,\n} from '../../actions/public/getLogs.js'\nimport {\n  type GetProofParameters,\n  type GetProofReturnType,\n  getProof,\n} from '../../actions/public/getProof.js'\nimport {\n  type GetStorageAtParameters,\n  type GetStorageAtReturnType,\n  getStorageAt,\n} from '../../actions/public/getStorageAt.js'\nimport {\n  type GetTransactionParameters,\n  type GetTransactionReturnType,\n  getTransaction,\n} from '../../actions/public/getTransaction.js'\nimport {\n  type GetTransactionConfirmationsParameters,\n  type GetTransactionConfirmationsReturnType,\n  getTransactionConfirmations,\n} from '../../actions/public/getTransactionConfirmations.js'\nimport {\n  type GetTransactionCountParameters,\n  type GetTransactionCountReturnType,\n  getTransactionCount,\n} from '../../actions/public/getTransactionCount.js'\nimport {\n  type GetTransactionReceiptParameters,\n  type GetTransactionReceiptReturnType,\n  getTransactionReceipt,\n} from '../../actions/public/getTransactionReceipt.js'\nimport {\n  type MulticallParameters,\n  type MulticallReturnType,\n  multicall,\n} from '../../actions/public/multicall.js'\nimport {\n  type ReadContractParameters,\n  type ReadContractReturnType,\n  readContract,\n} from '../../actions/public/readContract.js'\nimport {\n  type SimulateBlocksParameters,\n  type SimulateBlocksReturnType,\n  simulateBlocks,\n} from '../../actions/public/simulateBlocks.js'\nimport {\n  type SimulateCallsParameters,\n  type SimulateCallsReturnType,\n  simulateCalls,\n} from '../../actions/public/simulateCalls.js'\nimport {\n  type SimulateContractParameters,\n  type SimulateContractReturnType,\n  simulateContract,\n} from '../../actions/public/simulateContract.js'\nimport {\n  type UninstallFilterParameters,\n  type UninstallFilterReturnType,\n  uninstallFilter,\n} from '../../actions/public/uninstallFilter.js'\nimport {\n  type VerifyHashParameters,\n  type VerifyHashReturnType,\n  verifyHash,\n} from '../../actions/public/verifyHash.js'\nimport {\n  type VerifyMessageParameters,\n  type VerifyMessageReturnType,\n  verifyMessage,\n} from '../../actions/public/verifyMessage.js'\nimport {\n  type VerifyTypedDataParameters,\n  type VerifyTypedDataReturnType,\n  verifyTypedData,\n} from '../../actions/public/verifyTypedData.js'\nimport {\n  type WaitForTransactionReceiptParameters,\n  type WaitForTransactionReceiptReturnType,\n  waitForTransactionReceipt,\n} from '../../actions/public/waitForTransactionReceipt.js'\nimport {\n  type WatchBlockNumberParameters,\n  type WatchBlockNumberReturnType,\n  watchBlockNumber,\n} from '../../actions/public/watchBlockNumber.js'\nimport {\n  type WatchBlocksParameters,\n  type WatchBlocksReturnType,\n  watchBlocks,\n} from '../../actions/public/watchBlocks.js'\nimport {\n  type WatchContractEventParameters,\n  type WatchContractEventReturnType,\n  watchContractEvent,\n} from '../../actions/public/watchContractEvent.js'\nimport {\n  type WatchEventParameters,\n  type WatchEventReturnType,\n  watchEvent,\n} from '../../actions/public/watchEvent.js'\nimport {\n  type WatchPendingTransactionsParameters,\n  type WatchPendingTransactionsReturnType,\n  watchPendingTransactions,\n} from '../../actions/public/watchPendingTransactions.js'\nimport {\n  type VerifySiweMessageParameters,\n  type VerifySiweMessageReturnType,\n  verifySiweMessage,\n} from '../../actions/siwe/verifySiweMessage.js'\nimport {\n  type PrepareTransactionRequestParameters,\n  type PrepareTransactionRequestRequest,\n  type PrepareTransactionRequestReturnType,\n  prepareTransactionRequest,\n} from '../../actions/wallet/prepareTransactionRequest.js'\nimport {\n  type SendRawTransactionParameters,\n  type SendRawTransactionReturnType,\n  sendRawTransaction,\n} from '../../actions/wallet/sendRawTransaction.js'\nimport {\n  type SendRawTransactionSyncParameters,\n  type SendRawTransactionSyncReturnType,\n  sendRawTransactionSync,\n} from '../../actions/wallet/sendRawTransactionSync.js'\nimport type { Account } from '../../types/account.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractEventName,\n  ContractFunctionArgs,\n  ContractFunctionName,\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { FeeValuesType } from '../../types/fee.js'\nimport type { FilterType } from '../../types/filter.js'\nimport type { Client } from '../createClient.js'\nimport type { Transport } from '../transports/createTransport.js'\n\nexport type PublicActions<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n> = {\n  /**\n   * Executes a new message call immediately without submitting a transaction to the network.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/call\n   * - JSON-RPC Methods: [`eth_call`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call)\n   *\n   * @param args - {@link CallParameters}\n   * @returns The call data. {@link CallReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const data = await client.call({\n   *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n   *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   * })\n   */\n  call: (parameters: CallParameters<chain>) => Promise<CallReturnType>\n  /**\n   * Creates an EIP-2930 access list that you can include in a transaction.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/createAccessList\n   * - JSON-RPC Methods: `eth_createAccessList`\n   *\n   * @param args - {@link CreateAccessListParameters}\n   * @returns The call data. {@link CreateAccessListReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   *\n   * const data = await client.createAccessList({\n   *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   * })\n   */\n  createAccessList: (\n    parameters: CreateAccessListParameters<chain>,\n  ) => Promise<CreateAccessListReturnType>\n  /**\n   * Creates a Filter to listen for new block hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/createBlockFilter\n   * - JSON-RPC Methods: [`eth_newBlockFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newBlockFilter)\n   *\n   * @returns Filter. {@link CreateBlockFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, createBlockFilter, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await createBlockFilter(client)\n   * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'block' }\n   */\n  createBlockFilter: () => Promise<CreateBlockFilterReturnType>\n  /**\n   * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs).\n   *\n   * - Docs: https://viem.sh/docs/contract/createContractEventFilter\n   *\n   * @param args - {@link CreateContractEventFilterParameters}\n   * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateContractEventFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createContractEventFilter({\n   *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n   * })\n   */\n  createContractEventFilter: <\n    const abi extends Abi | readonly unknown[],\n    eventName extends ContractEventName<abi> | undefined,\n    args extends MaybeExtractEventArgsFromAbi<abi, eventName> | undefined,\n    strict extends boolean | undefined = undefined,\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args: CreateContractEventFilterParameters<\n      abi,\n      eventName,\n      args,\n      strict,\n      fromBlock,\n      toBlock\n    >,\n  ) => Promise<\n    CreateContractEventFilterReturnType<\n      abi,\n      eventName,\n      args,\n      strict,\n      fromBlock,\n      toBlock\n    >\n  >\n  /**\n   * Creates a [`Filter`](https://viem.sh/docs/glossary/types#filter) to listen for new events that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/createEventFilter\n   * - JSON-RPC Methods: [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter)\n   *\n   * @param args - {@link CreateEventFilterParameters}\n   * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateEventFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createEventFilter({\n   *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n   * })\n   */\n  createEventFilter: <\n    const abiEvent extends AbiEvent | undefined = undefined,\n    const abiEvents extends\n      | readonly AbiEvent[]\n      | readonly unknown[]\n      | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n    strict extends boolean | undefined = undefined,\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\n    _EventName extends string | undefined = MaybeAbiEventName<abiEvent>,\n    _Args extends\n      | MaybeExtractEventArgsFromAbi<abiEvents, _EventName>\n      | undefined = undefined,\n  >(\n    args?:\n      | CreateEventFilterParameters<\n          abiEvent,\n          abiEvents,\n          strict,\n          fromBlock,\n          toBlock,\n          _EventName,\n          _Args\n        >\n      | undefined,\n  ) => Promise<\n    CreateEventFilterReturnType<\n      abiEvent,\n      abiEvents,\n      strict,\n      fromBlock,\n      toBlock,\n      _EventName,\n      _Args\n    >\n  >\n  /**\n   * Creates a Filter to listen for new pending transaction hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/createPendingTransactionFilter\n   * - JSON-RPC Methods: [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter)\n   *\n   * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateBlockFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createPendingTransactionFilter()\n   * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'transaction' }\n   */\n  createPendingTransactionFilter: () => Promise<CreatePendingTransactionFilterReturnType>\n  /**\n   * Estimates the gas required to successfully execute a contract write function call.\n   *\n   * - Docs: https://viem.sh/docs/contract/estimateContractGas\n   *\n   * @remarks\n   * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`estimateGas` action](https://viem.sh/docs/actions/public/estimateGas) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n   *\n   * @param args - {@link EstimateContractGasParameters}\n   * @returns The gas estimate (in wei). {@link EstimateContractGasReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const gas = await client.estimateContractGas({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function mint() public']),\n   *   functionName: 'mint',\n   *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n   * })\n   */\n  estimateContractGas: <\n    chain extends Chain | undefined,\n    const abi extends Abi | readonly unknown[],\n    functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n    args extends ContractFunctionArgs<\n      abi,\n      'nonpayable' | 'payable',\n      functionName\n    >,\n  >(\n    args: EstimateContractGasParameters<abi, functionName, args, chain>,\n  ) => Promise<EstimateContractGasReturnType>\n  /**\n   * Estimates the gas necessary to complete a transaction without submitting it to the network.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/estimateGas\n   * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)\n   *\n   * @param args - {@link EstimateGasParameters}\n   * @returns The gas estimate (in wei). {@link EstimateGasReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseEther } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const gasEstimate = await client.estimateGas({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *   value: parseEther('1'),\n   * })\n   */\n  estimateGas: (\n    args: EstimateGasParameters<chain>,\n  ) => Promise<EstimateGasReturnType>\n  /**\n   * Returns the balance of an address in wei.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBalance\n   * - JSON-RPC Methods: [`eth_getBalance`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance)\n   *\n   * @remarks\n   * You can convert the balance to ether units with [`formatEther`](https://viem.sh/docs/utilities/formatEther).\n   *\n   * ```ts\n   * const balance = await getBalance(client, {\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   blockTag: 'safe'\n   * })\n   * const balanceAsEther = formatEther(balance)\n   * // \"6.942\"\n   * ```\n   *\n   * @param args - {@link GetBalanceParameters}\n   * @returns The balance of the address in wei. {@link GetBalanceReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const balance = await client.getBalance({\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   * // 10000000000000000000000n (wei)\n   */\n  getBalance: (args: GetBalanceParameters) => Promise<GetBalanceReturnType>\n  /**\n   * Returns the base fee per blob gas in wei.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBlobBaseFee\n   * - JSON-RPC Methods: [`eth_blobBaseFee`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blobBaseFee)\n   *\n   * @param client - Client to use\n   * @returns The blob base fee (in wei). {@link GetBlobBaseFeeReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { getBlobBaseFee } from 'viem/public'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const blobBaseFee = await client.getBlobBaseFee()\n   */\n  getBlobBaseFee: () => Promise<GetBlobBaseFeeReturnType>\n  /**\n   * Returns information about a block at a block number, hash, or tag.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBlock\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_fetching-blocks\n   * - JSON-RPC Methods:\n   *   - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) for `blockNumber` & `blockTag`.\n   *   - Calls [`eth_getBlockByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbyhash) for `blockHash`.\n   *\n   * @param args - {@link GetBlockParameters}\n   * @returns Information about the block. {@link GetBlockReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const block = await client.getBlock()\n   */\n  getBlock: <\n    includeTransactions extends boolean = false,\n    blockTag extends BlockTag = 'latest',\n  >(\n    args?: GetBlockParameters<includeTransactions, blockTag> | undefined,\n  ) => Promise<GetBlockReturnType<chain, includeTransactions, blockTag>>\n  /**\n   * Returns the number of the most recent block seen.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBlockNumber\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_fetching-blocks\n   * - JSON-RPC Methods: [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber)\n   *\n   * @param args - {@link GetBlockNumberParameters}\n   * @returns The number of the block. {@link GetBlockNumberReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const blockNumber = await client.getBlockNumber()\n   * // 69420n\n   */\n  getBlockNumber: (\n    args?: GetBlockNumberParameters | undefined,\n  ) => Promise<GetBlockNumberReturnType>\n  /**\n   * Returns the number of Transactions at a block number, hash, or tag.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBlockTransactionCount\n   * - JSON-RPC Methods:\n   *   - Calls [`eth_getBlockTransactionCountByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbynumber) for `blockNumber` & `blockTag`.\n   *   - Calls [`eth_getBlockTransactionCountByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbyhash) for `blockHash`.\n   *\n   * @param args - {@link GetBlockTransactionCountParameters}\n   * @returns The block transaction count. {@link GetBlockTransactionCountReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const count = await client.getBlockTransactionCount()\n   */\n  getBlockTransactionCount: (\n    args?: GetBlockTransactionCountParameters | undefined,\n  ) => Promise<GetBlockTransactionCountReturnType>\n  /** @deprecated Use `getCode` instead. */\n  getBytecode: (args: GetCodeParameters) => Promise<GetCodeReturnType>\n  /**\n   * Returns the chain ID associated with the current network.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getChainId\n   * - JSON-RPC Methods: [`eth_chainId`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid)\n   *\n   * @returns The current chain ID. {@link GetChainIdReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const chainId = await client.getChainId()\n   * // 1\n   */\n  getChainId: () => Promise<GetChainIdReturnType>\n  /**\n   * Retrieves the bytecode at an address.\n   *\n   * - Docs: https://viem.sh/docs/contract/getCode\n   * - JSON-RPC Methods: [`eth_getCode`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getcode)\n   *\n   * @param args - {@link GetBytecodeParameters}\n   * @returns The contract's bytecode. {@link GetBytecodeReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const code = await client.getCode({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   * })\n   */\n  getCode: (args: GetCodeParameters) => Promise<GetCodeReturnType>\n  /**\n   * Returns a list of event logs emitted by a contract.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getContractEvents\n   * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link GetContractEventsParameters}\n   * @returns A list of event logs. {@link GetContractEventsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { wagmiAbi } from './abi'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const logs = await client.getContractEvents(client, {\n   *  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *  abi: wagmiAbi,\n   *  eventName: 'Transfer'\n   * })\n   */\n  getContractEvents: <\n    const abi extends Abi | readonly unknown[],\n    eventName extends ContractEventName<abi> | undefined = undefined,\n    strict extends boolean | undefined = undefined,\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args: GetContractEventsParameters<\n      abi,\n      eventName,\n      strict,\n      fromBlock,\n      toBlock\n    >,\n  ) => Promise<\n    GetContractEventsReturnType<abi, eventName, strict, fromBlock, toBlock>\n  >\n  /**\n   * Reads the EIP-712 domain from a contract, based on the ERC-5267 specification.\n   *\n   * @param client - A {@link Client} instance.\n   * @param parameters - The parameters of the action. {@link GetEip712DomainParameters}\n   * @returns The EIP-712 domain, fields, and extensions. {@link GetEip712DomainReturnType}\n   *\n   * @example\n   * ```ts\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   *\n   * const domain = await client.getEip712Domain({\n   *   address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n   * })\n   * // {\n   * //   domain: {\n   * //     name: 'ExampleContract',\n   * //     version: '1',\n   * //     chainId: 1,\n   * //     verifyingContract: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n   * //   },\n   * //   fields: '0x0f',\n   * //   extensions: [],\n   * // }\n   * ```\n   */\n  getEip712Domain: (\n    args: GetEip712DomainParameters,\n  ) => Promise<GetEip712DomainReturnType>\n  /**\n   * Gets address for ENS name.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsAddress\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n   *\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n   *\n   * @param args - {@link GetEnsAddressParameters}\n   * @returns Address for ENS name or `null` if not found. {@link GetEnsAddressReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { normalize } from 'viem/ens'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const ensAddress = await client.getEnsAddress({\n   *   name: normalize('wevm.eth'),\n   * })\n   * // '0xd2135CfB216b74109775236E36d4b433F1DF507B'\n   */\n  getEnsAddress: (\n    args: GetEnsAddressParameters,\n  ) => Promise<GetEnsAddressReturnType>\n  /**\n   * Gets the avatar of an ENS name.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsAvatar\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls [`getEnsText`](https://viem.sh/docs/ens/actions/getEnsText) with `key` set to `'avatar'`.\n   *\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n   *\n   * @param args - {@link GetEnsAvatarParameters}\n   * @returns Avatar URI or `null` if not found. {@link GetEnsAvatarReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { normalize } from 'viem/ens'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const ensAvatar = await client.getEnsAvatar({\n   *   name: normalize('wevm.eth'),\n   * })\n   * // 'https://ipfs.io/ipfs/Qma8mnp6xV3J2cRNf3mTth5C8nV11CAnceVinc3y8jSbio'\n   */\n  getEnsAvatar: (\n    args: GetEnsAvatarParameters,\n  ) => Promise<GetEnsAvatarReturnType>\n  /**\n   * Gets primary name for specified address.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsName\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls `reverse(bytes)` on ENS Universal Resolver Contract to \"reverse resolve\" the address to the primary ENS name.\n   *\n   * @param args - {@link GetEnsNameParameters}\n   * @returns Name or `null` if not found. {@link GetEnsNameReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const ensName = await client.getEnsName({\n   *   address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n   * })\n   * // 'wevm.eth'\n   */\n  getEnsName: (args: GetEnsNameParameters) => Promise<GetEnsNameReturnType>\n  /**\n   * Gets resolver for ENS name.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls `findResolver(bytes)` on ENS Universal Resolver Contract to retrieve the resolver of an ENS name.\n   *\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n   *\n   * @param args - {@link GetEnsResolverParameters}\n   * @returns Address for ENS resolver. {@link GetEnsResolverReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { normalize } from 'viem/ens'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const resolverAddress = await client.getEnsResolver({\n   *   name: normalize('wevm.eth'),\n   * })\n   * // '0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41'\n   */\n  getEnsResolver: (\n    args: GetEnsResolverParameters,\n  ) => Promise<GetEnsResolverReturnType>\n  /**\n   * Gets a text record for specified ENS name.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n   *\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n   *\n   * @param args - {@link GetEnsTextParameters}\n   * @returns Address for ENS resolver. {@link GetEnsTextReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { normalize } from 'viem/ens'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const twitterRecord = await client.getEnsText({\n   *   name: normalize('wevm.eth'),\n   *   key: 'com.twitter',\n   * })\n   * // 'wevm_dev'\n   */\n  getEnsText: (args: GetEnsTextParameters) => Promise<GetEnsTextReturnType>\n  /**\n   * Returns a collection of historical gas information.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getFeeHistory\n   * - JSON-RPC Methods: [`eth_feeHistory`](https://docs.alchemy.com/reference/eth-feehistory)\n   *\n   * @param args - {@link GetFeeHistoryParameters}\n   * @returns The gas estimate (in wei). {@link GetFeeHistoryReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const feeHistory = await client.getFeeHistory({\n   *   blockCount: 4,\n   *   rewardPercentiles: [25, 75],\n   * })\n   */\n  getFeeHistory: (\n    args: GetFeeHistoryParameters,\n  ) => Promise<GetFeeHistoryReturnType>\n  /**\n   * Returns an estimate for the fees per gas for a transaction to be included\n   * in the next block.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/estimateFeesPerGas\n   *\n   * @param client - Client to use\n   * @param parameters - {@link EstimateFeesPerGasParameters}\n   * @returns An estimate (in wei) for the fees per gas. {@link EstimateFeesPerGasReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const maxPriorityFeePerGas = await client.estimateFeesPerGas()\n   * // { maxFeePerGas: ..., maxPriorityFeePerGas: ... }\n   */\n  estimateFeesPerGas: <\n    chainOverride extends Chain | undefined = undefined,\n    type extends FeeValuesType = 'eip1559',\n  >(\n    args?: EstimateFeesPerGasParameters<chain, chainOverride, type> | undefined,\n  ) => Promise<EstimateFeesPerGasReturnType<type>>\n  /**\n   * Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getFilterChanges\n   * - JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\n   *\n   * @remarks\n   * A Filter can be created from the following actions:\n   *\n   * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\n   * - [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\n   * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\n   * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\n   *\n   * Depending on the type of filter, the return value will be different:\n   *\n   * - If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\n   * - If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\n   * - If the filter was created with `createBlockFilter`, it returns a list of block hashes.\n   *\n   * @param args - {@link GetFilterChangesParameters}\n   * @returns Logs or hashes. {@link GetFilterChangesReturnType}\n   *\n   * @example\n   * // Blocks\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createBlockFilter()\n   * const hashes = await client.getFilterChanges({ filter })\n   *\n   * @example\n   * // Contract Events\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createContractEventFilter({\n   *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n   *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n   *   eventName: 'Transfer',\n   * })\n   * const logs = await client.getFilterChanges({ filter })\n   *\n   * @example\n   * // Raw Events\n   * import { createPublicClient, http, parseAbiItem } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createEventFilter({\n   *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n   *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n   * })\n   * const logs = await client.getFilterChanges({ filter })\n   *\n   * @example\n   * // Transactions\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createPendingTransactionFilter()\n   * const hashes = await client.getFilterChanges({ filter })\n   */\n  getFilterChanges: <\n    filterType extends FilterType,\n    const abi extends Abi | readonly unknown[] | undefined,\n    eventName extends string | undefined,\n    strict extends boolean | undefined = undefined,\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args: GetFilterChangesParameters<\n      filterType,\n      abi,\n      eventName,\n      strict,\n      fromBlock,\n      toBlock\n    >,\n  ) => Promise<\n    GetFilterChangesReturnType<\n      filterType,\n      abi,\n      eventName,\n      strict,\n      fromBlock,\n      toBlock\n    >\n  >\n  /**\n   * Returns a list of event logs since the filter was created.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getFilterLogs\n   * - JSON-RPC Methods: [`eth_getFilterLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterlogs)\n   *\n   * @remarks\n   * `getFilterLogs` is only compatible with **event filters**.\n   *\n   * @param args - {@link GetFilterLogsParameters}\n   * @returns A list of event logs. {@link GetFilterLogsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbiItem } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createEventFilter({\n   *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n   *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n   * })\n   * const logs = await client.getFilterLogs({ filter })\n   */\n  getFilterLogs: <\n    const abi extends Abi | readonly unknown[] | undefined,\n    eventName extends string | undefined,\n    strict extends boolean | undefined = undefined,\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args: GetFilterLogsParameters<abi, eventName, strict, fromBlock, toBlock>,\n  ) => Promise<\n    GetFilterLogsReturnType<abi, eventName, strict, fromBlock, toBlock>\n  >\n  /**\n   * Returns the current price of gas (in wei).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getGasPrice\n   * - JSON-RPC Methods: [`eth_gasPrice`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice)\n   *\n   * @returns The gas price (in wei). {@link GetGasPriceReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const gasPrice = await client.getGasPrice()\n   */\n  getGasPrice: () => Promise<GetGasPriceReturnType>\n  /**\n   * Returns a list of event logs matching the provided parameters.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getLogs\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/logs_event-logs\n   * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n   *\n   * @param args - {@link GetLogsParameters}\n   * @returns A list of event logs. {@link GetLogsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbiItem } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const logs = await client.getLogs()\n   */\n  getLogs: <\n    const abiEvent extends AbiEvent | undefined = undefined,\n    const abiEvents extends\n      | readonly AbiEvent[]\n      | readonly unknown[]\n      | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n    strict extends boolean | undefined = undefined,\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args?:\n      | GetLogsParameters<abiEvent, abiEvents, strict, fromBlock, toBlock>\n      | undefined,\n  ) => Promise<\n    GetLogsReturnType<abiEvent, abiEvents, strict, fromBlock, toBlock>\n  >\n  /**\n   * Returns the account and storage values of the specified account including the Merkle-proof.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getProof\n   * - JSON-RPC Methods:\n   *   - Calls [`eth_getProof`](https://eips.ethereum.org/EIPS/eip-1186)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link GetProofParameters}\n   * @returns Proof data. {@link GetProofReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const block = await client.getProof({\n   *  address: '0x...',\n   *  storageKeys: ['0x...'],\n   * })\n   */\n  getProof: (args: GetProofParameters) => Promise<GetProofReturnType>\n  /**\n   * Returns an estimate for the max priority fee per gas (in wei) for a transaction\n   * to be included in the next block.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/estimateMaxPriorityFeePerGas\n   *\n   * @param client - Client to use\n   * @returns An estimate (in wei) for the max priority fee per gas. {@link EstimateMaxPriorityFeePerGasReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const maxPriorityFeePerGas = await client.estimateMaxPriorityFeePerGas()\n   * // 10000000n\n   */\n  estimateMaxPriorityFeePerGas: <\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    args?:\n      | EstimateMaxPriorityFeePerGasParameters<chain, chainOverride>\n      | undefined,\n  ) => Promise<EstimateMaxPriorityFeePerGasReturnType>\n  /**\n   * Returns the value from a storage slot at a given address.\n   *\n   * - Docs: https://viem.sh/docs/contract/getStorageAt\n   * - JSON-RPC Methods: [`eth_getStorageAt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getstorageat)\n   *\n   * @param args - {@link GetStorageAtParameters}\n   * @returns The value of the storage slot. {@link GetStorageAtReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { getStorageAt } from 'viem/contract'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const code = await client.getStorageAt({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   slot: toHex(0),\n   * })\n   */\n  getStorageAt: (\n    args: GetStorageAtParameters,\n  ) => Promise<GetStorageAtReturnType>\n  /**\n   * Returns information about a [Transaction](https://viem.sh/docs/glossary/terms#transaction) given a hash or block identifier.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getTransaction\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_fetching-transactions\n   * - JSON-RPC Methods: [`eth_getTransactionByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionByHash)\n   *\n   * @param args - {@link GetTransactionParameters}\n   * @returns The transaction information. {@link GetTransactionReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const transaction = await client.getTransaction({\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n   * })\n   */\n  getTransaction: <blockTag extends BlockTag = 'latest'>(\n    args: GetTransactionParameters<blockTag>,\n  ) => Promise<GetTransactionReturnType<chain, blockTag>>\n  /**\n   * Returns the number of blocks passed (confirmations) since the transaction was processed on a block.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getTransactionConfirmations\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_fetching-transactions\n   * - JSON-RPC Methods: [`eth_getTransactionConfirmations`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionConfirmations)\n   *\n   * @param args - {@link GetTransactionConfirmationsParameters}\n   * @returns The number of blocks passed since the transaction was processed. If confirmations is 0, then the Transaction has not been confirmed & processed yet. {@link GetTransactionConfirmationsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const confirmations = await client.getTransactionConfirmations({\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n   * })\n   */\n  getTransactionConfirmations: (\n    args: GetTransactionConfirmationsParameters<chain>,\n  ) => Promise<GetTransactionConfirmationsReturnType>\n  /**\n   * Returns the number of [Transactions](https://viem.sh/docs/glossary/terms#transaction) an Account has broadcast / sent.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getTransactionCount\n   * - JSON-RPC Methods: [`eth_getTransactionCount`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount)\n   *\n   * @param args - {@link GetTransactionCountParameters}\n   * @returns The number of transactions an account has sent. {@link GetTransactionCountReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const transactionCount = await client.getTransactionCount({\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  getTransactionCount: (\n    args: GetTransactionCountParameters,\n  ) => Promise<GetTransactionCountReturnType>\n  /**\n   * Returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt) given a [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getTransactionReceipt\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_fetching-transactions\n   * - JSON-RPC Methods: [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt)\n   *\n   * @param args - {@link GetTransactionReceiptParameters}\n   * @returns The transaction receipt. {@link GetTransactionReceiptReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const transactionReceipt = await client.getTransactionReceipt({\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n   * })\n   */\n  getTransactionReceipt: (\n    args: GetTransactionReceiptParameters,\n  ) => Promise<GetTransactionReceiptReturnType<chain>>\n  /**\n   * Similar to [`readContract`](https://viem.sh/docs/contract/readContract), but batches up multiple functions on a contract in a single RPC call via the [`multicall3` contract](https://github.com/mds1/multicall).\n   *\n   * - Docs: https://viem.sh/docs/contract/multicall\n   *\n   * @param args - {@link MulticallParameters}\n   * @returns An array of results with accompanying status. {@link MulticallReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const abi = parseAbi([\n   *   'function balanceOf(address) view returns (uint256)',\n   *   'function totalSupply() view returns (uint256)',\n   * ])\n   * const result = await client.multicall({\n   *   contracts: [\n   *     {\n   *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *       abi,\n   *       functionName: 'balanceOf',\n   *       args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n   *     },\n   *     {\n   *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *       abi,\n   *       functionName: 'totalSupply',\n   *     },\n   *   ],\n   * })\n   * // [{ result: 424122n, status: 'success' }, { result: 1000000n, status: 'success' }]\n   */\n  multicall: <\n    const contracts extends readonly unknown[],\n    allowFailure extends boolean = true,\n  >(\n    args: MulticallParameters<contracts, allowFailure>,\n  ) => Promise<MulticallReturnType<contracts, allowFailure>>\n  /**\n   * Prepares a transaction request for signing.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest\n   *\n   * @param args - {@link PrepareTransactionRequestParameters}\n   * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   */\n  prepareTransactionRequest: <\n    const request extends PrepareTransactionRequestRequest<\n      chain,\n      chainOverride\n    >,\n    chainOverride extends Chain | undefined = undefined,\n    accountOverride extends Account | Address | undefined = undefined,\n  >(\n    args: PrepareTransactionRequestParameters<\n      chain,\n      account,\n      chainOverride,\n      accountOverride,\n      request\n    >,\n  ) => Promise<\n    PrepareTransactionRequestReturnType<\n      chain,\n      account,\n      chainOverride,\n      accountOverride,\n      request\n    >\n  >\n  /**\n   * Calls a read-only function on a contract, and returns the response.\n   *\n   * - Docs: https://viem.sh/docs/contract/readContract\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_reading-contracts\n   *\n   * @remarks\n   * A \"read-only\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\n   *\n   * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n   *\n   * @param args - {@link ReadContractParameters}\n   * @returns The response from the contract. Type is inferred. {@link ReadContractReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { readContract } from 'viem/contract'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const result = await client.readContract({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\n   *   functionName: 'balanceOf',\n   *   args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n   * })\n   * // 424122n\n   */\n  readContract: <\n    const abi extends Abi | readonly unknown[],\n    functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n    const args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  >(\n    args: ReadContractParameters<abi, functionName, args>,\n  ) => Promise<ReadContractReturnType<abi, functionName, args>>\n  /**\n   * Sends a **signed** transaction to the network\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransaction\n   * - JSON-RPC Method: [`eth_sendRawTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link SendRawTransactionParameters}\n   * @returns The transaction hash. {@link SendRawTransactionReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { sendRawTransaction } from 'viem/wallet'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const hash = await client.sendRawTransaction({\n   *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n   * })\n   */\n  sendRawTransaction: (\n    args: SendRawTransactionParameters,\n  ) => Promise<SendRawTransactionReturnType>\n  /**\n   * Sends a **signed** transaction to the network\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransactionSync\n   * - JSON-RPC Method: [`eth_sendRawTransactionSync`](https://eips.ethereum.org/EIPS/eip-7966)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link SendRawTransactionSyncParameters}\n   * @returns The transaction receipt. {@link SendRawTransactionSyncReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { sendRawTransactionSync } from 'viem/wallet'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const receipt = await client.sendRawTransactionSync({\n   *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n   * })\n   */\n  sendRawTransactionSync: (\n    args: SendRawTransactionSyncParameters,\n  ) => Promise<SendRawTransactionSyncReturnType<chain>>\n  /**\n   * @deprecated Use `simulateBlocks` instead.\n   */\n  simulate: <const calls extends readonly unknown[]>(\n    args: SimulateBlocksParameters<calls>,\n  ) => Promise<SimulateBlocksReturnType<calls>>\n  /**\n   * Simulates a set of calls on block(s) with optional block and state overrides.\n   *\n   * @example\n   * ```ts\n   * import { createPublicClient, http, parseEther } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   *\n   * const result = await client.simulateBlocks({\n   *   blocks: [{\n   *     blockOverrides: {\n   *       number: 69420n,\n   *     },\n   *     calls: [{\n   *       {\n   *         account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n   *         data: '0xdeadbeef',\n   *         to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *       },\n   *       {\n   *         account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n   *         to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *         value: parseEther('1'),\n   *       },\n   *     }],\n   *     stateOverrides: [{\n   *       address: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n   *       balance: parseEther('10'),\n   *     }],\n   *   }]\n   * })\n   * ```\n   *\n   * @param client - Client to use.\n   * @param parameters - {@link SimulateParameters}\n   * @returns Simulated blocks. {@link SimulateReturnType}\n   */\n  simulateBlocks: <const calls extends readonly unknown[]>(\n    args: SimulateBlocksParameters<calls>,\n  ) => Promise<SimulateBlocksReturnType<calls>>\n  /**\n   * Simulates a set of calls.\n   *\n   * @example\n   * ```ts\n   * import { createPublicClient, http, parseEther } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   *\n   * const result = await client.simulateCalls({\n   *   account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n   *   calls: [{\n   *     {\n   *       data: '0xdeadbeef',\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *     },\n   *     {\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *       value: parseEther('1'),\n   *     },\n   *   ]\n   * })\n   * ```\n   *\n   * @param client - Client to use.\n   * @param parameters - {@link SimulateCallsParameters}\n   * @returns Results. {@link SimulateCallsReturnType}\n   */\n  simulateCalls: <const calls extends readonly unknown[]>(\n    args: SimulateCallsParameters<calls>,\n  ) => Promise<SimulateCallsReturnType<calls>>\n  /**\n   * Simulates/validates a contract interaction. This is useful for retrieving **return data** and **revert reasons** of contract write functions.\n   *\n   * - Docs: https://viem.sh/docs/contract/simulateContract\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\n   *\n   * @remarks\n   * This function does not require gas to execute and _**does not**_ change the state of the blockchain. It is almost identical to [`readContract`](https://viem.sh/docs/contract/readContract), but also supports contract write functions.\n   *\n   * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n   *\n   * @param args - {@link SimulateContractParameters}\n   * @returns The simulation result and write request. {@link SimulateContractReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const result = await client.simulateContract({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function mint(uint32) view returns (uint32)']),\n   *   functionName: 'mint',\n   *   args: ['69420'],\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  simulateContract: <\n    const abi extends Abi | readonly unknown[],\n    functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n    const args extends ContractFunctionArgs<\n      abi,\n      'nonpayable' | 'payable',\n      functionName\n    >,\n    chainOverride extends Chain | undefined,\n    accountOverride extends Account | Address | undefined = undefined,\n  >(\n    args: SimulateContractParameters<\n      abi,\n      functionName,\n      args,\n      chain,\n      chainOverride,\n      accountOverride\n    >,\n  ) => Promise<\n    SimulateContractReturnType<\n      abi,\n      functionName,\n      args,\n      chain,\n      account,\n      chainOverride,\n      accountOverride\n    >\n  >\n  /**\n   * Verify that a hash was signed by the provided address.\n   *\n   * - Docs {@link https://viem.sh/docs/actions/public/verifyHash}\n   *\n   * @param parameters - {@link VerifyHashParameters}\n   * @returns Whether or not the signature is valid. {@link VerifyHashReturnType}\n   */\n  verifyHash: (args: VerifyHashParameters) => Promise<VerifyHashReturnType>\n  /**\n   * Verify that a message was signed by the provided address.\n   *\n   * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n   *\n   * - Docs {@link https://viem.sh/docs/actions/public/verifyMessage}\n   *\n   * @param parameters - {@link VerifyMessageParameters}\n   * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\n   */\n  verifyMessage: (\n    args: VerifyMessageParameters,\n  ) => Promise<VerifyMessageReturnType>\n  /**\n   * Verifies [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message was signed.\n   *\n   * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n   *\n   * - Docs {@link https://viem.sh/docs/siwe/actions/verifySiweMessage}\n   *\n   * @param parameters - {@link VerifySiweMessageParameters}\n   * @returns Whether or not the signature is valid. {@link VerifySiweMessageReturnType}\n   */\n  verifySiweMessage: (\n    args: VerifySiweMessageParameters,\n  ) => Promise<VerifySiweMessageReturnType>\n  /**\n   * Verify that typed data was signed by the provided address.\n   *\n   * - Docs {@link https://viem.sh/docs/actions/public/verifyTypedData}\n   *\n   * @param parameters - {@link VerifyTypedDataParameters}\n   * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\n   */\n  verifyTypedData: (\n    args: VerifyTypedDataParameters,\n  ) => Promise<VerifyTypedDataReturnType>\n  /**\n   * Destroys a Filter that was created from one of the following Actions:\n   *\n   * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\n   * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\n   * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\n   *\n   * - Docs: https://viem.sh/docs/actions/public/uninstallFilter\n   * - JSON-RPC Methods: [`eth_uninstallFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_uninstallFilter)\n   *\n   * @param args - {@link UninstallFilterParameters}\n   * @returns A boolean indicating if the Filter was successfully uninstalled. {@link UninstallFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { createPendingTransactionFilter, uninstallFilter } from 'viem/public'\n   *\n   * const filter = await client.createPendingTransactionFilter()\n   * const uninstalled = await client.uninstallFilter({ filter })\n   * // true\n   */\n  uninstallFilter: (\n    args: UninstallFilterParameters,\n  ) => Promise<UninstallFilterReturnType>\n  /**\n   * Waits for the [Transaction](https://viem.sh/docs/glossary/terms#transaction) to be included on a [Block](https://viem.sh/docs/glossary/terms#block) (one confirmation), and then returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt). If the Transaction reverts, then the action will throw an error.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/waitForTransactionReceipt\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions\n   * - JSON-RPC Methods:\n   *   - Polls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt) on each block until it has been processed.\n   *   - If a Transaction has been replaced:\n   *     - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) and extracts the transactions\n   *     - Checks if one of the Transactions is a replacement\n   *     - If so, calls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt).\n   *\n   * @remarks\n   * The `waitForTransactionReceipt` action additionally supports Replacement detection (e.g. sped up Transactions).\n   *\n   * Transactions can be replaced when a user modifies their transaction in their wallet (to speed up or cancel). Transactions are replaced when they are sent from the same nonce.\n   *\n   * There are 3 types of Transaction Replacement reasons:\n   *\n   * - `repriced`: The gas price has been modified (e.g. different `maxFeePerGas`)\n   * - `cancelled`: The Transaction has been cancelled (e.g. `value === 0n`)\n   * - `replaced`: The Transaction has been replaced (e.g. different `value` or `data`)\n   *\n   * @param args - {@link WaitForTransactionReceiptParameters}\n   * @returns The transaction receipt. {@link WaitForTransactionReceiptReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const transactionReceipt = await client.waitForTransactionReceipt({\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n   * })\n   */\n  waitForTransactionReceipt: (\n    args: WaitForTransactionReceiptParameters<chain>,\n  ) => Promise<WaitForTransactionReceiptReturnType<chain>>\n  /**\n   * Watches and returns incoming block numbers.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/watchBlockNumber\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_watching-blocks\n   * - JSON-RPC Methods:\n   *   - When `poll: true`, calls [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber) on a polling interval.\n   *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n   *\n   * @param args - {@link WatchBlockNumberParameters}\n   * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlockNumberReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = await client.watchBlockNumber({\n   *   onBlockNumber: (blockNumber) => console.log(blockNumber),\n   * })\n   */\n  watchBlockNumber: (\n    args: WatchBlockNumberParameters,\n  ) => WatchBlockNumberReturnType\n  /**\n   * Watches and returns information for incoming blocks.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/watchBlocks\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_watching-blocks\n   * - JSON-RPC Methods:\n   *   - When `poll: true`, calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getBlockByNumber) on a polling interval.\n   *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n   *\n   * @param args - {@link WatchBlocksParameters}\n   * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlocksReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = await client.watchBlocks({\n   *   onBlock: (block) => console.log(block),\n   * })\n   */\n  watchBlocks: <\n    includeTransactions extends boolean = false,\n    blockTag extends BlockTag = 'latest',\n  >(\n    args: WatchBlocksParameters<\n      transport,\n      chain,\n      includeTransactions,\n      blockTag\n    >,\n  ) => WatchBlocksReturnType\n  /**\n   * Watches and returns emitted contract event logs.\n   *\n   * - Docs: https://viem.sh/docs/contract/watchContractEvent\n   *\n   * @remarks\n   * This Action will batch up all the event logs found within the [`pollingInterval`](https://viem.sh/docs/contract/watchContractEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/contract/watchContractEvent#onLogs).\n   *\n   * `watchContractEvent` will attempt to create an [Event Filter](https://viem.sh/docs/contract/createContractEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchContractEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n   *\n   * @param args - {@link WatchContractEventParameters}\n   * @returns A function that can be invoked to stop watching for new event logs. {@link WatchContractEventReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = client.watchContractEvent({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['event Transfer(address indexed from, address indexed to, uint256 value)']),\n   *   eventName: 'Transfer',\n   *   args: { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\n   *   onLogs: (logs) => console.log(logs),\n   * })\n   */\n  watchContractEvent: <\n    const abi extends Abi | readonly unknown[],\n    eventName extends ContractEventName<abi>,\n    strict extends boolean | undefined = undefined,\n  >(\n    args: WatchContractEventParameters<abi, eventName, strict, transport>,\n  ) => WatchContractEventReturnType\n  /**\n   * Watches and returns emitted [Event Logs](https://viem.sh/docs/glossary/terms#event-log).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/watchEvent\n   * - JSON-RPC Methods:\n   *   - **RPC Provider supports `eth_newFilter`:**\n   *     - Calls [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter) to create a filter (called on initialize).\n   *     - On a polling interval, it will call [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n   *   - **RPC Provider does not support `eth_newFilter`:**\n   *     - Calls [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs) for each block between the polling interval.\n   *\n   * @remarks\n   * This Action will batch up all the Event Logs found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/actions/public/watchEvent#onLogs).\n   *\n   * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/actions/public/createEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n   *\n   * @param args - {@link WatchEventParameters}\n   * @returns A function that can be invoked to stop watching for new Event Logs. {@link WatchEventReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = client.watchEvent({\n   *   onLogs: (logs) => console.log(logs),\n   * })\n   */\n  watchEvent: <\n    const abiEvent extends AbiEvent | undefined = undefined,\n    const abiEvents extends\n      | readonly AbiEvent[]\n      | readonly unknown[]\n      | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n    strict extends boolean | undefined = undefined,\n  >(\n    args: WatchEventParameters<abiEvent, abiEvents, strict, transport>,\n  ) => WatchEventReturnType\n  /**\n   * Watches and returns pending transaction hashes.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/watchPendingTransactions\n   * - JSON-RPC Methods:\n   *   - When `poll: true`\n   *     - Calls [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter) to initialize the filter.\n   *     - Calls [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getFilterChanges) on a polling interval.\n   *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newPendingTransactions\"` event.\n   *\n   * @remarks\n   * This Action will batch up all the pending transactions found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchPendingTransactions#pollinginterval-optional), and invoke them via [`onTransactions`](https://viem.sh/docs/actions/public/watchPendingTransactions#ontransactions).\n   *\n   * @param args - {@link WatchPendingTransactionsParameters}\n   * @returns A function that can be invoked to stop watching for new pending transaction hashes. {@link WatchPendingTransactionsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = await client.watchPendingTransactions({\n   *   onTransactions: (hashes) => console.log(hashes),\n   * })\n   */\n  watchPendingTransactions: (\n    args: WatchPendingTransactionsParameters<transport>,\n  ) => WatchPendingTransactionsReturnType\n}\n\nexport function publicActions<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n>(\n  client: Client<transport, chain, account>,\n): PublicActions<transport, chain, account> {\n  return {\n    call: (args) => call(client, args),\n    createAccessList: (args) => createAccessList(client, args),\n    createBlockFilter: () => createBlockFilter(client),\n    createContractEventFilter: (args) =>\n      createContractEventFilter(client, args),\n    createEventFilter: (args) => createEventFilter(client, args),\n    createPendingTransactionFilter: () =>\n      createPendingTransactionFilter(client),\n    estimateContractGas: (args) => estimateContractGas(client, args as any),\n    estimateGas: (args) => estimateGas(client, args),\n    getBalance: (args) => getBalance(client, args),\n    getBlobBaseFee: () => getBlobBaseFee(client),\n    getBlock: (args) => getBlock(client, args),\n    getBlockNumber: (args) => getBlockNumber(client, args),\n    getBlockTransactionCount: (args) => getBlockTransactionCount(client, args),\n    getBytecode: (args) => getCode(client, args),\n    getChainId: () => getChainId(client),\n    getCode: (args) => getCode(client, args),\n    getContractEvents: (args) => getContractEvents(client, args),\n    getEip712Domain: (args) => getEip712Domain(client, args),\n    getEnsAddress: (args) => getEnsAddress(client, args),\n    getEnsAvatar: (args) => getEnsAvatar(client, args),\n    getEnsName: (args) => getEnsName(client, args),\n    getEnsResolver: (args) => getEnsResolver(client, args),\n    getEnsText: (args) => getEnsText(client, args),\n    getFeeHistory: (args) => getFeeHistory(client, args),\n    estimateFeesPerGas: (args) => estimateFeesPerGas(client, args),\n    getFilterChanges: (args) => getFilterChanges(client, args),\n    getFilterLogs: (args) => getFilterLogs(client, args),\n    getGasPrice: () => getGasPrice(client),\n    getLogs: (args) => getLogs(client, args as any),\n    getProof: (args) => getProof(client, args),\n    estimateMaxPriorityFeePerGas: (args) =>\n      estimateMaxPriorityFeePerGas(client, args),\n    getStorageAt: (args) => getStorageAt(client, args),\n    getTransaction: (args) => getTransaction(client, args),\n    getTransactionConfirmations: (args) =>\n      getTransactionConfirmations(client, args),\n    getTransactionCount: (args) => getTransactionCount(client, args),\n    getTransactionReceipt: (args) => getTransactionReceipt(client, args),\n    multicall: (args) => multicall(client, args),\n    prepareTransactionRequest: (args) =>\n      prepareTransactionRequest(client as any, args as any) as any,\n    readContract: (args) => readContract(client, args),\n    sendRawTransaction: (args) => sendRawTransaction(client, args),\n    sendRawTransactionSync: (args) => sendRawTransactionSync(client, args),\n    simulate: (args) => simulateBlocks(client, args),\n    simulateBlocks: (args) => simulateBlocks(client, args),\n    simulateCalls: (args) => simulateCalls(client, args),\n    simulateContract: (args) => simulateContract(client, args),\n    verifyHash: (args) => verifyHash(client, args),\n    verifyMessage: (args) => verifyMessage(client, args),\n    verifySiweMessage: (args) => verifySiweMessage(client, args),\n    verifyTypedData: (args) => verifyTypedData(client, args),\n    uninstallFilter: (args) => uninstallFilter(client, args),\n    waitForTransactionReceipt: (args) =>\n      waitForTransactionReceipt(client, args),\n    watchBlocks: (args) => watchBlocks(client, args),\n    watchBlockNumber: (args) => watchBlockNumber(client, args),\n    watchContractEvent: (args) => watchContractEvent(client, args),\n    watchEvent: (args) => watchEvent(client, args),\n    watchPendingTransactions: (args) => watchPendingTransactions(client, args),\n  }\n}\n", "import type { Address } from 'abitype'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { Account, ParseAccount } from '../types/account.js'\nimport type { Chain } from '../types/chain.js'\nimport type { PublicRpcSchema, RpcSchema } from '../types/eip1193.js'\nimport type { Prettify } from '../types/utils.js'\nimport {\n  type Client,\n  type ClientConfig,\n  type CreateClientErrorType,\n  createClient,\n} from './createClient.js'\nimport { type PublicActions, publicActions } from './decorators/public.js'\nimport type { Transport } from './transports/createTransport.js'\n\nexport type PublicClientConfig<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  accountOrAddress extends Account | Address | undefined = undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = Prettify<\n  Pick<\n    ClientConfig<transport, chain, accountOrAddress, rpcSchema>,\n    | 'batch'\n    | 'cacheTime'\n    | 'ccipRead'\n    | 'chain'\n    | 'experimental_blockTag'\n    | 'key'\n    | 'name'\n    | 'pollingInterval'\n    | 'rpcSchema'\n    | 'transport'\n  >\n>\n\nexport type PublicClient<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  accountOrAddress extends Account | undefined = undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = Prettify<\n  Client<\n    transport,\n    chain,\n    accountOrAddress,\n    rpcSchema extends RpcSchema\n      ? [...PublicRpcSchema, ...rpcSchema]\n      : PublicRpcSchema,\n    PublicActions<transport, chain>\n  >\n>\n\nexport type CreatePublicClientErrorType = CreateClientErrorType | ErrorType\n\n/**\n * Creates a Public Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\n *\n * - Docs: https://viem.sh/docs/clients/public\n *\n * A Public Client is an interface to \"public\" [JSON-RPC API](https://ethereum.org/en/developers/docs/apis/json-rpc/) methods such as retrieving block numbers, transactions, reading from smart contracts, etc through [Public Actions](/docs/actions/public/introduction).\n *\n * @param config - {@link PublicClientConfig}\n * @returns A Public Client. {@link PublicClient}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n */\nexport function createPublicClient<\n  transport extends Transport,\n  chain extends Chain | undefined = undefined,\n  accountOrAddress extends Account | Address | undefined = undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n>(\n  parameters: PublicClientConfig<transport, chain, accountOrAddress, rpcSchema>,\n): PublicClient<transport, chain, ParseAccount<accountOrAddress>, rpcSchema> {\n  const { key = 'public', name = 'Public Client' } = parameters\n  const client = createClient({\n    ...parameters,\n    key,\n    name,\n    type: 'publicClient',\n  })\n  return client.extend(publicActions) as any\n}\n", "import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type AddChainParameters = {\n  /** The chain to add to the wallet. */\n  chain: Chain\n}\n\nexport type AddChainErrorType =\n  | RequestErrorType\n  | NumberToHexErrorType\n  | ErrorType\n\n/**\n * Adds an EVM chain to the wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/addChain\n * - JSON-RPC Methods: [`eth_addEthereumChain`](https://eips.ethereum.org/EIPS/eip-3085)\n *\n * @param client - Client to use\n * @param parameters - {@link AddChainParameters}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { optimism } from 'viem/chains'\n * import { addChain } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   transport: custom(window.ethereum),\n * })\n * await addChain(client, { chain: optimism })\n */\nexport async function addChain<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(client: Client<Transport, chain, account>, { chain }: AddChainParameters) {\n  const { id, name, nativeCurrency, rpcUrls, blockExplorers } = chain\n  await client.request(\n    {\n      method: 'wallet_addEthereumChain',\n      params: [\n        {\n          chainId: numberToHex(id),\n          chainName: name,\n          nativeCurrency,\n          rpcUrls: rpcUrls.default.http,\n          blockExplorerUrls: blockExplorers\n            ? Object.values(blockExplorers).map(({ url }) => url)\n            : undefined,\n        },\n      ],\n    },\n    { dedupe: true, retryCount: 0 },\n  )\n}\n", "import type { Abi } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain, GetChainParameter } from '../../types/chain.js'\nimport type { ContractConstructorArgs } from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { UnionEvaluate, UnionOmit } from '../../types/utils.js'\nimport { encodeDeployData } from '../../utils/abi/encodeDeployData.js'\nimport {\n  type SendTransactionErrorType,\n  type SendTransactionParameters,\n  type SendTransactionReturnType,\n  sendTransaction,\n} from './sendTransaction.js'\n\nexport type DeployContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  ///\n  allArgs = ContractConstructorArgs<abi>,\n> = UnionOmit<\n  SendTransactionParameters<chain, account, chainOverride>,\n  'accessList' | 'chain' | 'to' | 'data'\n> &\n  GetChainParameter<chain, chainOverride> &\n  UnionEvaluate<\n    readonly [] extends allArgs\n      ? { args?: allArgs | undefined }\n      : { args: allArgs }\n  > & {\n    abi: abi\n    bytecode: Hex\n  }\n\nexport type DeployContractReturnType = SendTransactionReturnType\n\nexport type DeployContractErrorType = SendTransactionErrorType | ErrorType\n\n/**\n * Deploys a contract to the network, given bytecode and constructor arguments.\n *\n * - Docs: https://viem.sh/docs/contract/deployContract\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_deploying-contracts\n *\n * @param client - Client to use\n * @param parameters - {@link DeployContractParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link DeployContractReturnType}\n *\n * @example\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { deployContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const hash = await deployContract(client, {\n *   abi: [],\n *   account: '0x…,\n *   bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n * })\n */\nexport function deployContract<\n  const abi extends Abi | readonly unknown[],\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  chainOverride extends Chain | undefined,\n>(\n  walletClient: Client<Transport, chain, account>,\n  parameters: DeployContractParameters<abi, chain, account, chainOverride>,\n): Promise<DeployContractReturnType> {\n  const { abi, args, bytecode, ...request } =\n    parameters as DeployContractParameters\n  const calldata = encodeDeployData({ abi, args, bytecode })\n  return sendTransaction(walletClient, {\n    ...request,\n    ...(request.authorizationList ? { to: null } : {}),\n    data: calldata,\n  } as unknown as SendTransactionParameters<chain, account, chainOverride>)\n}\n", "import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport {\n  type ChecksumAddressErrorType,\n  checksumAddress,\n} from '../../utils/address/getAddress.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type GetAddressesReturnType = Address[]\n\nexport type GetAddressesErrorType =\n  | RequestErrorType\n  | ChecksumAddressErrorType\n  | ErrorType\n\n/**\n * Returns a list of account addresses owned by the wallet or client.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getAddresses\n * - JSON-RPC Methods: [`eth_accounts`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_accounts)\n *\n * @param client - Client to use\n * @returns List of account addresses owned by the wallet or client. {@link GetAddressesReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getAddresses } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const accounts = await getAddresses(client)\n */\nexport async function getAddresses<\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n>(client: Client<Transport, chain, account>): Promise<GetAddressesReturnType> {\n  if (client.account?.type === 'local') return [client.account.address]\n  const addresses = await client.request(\n    { method: 'eth_accounts' },\n    { dedupe: true },\n  )\n  return addresses.map((address) => checksumAddress(address))\n}\n", "import type { Address } from 'abitype'\n\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type {\n  Capabilities,\n  ChainIdToCapabilities,\n  ExtractCapabilities,\n} from '../../types/capabilities.js'\nimport type { Prettify } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type GetCapabilitiesParameters<\n  chainId extends number | undefined = undefined,\n> = {\n  account?: Account | Address | undefined\n  chainId?: chainId | number | undefined\n}\n\nexport type GetCapabilitiesReturnType<\n  chainId extends number | undefined = undefined,\n> = Prettify<\n  chainId extends number\n    ? ExtractCapabilities<'getCapabilities', 'ReturnType'>\n    : ChainIdToCapabilities<\n        Capabilities<ExtractCapabilities<'getCapabilities', 'ReturnType'>>,\n        number\n      >\n>\n\nexport type GetCapabilitiesErrorType = RequestErrorType | ErrorType\n\n/**\n * Extract capabilities that a connected wallet supports (e.g. paymasters, session keys, etc).\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getCapabilities\n * - JSON-RPC Methods: [`wallet_getCapabilities`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns The wallet's capabilities. {@link GetCapabilitiesReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getCapabilities } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const capabilities = await getCapabilities(client)\n */\nexport async function getCapabilities<\n  chainId extends number | undefined = undefined,\n>(\n  client: Client<Transport>,\n  parameters: GetCapabilitiesParameters<chainId> = {},\n): Promise<GetCapabilitiesReturnType<chainId>> {\n  const { account = client.account, chainId } = parameters\n\n  const account_ = account ? parseAccount(account) : undefined\n\n  const params = chainId\n    ? ([account_?.address, [numberToHex(chainId)]] as const)\n    : ([account_?.address] as const)\n  const capabilities_raw = await client.request({\n    method: 'wallet_getCapabilities',\n    params,\n  })\n\n  const capabilities = {} as ChainIdToCapabilities<\n    ExtractCapabilities<'getCapabilities', 'ReturnType'>,\n    number\n  >\n  for (const [chainId, capabilities_] of Object.entries(capabilities_raw)) {\n    capabilities[Number(chainId)] = {}\n    for (let [key, value] of Object.entries(capabilities_)) {\n      if (key === 'addSubAccount') key = 'unstable_addSubAccount'\n      capabilities[Number(chainId)][key] = value\n    }\n  }\n  return (\n    typeof chainId === 'number' ? capabilities[chainId] : capabilities\n  ) as never\n}\n", "import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { WalletPermission } from '../../types/eip1193.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type GetPermissionsReturnType = WalletPermission[]\n\nexport type GetPermissionsErrorType = RequestErrorType | ErrorType\n\n/**\n * Gets the wallets current permissions.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getPermissions\n * - JSON-RPC Methods: [`wallet_getPermissions`](https://eips.ethereum.org/EIPS/eip-2255)\n *\n * @param client - Client to use\n * @returns The wallet permissions. {@link GetPermissionsReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getPermissions } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const permissions = await getPermissions(client)\n */\nexport async function getPermissions<\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n>(client: Client<Transport, chain, account>) {\n  const permissions = await client.request(\n    { method: 'wallet_getPermissions' },\n    { dedupe: true },\n  )\n  return permissions\n}\n", "import type { Address } from 'abitype'\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  AccountNotFoundError,\n  type AccountNotFoundErrorType,\n} from '../../errors/account.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type {\n  Authorization,\n  AuthorizationRequest,\n} from '../../types/authorization.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { PartialBy } from '../../types/utils.js'\nimport { isAddressEqual } from '../../utils/address/isAddressEqual.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { getChainId } from '../public/getChainId.js'\nimport { getTransactionCount } from '../public/getTransactionCount.js'\n\nexport type PrepareAuthorizationParameters<\n  account extends Account | undefined = Account | undefined,\n> = GetAccountParameter<account> &\n  PartialBy<AuthorizationRequest, 'chainId' | 'nonce'> & {\n    /**\n     * Whether the EIP-7702 Transaction will be executed by the EOA (signing this Authorization) or another Account.\n     *\n     * By default, it will be assumed that the EIP-7702 Transaction will\n     * be executed by another Account.\n     */\n    executor?: 'self' | Account | Address | undefined\n  }\n\nexport type PrepareAuthorizationReturnType = Authorization\n\nexport type PrepareAuthorizationErrorType =\n  | ParseAccountErrorType\n  | RequestErrorType\n  | AccountNotFoundErrorType\n  | ErrorType\n\n/**\n * Prepares an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object for signing.\n * This Action will fill the required fields of the Authorization object if they are not provided (e.g. `nonce` and `chainId`).\n *\n * With the prepared Authorization object, you can use [`signAuthorization`](https://viem.sh/docs/eip7702/signAuthorization) to sign over the Authorization object.\n *\n * @param client - Client to use\n * @param parameters - {@link PrepareAuthorizationParameters}\n * @returns The prepared Authorization object. {@link PrepareAuthorizationReturnType}\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareAuthorization } from 'viem/experimental'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const authorization = await prepareAuthorization(client, {\n *   account: privateKeyToAccount('0x..'),\n *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n *\n * @example\n * // Account Hoisting\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareAuthorization } from 'viem/experimental'\n *\n * const client = createClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const authorization = await prepareAuthorization(client, {\n *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function prepareAuthorization<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: PrepareAuthorizationParameters<account>,\n): Promise<PrepareAuthorizationReturnType> {\n  const { account: account_ = client.account, chainId, nonce } = parameters\n\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/eip7702/prepareAuthorization',\n    })\n  const account = parseAccount(account_)\n\n  const executor = (() => {\n    if (!parameters.executor) return undefined\n    if (parameters.executor === 'self') return parameters.executor\n    return parseAccount(parameters.executor)\n  })()\n\n  const authorization = {\n    address: parameters.contractAddress ?? parameters.address,\n    chainId,\n    nonce,\n  } as Authorization\n\n  if (typeof authorization.chainId === 'undefined')\n    authorization.chainId =\n      client.chain?.id ??\n      (await getAction(client, getChainId, 'getChainId')({}))\n\n  if (typeof authorization.nonce === 'undefined') {\n    authorization.nonce = await getAction(\n      client,\n      getTransactionCount,\n      'getTransactionCount',\n    )({\n      address: account.address,\n      blockTag: 'pending',\n    })\n    if (\n      executor === 'self' ||\n      (executor?.address && isAddressEqual(executor.address, account.address))\n    )\n      authorization.nonce += 1\n  }\n\n  return authorization\n}\n", "import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport { getAddress } from '../../utils/address/getAddress.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type RequestAddressesReturnType = Address[]\n\nexport type RequestAddressesErrorType = RequestErrorType | ErrorType\n\n/**\n * Requests a list of accounts managed by a wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/requestAddresses\n * - JSON-RPC Methods: [`eth_requestAccounts`](https://eips.ethereum.org/EIPS/eip-1102)\n *\n * Sends a request to the wallet, asking for permission to access the user's accounts. After the user accepts the request, it will return a list of accounts (addresses).\n *\n * This API can be useful for dapps that need to access the user's accounts in order to execute transactions or interact with smart contracts.\n *\n * @param client - Client to use\n * @returns List of accounts managed by a wallet {@link RequestAddressesReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { requestAddresses } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const accounts = await requestAddresses(client)\n */\nexport async function requestAddresses<\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n): Promise<RequestAddressesReturnType> {\n  const addresses = await client.request(\n    { method: 'eth_requestAccounts' },\n    { dedupe: true, retryCount: 0 },\n  )\n  return addresses.map((address) => getAddress(address))\n}\n", "import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { WalletPermission } from '../../types/eip1193.js'\nimport type { Prettify } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type RequestPermissionsParameters = Prettify<\n  {\n    eth_accounts: Record<string, any>\n  } & {\n    [key: string]: Record<string, any>\n  }\n>\nexport type RequestPermissionsReturnType = WalletPermission[]\n\nexport type RequestPermissionsErrorType = RequestErrorType | ErrorType\n\n/**\n * Requests permissions for a wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/requestPermissions\n * - JSON-RPC Methods: [`wallet_requestPermissions`](https://eips.ethereum.org/EIPS/eip-2255)\n *\n * @param client - Client to use\n * @param parameters - {@link RequestPermissionsParameters}\n * @returns The wallet permissions. {@link RequestPermissionsReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { requestPermissions } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const permissions = await requestPermissions(client, {\n *   eth_accounts: {}\n * })\n */\nexport async function requestPermissions<\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  permissions: RequestPermissionsParameters,\n) {\n  return client.request(\n    {\n      method: 'wallet_requestPermissions',\n      params: [permissions],\n    },\n    { retryCount: 0 },\n  )\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetCallsStatusReturnType } from './getCallsStatus.js'\nimport {\n  type SendCallsErrorType,\n  type SendCallsParameters,\n  sendCalls,\n} from './sendCalls.js'\nimport {\n  type WaitForCallsStatusParameters,\n  waitForCallsStatus,\n} from './waitForCallsStatus.js'\n\nexport type SendCallsSyncParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  calls extends readonly unknown[] = readonly unknown[],\n> = SendCallsParameters<chain, account, chainOverride, calls> &\n  Pick<\n    WaitForCallsStatusParameters,\n    'pollingInterval' | 'status' | 'throwOnFailure'\n  > & {\n    /** Timeout (ms) to wait for calls to be included in a block. @default chain.blockTime * 3 */\n    timeout?: number | undefined\n  }\n\nexport type SendCallsSyncReturnType = GetCallsStatusReturnType\n\nexport type SendCallsSyncErrorType = SendCallsErrorType\n\n/**\n * Requests the connected wallet to send a batch of calls, and waits for the calls to be included in a block.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendCallsSync\n * - JSON-RPC Methods: [`wallet_sendCalls`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns Calls status. {@link SendCallsSyncReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendCalls } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const status = await sendCallsSync(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   calls: [\n *     {\n *       data: '0xdeadbeef',\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *     },\n *     {\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *       value: 69420n,\n *     },\n *   ],\n * })\n */\nexport async function sendCallsSync<\n  const calls extends readonly unknown[],\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n  chainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: SendCallsSyncParameters<chain, account, chainOverride, calls>,\n): Promise<SendCallsSyncReturnType> {\n  const { chain = client.chain } = parameters\n  const timeout =\n    parameters.timeout ?? Math.max((chain?.blockTime ?? 0) * 3, 5_000)\n  const result = await sendCalls(client, parameters)\n  const status = await waitForCallsStatus(client, {\n    ...parameters,\n    id: result.id,\n    timeout,\n  })\n  return status\n}\n", "import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SignTransactionErrorType } from '../../accounts/utils/signTransaction.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  AccountNotFoundError,\n  type AccountNotFoundErrorType,\n  AccountTypeNotSupportedError,\n  type AccountTypeNotSupportedErrorType,\n} from '../../errors/account.js'\nimport { BaseError } from '../../errors/base.js'\nimport {\n  TransactionReceiptRevertedError,\n  type TransactionReceiptRevertedErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type {\n  Chain,\n  DeriveChain,\n  GetChainParameter,\n} from '../../types/chain.js'\nimport type { GetTransactionRequestKzgParameter } from '../../types/kzg.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport {\n  type RecoverAuthorizationAddressErrorType,\n  recoverAuthorizationAddress,\n} from '../../utils/authorization/recoverAuthorizationAddress.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type AssertCurrentChainErrorType,\n  assertCurrentChain,\n} from '../../utils/chain/assertCurrentChain.js'\nimport {\n  type GetTransactionErrorReturnType,\n  getTransactionError,\n} from '../../utils/errors/getTransactionError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { LruMap } from '../../utils/lru.js'\nimport {\n  type AssertRequestErrorType,\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport { type GetChainIdErrorType, getChainId } from '../public/getChainId.js'\nimport {\n  type WaitForTransactionReceiptErrorType,\n  waitForTransactionReceipt,\n} from '../public/waitForTransactionReceipt.js'\nimport {\n  defaultParameters,\n  type PrepareTransactionRequestErrorType,\n  prepareTransactionRequest,\n} from './prepareTransactionRequest.js'\nimport {\n  type SendRawTransactionSyncErrorType,\n  type SendRawTransactionSyncReturnType,\n  sendRawTransactionSync,\n} from './sendRawTransactionSync.js'\n\nconst supportsWalletNamespace = new LruMap<boolean>(128)\n\nexport type SendTransactionSyncRequest<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  ///\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> &\n  GetTransactionRequestKzgParameter\n\nexport type SendTransactionSyncParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  request extends SendTransactionSyncRequest<\n    chain,\n    chainOverride\n  > = SendTransactionSyncRequest<chain, chainOverride>,\n> = request &\n  GetAccountParameter<account, Account | Address, true, true> &\n  GetChainParameter<chain, chainOverride> &\n  GetTransactionRequestKzgParameter<request> & {\n    /** Polling interval (ms) to poll for the transaction receipt. @default client.pollingInterval */\n    pollingInterval?: number | undefined\n    /** Whether to throw an error if the transaction was detected as reverted. @default true */\n    throwOnReceiptRevert?: boolean | undefined\n    /** Timeout (ms) to wait for a response. @default Math.max(chain.blockTime * 3, 5_000) */\n    timeout?: number | undefined\n  }\n\nexport type SendTransactionSyncReturnType<\n  chain extends Chain | undefined = Chain | undefined,\n> = SendRawTransactionSyncReturnType<chain>\n\nexport type SendTransactionSyncErrorType =\n  | ParseAccountErrorType\n  | GetTransactionErrorReturnType<\n      | AccountNotFoundErrorType\n      | AccountTypeNotSupportedErrorType\n      | AssertCurrentChainErrorType\n      | AssertRequestErrorType\n      | GetChainIdErrorType\n      | PrepareTransactionRequestErrorType\n      | SendRawTransactionSyncErrorType\n      | RecoverAuthorizationAddressErrorType\n      | SignTransactionErrorType\n      | TransactionReceiptRevertedErrorType\n      | RequestErrorType\n    >\n  | WaitForTransactionReceiptErrorType\n  | ErrorType\n\n/**\n * Creates, signs, and sends a new transaction to the network synchronously.\n * Returns the transaction receipt.\n *\n * @param client - Client to use\n * @param parameters - {@link SendTransactionSyncParameters}\n * @returns The transaction receipt. {@link SendTransactionSyncReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendTransactionSync } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const receipt = await sendTransactionSync(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { sendTransactionSync } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const receipt = await sendTransactionSync(client, {\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendTransactionSync<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  const request extends SendTransactionSyncRequest<chain, chainOverride>,\n  chainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: SendTransactionSyncParameters<\n    chain,\n    account,\n    chainOverride,\n    request\n  >,\n): Promise<SendTransactionSyncReturnType<chain>> {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    accessList,\n    authorizationList,\n    blobs,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    pollingInterval,\n    throwOnReceiptRevert,\n    type,\n    value,\n    ...rest\n  } = parameters\n  const timeout =\n    parameters.timeout ?? Math.max((chain?.blockTime ?? 0) * 3, 5_000)\n\n  if (typeof account_ === 'undefined')\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/sendTransactionSync',\n    })\n  const account = account_ ? parseAccount(account_) : null\n\n  try {\n    assertRequest(parameters as AssertRequestParameters)\n\n    const to = await (async () => {\n      // If `to` exists on the parameters, use that.\n      if (parameters.to) return parameters.to\n\n      // If `to` is null, we are sending a deployment transaction.\n      if (parameters.to === null) return undefined\n\n      // If no `to` exists, and we are sending a EIP-7702 transaction, use the\n      // address of the first authorization in the list.\n      if (authorizationList && authorizationList.length > 0)\n        return await recoverAuthorizationAddress({\n          authorization: authorizationList[0],\n        }).catch(() => {\n          throw new BaseError(\n            '`to` is required. Could not infer from `authorizationList`.',\n          )\n        })\n\n      // Otherwise, we are sending a deployment transaction.\n      return undefined\n    })()\n\n    if (account?.type === 'json-rpc' || account === null) {\n      let chainId: number | undefined\n      if (chain !== null) {\n        chainId = await getAction(client, getChainId, 'getChainId')({})\n        assertCurrentChain({\n          currentChainId: chainId,\n          chain,\n        })\n      }\n\n      const chainFormat = client.chain?.formatters?.transactionRequest?.format\n      const format = chainFormat || formatTransactionRequest\n\n      const request = format(\n        {\n          // Pick out extra data that might exist on the chain's transaction request type.\n          ...extract(rest, { format: chainFormat }),\n          accessList,\n          account,\n          authorizationList,\n          blobs,\n          chainId,\n          data,\n          gas,\n          gasPrice,\n          maxFeePerBlobGas,\n          maxFeePerGas,\n          maxPriorityFeePerGas,\n          nonce,\n          to,\n          type,\n          value,\n        } as TransactionRequest,\n        'sendTransaction',\n      )\n\n      const isWalletNamespaceSupported = supportsWalletNamespace.get(client.uid)\n      const method = isWalletNamespaceSupported\n        ? 'wallet_sendTransaction'\n        : 'eth_sendTransaction'\n\n      const hash = await (async () => {\n        try {\n          return await client.request(\n            {\n              method,\n              params: [request],\n            },\n            { retryCount: 0 },\n          )\n        } catch (e) {\n          if (isWalletNamespaceSupported === false) throw e\n\n          const error = e as BaseError\n          // If the transport does not support the method or input, attempt to use the\n          // `wallet_sendTransaction` method.\n          if (\n            error.name === 'InvalidInputRpcError' ||\n            error.name === 'InvalidParamsRpcError' ||\n            error.name === 'MethodNotFoundRpcError' ||\n            error.name === 'MethodNotSupportedRpcError'\n          ) {\n            return (await client\n              .request(\n                {\n                  method: 'wallet_sendTransaction',\n                  params: [request],\n                },\n                { retryCount: 0 },\n              )\n              .then((hash) => {\n                supportsWalletNamespace.set(client.uid, true)\n                return hash\n              })\n              .catch((e) => {\n                const walletNamespaceError = e as BaseError\n                if (\n                  walletNamespaceError.name === 'MethodNotFoundRpcError' ||\n                  walletNamespaceError.name === 'MethodNotSupportedRpcError'\n                ) {\n                  supportsWalletNamespace.set(client.uid, false)\n                  throw error\n                }\n\n                throw walletNamespaceError\n              })) as never\n          }\n\n          throw error\n        }\n      })()\n\n      const receipt = await getAction(\n        client,\n        waitForTransactionReceipt,\n        'waitForTransactionReceipt',\n      )({\n        checkReplacement: false,\n        hash,\n        pollingInterval,\n        timeout,\n      })\n      if (throwOnReceiptRevert && receipt.status === 'reverted')\n        throw new TransactionReceiptRevertedError({ receipt })\n      return receipt\n    }\n\n    if (account?.type === 'local') {\n      // Prepare the request for signing (assign appropriate fees, etc.)\n      const request = await getAction(\n        client,\n        prepareTransactionRequest,\n        'prepareTransactionRequest',\n      )({\n        account,\n        accessList,\n        authorizationList,\n        blobs,\n        chain,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerBlobGas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        nonceManager: account.nonceManager,\n        parameters: [...defaultParameters, 'sidecars'],\n        type,\n        value,\n        ...rest,\n        to,\n      } as any)\n\n      const serializer = chain?.serializers?.transaction\n      const serializedTransaction = (await account.signTransaction(request, {\n        serializer,\n      })) as Hash\n      return (await getAction(\n        client,\n        sendRawTransactionSync,\n        'sendRawTransactionSync',\n      )({\n        serializedTransaction,\n        throwOnReceiptRevert,\n      })) as never\n    }\n\n    if (account?.type === 'smart')\n      throw new AccountTypeNotSupportedError({\n        metaMessages: [\n          'Consider using the `sendUserOperation` Action instead.',\n        ],\n        docsPath: '/docs/actions/bundler/sendUserOperation',\n        type: 'smart',\n      })\n\n    throw new AccountTypeNotSupportedError({\n      docsPath: '/docs/actions/wallet/sendTransactionSync',\n      type: (account as any)?.type,\n    })\n  } catch (err) {\n    if (err instanceof AccountTypeNotSupportedError) throw err\n    throw getTransactionError(err as BaseError, {\n      ...parameters,\n      account,\n      chain: parameters.chain || undefined,\n    })\n  }\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type ShowCallsStatusParameters = { id: string }\n\nexport type ShowCallsStatusReturnType = void\n\nexport type ShowCallsStatusErrorType = RequestErrorType | ErrorType\n\n/**\n * Requests for the wallet to show information about a call batch\n * that was sent via `sendCalls`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/showCallsStatus\n * - JSON-RPC Methods: [`wallet_showCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns Status of the calls. {@link ShowCallsStatusReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { showCallsStatus } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * await showCallsStatus(client, { id: '0xdeadbeef' })\n */\nexport async function showCallsStatus<\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: ShowCallsStatusParameters,\n): Promise<ShowCallsStatusReturnType> {\n  const { id } = parameters\n  await client.request({\n    method: 'wallet_showCallsStatus',\n    params: [id],\n  })\n  return\n}\n", "import type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type {\n  SignAuthorizationErrorType as SignAuthorizationErrorType_account,\n  SignAuthorizationReturnType as SignAuthorizationReturnType_account,\n} from '../../accounts/utils/signAuthorization.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  AccountNotFoundError,\n  type AccountNotFoundErrorType,\n  AccountTypeNotSupportedError,\n  type AccountTypeNotSupportedErrorType,\n} from '../../errors/account.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport {\n  type PrepareAuthorizationErrorType,\n  type PrepareAuthorizationParameters,\n  prepareAuthorization,\n} from './prepareAuthorization.js'\n\nexport type SignAuthorizationParameters<\n  account extends Account | undefined = Account | undefined,\n> = PrepareAuthorizationParameters<account>\n\nexport type SignAuthorizationReturnType = SignAuthorizationReturnType_account\n\nexport type SignAuthorizationErrorType =\n  | ParseAccountErrorType\n  | AccountNotFoundErrorType\n  | AccountTypeNotSupportedErrorType\n  | PrepareAuthorizationErrorType\n  | SignAuthorizationErrorType_account\n  | ErrorType\n\n/**\n * Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\n *\n * With the calculated signature, you can:\n * - use [`verifyAuthorization`](https://viem.sh/docs/eip7702/verifyAuthorization) to verify the signed Authorization object,\n * - use [`recoverAuthorizationAddress`](https://viem.sh/docs/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\n *\n * @param client - Client to use\n * @param parameters - {@link SignAuthorizationParameters}\n * @returns The signed Authorization object. {@link SignAuthorizationReturnType}\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signAuthorization } from 'viem/experimental'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const signature = await signAuthorization(client, {\n *   account: privateKeyToAccount('0x..'),\n *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n *\n * @example\n * // Account Hoisting\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signAuthorization } from 'viem/experimental'\n *\n * const client = createClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const signature = await signAuthorization(client, {\n *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function signAuthorization<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: SignAuthorizationParameters<account>,\n): Promise<SignAuthorizationReturnType> {\n  const { account: account_ = client.account } = parameters\n\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/eip7702/signAuthorization',\n    })\n  const account = parseAccount(account_)\n\n  if (!account.signAuthorization)\n    throw new AccountTypeNotSupportedError({\n      docsPath: '/docs/eip7702/signAuthorization',\n      metaMessages: [\n        'The `signAuthorization` Action does not support JSON-RPC Accounts.',\n      ],\n      type: account.type,\n    })\n\n  const authorization = await prepareAuthorization(client, parameters)\n  return account.signAuthorization(authorization)\n}\n", "import type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SignMessageErrorType as SignMessageErrorType_account } from '../../accounts/utils/signMessage.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex, SignableMessage } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  stringToHex,\n  type ToHexErrorType,\n  toHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type SignMessageParameters<\n  account extends Account | undefined = Account | undefined,\n> = GetAccountParameter<account> & {\n  message: SignableMessage\n}\n\nexport type SignMessageReturnType = Hex\n\nexport type SignMessageErrorType =\n  | ParseAccountErrorType\n  | RequestErrorType\n  | SignMessageErrorType_account\n  | ToHexErrorType\n  | ErrorType\n\n/**\n * Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signMessage\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data#personal-sign)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * With the calculated signature, you can:\n * - use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\n * - use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress) to recover the signing address from a signature.\n *\n * @param client - Client to use\n * @param parameters - {@link SignMessageParameters}\n * @returns The signed message. {@link SignMessageReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signMessage } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signMessage(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   message: 'hello world',\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, custom } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signMessage } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signMessage(client, {\n *   message: 'hello world',\n * })\n */\nexport async function signMessage<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(\n  client: Client<Transport, chain, account>,\n  {\n    account: account_ = client.account,\n    message,\n  }: SignMessageParameters<account>,\n): Promise<SignMessageReturnType> {\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/signMessage',\n    })\n  const account = parseAccount(account_)\n\n  if (account.signMessage) return account.signMessage({ message })\n\n  const message_ = (() => {\n    if (typeof message === 'string') return stringToHex(message)\n    if (message.raw instanceof Uint8Array) return toHex(message.raw)\n    return message.raw\n  })()\n\n  return client.request(\n    {\n      method: 'personal_sign',\n      params: [message_, account.address],\n    },\n    { retryCount: 0 },\n  )\n}\n", "import type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SignTransactionErrorType as SignTransactionErrorType_account } from '../../accounts/utils/signTransaction.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type {\n  Chain,\n  DeriveChain,\n  GetChainParameter,\n} from '../../types/chain.js'\nimport type { GetTransactionRequestKzgParameter } from '../../types/kzg.js'\nimport type { RpcTransactionRequest } from '../../types/rpc.js'\nimport type {\n  TransactionRequest,\n  TransactionSerializable,\n  TransactionSerialized,\n} from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type AssertCurrentChainErrorType,\n  assertCurrentChain,\n} from '../../utils/chain/assertCurrentChain.js'\nimport type { NumberToHexErrorType } from '../../utils/encoding/toHex.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type AssertRequestErrorType,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport type { GetTransactionType } from '../../utils/transaction/getTransactionType.js'\nimport { type GetChainIdErrorType, getChainId } from '../public/getChainId.js'\n\nexport type SignTransactionRequest<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  ///\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'>\n\nexport type SignTransactionParameters<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  request extends SignTransactionRequest<\n    chain,\n    chainOverride\n  > = SignTransactionRequest<chain, chainOverride>,\n> = request &\n  GetAccountParameter<account> &\n  GetChainParameter<chain, chainOverride> &\n  GetTransactionRequestKzgParameter<request>\n\nexport type SignTransactionReturnType<\n  request extends SignTransactionRequest = SignTransactionRequest,\n> = TransactionSerialized<GetTransactionType<request>>\n\nexport type SignTransactionErrorType =\n  | ParseAccountErrorType\n  | AssertRequestErrorType\n  | GetChainIdErrorType\n  | AssertCurrentChainErrorType\n  | SignTransactionErrorType_account\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Signs a transaction.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signTransaction\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_signTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * @param args - {@link SignTransactionParameters}\n * @returns The signed serialized transaction. {@link SignTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function signTransaction<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  chainOverride extends Chain | undefined = undefined,\n  const request extends SignTransactionRequest<\n    chain,\n    chainOverride\n  > = SignTransactionRequest<chain, chainOverride>,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: SignTransactionParameters<chain, account, chainOverride, request>,\n): Promise<SignTransactionReturnType<request>> {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    ...transaction\n  } = parameters\n\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/signTransaction',\n    })\n  const account = parseAccount(account_)\n\n  assertRequest({\n    account,\n    ...parameters,\n  })\n\n  const chainId = await getAction(client, getChainId, 'getChainId')({})\n  if (chain !== null)\n    assertCurrentChain({\n      currentChainId: chainId,\n      chain,\n    })\n\n  const formatters = chain?.formatters || client.chain?.formatters\n  const format =\n    formatters?.transactionRequest?.format || formatTransactionRequest\n\n  if (account.signTransaction)\n    return account.signTransaction(\n      {\n        ...transaction,\n        chainId,\n      } as TransactionSerializable,\n      { serializer: client.chain?.serializers?.transaction },\n    ) as Promise<SignTransactionReturnType<request>>\n\n  return await client.request(\n    {\n      method: 'eth_signTransaction',\n      params: [\n        {\n          ...format(\n            {\n              ...transaction,\n              account,\n            } as unknown as TransactionRequest,\n            'signTransaction',\n          ),\n          chainId: numberToHex(chainId),\n          from: account.address,\n        } as unknown as RpcTransactionRequest,\n      ],\n    },\n    { retryCount: 0 },\n  )\n}\n", "import type { TypedData } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SignTypedDataErrorType as SignTypedDataErrorType_account } from '../../accounts/utils/signTypedData.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  AccountNotFoundError,\n  type AccountNotFoundErrorType,\n} from '../../errors/account.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport type { IsHexErrorType } from '../../utils/data/isHex.js'\nimport type { StringifyErrorType } from '../../utils/stringify.js'\nimport {\n  type GetTypesForEIP712DomainErrorType,\n  getTypesForEIP712Domain,\n  type SerializeTypedDataErrorType,\n  serializeTypedData,\n  type ValidateTypedDataErrorType,\n  validateTypedData,\n} from '../../utils/typedData.js'\n\nexport type SignTypedDataParameters<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n  account extends Account | undefined = undefined,\n  ///\n  primaryTypes = typedData extends TypedData ? keyof typedData : string,\n> = TypedDataDefinition<typedData, primaryType, primaryTypes> &\n  GetAccountParameter<account>\n\nexport type SignTypedDataReturnType = Hex\n\nexport type SignTypedDataErrorType =\n  | AccountNotFoundErrorType\n  | ParseAccountErrorType\n  | GetTypesForEIP712DomainErrorType\n  | ValidateTypedDataErrorType\n  | StringifyErrorType\n  | SignTypedDataErrorType_account\n  | IsHexErrorType\n  | RequestErrorType\n  | SerializeTypedDataErrorType\n  | ErrorType\n\n/**\n * Signs typed data and calculates an Ethereum-specific signature in [https://eips.ethereum.org/EIPS/eip-712](https://eips.ethereum.org/EIPS/eip-712): `sign(keccak256(\"\\x19\\x01\" ‖ domainSeparator ‖ hashStruct(message)))`\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signTypedData\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_signTypedData_v4`](https://docs.metamask.io/guide/signing-data#signtypeddata-v4)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * @param client - Client to use\n * @param parameters - {@link SignTypedDataParameters}\n * @returns The signed data. {@link SignTypedDataReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signTypedData } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTypedData(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signTypedData } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const signature = await signTypedData(client, {\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n * })\n */\nexport async function signTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: SignTypedDataParameters<typedData, primaryType, account>,\n): Promise<SignTypedDataReturnType> {\n  const {\n    account: account_ = client.account,\n    domain,\n    message,\n    primaryType,\n  } = parameters as unknown as SignTypedDataParameters\n\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/signTypedData',\n    })\n  const account = parseAccount(account_)\n\n  const types = {\n    EIP712Domain: getTypesForEIP712Domain({ domain }),\n    ...parameters.types,\n  }\n\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n  // as we can't statically check this with TypeScript.\n  validateTypedData({ domain, message, primaryType, types })\n\n  if (account.signTypedData)\n    return account.signTypedData({ domain, message, primaryType, types })\n\n  const typedData = serializeTypedData({ domain, message, primaryType, types })\n  return client.request(\n    {\n      method: 'eth_signTypedData_v4',\n      params: [account.address, typedData],\n    },\n    { retryCount: 0 },\n  )\n}\n", "import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type SwitchChainParameters = {\n  /** ID of Chain to switch to */\n  id: Chain['id']\n}\n\nexport type SwitchChainErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Switch the target chain in a wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/switchChain\n * - JSON-RPC Methods: [`wallet_switchEthereumChain`](https://eips.ethereum.org/EIPS/eip-3326)\n *\n * @param client - Client to use\n * @param parameters - {@link SwitchChainParameters}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet, optimism } from 'viem/chains'\n * import { switchChain } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * await switchChain(client, { id: optimism.id })\n */\nexport async function switchChain<\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n>(client: Client<Transport, chain, account>, { id }: SwitchChainParameters) {\n  await client.request(\n    {\n      method: 'wallet_switchEthereumChain',\n      params: [\n        {\n          chainId: numberToHex(id),\n        },\n      ],\n    },\n    { retryCount: 0 },\n  )\n}\n", "import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { WatchAssetParams } from '../../types/eip1193.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type WatchAssetParameters = WatchAssetParams\nexport type WatchAssetReturnType = boolean\nexport type WatchAssetErrorType = RequestErrorType | ErrorType\n\n/**\n * Adds an EVM chain to the wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/watchAsset\n * - JSON-RPC Methods: [`eth_switchEthereumChain`](https://eips.ethereum.org/EIPS/eip-747)\n *\n * @param client - Client to use\n * @param parameters - {@link WatchAssetParameters}\n * @returns Boolean indicating if the token was successfully added. {@link WatchAssetReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchAsset } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const success = await watchAsset(client, {\n *   type: 'ERC20',\n *   options: {\n *     address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n *     decimals: 18,\n *     symbol: 'WETH',\n *   },\n * })\n */\nexport async function watchAsset<\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  params: WatchAssetParameters,\n): Promise<WatchAssetReturnType> {\n  const added = await client.request(\n    {\n      method: 'wallet_watchAsset',\n      params,\n    },\n    { retryCount: 0 },\n  )\n  return added\n}\n", "import type { Abi } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n} from '../../types/contract.js'\nimport {\n  type SendTransactionSyncParameters,\n  type SendTransactionSyncReturnType,\n  sendTransactionSync,\n} from './sendTransactionSync.js'\nimport { type WriteContractParameters, writeContract } from './writeContract.js'\n\nexport type { WriteContractErrorType as WriteContractSyncErrorType } from './writeContract.js'\n\nexport type WriteContractSyncParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n> = WriteContractParameters<\n  abi,\n  functionName,\n  args,\n  chain,\n  account,\n  chainOverride\n> &\n  Pick<\n    SendTransactionSyncParameters<chain>,\n    'pollingInterval' | 'throwOnReceiptRevert' | 'timeout'\n  >\n\nexport type WriteContractSyncReturnType<\n  chain extends Chain | undefined = Chain | undefined,\n> = SendTransactionSyncReturnType<chain>\n\n/**\n * Executes a write function on a contract synchronously.\n * Returns the transaction receipt.\n *\n * - Docs: https://viem.sh/docs/contract/writeContractSync\n *\n * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\n *\n * Internally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n *\n * __Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\n *\n * @param client - Client to use\n * @param parameters - {@link WriteContractParameters}\n * @returns A [Transaction Hash](https://viem.sh/docs/glossary/terms#hash). {@link WriteContractReturnType}\n *\n * @example\n * import { createWalletClient, custom, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { writeContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const receipt = await writeContractSync(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n *   functionName: 'mint',\n *   args: [69420],\n * })\n */\nexport async function writeContractSync<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  >,\n  chainOverride extends Chain | undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: WriteContractSyncParameters<\n    abi,\n    functionName,\n    args,\n    chain,\n    account,\n    chainOverride\n  >,\n): Promise<WriteContractSyncReturnType<chain>> {\n  return writeContract.internal(\n    client,\n    sendTransactionSync,\n    'sendTransactionSync',\n    parameters as never,\n  ) as never\n}\n", "import type { Abi, Address, TypedData } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type GetChainIdReturnType,\n  getChainId,\n} from '../../actions/public/getChainId.js'\nimport {\n  type AddChainParameters,\n  addChain,\n} from '../../actions/wallet/addChain.js'\nimport {\n  type DeployContractParameters,\n  type DeployContractReturnType,\n  deployContract,\n} from '../../actions/wallet/deployContract.js'\nimport {\n  type GetAddressesReturnType,\n  getAddresses,\n} from '../../actions/wallet/getAddresses.js'\nimport {\n  type GetCallsStatusParameters,\n  type GetCallsStatusReturnType,\n  getCallsStatus,\n} from '../../actions/wallet/getCallsStatus.js'\nimport {\n  type GetCapabilitiesParameters,\n  type GetCapabilitiesReturnType,\n  getCapabilities,\n} from '../../actions/wallet/getCapabilities.js'\nimport {\n  type GetPermissionsReturnType,\n  getPermissions,\n} from '../../actions/wallet/getPermissions.js'\nimport {\n  type PrepareAuthorizationParameters,\n  type PrepareAuthorizationReturnType,\n  prepareAuthorization,\n} from '../../actions/wallet/prepareAuthorization.js'\nimport {\n  type PrepareTransactionRequestParameters,\n  type PrepareTransactionRequestRequest,\n  type PrepareTransactionRequestReturnType,\n  prepareTransactionRequest,\n} from '../../actions/wallet/prepareTransactionRequest.js'\nimport {\n  type RequestAddressesReturnType,\n  requestAddresses,\n} from '../../actions/wallet/requestAddresses.js'\nimport {\n  type RequestPermissionsParameters,\n  type RequestPermissionsReturnType,\n  requestPermissions,\n} from '../../actions/wallet/requestPermissions.js'\nimport {\n  type SendCallsParameters,\n  type SendCallsReturnType,\n  sendCalls,\n} from '../../actions/wallet/sendCalls.js'\nimport {\n  type SendCallsSyncParameters,\n  type SendCallsSyncReturnType,\n  sendCallsSync,\n} from '../../actions/wallet/sendCallsSync.js'\nimport {\n  type SendRawTransactionParameters,\n  type SendRawTransactionReturnType,\n  sendRawTransaction,\n} from '../../actions/wallet/sendRawTransaction.js'\nimport {\n  type SendRawTransactionSyncParameters,\n  type SendRawTransactionSyncReturnType,\n  sendRawTransactionSync,\n} from '../../actions/wallet/sendRawTransactionSync.js'\nimport {\n  type SendTransactionParameters,\n  type SendTransactionRequest,\n  type SendTransactionReturnType,\n  sendTransaction,\n} from '../../actions/wallet/sendTransaction.js'\nimport {\n  type SendTransactionSyncParameters,\n  type SendTransactionSyncRequest,\n  type SendTransactionSyncReturnType,\n  sendTransactionSync,\n} from '../../actions/wallet/sendTransactionSync.js'\nimport {\n  type ShowCallsStatusParameters,\n  type ShowCallsStatusReturnType,\n  showCallsStatus,\n} from '../../actions/wallet/showCallsStatus.js'\nimport {\n  type SignAuthorizationParameters,\n  type SignAuthorizationReturnType,\n  signAuthorization,\n} from '../../actions/wallet/signAuthorization.js'\nimport {\n  type SignMessageParameters,\n  type SignMessageReturnType,\n  signMessage,\n} from '../../actions/wallet/signMessage.js'\nimport {\n  type SignTransactionParameters,\n  type SignTransactionRequest,\n  type SignTransactionReturnType,\n  signTransaction,\n} from '../../actions/wallet/signTransaction.js'\nimport {\n  type SignTypedDataParameters,\n  type SignTypedDataReturnType,\n  signTypedData,\n} from '../../actions/wallet/signTypedData.js'\nimport {\n  type SwitchChainParameters,\n  switchChain,\n} from '../../actions/wallet/switchChain.js'\nimport {\n  type WaitForCallsStatusParameters,\n  type WaitForCallsStatusReturnType,\n  waitForCallsStatus,\n} from '../../actions/wallet/waitForCallsStatus.js'\nimport {\n  type WatchAssetParameters,\n  type WatchAssetReturnType,\n  watchAsset,\n} from '../../actions/wallet/watchAsset.js'\nimport {\n  type WriteContractParameters,\n  type WriteContractReturnType,\n  writeContract,\n} from '../../actions/wallet/writeContract.js'\nimport {\n  type WriteContractSyncParameters,\n  type WriteContractSyncReturnType,\n  writeContractSync,\n} from '../../actions/wallet/writeContractSync.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n} from '../../types/contract.js'\nimport type { Client } from '../createClient.js'\nimport type { Transport } from '../transports/createTransport.js'\n\nexport type WalletActions<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n> = {\n  /**\n   * Adds an EVM chain to the wallet.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/addChain\n   * - JSON-RPC Methods: [`eth_addEthereumChain`](https://eips.ethereum.org/EIPS/eip-3085)\n   *\n   * @param args - {@link AddChainParameters}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { optimism } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   transport: custom(window.ethereum),\n   * })\n   * await client.addChain({ chain: optimism })\n   */\n  addChain: (args: AddChainParameters) => Promise<void>\n  /**\n   * Deploys a contract to the network, given bytecode and constructor arguments.\n   *\n   * - Docs: https://viem.sh/docs/contract/deployContract\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_deploying-contracts\n   *\n   * @param args - {@link DeployContractParameters}\n   * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link DeployContractReturnType}\n   *\n   * @example\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const hash = await client.deployContract({\n   *   abi: [],\n   *   account: '0x…,\n   *   bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n   * })\n   */\n  deployContract: <\n    const abi extends Abi | readonly unknown[],\n    chainOverride extends Chain | undefined,\n  >(\n    args: DeployContractParameters<abi, chain, account, chainOverride>,\n  ) => Promise<DeployContractReturnType>\n  /**\n   * Returns a list of account addresses owned by the wallet or client.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/getAddresses\n   * - JSON-RPC Methods: [`eth_accounts`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_accounts)\n   *\n   * @returns List of account addresses owned by the wallet or client. {@link GetAddressesReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const accounts = await client.getAddresses()\n   */\n  getAddresses: () => Promise<GetAddressesReturnType>\n  /**\n   * Returns the status of a call batch that was sent via `sendCalls`.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/getCallsStatus\n   * - JSON-RPC Methods: [`wallet_getCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n   *\n   * @param client - Client to use\n   * @returns Status of the calls. {@link GetCallsStatusReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const { receipts, status } = await client.getCallsStatus({ id: '0xdeadbeef' })\n   */\n  getCallsStatus: (\n    parameters: GetCallsStatusParameters,\n  ) => Promise<GetCallsStatusReturnType>\n  /**\n   * Extract capabilities that a connected wallet supports (e.g. paymasters, session keys, etc).\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/getCapabilities\n   * - JSON-RPC Methods: [`wallet_getCapabilities`](https://eips.ethereum.org/EIPS/eip-5792)\n   *\n   * @param client - Client to use\n   * @returns The wallet's capabilities. {@link GetCapabilitiesReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const capabilities = await client.getCapabilities({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  getCapabilities: <chainId extends number | undefined>(\n    parameters?: GetCapabilitiesParameters<chainId>,\n  ) => Promise<GetCapabilitiesReturnType<chainId>>\n  /**\n   * Returns the chain ID associated with the current network.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getChainId\n   * - JSON-RPC Methods: [`eth_chainId`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid)\n   *\n   * @returns The current chain ID. {@link GetChainIdReturnType}\n   *\n   * @example\n   * import { createWalletClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const chainId = await client.getChainId()\n   * // 1\n   */\n  getChainId: () => Promise<GetChainIdReturnType>\n  /**\n   * Gets the wallets current permissions.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/getPermissions\n   * - JSON-RPC Methods: [`wallet_getPermissions`](https://eips.ethereum.org/EIPS/eip-2255)\n   *\n   * @returns The wallet permissions. {@link GetPermissionsReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const permissions = await client.getPermissions()\n   */\n  getPermissions: () => Promise<GetPermissionsReturnType>\n  /**\n   * Prepares an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object for signing.\n   * This Action will fill the required fields of the Authorization object if they are not provided (e.g. `nonce` and `chainId`).\n   *\n   * With the prepared Authorization object, you can use [`signAuthorization`](https://viem.sh/docs/eip7702/signAuthorization) to sign over the Authorization object.\n   *\n   * @param client - Client to use\n   * @param parameters - {@link PrepareAuthorizationParameters}\n   * @returns The prepared Authorization object. {@link PrepareAuthorizationReturnType}\n   *\n   * @example\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   *\n   * const authorization = await client.prepareAuthorization({\n   *   account: privateKeyToAccount('0x..'),\n   *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   *\n   * const authorization = await client.prepareAuthorization({\n   *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  prepareAuthorization: (\n    parameters: PrepareAuthorizationParameters<account>,\n  ) => Promise<PrepareAuthorizationReturnType>\n  /**\n   * Prepares a transaction request for signing.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest\n   *\n   * @param args - {@link PrepareTransactionRequestParameters}\n   * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   */\n  prepareTransactionRequest: <\n    const request extends PrepareTransactionRequestRequest<\n      chain,\n      chainOverride\n    >,\n    chainOverride extends Chain | undefined = undefined,\n    accountOverride extends Account | Address | undefined = undefined,\n  >(\n    args: PrepareTransactionRequestParameters<\n      chain,\n      account,\n      chainOverride,\n      accountOverride,\n      request\n    >,\n  ) => Promise<\n    PrepareTransactionRequestReturnType<\n      chain,\n      account,\n      chainOverride,\n      accountOverride,\n      request\n    >\n  >\n  /**\n   * Requests a list of accounts managed by a wallet.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/requestAddresses\n   * - JSON-RPC Methods: [`eth_requestAccounts`](https://eips.ethereum.org/EIPS/eip-1102)\n   *\n   * Sends a request to the wallet, asking for permission to access the user's accounts. After the user accepts the request, it will return a list of accounts (addresses).\n   *\n   * This API can be useful for dapps that need to access the user's accounts in order to execute transactions or interact with smart contracts.\n   *\n   * @returns List of accounts managed by a wallet {@link RequestAddressesReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const accounts = await client.requestAddresses()\n   */\n  requestAddresses: () => Promise<RequestAddressesReturnType>\n  /**\n   * Requests permissions for a wallet.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/requestPermissions\n   * - JSON-RPC Methods: [`wallet_requestPermissions`](https://eips.ethereum.org/EIPS/eip-2255)\n   *\n   * @param args - {@link RequestPermissionsParameters}\n   * @returns The wallet permissions. {@link RequestPermissionsReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const permissions = await client.requestPermissions({\n   *   eth_accounts: {}\n   * })\n   */\n  requestPermissions: (\n    args: RequestPermissionsParameters,\n  ) => Promise<RequestPermissionsReturnType>\n  /**\n   * Requests the connected wallet to send a batch of calls.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendCalls\n   * - JSON-RPC Methods: [`wallet_sendCalls`](https://eips.ethereum.org/EIPS/eip-5792)\n   *\n   * @param client - Client to use\n   * @returns Transaction identifier. {@link SendCallsReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const id = await client.sendCalls({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   calls: [\n   *     {\n   *       data: '0xdeadbeef',\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *     },\n   *     {\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *       value: 69420n,\n   *     },\n   *   ],\n   * })\n   */\n  sendCalls: <\n    const calls extends readonly unknown[],\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    parameters: SendCallsParameters<chain, account, chainOverride, calls>,\n  ) => Promise<SendCallsReturnType>\n  /**\n   * Requests the connected wallet to send a batch of calls, and waits for the calls to be included in a block.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendCallsSync\n   * - JSON-RPC Methods: [`wallet_sendCalls`](https://eips.ethereum.org/EIPS/eip-5792)\n   *\n   * @param client - Client to use\n   * @returns Calls status. {@link SendCallsSyncReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const status = await client.sendCallsSync({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   calls: [\n   *     {\n   *       data: '0xdeadbeef',\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *     },\n   *     {\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *       value: 69420n,\n   *     },\n   *   ],\n   * })\n   */\n  sendCallsSync: <\n    const calls extends readonly unknown[],\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    parameters: SendCallsSyncParameters<chain, account, chainOverride, calls>,\n  ) => Promise<SendCallsSyncReturnType>\n  /**\n   * Sends a **signed** transaction to the network\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransaction\n   * - JSON-RPC Method: [`eth_sendRawTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link SendRawTransactionParameters}\n   * @returns The transaction hash. {@link SendRawTransactionReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { sendRawTransaction } from 'viem/wallet'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const hash = await client.sendRawTransaction({\n   *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n   * })\n   */\n  sendRawTransaction: (\n    args: SendRawTransactionParameters,\n  ) => Promise<SendRawTransactionReturnType>\n  /**\n   * Sends a **signed** transaction to the network synchronously,\n   * and waits for the transaction to be included in a block.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransactionSync\n   * - JSON-RPC Method: [`eth_sendRawTransactionSync`](https://eips.ethereum.org/EIPS/eip-7966)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link SendRawTransactionSyncParameters}\n   * @returns The transaction receipt. {@link SendRawTransactionSyncReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { sendRawTransactionSync } from 'viem/wallet'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const receipt = await client.sendRawTransactionSync({\n   *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n   * })\n   */\n  sendRawTransactionSync: (\n    args: SendRawTransactionSyncParameters,\n  ) => Promise<SendRawTransactionSyncReturnType<chain>>\n  /**\n   * Creates, signs, and sends a new transaction to the network.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendTransaction\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions\n   * - JSON-RPC Methods:\n   *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\n   *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\n   *\n   * @param args - {@link SendTransactionParameters}\n   * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const hash = await client.sendTransaction({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *   value: 1000000000000000000n,\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const hash = await client.sendTransaction({\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *   value: 1000000000000000000n,\n   * })\n   */\n  sendTransaction: <\n    const request extends SendTransactionRequest<chain, chainOverride>,\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    args: SendTransactionParameters<chain, account, chainOverride, request>,\n  ) => Promise<SendTransactionReturnType>\n  /**\n   * Creates, signs, and sends a new transaction to the network synchronously.\n   * Returns the transaction receipt.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendTransactionSync\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions\n   * - JSON-RPC Methods:\n   *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\n   *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\n   *\n   * @param args - {@link SendTransactionParameters}\n   * @returns The transaction receipt. {@link SendTransactionReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const receipt = await client.sendTransactionSync({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *   value: 1000000000000000000n,\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const receipt = await client.sendTransactionSync({\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *   value: 1000000000000000000n,\n   * })\n   */\n  sendTransactionSync: <\n    const request extends SendTransactionSyncRequest<chain, chainOverride>,\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    args: SendTransactionSyncParameters<chain, account, chainOverride, request>,\n  ) => Promise<SendTransactionSyncReturnType>\n  /**\n   * Requests for the wallet to show information about a call batch\n   * that was sent via `sendCalls`.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/showCallsStatus\n   * - JSON-RPC Methods: [`wallet_showCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n   *\n   * @param client - Client to use\n   * @returns Displays status of the calls in wallet. {@link ShowCallsStatusReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * await client.showCallsStatus({ id: '0xdeadbeef' })\n   */\n  showCallsStatus: (\n    parameters: ShowCallsStatusParameters,\n  ) => Promise<ShowCallsStatusReturnType>\n  /**\n   * Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\n   *\n   * With the calculated signature, you can:\n   * - use [`verifyAuthorization`](https://viem.sh/docs/eip7702/verifyAuthorization) to verify the signed Authorization object,\n   * - use [`recoverAuthorizationAddress`](https://viem.sh/docs/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\n   *\n   * @param client - Client to use\n   * @param parameters - {@link SignAuthorizationParameters}\n   * @returns The signed Authorization object. {@link SignAuthorizationReturnType}\n   *\n   * @example\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   *\n   * const signature = await client.signAuthorization({\n   *   account: privateKeyToAccount('0x..'),\n   *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   *\n   * const signature = await client.signAuthorization({\n   *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  signAuthorization: (\n    parameters: SignAuthorizationParameters<account>,\n  ) => Promise<SignAuthorizationReturnType>\n  /**\n   * Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/signMessage\n   * - JSON-RPC Methods:\n   *   - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data#personal-sign)\n   *   - Local Accounts: Signs locally. No JSON-RPC request.\n   *\n   * With the calculated signature, you can:\n   * - use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\n   * - use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress) to recover the signing address from a signature.\n   *\n   * @param args - {@link SignMessageParameters}\n   * @returns The signed message. {@link SignMessageReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const signature = await client.signMessage({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   message: 'hello world',\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const signature = await client.signMessage({\n   *   message: 'hello world',\n   * })\n   */\n  signMessage: (\n    args: SignMessageParameters<account>,\n  ) => Promise<SignMessageReturnType>\n  /**\n   * Signs a transaction.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/signTransaction\n   * - JSON-RPC Methods:\n   *   - JSON-RPC Accounts: [`eth_signTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n   *   - Local Accounts: Signs locally. No JSON-RPC request.\n   *\n   * @param args - {@link SignTransactionParameters}\n   * @returns The signed message. {@link SignTransactionReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   * const signature = await client.signTransaction(request)\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   * const signature = await client.signTransaction(request)\n   */\n  signTransaction: <\n    chainOverride extends Chain | undefined,\n    const request extends SignTransactionRequest<\n      chain,\n      chainOverride\n    > = SignTransactionRequest<chain, chainOverride>,\n  >(\n    args: SignTransactionParameters<chain, account, chainOverride, request>,\n  ) => Promise<SignTransactionReturnType<request>>\n  /**\n   * Signs typed data and calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/signTypedData\n   * - JSON-RPC Methods:\n   *   - JSON-RPC Accounts: [`eth_signTypedData_v4`](https://docs.metamask.io/guide/signing-data#signtypeddata-v4)\n   *   - Local Accounts: Signs locally. No JSON-RPC request.\n   *\n   * @param client - Client to use\n   * @param args - {@link SignTypedDataParameters}\n   * @returns The signed data. {@link SignTypedDataReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const signature = await client.signTypedData({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   domain: {\n   *     name: 'Ether Mail',\n   *     version: '1',\n   *     chainId: 1,\n   *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n   *   },\n   *   types: {\n   *     Person: [\n   *       { name: 'name', type: 'string' },\n   *       { name: 'wallet', type: 'address' },\n   *     ],\n   *     Mail: [\n   *       { name: 'from', type: 'Person' },\n   *       { name: 'to', type: 'Person' },\n   *       { name: 'contents', type: 'string' },\n   *     ],\n   *   },\n   *   primaryType: 'Mail',\n   *   message: {\n   *     from: {\n   *       name: 'Cow',\n   *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n   *     },\n   *     to: {\n   *       name: 'Bob',\n   *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n   *     },\n   *     contents: 'Hello, Bob!',\n   *   },\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const signature = await client.signTypedData({\n   *   domain: {\n   *     name: 'Ether Mail',\n   *     version: '1',\n   *     chainId: 1,\n   *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n   *   },\n   *   types: {\n   *     Person: [\n   *       { name: 'name', type: 'string' },\n   *       { name: 'wallet', type: 'address' },\n   *     ],\n   *     Mail: [\n   *       { name: 'from', type: 'Person' },\n   *       { name: 'to', type: 'Person' },\n   *       { name: 'contents', type: 'string' },\n   *     ],\n   *   },\n   *   primaryType: 'Mail',\n   *   message: {\n   *     from: {\n   *       name: 'Cow',\n   *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n   *     },\n   *     to: {\n   *       name: 'Bob',\n   *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n   *     },\n   *     contents: 'Hello, Bob!',\n   *   },\n   * })\n   */\n  signTypedData: <\n    const typedData extends TypedData | { [key: string]: unknown },\n    primaryType extends string,\n  >(\n    args: SignTypedDataParameters<typedData, primaryType, account>,\n  ) => Promise<SignTypedDataReturnType>\n  /**\n   * Switch the target chain in a wallet.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/switchChain\n   * - JSON-RPC Methods: [`eth_switchEthereumChain`](https://eips.ethereum.org/EIPS/eip-3326)\n   *\n   * @param args - {@link SwitchChainParameters}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet, optimism } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * await client.switchChain({ id: optimism.id })\n   */\n  switchChain: (args: SwitchChainParameters) => Promise<void>\n  /**\n   * Waits for the status & receipts of a call bundle that was sent via `sendCalls`.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/waitForCallsStatus\n   * - JSON-RPC Methods: [`wallet_getCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link WaitForCallsStatusParameters}\n   * @returns Status & receipts of the call bundle. {@link WaitForCallsStatusReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const { receipts, status } = await waitForCallsStatus(client, { id: '0xdeadbeef' })\n   */\n  waitForCallsStatus: (\n    parameters: WaitForCallsStatusParameters,\n  ) => Promise<WaitForCallsStatusReturnType>\n  /**\n   * Adds an EVM chain to the wallet.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/watchAsset\n   * - JSON-RPC Methods: [`eth_switchEthereumChain`](https://eips.ethereum.org/EIPS/eip-747)\n   *\n   * @param args - {@link WatchAssetParameters}\n   * @returns Boolean indicating if the token was successfully added. {@link WatchAssetReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const success = await client.watchAsset({\n   *   type: 'ERC20',\n   *   options: {\n   *     address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n   *     decimals: 18,\n   *     symbol: 'WETH',\n   *   },\n   * })\n   */\n  watchAsset: (args: WatchAssetParameters) => Promise<WatchAssetReturnType>\n  /**\n   * Executes a write function on a contract.\n   *\n   * - Docs: https://viem.sh/docs/contract/writeContract\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\n   *\n   * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\n   *\n   * Internally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n   *\n   * __Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\n   *\n   * @param args - {@link WriteContractParameters}\n   * @returns A [Transaction Hash](https://viem.sh/docs/glossary/terms#hash). {@link WriteContractReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const hash = await client.writeContract({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n   *   functionName: 'mint',\n   *   args: [69420],\n   * })\n   *\n   * @example\n   * // With Validation\n   * import { createWalletClient, custom, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const { request } = await client.simulateContract({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n   *   functionName: 'mint',\n   *   args: [69420],\n   * }\n   * const hash = await client.writeContract(request)\n   */\n  writeContract: <\n    const abi extends Abi | readonly unknown[],\n    functionName extends ContractFunctionName<abi, 'payable' | 'nonpayable'>,\n    args extends ContractFunctionArgs<\n      abi,\n      'payable' | 'nonpayable',\n      functionName\n    >,\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    args: WriteContractParameters<\n      abi,\n      functionName,\n      args,\n      chain,\n      account,\n      chainOverride\n    >,\n  ) => Promise<WriteContractReturnType>\n  /**\n   * Executes a write function on a contract synchronously.\n   * Returns the transaction receipt.\n   *\n   * - Docs: https://viem.sh/docs/contract/writeContract\n   *\n   * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\n   *\n   * Internally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n   *\n   * __Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\n   *\n   * @param args - {@link WriteContractSyncParameters}\n   * @returns A [Transaction Receipt](https://viem.sh/docs/glossary/terms#receipt). {@link WriteContractSyncReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const receipt = await client.writeContractSync({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n   *   functionName: 'mint',\n   *   args: [69420],\n   * })\n   */\n  writeContractSync: <\n    const abi extends Abi | readonly unknown[],\n    functionName extends ContractFunctionName<abi, 'payable' | 'nonpayable'>,\n    args extends ContractFunctionArgs<\n      abi,\n      'payable' | 'nonpayable',\n      functionName\n    >,\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    args: WriteContractSyncParameters<\n      abi,\n      functionName,\n      args,\n      chain,\n      account,\n      chainOverride\n    >,\n  ) => Promise<WriteContractSyncReturnType>\n}\n\nexport function walletActions<\n  transport extends Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n>(client: Client<transport, chain, account>): WalletActions<chain, account> {\n  return {\n    addChain: (args) => addChain(client, args),\n    deployContract: (args) => deployContract(client, args),\n    getAddresses: () => getAddresses(client),\n    getCallsStatus: (args) => getCallsStatus(client, args),\n    getCapabilities: (args) => getCapabilities(client, args),\n    getChainId: () => getChainId(client),\n    getPermissions: () => getPermissions(client),\n    prepareAuthorization: (args) => prepareAuthorization(client, args),\n    prepareTransactionRequest: (args) =>\n      prepareTransactionRequest(client as any, args as any) as any,\n    requestAddresses: () => requestAddresses(client),\n    requestPermissions: (args) => requestPermissions(client, args),\n    sendCalls: (args) => sendCalls(client, args),\n    sendCallsSync: (args) => sendCallsSync(client, args),\n    sendRawTransaction: (args) => sendRawTransaction(client, args),\n    sendRawTransactionSync: (args) => sendRawTransactionSync(client, args),\n    sendTransaction: (args) => sendTransaction(client, args),\n    sendTransactionSync: (args) => sendTransactionSync(client, args),\n    showCallsStatus: (args) => showCallsStatus(client, args),\n    signAuthorization: (args) => signAuthorization(client, args),\n    signMessage: (args) => signMessage(client, args),\n    signTransaction: (args) => signTransaction(client, args),\n    signTypedData: (args) => signTypedData(client, args),\n    switchChain: (args) => switchChain(client, args),\n    waitForCallsStatus: (args) => waitForCallsStatus(client, args),\n    watchAsset: (args) => watchAsset(client, args),\n    writeContract: (args) => writeContract(client, args as any),\n    writeContractSync: (args) => writeContractSync(client, args as any),\n  }\n}\n", "import type { Address } from 'abitype'\n\nimport type { Account } from '../accounts/types.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { ParseAccount } from '../types/account.js'\nimport type { Chain } from '../types/chain.js'\nimport type { RpcSchema, WalletRpcSchema } from '../types/eip1193.js'\nimport type { Prettify } from '../types/utils.js'\nimport {\n  type Client,\n  type ClientConfig,\n  type CreateClientErrorType,\n  createClient,\n} from './createClient.js'\nimport { type WalletActions, walletActions } from './decorators/wallet.js'\nimport type { Transport } from './transports/createTransport.js'\n\nexport type WalletClientConfig<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  accountOrAddress extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = Prettify<\n  Pick<\n    ClientConfig<transport, chain, accountOrAddress, rpcSchema>,\n    | 'account'\n    | 'cacheTime'\n    | 'ccipRead'\n    | 'chain'\n    | 'key'\n    | 'name'\n    | 'pollingInterval'\n    | 'rpcSchema'\n    | 'transport'\n  >\n>\n\nexport type WalletClient<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = Prettify<\n  Client<\n    transport,\n    chain,\n    account,\n    rpcSchema extends RpcSchema\n      ? [...WalletRpcSchema, ...rpcSchema]\n      : WalletRpcSchema,\n    WalletActions<chain, account>\n  >\n>\n\nexport type CreateWalletClientErrorType = CreateClientErrorType | ErrorType\n\n/**\n * Creates a Wallet Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\n *\n * - Docs: https://viem.sh/docs/clients/wallet\n *\n * A Wallet Client is an interface to interact with [Ethereum Account(s)](https://ethereum.org/en/glossary/#account) and provides the ability to retrieve accounts, execute transactions, sign messages, etc. through [Wallet Actions](https://viem.sh/docs/actions/wallet/introduction).\n *\n * The Wallet Client supports signing over:\n * - [JSON-RPC Accounts](https://viem.sh/docs/clients/wallet#json-rpc-accounts) (e.g. Browser Extension Wallets, WalletConnect, etc).\n * - [Local Accounts](https://viem.sh/docs/clients/wallet#local-accounts-private-key-mnemonic-etc) (e.g. private key/mnemonic wallets).\n *\n * @param config - {@link WalletClientConfig}\n * @returns A Wallet Client. {@link WalletClient}\n *\n * @example\n * // JSON-RPC Account\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * @example\n * // Local Account\n * import { createWalletClient, custom } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…')\n *   chain: mainnet,\n *   transport: http(),\n * })\n */\nexport function createWalletClient<\n  transport extends Transport,\n  chain extends Chain | undefined = undefined,\n  accountOrAddress extends Account | Address | undefined = undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n>(\n  parameters: WalletClientConfig<transport, chain, accountOrAddress, rpcSchema>,\n): WalletClient<transport, chain, ParseAccount<accountOrAddress>, rpcSchema>\n\nexport function createWalletClient(\n  parameters: WalletClientConfig,\n): WalletClient {\n  const { key = 'wallet', name = 'Wallet Client', transport } = parameters\n  const client = createClient({\n    ...parameters,\n    key,\n    name,\n    transport,\n    type: 'walletClient',\n  })\n  return client.extend(walletActions)\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { EIP1193RequestFn } from '../../types/eip1193.js'\nimport type { OneOf } from '../../types/utils.js'\nimport { buildRequest } from '../../utils/buildRequest.js'\nimport { uid as uid_ } from '../../utils/uid.js'\nimport type { ClientConfig } from '../createClient.js'\n\nexport type TransportConfig<\n  type extends string = string,\n  eip1193RequestFn extends EIP1193RequestFn = EIP1193RequestFn,\n> = {\n  /** The name of the transport. */\n  name: string\n  /** The key of the transport. */\n  key: string\n  /** Methods to include or exclude from executing RPC requests. */\n  methods?:\n    | OneOf<\n        | {\n            include?: string[] | undefined\n          }\n        | {\n            exclude?: string[] | undefined\n          }\n      >\n    | undefined\n  /** The JSON-RPC request function that matches the EIP-1193 request spec. */\n  request: eip1193RequestFn\n  /** The base delay (in ms) between retries. */\n  retryDelay?: number | undefined\n  /** The max number of times to retry. */\n  retryCount?: number | undefined\n  /** The timeout (in ms) for requests. */\n  timeout?: number | undefined\n  /** The type of the transport. */\n  type: type\n}\n\nexport type Transport<\n  type extends string = string,\n  rpcAttributes = Record<string, any>,\n  eip1193RequestFn extends EIP1193RequestFn = EIP1193RequestFn,\n> = <chain extends Chain | undefined = Chain>({\n  chain,\n}: {\n  chain?: chain | undefined\n  pollingInterval?: ClientConfig['pollingInterval'] | undefined\n  retryCount?: TransportConfig['retryCount'] | undefined\n  timeout?: TransportConfig['timeout'] | undefined\n}) => {\n  config: TransportConfig<type>\n  request: eip1193RequestFn\n  value?: rpcAttributes | undefined\n}\n\nexport type CreateTransportErrorType = ErrorType\n\n/**\n * @description Creates an transport intended to be used with a client.\n */\nexport function createTransport<\n  type extends string,\n  rpcAttributes extends Record<string, any>,\n>(\n  {\n    key,\n    methods,\n    name,\n    request,\n    retryCount = 3,\n    retryDelay = 150,\n    timeout,\n    type,\n  }: TransportConfig<type>,\n  value?: rpcAttributes | undefined,\n): ReturnType<Transport<type, rpcAttributes>> {\n  const uid = uid_()\n  return {\n    config: {\n      key,\n      methods,\n      name,\n      request,\n      retryCount,\n      retryDelay,\n      timeout,\n      type,\n    },\n    request: buildRequest(request, { methods, retryCount, retryDelay, uid }),\n    value,\n  }\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport {\n  type CreateTransportErrorType,\n  createTransport,\n  type Transport,\n  type TransportConfig,\n} from './createTransport.js'\n\ntype EthereumProvider = { request(...args: any): Promise<any> }\n\nexport type CustomTransportConfig = {\n  /** The key of the transport. */\n  key?: TransportConfig['key'] | undefined\n  /** Methods to include or exclude from executing RPC requests. */\n  methods?: TransportConfig['methods'] | undefined\n  /** The name of the transport. */\n  name?: TransportConfig['name'] | undefined\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount'] | undefined\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay'] | undefined\n}\n\nexport type CustomTransport = Transport<\n  'custom',\n  {},\n  EthereumProvider['request']\n>\n\nexport type CustomTransportErrorType = CreateTransportErrorType | ErrorType\n\n/**\n * @description Creates a custom transport given an EIP-1193 compliant `request` attribute.\n */\nexport function custom<provider extends EthereumProvider>(\n  provider: provider,\n  config: CustomTransportConfig = {},\n): CustomTransport {\n  const {\n    key = 'custom',\n    methods,\n    name = 'Custom Provider',\n    retryDelay,\n  } = config\n  return ({ retryCount: defaultRetryCount }) =>\n    createTransport({\n      key,\n      methods,\n      name,\n      request: provider.request.bind(provider),\n      retryCount: config.retryCount ?? defaultRetryCount,\n      retryDelay,\n      type: 'custom',\n    })\n}\n", "import { ExecutionRevertedError } from '../../errors/node.js'\nimport {\n  TransactionRejectedRpcError,\n  UserRejectedRequestError,\n} from '../../errors/rpc.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport { wait } from '../../utils/wait.js'\n\nimport {\n  type CreateTransportErrorType,\n  createTransport,\n  type Transport,\n  type TransportConfig,\n} from './createTransport.js'\n// TODO: Narrow `method` & `params` types.\nexport type OnResponseFn = (\n  args: {\n    method: string\n    params: unknown[]\n    transport: ReturnType<Transport>\n  } & (\n    | {\n        error?: undefined\n        response: unknown\n        status: 'success'\n      }\n    | {\n        error: Error\n        response?: undefined\n        status: 'error'\n      }\n  ),\n) => void\n\ntype RankOptions = {\n  /**\n   * The polling interval (in ms) at which the ranker should ping the RPC URL.\n   * @default client.pollingInterval\n   */\n  interval?: number | undefined\n  /**\n   * Ping method to determine latency.\n   */\n  ping?: (parameters: {\n    transport: ReturnType<Transport>\n  }) => Promise<unknown> | undefined\n  /**\n   * The number of previous samples to perform ranking on.\n   * @default 10\n   */\n  sampleCount?: number | undefined\n  /**\n   * Timeout when sampling transports.\n   * @default 1_000\n   */\n  timeout?: number | undefined\n  /**\n   * Weights to apply to the scores. Weight values are proportional.\n   */\n  weights?:\n    | {\n        /**\n         * The weight to apply to the latency score.\n         * @default 0.3\n         */\n        latency?: number | undefined\n        /**\n         * The weight to apply to the stability score.\n         * @default 0.7\n         */\n        stability?: number | undefined\n      }\n    | undefined\n}\n\nexport type FallbackTransportConfig = {\n  /** The key of the Fallback transport. */\n  key?: TransportConfig['key'] | undefined\n  /** The name of the Fallback transport. */\n  name?: TransportConfig['name'] | undefined\n  /** Toggle to enable ranking, or rank options. */\n  rank?: boolean | RankOptions | undefined\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount'] | undefined\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay'] | undefined\n  /** Callback on whether an error should throw or try the next transport in the fallback. */\n  shouldThrow?: (error: Error) => boolean | undefined\n}\n\nexport type FallbackTransport<\n  transports extends readonly Transport[] = readonly Transport[],\n> = Transport<\n  'fallback',\n  {\n    onResponse: (fn: OnResponseFn) => void\n    transports: {\n      [key in keyof transports]: ReturnType<transports[key]>\n    }\n  }\n>\n\nexport type FallbackTransportErrorType = CreateTransportErrorType | ErrorType\n\nexport function fallback<const transports extends readonly Transport[]>(\n  transports_: transports,\n  config: FallbackTransportConfig = {},\n): FallbackTransport<transports> {\n  const {\n    key = 'fallback',\n    name = 'Fallback',\n    rank = false,\n    shouldThrow: shouldThrow_ = shouldThrow,\n    retryCount,\n    retryDelay,\n  } = config\n  return (({ chain, pollingInterval = 4_000, timeout, ...rest }) => {\n    let transports = transports_\n\n    let onResponse: OnResponseFn = () => {}\n\n    const transport = createTransport(\n      {\n        key,\n        name,\n        async request({ method, params }) {\n          let includes: boolean | undefined\n\n          const fetch = async (i = 0): Promise<any> => {\n            const transport = transports[i]({\n              ...rest,\n              chain,\n              retryCount: 0,\n              timeout,\n            })\n            try {\n              const response = await transport.request({\n                method,\n                params,\n              } as any)\n\n              onResponse({\n                method,\n                params: params as unknown[],\n                response,\n                transport,\n                status: 'success',\n              })\n\n              return response\n            } catch (err) {\n              onResponse({\n                error: err as Error,\n                method,\n                params: params as unknown[],\n                transport,\n                status: 'error',\n              })\n\n              if (shouldThrow_(err as Error)) throw err\n\n              // If we've reached the end of the fallbacks, throw the error.\n              if (i === transports.length - 1) throw err\n\n              // Check if at least one other transport includes the method\n              includes ??= transports.slice(i + 1).some((transport) => {\n                const { include, exclude } =\n                  transport({ chain }).config.methods || {}\n                if (include) return include.includes(method)\n                if (exclude) return !exclude.includes(method)\n                return true\n              })\n              if (!includes) throw err\n\n              // Otherwise, try the next fallback.\n              return fetch(i + 1)\n            }\n          }\n          return fetch()\n        },\n        retryCount,\n        retryDelay,\n        type: 'fallback',\n      },\n      {\n        onResponse: (fn: OnResponseFn) => (onResponse = fn),\n        transports: transports.map((fn) => fn({ chain, retryCount: 0 })),\n      },\n    )\n\n    if (rank) {\n      const rankOptions = (typeof rank === 'object' ? rank : {}) as RankOptions\n      rankTransports({\n        chain,\n        interval: rankOptions.interval ?? pollingInterval,\n        onTransports: (transports_) => (transports = transports_ as transports),\n        ping: rankOptions.ping,\n        sampleCount: rankOptions.sampleCount,\n        timeout: rankOptions.timeout,\n        transports,\n        weights: rankOptions.weights,\n      })\n    }\n    return transport\n  }) as FallbackTransport<transports>\n}\n\nexport function shouldThrow(error: Error) {\n  if ('code' in error && typeof error.code === 'number') {\n    if (\n      error.code === TransactionRejectedRpcError.code ||\n      error.code === UserRejectedRequestError.code ||\n      ExecutionRevertedError.nodeMessage.test(error.message) ||\n      error.code === 5000 // CAIP UserRejectedRequestError\n    )\n      return true\n  }\n  return false\n}\n\n/** @internal */\nexport function rankTransports({\n  chain,\n  interval = 4_000,\n  onTransports,\n  ping,\n  sampleCount = 10,\n  timeout = 1_000,\n  transports,\n  weights = {},\n}: {\n  chain?: Chain | undefined\n  interval: RankOptions['interval']\n  onTransports: (transports: readonly Transport[]) => void\n  ping?: RankOptions['ping'] | undefined\n  sampleCount?: RankOptions['sampleCount'] | undefined\n  timeout?: RankOptions['timeout'] | undefined\n  transports: readonly Transport[]\n  weights?: RankOptions['weights'] | undefined\n}) {\n  const { stability: stabilityWeight = 0.7, latency: latencyWeight = 0.3 } =\n    weights\n\n  type SampleData = { latency: number; success: number }\n  type Sample = SampleData[]\n  const samples: Sample[] = []\n\n  const rankTransports_ = async () => {\n    // 1. Take a sample from each Transport.\n    const sample: Sample = await Promise.all(\n      transports.map(async (transport) => {\n        const transport_ = transport({ chain, retryCount: 0, timeout })\n\n        const start = Date.now()\n        let end: number\n        let success: number\n        try {\n          await (ping\n            ? ping({ transport: transport_ })\n            : transport_.request({ method: 'net_listening' }))\n          success = 1\n        } catch {\n          success = 0\n        } finally {\n          end = Date.now()\n        }\n        const latency = end - start\n        return { latency, success }\n      }),\n    )\n\n    // 2. Store the sample. If we have more than `sampleCount` samples, remove\n    // the oldest sample.\n    samples.push(sample)\n    if (samples.length > sampleCount) samples.shift()\n\n    // 3. Calculate the max latency from samples.\n    const maxLatency = Math.max(\n      ...samples.map((sample) =>\n        Math.max(...sample.map(({ latency }) => latency)),\n      ),\n    )\n\n    // 4. Calculate the score for each Transport.\n    const scores = transports\n      .map((_, i) => {\n        const latencies = samples.map((sample) => sample[i].latency)\n        const meanLatency =\n          latencies.reduce((acc, latency) => acc + latency, 0) /\n          latencies.length\n        const latencyScore = 1 - meanLatency / maxLatency\n\n        const successes = samples.map((sample) => sample[i].success)\n        const stabilityScore =\n          successes.reduce((acc, success) => acc + success, 0) /\n          successes.length\n\n        if (stabilityScore === 0) return [0, i]\n        return [\n          latencyWeight * latencyScore + stabilityWeight * stabilityScore,\n          i,\n        ]\n      })\n      .sort((a, b) => b[0] - a[0])\n\n    // 5. Sort the Transports by score.\n    onTransports(scores.map(([, i]) => transports[i]))\n\n    // 6. Wait, and then rank again.\n    await wait(interval)\n    rankTransports_()\n  }\n  rankTransports_()\n}\n", "import { BaseError } from './base.js'\n\nexport type UrlRequiredErrorType = UrlRequiredError & {\n  name: 'UrlRequiredError'\n}\nexport class UrlRequiredError extends BaseError {\n  constructor() {\n    super(\n      'No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.',\n      {\n        docsPath: '/docs/clients/intro',\n        name: 'UrlRequiredError',\n      },\n    )\n  }\n}\n", "import { RpcRequestError } from '../../errors/request.js'\nimport {\n  UrlRequiredError,\n  type UrlRequiredErrorType,\n} from '../../errors/transport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { EIP1193RequestFn, RpcSchema } from '../../types/eip1193.js'\nimport type { RpcRequest } from '../../types/rpc.js'\nimport { createBatchScheduler } from '../../utils/promise/createBatchScheduler.js'\nimport {\n  getHttpRpcClient,\n  type HttpRpcClientOptions,\n} from '../../utils/rpc/http.js'\n\nimport {\n  type CreateTransportErrorType,\n  createTransport,\n  type Transport,\n  type TransportConfig,\n} from './createTransport.js'\n\nexport type HttpTransportConfig<\n  rpcSchema extends RpcSchema | undefined = undefined,\n  raw extends boolean = false,\n> = {\n  /**\n   * Whether to enable Batch JSON-RPC.\n   * @link https://www.jsonrpc.org/specification#batch\n   */\n  batch?:\n    | boolean\n    | {\n        /** The maximum number of JSON-RPC requests to send in a batch. @default 1_000 */\n        batchSize?: number | undefined\n        /** The maximum number of milliseconds to wait before sending a batch. @default 0 */\n        wait?: number | undefined\n      }\n    | undefined\n  fetchFn?: HttpRpcClientOptions['fetchFn'] | undefined\n  /**\n   * Request configuration to pass to `fetch`.\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/fetch\n   */\n  fetchOptions?: HttpRpcClientOptions['fetchOptions'] | undefined\n  /** A callback to handle the response from `fetch`. */\n  onFetchRequest?: HttpRpcClientOptions['onRequest'] | undefined\n  /** A callback to handle the response from `fetch`. */\n  onFetchResponse?: HttpRpcClientOptions['onResponse'] | undefined\n  /** The key of the HTTP transport. */\n  key?: TransportConfig['key'] | undefined\n  /** Methods to include or exclude from executing RPC requests. */\n  methods?: TransportConfig['methods'] | undefined\n  /** The name of the HTTP transport. */\n  name?: TransportConfig['name'] | undefined\n  /** Whether to return JSON RPC errors as responses instead of throwing. */\n  raw?: raw | boolean | undefined\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount'] | undefined\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay'] | undefined\n  /** Typed JSON-RPC schema for the transport. */\n  rpcSchema?: rpcSchema | RpcSchema | undefined\n  /** The timeout (in ms) for the HTTP request. Default: 10_000 */\n  timeout?: TransportConfig['timeout'] | undefined\n}\n\nexport type HttpTransport<\n  rpcSchema extends RpcSchema | undefined = undefined,\n  raw extends boolean = false,\n> = Transport<\n  'http',\n  {\n    fetchOptions?: HttpTransportConfig['fetchOptions'] | undefined\n    url?: string | undefined\n  },\n  EIP1193RequestFn<rpcSchema, raw>\n>\n\nexport type HttpTransportErrorType =\n  | CreateTransportErrorType\n  | UrlRequiredErrorType\n  | ErrorType\n\n/**\n * @description Creates a HTTP transport that connects to a JSON-RPC API.\n */\nexport function http<\n  rpcSchema extends RpcSchema | undefined = undefined,\n  raw extends boolean = false,\n>(\n  /** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\n  url?: string | undefined,\n  config: HttpTransportConfig<rpcSchema, raw> = {},\n): HttpTransport<rpcSchema, raw> {\n  const {\n    batch,\n    fetchFn,\n    fetchOptions,\n    key = 'http',\n    methods,\n    name = 'HTTP JSON-RPC',\n    onFetchRequest,\n    onFetchResponse,\n    retryDelay,\n    raw,\n  } = config\n  return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\n    const { batchSize = 1000, wait = 0 } =\n      typeof batch === 'object' ? batch : {}\n    const retryCount = config.retryCount ?? retryCount_\n    const timeout = timeout_ ?? config.timeout ?? 10_000\n    const url_ = url || chain?.rpcUrls.default.http[0]\n    if (!url_) throw new UrlRequiredError()\n\n    const rpcClient = getHttpRpcClient(url_, {\n      fetchFn,\n      fetchOptions,\n      onRequest: onFetchRequest,\n      onResponse: onFetchResponse,\n      timeout,\n    })\n\n    return createTransport(\n      {\n        key,\n        methods,\n        name,\n        async request({ method, params }) {\n          const body = { method, params }\n\n          const { schedule } = createBatchScheduler({\n            id: url_,\n            wait,\n            shouldSplitBatch(requests) {\n              return requests.length > batchSize\n            },\n            fn: (body: RpcRequest[]) =>\n              rpcClient.request({\n                body,\n              }),\n            sort: (a, b) => a.id - b.id,\n          })\n\n          const fn = async (body: RpcRequest) =>\n            batch\n              ? schedule(body)\n              : [\n                  await rpcClient.request({\n                    body,\n                  }),\n                ]\n\n          const [{ error, result }] = await fn(body)\n\n          if (raw) return { error, result }\n          if (error)\n            throw new RpcRequestError({\n              body,\n              error,\n              url: url_,\n            })\n          return result\n        },\n        retryCount,\n        retryDelay,\n        timeout,\n        type: 'http',\n      },\n      {\n        fetchOptions,\n        url: url_,\n      },\n    )\n  }\n}\n", "import type { Address } from 'abitype'\nimport { RpcRequestError } from '../../errors/request.js'\nimport {\n  UrlRequiredError,\n  type UrlRequiredErrorType,\n} from '../../errors/transport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hash, LogTopic } from '../../types/misc.js'\nimport type { RpcResponse } from '../../types/rpc.js'\nimport { getSocket } from '../../utils/rpc/compat.js'\nimport type { SocketRpcClient } from '../../utils/rpc/socket.js'\nimport {\n  type GetWebSocketRpcClientOptions,\n  getWebSocketRpcClient,\n} from '../../utils/rpc/webSocket.js'\nimport {\n  type CreateTransportErrorType,\n  createTransport,\n  type Transport,\n  type TransportConfig,\n} from './createTransport.js'\n\ntype WebSocketTransportSubscribeParameters = {\n  onData: (data: RpcResponse) => void\n  onError?: ((error: any) => void) | undefined\n}\n\ntype WebSocketTransportSubscribeReturnType = {\n  subscriptionId: Hash\n  unsubscribe: () => Promise<RpcResponse<boolean>>\n}\n\ntype WebSocketTransportSubscribe = {\n  subscribe(\n    args: WebSocketTransportSubscribeParameters &\n      (\n        | {\n            params: ['newHeads']\n          }\n        | {\n            params: ['newPendingTransactions']\n          }\n        | {\n            params: [\n              'logs',\n              {\n                address?: Address | Address[]\n                topics?: LogTopic[]\n              },\n            ]\n          }\n        | {\n            params: ['syncing']\n          }\n      ),\n  ): Promise<WebSocketTransportSubscribeReturnType>\n}\n\nexport type WebSocketTransportConfig = {\n  /**\n   * Whether or not to send keep-alive ping messages.\n   * @default true\n   */\n  keepAlive?: GetWebSocketRpcClientOptions['keepAlive'] | undefined\n  /** The key of the WebSocket transport. */\n  key?: TransportConfig['key'] | undefined\n  /** Methods to include or exclude from executing RPC requests. */\n  methods?: TransportConfig['methods'] | undefined\n  /** The name of the WebSocket transport. */\n  name?: TransportConfig['name'] | undefined\n  /**\n   * Whether or not to attempt to reconnect on socket failure.\n   * @default true\n   */\n  reconnect?: GetWebSocketRpcClientOptions['reconnect'] | undefined\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount'] | undefined\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay'] | undefined\n  /** The timeout (in ms) for async WebSocket requests. Default: 10_000 */\n  timeout?: TransportConfig['timeout'] | undefined\n}\n\nexport type WebSocketTransport = Transport<\n  'webSocket',\n  {\n    /**\n     * @deprecated use `getRpcClient` instead.\n     */\n    getSocket(): Promise<WebSocket>\n    getRpcClient(): Promise<SocketRpcClient<WebSocket>>\n    subscribe: WebSocketTransportSubscribe['subscribe']\n  }\n>\n\nexport type WebSocketTransportErrorType =\n  | CreateTransportErrorType\n  | UrlRequiredErrorType\n  | ErrorType\n\n/**\n * @description Creates a WebSocket transport that connects to a JSON-RPC API.\n */\nexport function webSocket(\n  /** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\n  url?: string,\n  config: WebSocketTransportConfig = {},\n): WebSocketTransport {\n  const {\n    keepAlive,\n    key = 'webSocket',\n    methods,\n    name = 'WebSocket JSON-RPC',\n    reconnect,\n    retryDelay,\n  } = config\n  return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\n    const retryCount = config.retryCount ?? retryCount_\n    const timeout = timeout_ ?? config.timeout ?? 10_000\n    const url_ = url || chain?.rpcUrls.default.webSocket?.[0]\n    const wsRpcClientOpts = { keepAlive, reconnect }\n    if (!url_) throw new UrlRequiredError()\n    return createTransport(\n      {\n        key,\n        methods,\n        name,\n        async request({ method, params }) {\n          const body = { method, params }\n          const rpcClient = await getWebSocketRpcClient(url_, wsRpcClientOpts)\n          const { error, result } = await rpcClient.requestAsync({\n            body,\n            timeout,\n          })\n          if (error)\n            throw new RpcRequestError({\n              body,\n              error,\n              url: url_,\n            })\n          return result\n        },\n        retryCount,\n        retryDelay,\n        timeout,\n        type: 'webSocket',\n      },\n      {\n        getSocket() {\n          return getSocket(url_)\n        },\n        getRpcClient() {\n          return getWebSocketRpcClient(url_, wsRpcClientOpts)\n        },\n        async subscribe({ params, onData, onError }: any) {\n          const rpcClient = await getWebSocketRpcClient(url_, wsRpcClientOpts)\n          const { result: subscriptionId } = await new Promise<any>(\n            (resolve, reject) =>\n              rpcClient.request({\n                body: {\n                  method: 'eth_subscribe',\n                  params,\n                },\n                onError(error) {\n                  reject(error)\n                  onError?.(error)\n                  return\n                },\n                onResponse(response) {\n                  if (response.error) {\n                    reject(response.error)\n                    onError?.(response.error)\n                    return\n                  }\n\n                  if (typeof response.id === 'number') {\n                    resolve(response)\n                    return\n                  }\n                  if (response.method !== 'eth_subscription') return\n                  onData(response.params)\n                },\n              }),\n          )\n          return {\n            subscriptionId,\n            async unsubscribe() {\n              return new Promise<any>((resolve) =>\n                rpcClient.request({\n                  body: {\n                    method: 'eth_unsubscribe',\n                    params: [subscriptionId],\n                  },\n                  onResponse: resolve,\n                }),\n              )\n            },\n          }\n        },\n      },\n    )\n  }\n}\n", "import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex, Signature } from '../../types/misc.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type ParseSignatureErrorType = NumberToHexErrorType | ErrorType\n\n/**\n * @description Parses a hex formatted signature into a structured signature.\n *\n * @param signatureHex Signature in hex format.\n * @returns The structured signature.\n *\n * @example\n * parseSignature('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c')\n * // { r: '0x...', s: '0x...', v: 28n }\n */\nexport function parseSignature(signatureHex: Hex) {\n  const { r, s } = secp256k1.Signature.fromCompact(signatureHex.slice(2, 130))\n  const yParityOrV = Number(`0x${signatureHex.slice(130)}`)\n  const [v, yParity] = (() => {\n    if (yParityOrV === 0 || yParityOrV === 1) return [undefined, yParityOrV]\n    if (yParityOrV === 27) return [BigInt(yParityOrV), 0]\n    if (yParityOrV === 28) return [BigInt(yParityOrV), 1]\n    throw new Error('Invalid yParityOrV value')\n  })()\n\n  if (typeof v !== 'undefined')\n    return {\n      r: numberToHex(r, { size: 32 }),\n      s: numberToHex(s, { size: 32 }),\n      v,\n      yParity,\n    } satisfies Signature\n  return {\n    r: numberToHex(r, { size: 32 }),\n    s: numberToHex(s, { size: 32 }),\n    yParity,\n  } satisfies Signature\n}\n", "import * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\n\nconst encoder = /*#__PURE__*/ new TextEncoder()\nconst decoder = /*#__PURE__*/ new TextDecoder()\n\nconst integerToCharacter = /*#__PURE__*/ Object.fromEntries(\n  Array.from(\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  ).map((a, i) => [i, a.charCodeAt(0)]),\n)\n\nconst characterToInteger = /*#__PURE__*/ {\n  ...Object.fromEntries(\n    Array.from(\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n    ).map((a, i) => [a.charCodeAt(0), i]),\n  ),\n  ['='.charCodeAt(0)]: 0,\n  ['-'.charCodeAt(0)]: 62,\n  ['_'.charCodeAt(0)]: 63,\n} as Record<number, number>\n\n/**\n * Encodes a {@link ox#Bytes.Bytes} to a Base64-encoded string (with optional padding and/or URL-safe characters).\n *\n * @example\n * ```ts twoslash\n * import { Base64, Bytes } from 'ox'\n *\n * const value = Base64.fromBytes(Bytes.fromString('hello world'))\n * // @log: 'aGVsbG8gd29ybGQ='\n * ```\n *\n * @example\n * ### No Padding\n *\n * Turn off [padding of encoded data](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) with the `pad` option:\n *\n * ```ts twoslash\n * import { Base64, Bytes } from 'ox'\n *\n * const value = Base64.fromBytes(Bytes.fromString('hello world'), { pad: false })\n * // @log: 'aGVsbG8gd29ybGQ'\n * ```\n *\n * ### URL-safe Encoding\n *\n * Turn on [URL-safe encoding](https://datatracker.ietf.org/doc/html/rfc4648#section-5) (Base64 URL) with the `url` option:\n *\n * ```ts twoslash\n * import { Base64, Bytes } from 'ox'\n *\n * const value = Base64.fromBytes(Bytes.fromString('hello wod'), { url: true })\n * // @log: 'aGVsbG8gd29_77-9ZA=='\n * ```\n *\n * @param value - The byte array to encode.\n * @param options - Encoding options.\n * @returns The Base64 encoded string.\n */\nexport function fromBytes(value: Bytes.Bytes, options: fromBytes.Options = {}) {\n  const { pad = true, url = false } = options\n\n  const encoded = new Uint8Array(Math.ceil(value.length / 3) * 4)\n\n  for (let i = 0, j = 0; j < value.length; i += 4, j += 3) {\n    const y = (value[j]! << 16) + (value[j + 1]! << 8) + (value[j + 2]! | 0)\n    encoded[i] = integerToCharacter[y >> 18]!\n    encoded[i + 1] = integerToCharacter[(y >> 12) & 0x3f]!\n    encoded[i + 2] = integerToCharacter[(y >> 6) & 0x3f]!\n    encoded[i + 3] = integerToCharacter[y & 0x3f]!\n  }\n\n  const k = value.length % 3\n  const end = Math.floor(value.length / 3) * 4 + (k && k + 1)\n  let base64 = decoder.decode(new Uint8Array(encoded.buffer, 0, end))\n  if (pad && k === 1) base64 += '=='\n  if (pad && k === 2) base64 += '='\n  if (url) base64 = base64.replaceAll('+', '-').replaceAll('/', '_')\n  return base64\n}\n\nexport declare namespace fromBytes {\n  type Options = {\n    /**\n     * Whether to [pad](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) the Base64 encoded string.\n     *\n     * @default true\n     */\n    pad?: boolean | undefined\n    /**\n     * Whether to Base64 encode with [URL safe characters](https://datatracker.ietf.org/doc/html/rfc4648#section-5).\n     *\n     * @default false\n     */\n    url?: boolean | undefined\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Encodes a {@link ox#Hex.Hex} to a Base64-encoded string (with optional padding and/or URL-safe characters).\n *\n * @example\n * ```ts twoslash\n * import { Base64, Hex } from 'ox'\n *\n * const value = Base64.fromHex(Hex.fromString('hello world'))\n * // @log: 'aGVsbG8gd29ybGQ='\n * ```\n *\n * @example\n * ### No Padding\n *\n * Turn off [padding of encoded data](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) with the `pad` option:\n *\n * ```ts twoslash\n * import { Base64, Hex } from 'ox'\n *\n * const value = Base64.fromHex(Hex.fromString('hello world'), { pad: false })\n * // @log: 'aGVsbG8gd29ybGQ'\n * ```\n *\n * ### URL-safe Encoding\n *\n * Turn on [URL-safe encoding](https://datatracker.ietf.org/doc/html/rfc4648#section-5) (Base64 URL) with the `url` option:\n *\n * ```ts twoslash\n * import { Base64, Hex } from 'ox'\n *\n * const value = Base64.fromHex(Hex.fromString('hello wod'), { url: true })\n * // @log: 'aGVsbG8gd29_77-9ZA=='\n * ```\n *\n * @param value - The hex value to encode.\n * @param options - Encoding options.\n * @returns The Base64 encoded string.\n */\nexport function fromHex(value: Hex.Hex, options: fromHex.Options = {}) {\n  return fromBytes(Bytes.fromHex(value), options)\n}\n\nexport declare namespace fromHex {\n  type Options = {\n    /**\n     * Whether to [pad](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) the Base64 encoded string.\n     *\n     * @default true\n     */\n    pad?: boolean | undefined\n    /**\n     * Whether to Base64 encode with [URL safe characters](https://datatracker.ietf.org/doc/html/rfc4648#section-5).\n     *\n     * @default false\n     */\n    url?: boolean | undefined\n  }\n\n  type ErrorType = fromBytes.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Encodes a string to a Base64-encoded string (with optional padding and/or URL-safe characters).\n *\n * @example\n * ```ts twoslash\n * import { Base64 } from 'ox'\n *\n * const value = Base64.fromString('hello world')\n * // @log: 'aGVsbG8gd29ybGQ='\n * ```\n *\n * @example\n * ### No Padding\n *\n * Turn off [padding of encoded data](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) with the `pad` option:\n *\n * ```ts twoslash\n * import { Base64 } from 'ox'\n *\n * const value = Base64.fromString('hello world', { pad: false })\n * // @log: 'aGVsbG8gd29ybGQ'\n * ```\n *\n * ### URL-safe Encoding\n *\n * Turn on [URL-safe encoding](https://datatracker.ietf.org/doc/html/rfc4648#section-5) (Base64 URL) with the `url` option:\n *\n * ```ts twoslash\n * import { Base64 } from 'ox'\n *\n * const value = Base64.fromString('hello wod', { url: true })\n * // @log: 'aGVsbG8gd29_77-9ZA=='\n * ```\n *\n * @param value - The string to encode.\n * @param options - Encoding options.\n * @returns The Base64 encoded string.\n */\nexport function fromString(value: string, options: fromString.Options = {}) {\n  return fromBytes(Bytes.fromString(value), options)\n}\n\nexport declare namespace fromString {\n  type Options = {\n    /**\n     * Whether to [pad](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) the Base64 encoded string.\n     *\n     * @default true\n     */\n    pad?: boolean | undefined\n    /**\n     * Whether to Base64 encode with [URL safe characters](https://datatracker.ietf.org/doc/html/rfc4648#section-5).\n     *\n     * @default false\n     */\n    url?: boolean | undefined\n  }\n\n  type ErrorType = fromBytes.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Decodes a Base64-encoded string (with optional padding and/or URL-safe characters) to {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Base64, Bytes } from 'ox'\n *\n * const value = Base64.toBytes('aGVsbG8gd29ybGQ=')\n * // @log: Uint8Array([104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100])\n * ```\n *\n * @param value - The string, hex value, or byte array to encode.\n * @returns The Base64 decoded {@link ox#Bytes.Bytes}.\n */\nexport function toBytes(value: string): Bytes.Bytes {\n  const base64 = value.replace(/=+$/, '')\n\n  const size = base64.length\n\n  const decoded = new Uint8Array(size + 3)\n  encoder.encodeInto(base64 + '===', decoded)\n\n  for (let i = 0, j = 0; i < base64.length; i += 4, j += 3) {\n    const x =\n      (characterToInteger[decoded[i]!]! << 18) +\n      (characterToInteger[decoded[i + 1]!]! << 12) +\n      (characterToInteger[decoded[i + 2]!]! << 6) +\n      characterToInteger[decoded[i + 3]!]!\n    decoded[j] = x >> 16\n    decoded[j + 1] = (x >> 8) & 0xff\n    decoded[j + 2] = x & 0xff\n  }\n\n  const decodedSize = (size >> 2) * 3 + (size % 4 && (size % 4) - 1)\n  return new Uint8Array(decoded.buffer, 0, decodedSize)\n}\n\nexport declare namespace toBytes {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Decodes a Base64-encoded string (with optional padding and/or URL-safe characters) to {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Base64, Hex } from 'ox'\n *\n * const value = Base64.toHex('aGVsbG8gd29ybGQ=')\n * // @log: 0x68656c6c6f20776f726c64\n * ```\n *\n * @param value - The string, hex value, or byte array to encode.\n * @returns The Base64 decoded {@link ox#Hex.Hex}.\n */\nexport function toHex(value: string): Hex.Hex {\n  return Hex.fromBytes(toBytes(value))\n}\n\nexport declare namespace toHex {\n  type ErrorType = toBytes.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Decodes a Base64-encoded string (with optional padding and/or URL-safe characters) to a string.\n *\n * @example\n * ```ts twoslash\n * import { Base64 } from 'ox'\n *\n * const value = Base64.toString('aGVsbG8gd29ybGQ=')\n * // @log: 'hello world'\n * ```\n *\n * @param value - The string, hex value, or byte array to encode.\n * @returns The Base64 decoded string.\n */\nexport function toString(value: string): string {\n  return Bytes.toString(toBytes(value))\n}\n\nexport declare namespace toString {\n  type ErrorType = toBytes.ErrorType | Errors.GlobalErrorType\n}\n", "/**\n * Internal module for NIST P256, P384, P521 curves.\n * Do not use for now.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256, sha384, sha512 } from '@noble/hashes/sha2';\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.ts';\nimport { createHasher, type Hasher } from './abstract/hash-to-curve.ts';\nimport { Field } from './abstract/modular.ts';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.ts';\n\nconst Fp256 = Field(BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'));\nconst p256_a = Fp256.create(BigInt('-3'));\nconst p256_b = BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b');\n\n/**\n * secp256r1 curve, ECDSA and ECDH methods.\n * Field: `2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n-1n`\n */\n// prettier-ignore\nexport const p256: CurveFnWithCreate = createCurve({\n  a: p256_a,\n  b: p256_b,\n  Fp: Fp256,\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n  h: BigInt(1),\n  lowS: false\n} as const, sha256);\n/** Alias to p256. */\nexport const secp256r1: CurveFnWithCreate = p256;\n\nconst p256_mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp256, {\n    A: p256_a,\n    B: p256_b,\n    Z: Fp256.create(BigInt('-10')),\n  }))();\n\n/** Hashing / encoding to p256 points / field. RFC 9380 methods. */\nexport const p256_hasher: Hasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(secp256r1.ProjectivePoint, (scalars: bigint[]) => p256_mapSWU(scalars[0]), {\n    DST: 'P256_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n    p: Fp256.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n  }))();\n\n// Field over which we'll do calculations.\nconst Fp384 = Field(\n  BigInt(\n    '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff'\n  )\n);\nconst p384_a = Fp384.create(BigInt('-3'));\n// prettier-ignore\nconst p384_b = BigInt('0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef');\n\n/**\n * secp384r1 curve, ECDSA and ECDH methods.\n * Field: `2n**384n - 2n**128n - 2n**96n + 2n**32n - 1n`.\n * */\n// prettier-ignore\nexport const p384: CurveFnWithCreate = createCurve({\n  a: p384_a,\n  b: p384_b,\n  Fp: Fp384,\n  n: BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973'),\n  Gx: BigInt('0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7'),\n  Gy: BigInt('0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f'),\n  h: BigInt(1),\n  lowS: false\n} as const, sha384);\n/** Alias to p384. */\nexport const secp384r1: CurveFnWithCreate = p384;\n\nconst p384_mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp384, {\n    A: p384_a,\n    B: p384_b,\n    Z: Fp384.create(BigInt('-12')),\n  }))();\n\n/** Hashing / encoding to p384 points / field. RFC 9380 methods. */\nexport const p384_hasher: Hasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(secp384r1.ProjectivePoint, (scalars: bigint[]) => p384_mapSWU(scalars[0]), {\n    DST: 'P384_XMD:SHA-384_SSWU_RO_',\n    encodeDST: 'P384_XMD:SHA-384_SSWU_NU_',\n    p: Fp384.ORDER,\n    m: 1,\n    k: 192,\n    expand: 'xmd',\n    hash: sha384,\n  }))();\n\n// Field over which we'll do calculations.\nconst Fp521 = Field(\n  BigInt(\n    '0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n  )\n);\n\nconst p521_a = Fp521.create(BigInt('-3'));\nconst p521_b = BigInt(\n  '0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00'\n);\n\n/**\n * NIST secp521r1 aka p521 curve, ECDSA and ECDH methods.\n * Field: `2n**521n - 1n`.\n */\n// prettier-ignore\nexport const p521: CurveFnWithCreate = createCurve({\n  a: p521_a,\n  b: p521_b,\n  Fp: Fp521,\n  n: BigInt(\n    '0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409'\n  ),\n  Gx: BigInt(\n    '0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66'\n  ),\n  Gy: BigInt(\n    '0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650'\n  ),\n  h: BigInt(1),\n  lowS: false,\n  allowedPrivateKeyLengths: [130, 131, 132] // P521 keys are variable-length. Normalize to 132b\n} as const, sha512);\n/** Alias to p521. */\nexport const secp521r1: CurveFnWithCreate = p521;\n\nconst p521_mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp521, {\n    A: p521_a,\n    B: p521_b,\n    Z: Fp521.create(BigInt('-4')),\n  }))();\n\n/** Hashing / encoding to p521 points / field. RFC 9380 methods. */\nexport const p521_hasher: Hasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(secp521r1.ProjectivePoint, (scalars: bigint[]) => p521_mapSWU(scalars[0]), {\n    DST: 'P521_XMD:SHA-512_SSWU_RO_',\n    encodeDST: 'P521_XMD:SHA-512_SSWU_NU_',\n    p: Fp521.ORDER,\n    m: 1,\n    k: 256,\n    expand: 'xmd',\n    hash: sha512,\n  }))();\n", "/**\n * NIST secp256r1 aka p256.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { type HTFMethod } from './abstract/hash-to-curve.ts';\nimport { p256_hasher, p256 as p256n } from './nist.ts';\nexport const p256: typeof p256n = p256n;\nexport const secp256r1: typeof p256n = p256n;\nexport const hashToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => p256_hasher.hashToCurve)();\nexport const encodeToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => p256_hasher.encodeToCurve)();\n", "import * as Base64 from './Base64.js'\nimport * as Bytes from './Bytes.js'\nimport * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport type { Compute, OneOf } from './internal/types.js'\nimport * as internal from './internal/webauthn.js'\nimport * as P256 from './P256.js'\nimport type * as PublicKey from './PublicKey.js'\nimport type * as Signature from './Signature.js'\n\n/** A WebAuthn-flavored P256 credential. */\nexport type P256Credential = {\n  id: string\n  publicKey: PublicKey.PublicKey\n  raw: internal.PublicKeyCredential\n}\n\n/** Metadata for a WebAuthn P256 signature. */\nexport type SignMetadata = Compute<{\n  authenticatorData: Hex.Hex\n  challengeIndex: number\n  clientDataJSON: string\n  typeIndex: number\n  userVerificationRequired: boolean\n}>\n\nexport const createChallenge = Uint8Array.from([\n  105, 171, 180, 181, 160, 222, 75, 198, 42, 42, 32, 31, 141, 37, 186, 233,\n])\n\n/**\n * Creates a new WebAuthn P256 Credential, which can be stored and later used for signing.\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const credential = await WebAuthnP256.createCredential({ name: 'Example' }) // [!code focus]\n * // @log: {\n * // @log:   id: 'oZ48...',\n * // @log:   publicKey: { x: 51421...5123n, y: 12345...6789n },\n * // @log:   raw: PublicKeyCredential {},\n * // @log: }\n *\n * const { metadata, signature } = await WebAuthnP256.sign({\n *   credentialId: credential.id,\n *   challenge: '0xdeadbeef',\n * })\n * ```\n *\n * @param options - Credential creation options.\n * @returns A WebAuthn P256 credential.\n */\nexport async function createCredential(\n  options: createCredential.Options,\n): Promise<P256Credential> {\n  const {\n    createFn = window.navigator.credentials.create.bind(\n      window.navigator.credentials,\n    ),\n    ...rest\n  } = options\n  const creationOptions = getCredentialCreationOptions(rest)\n  try {\n    const credential = (await createFn(\n      creationOptions,\n    )) as internal.PublicKeyCredential\n    if (!credential) throw new CredentialCreationFailedError()\n\n    const response = credential.response as AuthenticatorAttestationResponse\n    const publicKey = await internal.parseCredentialPublicKey(response)\n\n    return {\n      id: credential.id,\n      publicKey,\n      raw: credential,\n    }\n  } catch (error) {\n    throw new CredentialCreationFailedError({\n      cause: error as Error,\n    })\n  }\n}\n\nexport declare namespace createCredential {\n  type Options = getCredentialCreationOptions.Options & {\n    /**\n     * Credential creation function. Useful for environments that do not support\n     * the WebAuthn API natively (i.e. React Native or testing environments).\n     *\n     * @default window.navigator.credentials.create\n     */\n    createFn?:\n      | ((\n          options?: internal.CredentialCreationOptions | undefined,\n        ) => Promise<internal.Credential | null>)\n      | undefined\n  }\n\n  type ErrorType =\n    | getCredentialCreationOptions.ErrorType\n    | internal.parseCredentialPublicKey.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Gets the authenticator data which contains information about the\n * processing of an authenticator request (ie. from `WebAuthnP256.sign`).\n *\n * :::warning\n *\n * This function is mainly for testing purposes or for manually constructing\n * autenticator data. In most cases you will not need this function.\n * `authenticatorData` is typically returned as part of the\n * {@link ox#WebAuthnP256.(sign:function)} response (ie. an authenticator response).\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const authenticatorData = WebAuthnP256.getAuthenticatorData({\n *   rpId: 'example.com',\n *   signCount: 420,\n * })\n * // @log: \"0xa379a6f6eeafb9a55e378c118034e2751e682fab9f2d30ab13d2125586ce194705000001a4\"\n * ```\n *\n * @param options - Options to construct the authenticator data.\n * @returns The authenticator data.\n */\nexport function getAuthenticatorData(\n  options: getAuthenticatorData.Options = {},\n): Hex.Hex {\n  const { flag = 5, rpId = window.location.hostname, signCount = 0 } = options\n  const rpIdHash = Hash.sha256(Hex.fromString(rpId))\n  const flag_bytes = Hex.fromNumber(flag, { size: 1 })\n  const signCount_bytes = Hex.fromNumber(signCount, { size: 4 })\n  return Hex.concat(rpIdHash, flag_bytes, signCount_bytes)\n}\n\nexport declare namespace getAuthenticatorData {\n  type Options = {\n    /** A bitfield that indicates various attributes that were asserted by the authenticator. [Read more](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Authenticator_data#flags) */\n    flag?: number | undefined\n    /** The [Relying Party ID](https://w3c.github.io/webauthn/#relying-party-identifier) that the credential is scoped to. */\n    rpId?: internal.PublicKeyCredentialRequestOptions['rpId'] | undefined\n    /** A signature counter, if supported by the authenticator (set to 0 otherwise). */\n    signCount?: number | undefined\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Constructs the Client Data in stringified JSON format which represents client data that\n * was passed to `credentials.get()` in {@link ox#WebAuthnP256.(sign:function)}.\n *\n * :::warning\n *\n * This function is mainly for testing purposes or for manually constructing\n * client data. In most cases you will not need this function.\n * `clientDataJSON` is typically returned as part of the\n * {@link ox#WebAuthnP256.(sign:function)} response (ie. an authenticator response).\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const clientDataJSON = WebAuthnP256.getClientDataJSON({\n *   challenge: '0xdeadbeef',\n *   origin: 'https://example.com',\n * })\n * // @log: \"{\"type\":\"webauthn.get\",\"challenge\":\"3q2-7w\",\"origin\":\"https://example.com\",\"crossOrigin\":false}\"\n * ```\n *\n * @param options - Options to construct the client data.\n * @returns The client data.\n */\nexport function getClientDataJSON(options: getClientDataJSON.Options): string {\n  const {\n    challenge,\n    crossOrigin = false,\n    extraClientData,\n    origin = window.location.origin,\n  } = options\n\n  return JSON.stringify({\n    type: 'webauthn.get',\n    challenge: Base64.fromHex(challenge, { url: true, pad: false }),\n    origin,\n    crossOrigin,\n    ...extraClientData,\n  })\n}\n\nexport declare namespace getClientDataJSON {\n  type Options = {\n    /** The challenge to sign. */\n    challenge: Hex.Hex\n    /** If set to `true`, it means that the calling context is an `<iframe>` that is not same origin with its ancestor frames. */\n    crossOrigin?: boolean | undefined\n    /** Additional client data to include in the client data JSON. */\n    extraClientData?: Record<string, unknown> | undefined\n    /** The fully qualified origin of the relying party which has been given by the client/browser to the authenticator. */\n    origin?: string | undefined\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Returns the creation options for a P256 WebAuthn Credential to be used with\n * the Web Authentication API.\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const options = WebAuthnP256.getCredentialCreationOptions({ name: 'Example' })\n *\n * const credential = await window.navigator.credentials.create(options)\n * ```\n *\n * @param options - Options.\n * @returns The credential creation options.\n */\nexport function getCredentialCreationOptions(\n  options: getCredentialCreationOptions.Options,\n): internal.CredentialCreationOptions {\n  const {\n    attestation = 'none',\n    authenticatorSelection = {\n      residentKey: 'preferred',\n      requireResidentKey: false,\n      userVerification: 'required',\n    },\n    challenge = createChallenge,\n    excludeCredentialIds,\n    extensions,\n    name: name_,\n    rp = {\n      id: window.location.hostname,\n      name: window.document.title,\n    },\n    user,\n  } = options\n  const name = (user?.name ?? name_)!\n  return {\n    publicKey: {\n      attestation,\n      authenticatorSelection,\n      challenge,\n      ...(excludeCredentialIds\n        ? {\n            excludeCredentials: excludeCredentialIds?.map((id) => ({\n              id: Base64.toBytes(id),\n              type: 'public-key',\n            })),\n          }\n        : {}),\n      pubKeyCredParams: [\n        {\n          type: 'public-key',\n          alg: -7, // p256\n        },\n      ],\n      ...(extensions && { extensions }),\n      rp,\n      user: {\n        id: user?.id ?? Hash.keccak256(Bytes.fromString(name), { as: 'Bytes' }),\n        name,\n        displayName: user?.displayName ?? name,\n      },\n    },\n  }\n}\n\nexport declare namespace getCredentialCreationOptions {\n  type Options = {\n    /**\n     * A string specifying the relying party's preference for how the attestation statement\n     * (i.e., provision of verifiable evidence of the authenticity of the authenticator and its data)\n     * is conveyed during credential creation.\n     */\n    attestation?:\n      | internal.PublicKeyCredentialCreationOptions['attestation']\n      | undefined\n    /**\n     * An object whose properties are criteria used to filter out the potential authenticators\n     * for the credential creation operation.\n     */\n    authenticatorSelection?:\n      | internal.PublicKeyCredentialCreationOptions['authenticatorSelection']\n      | undefined\n    /**\n     * An `ArrayBuffer`, `TypedArray`, or `DataView` used as a cryptographic challenge.\n     */\n    challenge?:\n      | internal.PublicKeyCredentialCreationOptions['challenge']\n      | undefined\n    /**\n     * List of credential IDs to exclude from the creation. This property can be used\n     * to prevent creation of a credential if it already exists.\n     */\n    excludeCredentialIds?: readonly string[] | undefined\n    /**\n     * List of Web Authentication API credentials to use during creation or authentication.\n     */\n    extensions?:\n      | internal.PublicKeyCredentialCreationOptions['extensions']\n      | undefined\n    /**\n     * An object describing the relying party that requested the credential creation\n     */\n    rp?:\n      | {\n          id: string\n          name: string\n        }\n      | undefined\n    /**\n     * A numerical hint, in milliseconds, which indicates the time the calling web app is willing to wait for the creation operation to complete.\n     */\n    timeout?: internal.PublicKeyCredentialCreationOptions['timeout'] | undefined\n  } & OneOf<\n    | {\n        /** Name for the credential (user.name). */\n        name: string\n      }\n    | {\n        /**\n         * An object describing the user account for which the credential is generated.\n         */\n        user: {\n          displayName?: string\n          id?: BufferSource\n          name: string\n        }\n      }\n  >\n\n  type ErrorType =\n    | Base64.toBytes.ErrorType\n    | Hash.keccak256.ErrorType\n    | Bytes.fromString.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Returns the request options to sign a challenge with the Web Authentication API.\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const options = WebAuthnP256.getCredentialRequestOptions({\n *   challenge: '0xdeadbeef',\n * })\n *\n * const credential = await window.navigator.credentials.get(options)\n * ```\n *\n * @param options - Options.\n * @returns The credential request options.\n */\nexport function getCredentialRequestOptions(\n  options: getCredentialRequestOptions.Options,\n): internal.CredentialRequestOptions {\n  const {\n    credentialId,\n    challenge,\n    extensions,\n    rpId = window.location.hostname,\n    userVerification = 'required',\n  } = options\n  return {\n    publicKey: {\n      ...(credentialId\n        ? {\n            allowCredentials: Array.isArray(credentialId)\n              ? credentialId.map((id) => ({\n                  id: Base64.toBytes(id),\n                  type: 'public-key',\n                }))\n              : [\n                  {\n                    id: Base64.toBytes(credentialId),\n                    type: 'public-key',\n                  },\n                ],\n          }\n        : {}),\n      challenge: Bytes.fromHex(challenge),\n      ...(extensions && { extensions }),\n      rpId,\n      userVerification,\n    },\n  }\n}\n\nexport declare namespace getCredentialRequestOptions {\n  type Options = {\n    /** The credential ID to use. */\n    credentialId?: string | string[] | undefined\n    /** The challenge to sign. */\n    challenge: Hex.Hex\n    /** List of Web Authentication API credentials to use during creation or authentication. */\n    extensions?:\n      | internal.PublicKeyCredentialRequestOptions['extensions']\n      | undefined\n    /** The relying party identifier to use. */\n    rpId?: internal.PublicKeyCredentialRequestOptions['rpId'] | undefined\n    /** The user verification requirement. */\n    userVerification?:\n      | internal.PublicKeyCredentialRequestOptions['userVerification']\n      | undefined\n  }\n\n  type ErrorType =\n    | Bytes.fromHex.ErrorType\n    | Base64.toBytes.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Constructs the final digest that was signed and computed by the authenticator. This payload includes\n * the cryptographic `challenge`, as well as authenticator metadata (`authenticatorData` + `clientDataJSON`).\n * This value can be also used with raw P256 verification (such as {@link ox#P256.(verify:function)} or\n * {@link ox#WebCryptoP256.(verify:function)}).\n *\n * :::warning\n *\n * This function is mainly for testing purposes or for manually constructing\n * signing payloads. In most cases you will not need this function and\n * instead use {@link ox#WebAuthnP256.(sign:function)}.\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256, WebCryptoP256 } from 'ox'\n *\n * const { metadata, payload } = WebAuthnP256.getSignPayload({ // [!code focus]\n *   challenge: '0xdeadbeef', // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   metadata: {\n * // @log:     authenticatorData: \"0x49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97630500000000\",\n * // @log:     challengeIndex: 23,\n * // @log:     clientDataJSON: \"{\"type\":\"webauthn.get\",\"challenge\":\"9jEFijuhEWrM4SOW-tChJbUEHEP44VcjcJ-Bqo1fTM8\",\"origin\":\"http://localhost:5173\",\"crossOrigin\":false}\",\n * // @log:     typeIndex: 1,\n * // @log:     userVerificationRequired: true,\n * // @log:   },\n * // @log:   payload: \"0x49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d9763050000000045086dcb06a5f234db625bcdc94e657f86b76b6fd3eb9c30543eabc1e577a4b0\",\n * // @log: }\n *\n * const { publicKey, privateKey } = await WebCryptoP256.createKeyPair()\n *\n * const signature = await WebCryptoP256.sign({\n *   payload,\n *   privateKey,\n * })\n * ```\n *\n * @param options - Options to construct the signing payload.\n * @returns The signing payload.\n */\nexport function getSignPayload(\n  options: getSignPayload.Options,\n): getSignPayload.ReturnType {\n  const {\n    challenge,\n    crossOrigin,\n    extraClientData,\n    flag,\n    origin,\n    rpId,\n    signCount,\n    userVerification = 'required',\n  } = options\n\n  const authenticatorData = getAuthenticatorData({\n    flag,\n    rpId,\n    signCount,\n  })\n  const clientDataJSON = getClientDataJSON({\n    challenge,\n    crossOrigin,\n    extraClientData,\n    origin,\n  })\n  const clientDataJSONHash = Hash.sha256(Hex.fromString(clientDataJSON))\n\n  const challengeIndex = clientDataJSON.indexOf('\"challenge\"')\n  const typeIndex = clientDataJSON.indexOf('\"type\"')\n\n  const metadata = {\n    authenticatorData,\n    clientDataJSON,\n    challengeIndex,\n    typeIndex,\n    userVerificationRequired: userVerification === 'required',\n  }\n\n  const payload = Hex.concat(authenticatorData, clientDataJSONHash)\n\n  return { metadata, payload }\n}\n\nexport declare namespace getSignPayload {\n  type Options = {\n    /** The challenge to sign. */\n    challenge: Hex.Hex\n    /** If set to `true`, it means that the calling context is an `<iframe>` that is not same origin with its ancestor frames. */\n    crossOrigin?: boolean | undefined\n    /** Additional client data to include in the client data JSON. */\n    extraClientData?: Record<string, unknown> | undefined\n    /** If set to `true`, the payload will be hashed before being returned. */\n    hash?: boolean | undefined\n    /** A bitfield that indicates various attributes that were asserted by the authenticator. [Read more](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Authenticator_data#flags) */\n    flag?: number | undefined\n    /** The fully qualified origin of the relying party which has been given by the client/browser to the authenticator. */\n    origin?: string | undefined\n    /** The [Relying Party ID](https://w3c.github.io/webauthn/#relying-party-identifier) that the credential is scoped to. */\n    rpId?: internal.PublicKeyCredentialRequestOptions['rpId'] | undefined\n    /** A signature counter, if supported by the authenticator (set to 0 otherwise). */\n    signCount?: number | undefined\n    /** The user verification requirement that the authenticator will enforce. */\n    userVerification?:\n      | internal.PublicKeyCredentialRequestOptions['userVerification']\n      | undefined\n  }\n\n  type ReturnType = {\n    metadata: SignMetadata\n    payload: Hex.Hex\n  }\n\n  type ErrorType =\n    | Hash.sha256.ErrorType\n    | Hex.concat.ErrorType\n    | Hex.fromString.ErrorType\n    | getAuthenticatorData.ErrorType\n    | getClientDataJSON.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Signs a challenge using a stored WebAuthn P256 Credential. If no Credential is provided,\n * a prompt will be displayed for the user to select an existing Credential\n * that was previously registered.\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const credential = await WebAuthnP256.createCredential({\n *   name: 'Example',\n * })\n *\n * const { metadata, signature } = await WebAuthnP256.sign({ // [!code focus]\n *   credentialId: credential.id, // [!code focus]\n *   challenge: '0xdeadbeef', // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   metadata: {\n * // @log:     authenticatorData: '0x49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97630500000000',\n * // @log:     clientDataJSON: '{\"type\":\"webauthn.get\",\"challenge\":\"9jEFijuhEWrM4SOW-tChJbUEHEP44VcjcJ-Bqo1fTM8\",\"origin\":\"http://localhost:5173\",\"crossOrigin\":false}',\n * // @log:     challengeIndex: 23,\n * // @log:     typeIndex: 1,\n * // @log:     userVerificationRequired: true,\n * // @log:   },\n * // @log:   signature: { r: 51231...4215n, s: 12345...6789n },\n * // @log: }\n * ```\n *\n * @param options - Options.\n * @returns The signature.\n */\nexport async function sign(options: sign.Options): Promise<sign.ReturnType> {\n  const {\n    getFn = window.navigator.credentials.get.bind(window.navigator.credentials),\n    ...rest\n  } = options\n  const requestOptions = getCredentialRequestOptions(rest)\n  try {\n    const credential = (await getFn(\n      requestOptions,\n    )) as internal.PublicKeyCredential\n    if (!credential) throw new CredentialRequestFailedError()\n    const response = credential.response as AuthenticatorAssertionResponse\n\n    const clientDataJSON = String.fromCharCode(\n      ...new Uint8Array(response.clientDataJSON),\n    )\n    const challengeIndex = clientDataJSON.indexOf('\"challenge\"')\n    const typeIndex = clientDataJSON.indexOf('\"type\"')\n\n    const signature = internal.parseAsn1Signature(\n      new Uint8Array(response.signature),\n    )\n\n    return {\n      metadata: {\n        authenticatorData: Hex.fromBytes(\n          new Uint8Array(response.authenticatorData),\n        ),\n        clientDataJSON,\n        challengeIndex,\n        typeIndex,\n        userVerificationRequired:\n          requestOptions.publicKey!.userVerification === 'required',\n      },\n      signature,\n      raw: credential,\n    }\n  } catch (error) {\n    throw new CredentialRequestFailedError({\n      cause: error as Error,\n    })\n  }\n}\n\nexport declare namespace sign {\n  type Options = getCredentialRequestOptions.Options & {\n    /**\n     * Credential request function. Useful for environments that do not support\n     * the WebAuthn API natively (i.e. React Native or testing environments).\n     *\n     * @default window.navigator.credentials.get\n     */\n    getFn?:\n      | ((\n          options?: internal.CredentialRequestOptions | undefined,\n        ) => Promise<internal.Credential | null>)\n      | undefined\n  }\n\n  type ReturnType = {\n    metadata: SignMetadata\n    raw: internal.PublicKeyCredential\n    signature: Signature.Signature<false>\n  }\n\n  type ErrorType =\n    | Hex.fromBytes.ErrorType\n    | getCredentialRequestOptions.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Verifies a signature using the Credential's public key and the challenge which was signed.\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const credential = await WebAuthnP256.createCredential({\n *   name: 'Example',\n * })\n *\n * const { metadata, signature } = await WebAuthnP256.sign({\n *   credentialId: credential.id,\n *   challenge: '0xdeadbeef',\n * })\n *\n * const result = await WebAuthnP256.verify({ // [!code focus]\n *   metadata, // [!code focus]\n *   challenge: '0xdeadbeef', // [!code focus]\n *   publicKey: credential.publicKey, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: true\n * ```\n *\n * @param options - Options.\n * @returns Whether the signature is valid.\n */\nexport function verify(options: verify.Options): boolean {\n  const { challenge, hash = true, metadata, publicKey, signature } = options\n  const {\n    authenticatorData,\n    challengeIndex,\n    clientDataJSON,\n    typeIndex,\n    userVerificationRequired,\n  } = metadata\n\n  const authenticatorDataBytes = Bytes.fromHex(authenticatorData)\n\n  // Check length of `authenticatorData`.\n  if (authenticatorDataBytes.length < 37) return false\n\n  const flag = authenticatorDataBytes[32]!\n\n  // Verify that the UP bit of the flags in authData is set.\n  if ((flag & 0x01) !== 0x01) return false\n\n  // If user verification was determined to be required, verify that\n  // the UV bit of the flags in authData is set. Otherwise, ignore the\n  // value of the UV flag.\n  if (userVerificationRequired && (flag & 0x04) !== 0x04) return false\n\n  // If the BE bit of the flags in authData is not set, verify that\n  // the BS bit is not set.\n  if ((flag & 0x08) !== 0x08 && (flag & 0x10) === 0x10) return false\n\n  // Check that response is for an authentication assertion\n  const type = '\"type\":\"webauthn.get\"'\n  if (type !== clientDataJSON.slice(Number(typeIndex), type.length + 1))\n    return false\n\n  // Check that hash is in the clientDataJSON.\n  const match = clientDataJSON\n    .slice(Number(challengeIndex))\n    .match(/^\"challenge\":\"(.*?)\"/)\n  if (!match) return false\n\n  // Validate the challenge in the clientDataJSON.\n  const [_, challenge_extracted] = match\n  if (Hex.fromBytes(Base64.toBytes(challenge_extracted!)) !== challenge)\n    return false\n\n  const clientDataJSONHash = Hash.sha256(Bytes.fromString(clientDataJSON), {\n    as: 'Bytes',\n  })\n  const payload = Bytes.concat(authenticatorDataBytes, clientDataJSONHash)\n\n  return P256.verify({\n    hash,\n    payload,\n    publicKey,\n    signature,\n  })\n}\n\nexport declare namespace verify {\n  type Options = {\n    /** The challenge to verify. */\n    challenge: Hex.Hex\n    /** If set to `true`, the payload will be hashed (sha256) before being verified. */\n    hash?: boolean | undefined\n    /** The public key to verify the signature with. */\n    publicKey: PublicKey.PublicKey\n    /** The signature to verify. */\n    signature: Signature.Signature<false>\n    /** The metadata to verify the signature with. */\n    metadata: SignMetadata\n  }\n\n  type ErrorType =\n    | Base64.toBytes.ErrorType\n    | Bytes.concat.ErrorType\n    | Bytes.fromHex.ErrorType\n    | P256.verify.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** Thrown when a WebAuthn P256 credential creation fails. */\nexport class CredentialCreationFailedError extends Errors.BaseError<Error> {\n  override readonly name = 'WebAuthnP256.CredentialCreationFailedError'\n\n  constructor({ cause }: { cause?: Error | undefined } = {}) {\n    super('Failed to create credential.', {\n      cause,\n    })\n  }\n}\n\n/** Thrown when a WebAuthn P256 credential request fails. */\nexport class CredentialRequestFailedError extends Errors.BaseError<Error> {\n  override readonly name = 'WebAuthnP256.CredentialRequestFailedError'\n\n  constructor({ cause }: { cause?: Error | undefined } = {}) {\n    super('Failed to request credential.', {\n      cause,\n    })\n  }\n}\n", "export const entryPoint06Abi = [\n  {\n    inputs: [\n      { name: 'preOpGas', type: 'uint256' },\n      { name: 'paid', type: 'uint256' },\n      { name: 'validAfter', type: 'uint48' },\n      { name: 'validUntil', type: 'uint48' },\n      { name: 'targetSuccess', type: 'bool' },\n      { name: 'targetResult', type: 'bytes' },\n    ],\n    name: 'ExecutionResult',\n    type: 'error',\n  },\n  {\n    inputs: [\n      { name: 'opIndex', type: 'uint256' },\n      { name: 'reason', type: 'string' },\n    ],\n    name: 'FailedOp',\n    type: 'error',\n  },\n  {\n    inputs: [{ name: 'sender', type: 'address' }],\n    name: 'SenderAddressResult',\n    type: 'error',\n  },\n  {\n    inputs: [{ name: 'aggregator', type: 'address' }],\n    name: 'SignatureValidationFailed',\n    type: 'error',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { name: 'preOpGas', type: 'uint256' },\n          { name: 'prefund', type: 'uint256' },\n          { name: 'sigFailed', type: 'bool' },\n          { name: 'validAfter', type: 'uint48' },\n          { name: 'validUntil', type: 'uint48' },\n          { name: 'paymasterContext', type: 'bytes' },\n        ],\n\n        name: 'returnInfo',\n        type: 'tuple',\n      },\n      {\n        components: [\n          { name: 'stake', type: 'uint256' },\n          { name: 'unstakeDelaySec', type: 'uint256' },\n        ],\n\n        name: 'senderInfo',\n        type: 'tuple',\n      },\n      {\n        components: [\n          { name: 'stake', type: 'uint256' },\n          { name: 'unstakeDelaySec', type: 'uint256' },\n        ],\n\n        name: 'factoryInfo',\n        type: 'tuple',\n      },\n      {\n        components: [\n          { name: 'stake', type: 'uint256' },\n          { name: 'unstakeDelaySec', type: 'uint256' },\n        ],\n\n        name: 'paymasterInfo',\n        type: 'tuple',\n      },\n    ],\n    name: 'ValidationResult',\n    type: 'error',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { name: 'preOpGas', type: 'uint256' },\n          { name: 'prefund', type: 'uint256' },\n          { name: 'sigFailed', type: 'bool' },\n          { name: 'validAfter', type: 'uint48' },\n          { name: 'validUntil', type: 'uint48' },\n          { name: 'paymasterContext', type: 'bytes' },\n        ],\n\n        name: 'returnInfo',\n        type: 'tuple',\n      },\n      {\n        components: [\n          { name: 'stake', type: 'uint256' },\n          { name: 'unstakeDelaySec', type: 'uint256' },\n        ],\n\n        name: 'senderInfo',\n        type: 'tuple',\n      },\n      {\n        components: [\n          { name: 'stake', type: 'uint256' },\n          { name: 'unstakeDelaySec', type: 'uint256' },\n        ],\n\n        name: 'factoryInfo',\n        type: 'tuple',\n      },\n      {\n        components: [\n          { name: 'stake', type: 'uint256' },\n          { name: 'unstakeDelaySec', type: 'uint256' },\n        ],\n\n        name: 'paymasterInfo',\n        type: 'tuple',\n      },\n      {\n        components: [\n          { name: 'aggregator', type: 'address' },\n          {\n            components: [\n              { name: 'stake', type: 'uint256' },\n              {\n                name: 'unstakeDelaySec',\n                type: 'uint256',\n              },\n            ],\n\n            name: 'stakeInfo',\n            type: 'tuple',\n          },\n        ],\n\n        name: 'aggregatorInfo',\n        type: 'tuple',\n      },\n    ],\n    name: 'ValidationResultWithAggregation',\n    type: 'error',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'userOpHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'factory',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'paymaster',\n        type: 'address',\n      },\n    ],\n    name: 'AccountDeployed',\n    type: 'event',\n  },\n  { anonymous: false, inputs: [], name: 'BeforeExecution', type: 'event' },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'totalDeposit',\n        type: 'uint256',\n      },\n    ],\n    name: 'Deposited',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'aggregator',\n        type: 'address',\n      },\n    ],\n    name: 'SignatureAggregatorChanged',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'totalStaked',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n\n        name: 'unstakeDelaySec',\n        type: 'uint256',\n      },\n    ],\n    name: 'StakeLocked',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'withdrawTime',\n        type: 'uint256',\n      },\n    ],\n    name: 'StakeUnlocked',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'withdrawAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'StakeWithdrawn',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'userOpHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        indexed: true,\n\n        name: 'paymaster',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'nonce',\n        type: 'uint256',\n      },\n      { indexed: false, name: 'success', type: 'bool' },\n      {\n        indexed: false,\n\n        name: 'actualGasCost',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n\n        name: 'actualGasUsed',\n        type: 'uint256',\n      },\n    ],\n    name: 'UserOperationEvent',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'userOpHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'nonce',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n\n        name: 'revertReason',\n        type: 'bytes',\n      },\n    ],\n    name: 'UserOperationRevertReason',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'withdrawAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'Withdrawn',\n    type: 'event',\n  },\n  {\n    inputs: [],\n    name: 'SIG_VALIDATION_FAILED',\n    outputs: [{ name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { name: 'initCode', type: 'bytes' },\n      { name: 'sender', type: 'address' },\n      { name: 'paymasterAndData', type: 'bytes' },\n    ],\n    name: '_validateSenderAndPaymaster',\n    outputs: [],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'unstakeDelaySec', type: 'uint32' }],\n    name: 'addStake',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'account', type: 'address' }],\n    name: 'balanceOf',\n    outputs: [{ name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'account', type: 'address' }],\n    name: 'depositTo',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: '', type: 'address' }],\n    name: 'deposits',\n    outputs: [\n      { name: 'deposit', type: 'uint112' },\n      { name: 'staked', type: 'bool' },\n      { name: 'stake', type: 'uint112' },\n      { name: 'unstakeDelaySec', type: 'uint32' },\n      { name: 'withdrawTime', type: 'uint48' },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'account', type: 'address' }],\n    name: 'getDepositInfo',\n    outputs: [\n      {\n        components: [\n          { name: 'deposit', type: 'uint112' },\n          { name: 'staked', type: 'bool' },\n          { name: 'stake', type: 'uint112' },\n          { name: 'unstakeDelaySec', type: 'uint32' },\n          { name: 'withdrawTime', type: 'uint48' },\n        ],\n\n        name: 'info',\n        type: 'tuple',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { name: 'sender', type: 'address' },\n      { name: 'key', type: 'uint192' },\n    ],\n    name: 'getNonce',\n    outputs: [{ name: 'nonce', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'initCode', type: 'bytes' }],\n    name: 'getSenderAddress',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { name: 'sender', type: 'address' },\n          { name: 'nonce', type: 'uint256' },\n          { name: 'initCode', type: 'bytes' },\n          { name: 'callData', type: 'bytes' },\n          { name: 'callGasLimit', type: 'uint256' },\n          {\n            name: 'verificationGasLimit',\n            type: 'uint256',\n          },\n          {\n            name: 'preVerificationGas',\n            type: 'uint256',\n          },\n          { name: 'maxFeePerGas', type: 'uint256' },\n          {\n            name: 'maxPriorityFeePerGas',\n            type: 'uint256',\n          },\n          { name: 'paymasterAndData', type: 'bytes' },\n          { name: 'signature', type: 'bytes' },\n        ],\n\n        name: 'userOp',\n        type: 'tuple',\n      },\n    ],\n    name: 'getUserOpHash',\n    outputs: [{ name: '', type: 'bytes32' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            components: [\n              { name: 'sender', type: 'address' },\n              { name: 'nonce', type: 'uint256' },\n              { name: 'initCode', type: 'bytes' },\n              { name: 'callData', type: 'bytes' },\n              {\n                name: 'callGasLimit',\n                type: 'uint256',\n              },\n              {\n                name: 'verificationGasLimit',\n                type: 'uint256',\n              },\n              {\n                name: 'preVerificationGas',\n                type: 'uint256',\n              },\n              {\n                name: 'maxFeePerGas',\n                type: 'uint256',\n              },\n              {\n                name: 'maxPriorityFeePerGas',\n                type: 'uint256',\n              },\n              {\n                name: 'paymasterAndData',\n                type: 'bytes',\n              },\n              { name: 'signature', type: 'bytes' },\n            ],\n\n            name: 'userOps',\n            type: 'tuple[]',\n          },\n          {\n            name: 'aggregator',\n            type: 'address',\n          },\n          { name: 'signature', type: 'bytes' },\n        ],\n\n        name: 'opsPerAggregator',\n        type: 'tuple[]',\n      },\n      { name: 'beneficiary', type: 'address' },\n    ],\n    name: 'handleAggregatedOps',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { name: 'sender', type: 'address' },\n          { name: 'nonce', type: 'uint256' },\n          { name: 'initCode', type: 'bytes' },\n          { name: 'callData', type: 'bytes' },\n          { name: 'callGasLimit', type: 'uint256' },\n          {\n            name: 'verificationGasLimit',\n            type: 'uint256',\n          },\n          {\n            name: 'preVerificationGas',\n            type: 'uint256',\n          },\n          { name: 'maxFeePerGas', type: 'uint256' },\n          {\n            name: 'maxPriorityFeePerGas',\n            type: 'uint256',\n          },\n          { name: 'paymasterAndData', type: 'bytes' },\n          { name: 'signature', type: 'bytes' },\n        ],\n\n        name: 'ops',\n        type: 'tuple[]',\n      },\n      { name: 'beneficiary', type: 'address' },\n    ],\n    name: 'handleOps',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'key', type: 'uint192' }],\n    name: 'incrementNonce',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { name: 'callData', type: 'bytes' },\n      {\n        components: [\n          {\n            components: [\n              { name: 'sender', type: 'address' },\n              { name: 'nonce', type: 'uint256' },\n              {\n                name: 'callGasLimit',\n                type: 'uint256',\n              },\n              {\n                name: 'verificationGasLimit',\n                type: 'uint256',\n              },\n              {\n                name: 'preVerificationGas',\n                type: 'uint256',\n              },\n              { name: 'paymaster', type: 'address' },\n              {\n                name: 'maxFeePerGas',\n                type: 'uint256',\n              },\n              {\n                name: 'maxPriorityFeePerGas',\n                type: 'uint256',\n              },\n            ],\n\n            name: 'mUserOp',\n            type: 'tuple',\n          },\n          { name: 'userOpHash', type: 'bytes32' },\n          { name: 'prefund', type: 'uint256' },\n          { name: 'contextOffset', type: 'uint256' },\n          { name: 'preOpGas', type: 'uint256' },\n        ],\n\n        name: 'opInfo',\n        type: 'tuple',\n      },\n      { name: 'context', type: 'bytes' },\n    ],\n    name: 'innerHandleOp',\n    outputs: [{ name: 'actualGasCost', type: 'uint256' }],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { name: '', type: 'address' },\n      { name: '', type: 'uint192' },\n    ],\n    name: 'nonceSequenceNumber',\n    outputs: [{ name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { name: 'sender', type: 'address' },\n          { name: 'nonce', type: 'uint256' },\n          { name: 'initCode', type: 'bytes' },\n          { name: 'callData', type: 'bytes' },\n          { name: 'callGasLimit', type: 'uint256' },\n          {\n            name: 'verificationGasLimit',\n            type: 'uint256',\n          },\n          {\n            name: 'preVerificationGas',\n            type: 'uint256',\n          },\n          { name: 'maxFeePerGas', type: 'uint256' },\n          {\n            name: 'maxPriorityFeePerGas',\n            type: 'uint256',\n          },\n          { name: 'paymasterAndData', type: 'bytes' },\n          { name: 'signature', type: 'bytes' },\n        ],\n\n        name: 'op',\n        type: 'tuple',\n      },\n      { name: 'target', type: 'address' },\n      { name: 'targetCallData', type: 'bytes' },\n    ],\n    name: 'simulateHandleOp',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { name: 'sender', type: 'address' },\n          { name: 'nonce', type: 'uint256' },\n          { name: 'initCode', type: 'bytes' },\n          { name: 'callData', type: 'bytes' },\n          { name: 'callGasLimit', type: 'uint256' },\n          {\n            name: 'verificationGasLimit',\n            type: 'uint256',\n          },\n          {\n            name: 'preVerificationGas',\n            type: 'uint256',\n          },\n          { name: 'maxFeePerGas', type: 'uint256' },\n          {\n            name: 'maxPriorityFeePerGas',\n            type: 'uint256',\n          },\n          { name: 'paymasterAndData', type: 'bytes' },\n          { name: 'signature', type: 'bytes' },\n        ],\n\n        name: 'userOp',\n        type: 'tuple',\n      },\n    ],\n    name: 'simulateValidation',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'unlockStake',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'withdrawAddress',\n        type: 'address',\n      },\n    ],\n    name: 'withdrawStake',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'withdrawAddress',\n        type: 'address',\n      },\n      { name: 'withdrawAmount', type: 'uint256' },\n    ],\n    name: 'withdrawTo',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  { stateMutability: 'payable', type: 'receive' },\n] as const\n\nexport const entryPoint07Abi = [\n  {\n    inputs: [\n      { name: 'success', type: 'bool' },\n      { name: 'ret', type: 'bytes' },\n    ],\n    name: 'DelegateAndRevert',\n    type: 'error',\n  },\n  {\n    inputs: [\n      { name: 'opIndex', type: 'uint256' },\n      { name: 'reason', type: 'string' },\n    ],\n    name: 'FailedOp',\n    type: 'error',\n  },\n  {\n    inputs: [\n      { name: 'opIndex', type: 'uint256' },\n      { name: 'reason', type: 'string' },\n      { name: 'inner', type: 'bytes' },\n    ],\n    name: 'FailedOpWithRevert',\n    type: 'error',\n  },\n  {\n    inputs: [{ name: 'returnData', type: 'bytes' }],\n    name: 'PostOpReverted',\n    type: 'error',\n  },\n  { inputs: [], name: 'ReentrancyGuardReentrantCall', type: 'error' },\n  {\n    inputs: [{ name: 'sender', type: 'address' }],\n    name: 'SenderAddressResult',\n    type: 'error',\n  },\n  {\n    inputs: [{ name: 'aggregator', type: 'address' }],\n    name: 'SignatureValidationFailed',\n    type: 'error',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'userOpHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'factory',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'paymaster',\n        type: 'address',\n      },\n    ],\n    name: 'AccountDeployed',\n    type: 'event',\n  },\n  { anonymous: false, inputs: [], name: 'BeforeExecution', type: 'event' },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'totalDeposit',\n        type: 'uint256',\n      },\n    ],\n    name: 'Deposited',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'userOpHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'nonce',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n\n        name: 'revertReason',\n        type: 'bytes',\n      },\n    ],\n    name: 'PostOpRevertReason',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'aggregator',\n        type: 'address',\n      },\n    ],\n    name: 'SignatureAggregatorChanged',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'totalStaked',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n\n        name: 'unstakeDelaySec',\n        type: 'uint256',\n      },\n    ],\n    name: 'StakeLocked',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'withdrawTime',\n        type: 'uint256',\n      },\n    ],\n    name: 'StakeUnlocked',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'withdrawAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'StakeWithdrawn',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'userOpHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        indexed: true,\n\n        name: 'paymaster',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'nonce',\n        type: 'uint256',\n      },\n      { indexed: false, name: 'success', type: 'bool' },\n      {\n        indexed: false,\n\n        name: 'actualGasCost',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n\n        name: 'actualGasUsed',\n        type: 'uint256',\n      },\n    ],\n    name: 'UserOperationEvent',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'userOpHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'nonce',\n        type: 'uint256',\n      },\n    ],\n    name: 'UserOperationPrefundTooLow',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'userOpHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'nonce',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n\n        name: 'revertReason',\n        type: 'bytes',\n      },\n    ],\n    name: 'UserOperationRevertReason',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'withdrawAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'Withdrawn',\n    type: 'event',\n  },\n  {\n    inputs: [{ name: 'unstakeDelaySec', type: 'uint32' }],\n    name: 'addStake',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'account', type: 'address' }],\n    name: 'balanceOf',\n    outputs: [{ name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { name: 'target', type: 'address' },\n      { name: 'data', type: 'bytes' },\n    ],\n    name: 'delegateAndRevert',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'account', type: 'address' }],\n    name: 'depositTo',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: '', type: 'address' }],\n    name: 'deposits',\n    outputs: [\n      { name: 'deposit', type: 'uint256' },\n      { name: 'staked', type: 'bool' },\n      { name: 'stake', type: 'uint112' },\n      { name: 'unstakeDelaySec', type: 'uint32' },\n      { name: 'withdrawTime', type: 'uint48' },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'account', type: 'address' }],\n    name: 'getDepositInfo',\n    outputs: [\n      {\n        components: [\n          { name: 'deposit', type: 'uint256' },\n          { name: 'staked', type: 'bool' },\n          { name: 'stake', type: 'uint112' },\n          { name: 'unstakeDelaySec', type: 'uint32' },\n          { name: 'withdrawTime', type: 'uint48' },\n        ],\n\n        name: 'info',\n        type: 'tuple',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { name: 'sender', type: 'address' },\n      { name: 'key', type: 'uint192' },\n    ],\n    name: 'getNonce',\n    outputs: [{ name: 'nonce', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'initCode', type: 'bytes' }],\n    name: 'getSenderAddress',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { name: 'sender', type: 'address' },\n          { name: 'nonce', type: 'uint256' },\n          { name: 'initCode', type: 'bytes' },\n          { name: 'callData', type: 'bytes' },\n          {\n            name: 'accountGasLimits',\n            type: 'bytes32',\n          },\n          {\n            name: 'preVerificationGas',\n            type: 'uint256',\n          },\n          { name: 'gasFees', type: 'bytes32' },\n          { name: 'paymasterAndData', type: 'bytes' },\n          { name: 'signature', type: 'bytes' },\n        ],\n\n        name: 'userOp',\n        type: 'tuple',\n      },\n    ],\n    name: 'getUserOpHash',\n    outputs: [{ name: '', type: 'bytes32' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            components: [\n              { name: 'sender', type: 'address' },\n              { name: 'nonce', type: 'uint256' },\n              { name: 'initCode', type: 'bytes' },\n              { name: 'callData', type: 'bytes' },\n              {\n                name: 'accountGasLimits',\n                type: 'bytes32',\n              },\n              {\n                name: 'preVerificationGas',\n                type: 'uint256',\n              },\n              { name: 'gasFees', type: 'bytes32' },\n              {\n                name: 'paymasterAndData',\n                type: 'bytes',\n              },\n              { name: 'signature', type: 'bytes' },\n            ],\n\n            name: 'userOps',\n            type: 'tuple[]',\n          },\n          {\n            name: 'aggregator',\n            type: 'address',\n          },\n          { name: 'signature', type: 'bytes' },\n        ],\n\n        name: 'opsPerAggregator',\n        type: 'tuple[]',\n      },\n      { name: 'beneficiary', type: 'address' },\n    ],\n    name: 'handleAggregatedOps',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { name: 'sender', type: 'address' },\n          { name: 'nonce', type: 'uint256' },\n          { name: 'initCode', type: 'bytes' },\n          { name: 'callData', type: 'bytes' },\n          {\n            name: 'accountGasLimits',\n            type: 'bytes32',\n          },\n          {\n            name: 'preVerificationGas',\n            type: 'uint256',\n          },\n          { name: 'gasFees', type: 'bytes32' },\n          { name: 'paymasterAndData', type: 'bytes' },\n          { name: 'signature', type: 'bytes' },\n        ],\n\n        name: 'ops',\n        type: 'tuple[]',\n      },\n      { name: 'beneficiary', type: 'address' },\n    ],\n    name: 'handleOps',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'key', type: 'uint192' }],\n    name: 'incrementNonce',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { name: 'callData', type: 'bytes' },\n      {\n        components: [\n          {\n            components: [\n              { name: 'sender', type: 'address' },\n              { name: 'nonce', type: 'uint256' },\n              {\n                name: 'verificationGasLimit',\n                type: 'uint256',\n              },\n              {\n                name: 'callGasLimit',\n                type: 'uint256',\n              },\n              {\n                name: 'paymasterVerificationGasLimit',\n                type: 'uint256',\n              },\n              {\n                name: 'paymasterPostOpGasLimit',\n                type: 'uint256',\n              },\n              {\n                name: 'preVerificationGas',\n                type: 'uint256',\n              },\n              { name: 'paymaster', type: 'address' },\n              {\n                name: 'maxFeePerGas',\n                type: 'uint256',\n              },\n              {\n                name: 'maxPriorityFeePerGas',\n                type: 'uint256',\n              },\n            ],\n\n            name: 'mUserOp',\n            type: 'tuple',\n          },\n          { name: 'userOpHash', type: 'bytes32' },\n          { name: 'prefund', type: 'uint256' },\n          { name: 'contextOffset', type: 'uint256' },\n          { name: 'preOpGas', type: 'uint256' },\n        ],\n\n        name: 'opInfo',\n        type: 'tuple',\n      },\n      { name: 'context', type: 'bytes' },\n    ],\n    name: 'innerHandleOp',\n    outputs: [{ name: 'actualGasCost', type: 'uint256' }],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { name: '', type: 'address' },\n      { name: '', type: 'uint192' },\n    ],\n    name: 'nonceSequenceNumber',\n    outputs: [{ name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'interfaceId', type: 'bytes4' }],\n    name: 'supportsInterface',\n    outputs: [{ name: '', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'unlockStake',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'withdrawAddress',\n        type: 'address',\n      },\n    ],\n    name: 'withdrawStake',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'withdrawAddress',\n        type: 'address',\n      },\n      { name: 'withdrawAmount', type: 'uint256' },\n    ],\n    name: 'withdrawTo',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  { stateMutability: 'payable', type: 'receive' },\n] as const\n\nexport const entryPoint08Abi = [\n  { inputs: [], stateMutability: 'nonpayable', type: 'constructor' },\n  {\n    inputs: [\n      { internalType: 'bool', name: 'success', type: 'bool' },\n      { internalType: 'bytes', name: 'ret', type: 'bytes' },\n    ],\n    name: 'DelegateAndRevert',\n    type: 'error',\n  },\n  {\n    inputs: [\n      { internalType: 'uint256', name: 'opIndex', type: 'uint256' },\n      { internalType: 'string', name: 'reason', type: 'string' },\n    ],\n    name: 'FailedOp',\n    type: 'error',\n  },\n  {\n    inputs: [\n      { internalType: 'uint256', name: 'opIndex', type: 'uint256' },\n      { internalType: 'string', name: 'reason', type: 'string' },\n      { internalType: 'bytes', name: 'inner', type: 'bytes' },\n    ],\n    name: 'FailedOpWithRevert',\n    type: 'error',\n  },\n  { inputs: [], name: 'InvalidShortString', type: 'error' },\n  {\n    inputs: [{ internalType: 'bytes', name: 'returnData', type: 'bytes' }],\n    name: 'PostOpReverted',\n    type: 'error',\n  },\n  { inputs: [], name: 'ReentrancyGuardReentrantCall', type: 'error' },\n  {\n    inputs: [{ internalType: 'address', name: 'sender', type: 'address' }],\n    name: 'SenderAddressResult',\n    type: 'error',\n  },\n  {\n    inputs: [{ internalType: 'address', name: 'aggregator', type: 'address' }],\n    name: 'SignatureValidationFailed',\n    type: 'error',\n  },\n  {\n    inputs: [{ internalType: 'string', name: 'str', type: 'string' }],\n    name: 'StringTooLong',\n    type: 'error',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'userOpHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'factory',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'paymaster',\n        type: 'address',\n      },\n    ],\n    name: 'AccountDeployed',\n    type: 'event',\n  },\n  { anonymous: false, inputs: [], name: 'BeforeExecution', type: 'event' },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'totalDeposit',\n        type: 'uint256',\n      },\n    ],\n    name: 'Deposited',\n    type: 'event',\n  },\n  { anonymous: false, inputs: [], name: 'EIP712DomainChanged', type: 'event' },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'userOpHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes',\n        name: 'revertReason',\n        type: 'bytes',\n      },\n    ],\n    name: 'PostOpRevertReason',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'aggregator',\n        type: 'address',\n      },\n    ],\n    name: 'SignatureAggregatorChanged',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'totalStaked',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'unstakeDelaySec',\n        type: 'uint256',\n      },\n    ],\n    name: 'StakeLocked',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'withdrawTime',\n        type: 'uint256',\n      },\n    ],\n    name: 'StakeUnlocked',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'withdrawAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'StakeWithdrawn',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'userOpHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'paymaster',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n      { indexed: false, internalType: 'bool', name: 'success', type: 'bool' },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'actualGasCost',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'actualGasUsed',\n        type: 'uint256',\n      },\n    ],\n    name: 'UserOperationEvent',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'userOpHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n    ],\n    name: 'UserOperationPrefundTooLow',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'userOpHash',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'nonce',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes',\n        name: 'revertReason',\n        type: 'bytes',\n      },\n    ],\n    name: 'UserOperationRevertReason',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'withdrawAddress',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'Withdrawn',\n    type: 'event',\n  },\n  {\n    inputs: [\n      { internalType: 'uint32', name: 'unstakeDelaySec', type: 'uint32' },\n    ],\n    name: 'addStake',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n    name: 'balanceOf',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'target', type: 'address' },\n      { internalType: 'bytes', name: 'data', type: 'bytes' },\n    ],\n    name: 'delegateAndRevert',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n    name: 'depositTo',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'eip712Domain',\n    outputs: [\n      { internalType: 'bytes1', name: 'fields', type: 'bytes1' },\n      { internalType: 'string', name: 'name', type: 'string' },\n      { internalType: 'string', name: 'version', type: 'string' },\n      { internalType: 'uint256', name: 'chainId', type: 'uint256' },\n      { internalType: 'address', name: 'verifyingContract', type: 'address' },\n      { internalType: 'bytes32', name: 'salt', type: 'bytes32' },\n      { internalType: 'uint256[]', name: 'extensions', type: 'uint256[]' },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n    name: 'getDepositInfo',\n    outputs: [\n      {\n        components: [\n          { internalType: 'uint256', name: 'deposit', type: 'uint256' },\n          { internalType: 'bool', name: 'staked', type: 'bool' },\n          { internalType: 'uint112', name: 'stake', type: 'uint112' },\n          { internalType: 'uint32', name: 'unstakeDelaySec', type: 'uint32' },\n          { internalType: 'uint48', name: 'withdrawTime', type: 'uint48' },\n        ],\n        internalType: 'struct IStakeManager.DepositInfo',\n        name: 'info',\n        type: 'tuple',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getDomainSeparatorV4',\n    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'sender', type: 'address' },\n      { internalType: 'uint192', name: 'key', type: 'uint192' },\n    ],\n    name: 'getNonce',\n    outputs: [{ internalType: 'uint256', name: 'nonce', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getPackedUserOpTypeHash',\n    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [{ internalType: 'bytes', name: 'initCode', type: 'bytes' }],\n    name: 'getSenderAddress',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: 'address', name: 'sender', type: 'address' },\n          { internalType: 'uint256', name: 'nonce', type: 'uint256' },\n          { internalType: 'bytes', name: 'initCode', type: 'bytes' },\n          { internalType: 'bytes', name: 'callData', type: 'bytes' },\n          {\n            internalType: 'bytes32',\n            name: 'accountGasLimits',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint256',\n            name: 'preVerificationGas',\n            type: 'uint256',\n          },\n          { internalType: 'bytes32', name: 'gasFees', type: 'bytes32' },\n          { internalType: 'bytes', name: 'paymasterAndData', type: 'bytes' },\n          { internalType: 'bytes', name: 'signature', type: 'bytes' },\n        ],\n        internalType: 'struct PackedUserOperation',\n        name: 'userOp',\n        type: 'tuple',\n      },\n    ],\n    name: 'getUserOpHash',\n    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            components: [\n              { internalType: 'address', name: 'sender', type: 'address' },\n              { internalType: 'uint256', name: 'nonce', type: 'uint256' },\n              { internalType: 'bytes', name: 'initCode', type: 'bytes' },\n              { internalType: 'bytes', name: 'callData', type: 'bytes' },\n              {\n                internalType: 'bytes32',\n                name: 'accountGasLimits',\n                type: 'bytes32',\n              },\n              {\n                internalType: 'uint256',\n                name: 'preVerificationGas',\n                type: 'uint256',\n              },\n              { internalType: 'bytes32', name: 'gasFees', type: 'bytes32' },\n              {\n                internalType: 'bytes',\n                name: 'paymasterAndData',\n                type: 'bytes',\n              },\n              { internalType: 'bytes', name: 'signature', type: 'bytes' },\n            ],\n            internalType: 'struct PackedUserOperation[]',\n            name: 'userOps',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'contract IAggregator',\n            name: 'aggregator',\n            type: 'address',\n          },\n          { internalType: 'bytes', name: 'signature', type: 'bytes' },\n        ],\n        internalType: 'struct IEntryPoint.UserOpsPerAggregator[]',\n        name: 'opsPerAggregator',\n        type: 'tuple[]',\n      },\n      { internalType: 'address payable', name: 'beneficiary', type: 'address' },\n    ],\n    name: 'handleAggregatedOps',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: 'address', name: 'sender', type: 'address' },\n          { internalType: 'uint256', name: 'nonce', type: 'uint256' },\n          { internalType: 'bytes', name: 'initCode', type: 'bytes' },\n          { internalType: 'bytes', name: 'callData', type: 'bytes' },\n          {\n            internalType: 'bytes32',\n            name: 'accountGasLimits',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint256',\n            name: 'preVerificationGas',\n            type: 'uint256',\n          },\n          { internalType: 'bytes32', name: 'gasFees', type: 'bytes32' },\n          { internalType: 'bytes', name: 'paymasterAndData', type: 'bytes' },\n          { internalType: 'bytes', name: 'signature', type: 'bytes' },\n        ],\n        internalType: 'struct PackedUserOperation[]',\n        name: 'ops',\n        type: 'tuple[]',\n      },\n      { internalType: 'address payable', name: 'beneficiary', type: 'address' },\n    ],\n    name: 'handleOps',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [{ internalType: 'uint192', name: 'key', type: 'uint192' }],\n    name: 'incrementNonce',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'bytes', name: 'callData', type: 'bytes' },\n      {\n        components: [\n          {\n            components: [\n              { internalType: 'address', name: 'sender', type: 'address' },\n              { internalType: 'uint256', name: 'nonce', type: 'uint256' },\n              {\n                internalType: 'uint256',\n                name: 'verificationGasLimit',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'callGasLimit',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'paymasterVerificationGasLimit',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'paymasterPostOpGasLimit',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'preVerificationGas',\n                type: 'uint256',\n              },\n              { internalType: 'address', name: 'paymaster', type: 'address' },\n              {\n                internalType: 'uint256',\n                name: 'maxFeePerGas',\n                type: 'uint256',\n              },\n              {\n                internalType: 'uint256',\n                name: 'maxPriorityFeePerGas',\n                type: 'uint256',\n              },\n            ],\n            internalType: 'struct EntryPoint.MemoryUserOp',\n            name: 'mUserOp',\n            type: 'tuple',\n          },\n          { internalType: 'bytes32', name: 'userOpHash', type: 'bytes32' },\n          { internalType: 'uint256', name: 'prefund', type: 'uint256' },\n          { internalType: 'uint256', name: 'contextOffset', type: 'uint256' },\n          { internalType: 'uint256', name: 'preOpGas', type: 'uint256' },\n        ],\n        internalType: 'struct EntryPoint.UserOpInfo',\n        name: 'opInfo',\n        type: 'tuple',\n      },\n      { internalType: 'bytes', name: 'context', type: 'bytes' },\n    ],\n    name: 'innerHandleOp',\n    outputs: [\n      { internalType: 'uint256', name: 'actualGasCost', type: 'uint256' },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: '', type: 'address' },\n      { internalType: 'uint192', name: '', type: 'uint192' },\n    ],\n    name: 'nonceSequenceNumber',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'senderCreator',\n    outputs: [\n      { internalType: 'contract ISenderCreator', name: '', type: 'address' },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [{ internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' }],\n    name: 'supportsInterface',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'unlockStake',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address payable',\n        name: 'withdrawAddress',\n        type: 'address',\n      },\n    ],\n    name: 'withdrawStake',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address payable',\n        name: 'withdrawAddress',\n        type: 'address',\n      },\n      { internalType: 'uint256', name: 'withdrawAmount', type: 'uint256' },\n    ],\n    name: 'withdrawTo',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  { stateMutability: 'payable', type: 'receive' },\n] as const\n", "import { concat } from '../../../utils/data/concat.js'\nimport type { UserOperation } from '../../types/userOperation.js'\n\nexport function getInitCode(\n  userOperation: Pick<\n    UserOperation,\n    'authorization' | 'factory' | 'factoryData'\n  >,\n) {\n  const { authorization, factory, factoryData } = userOperation\n  if (\n    factory === '0x7702' ||\n    factory === '0x7702000000000000000000000000000000000000'\n  ) {\n    if (!authorization) return '0x7702000000000000000000000000000000000000'\n    const delegation = authorization.address\n    return concat([delegation, factoryData ?? '0x'])\n  }\n  if (!factory) return '0x'\n  return concat([factory, factoryData ?? '0x'])\n}\n", "import { concat } from '../../../utils/data/concat.js'\nimport { pad } from '../../../utils/data/pad.js'\nimport { numberToHex } from '../../../utils/index.js'\nimport type {\n  PackedUserOperation,\n  UserOperation,\n} from '../../types/userOperation.js'\nimport { getInitCode } from './getInitCode.js'\n\nexport function toPackedUserOperation(\n  userOperation: UserOperation,\n): PackedUserOperation {\n  const {\n    callGasLimit,\n    callData,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    paymaster,\n    paymasterData,\n    paymasterPostOpGasLimit,\n    paymasterVerificationGasLimit,\n    sender,\n    signature = '0x',\n    verificationGasLimit,\n  } = userOperation\n\n  const accountGasLimits = concat([\n    pad(numberToHex(verificationGasLimit || 0n), { size: 16 }),\n    pad(numberToHex(callGasLimit || 0n), { size: 16 }),\n  ])\n  const initCode = getInitCode(userOperation)\n  const gasFees = concat([\n    pad(numberToHex(maxPriorityFeePerGas || 0n), { size: 16 }),\n    pad(numberToHex(maxFeePerGas || 0n), { size: 16 }),\n  ])\n  const nonce = userOperation.nonce ?? 0n\n  const paymasterAndData = paymaster\n    ? concat([\n        paymaster,\n        pad(numberToHex(paymasterVerificationGasLimit || 0n), {\n          size: 16,\n        }),\n        pad(numberToHex(paymasterPostOpGasLimit || 0n), {\n          size: 16,\n        }),\n        paymasterData || '0x',\n      ])\n    : '0x'\n  const preVerificationGas = userOperation.preVerificationGas ?? 0n\n\n  return {\n    accountGasLimits,\n    callData,\n    initCode,\n    gasFees,\n    nonce,\n    paymasterAndData,\n    preVerificationGas,\n    sender,\n    signature,\n  }\n}\n", "import type { Address } from 'abitype'\n\nimport type { TypedDataDefinition } from '../../../types/typedData.js'\nimport type { UserOperation } from '../../types/userOperation.js'\nimport { toPackedUserOperation } from './toPackedUserOperation.js'\n\nexport type GetUserOperationTypedDataParameters = {\n  chainId: number\n  entryPointAddress: Address\n  userOperation: UserOperation<'0.8'>\n}\n\nexport type GetUserOperationTypedDataReturnType = TypedDataDefinition<\n  typeof types,\n  'PackedUserOperation'\n>\n\nconst types = {\n  PackedUserOperation: [\n    { type: 'address', name: 'sender' },\n    { type: 'uint256', name: 'nonce' },\n    { type: 'bytes', name: 'initCode' },\n    { type: 'bytes', name: 'callData' },\n    { type: 'bytes32', name: 'accountGasLimits' },\n    { type: 'uint256', name: 'preVerificationGas' },\n    { type: 'bytes32', name: 'gasFees' },\n    { type: 'bytes', name: 'paymasterAndData' },\n  ],\n} as const\n\nexport function getUserOperationTypedData(\n  parameters: GetUserOperationTypedDataParameters,\n): GetUserOperationTypedDataReturnType {\n  const { chainId, entryPointAddress, userOperation } = parameters\n\n  const packedUserOp = toPackedUserOperation(userOperation)\n\n  return {\n    types,\n    primaryType: 'PackedUserOperation',\n    domain: {\n      name: 'ERC4337',\n      version: '1',\n      chainId,\n      verifyingContract: entryPointAddress,\n    },\n    message: packedUserOp,\n  }\n}\n", "import type { Address } from 'abitype'\n\nimport type { Hash, Hex } from '../../../types/misc.js'\nimport { encodeAbiParameters } from '../../../utils/abi/encodeAbiParameters.js'\nimport { keccak256 } from '../../../utils/hash/keccak256.js'\nimport { hashTypedData } from '../../../utils/signature/hashTypedData.js'\nimport type { EntryPointVersion } from '../../types/entryPointVersion.js'\nimport type { UserOperation } from '../../types/userOperation.js'\nimport { getInitCode } from './getInitCode.js'\nimport { getUserOperationTypedData } from './getUserOperationTypedData.js'\nimport { toPackedUserOperation } from './toPackedUserOperation.js'\n\nexport type GetUserOperationHashParameters<\n  entryPointVersion extends EntryPointVersion = EntryPointVersion,\n> = {\n  chainId: number\n  entryPointAddress: Address\n  entryPointVersion: entryPointVersion | EntryPointVersion\n  userOperation: UserOperation<entryPointVersion>\n}\n\nexport type GetUserOperationHashReturnType = Hash\n\nexport function getUserOperationHash<\n  entryPointVersion extends EntryPointVersion,\n>(\n  parameters: GetUserOperationHashParameters<entryPointVersion>,\n): GetUserOperationHashReturnType {\n  const { chainId, entryPointAddress, entryPointVersion } = parameters\n  const userOperation = parameters.userOperation as UserOperation\n  const {\n    authorization,\n    callData = '0x',\n    callGasLimit,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    paymasterAndData = '0x',\n    preVerificationGas,\n    sender,\n    verificationGasLimit,\n  } = userOperation\n\n  if (entryPointVersion === '0.8')\n    return hashTypedData(\n      getUserOperationTypedData({\n        chainId,\n        entryPointAddress,\n        userOperation,\n      }),\n    )\n\n  const packedUserOp = (() => {\n    if (entryPointVersion === '0.6') {\n      const factory = userOperation.initCode?.slice(0, 42) as Hex\n      const factoryData = userOperation.initCode?.slice(42) as Hex | undefined\n      const initCode = getInitCode({\n        authorization,\n        factory,\n        factoryData,\n      })\n      return encodeAbiParameters(\n        [\n          { type: 'address' },\n          { type: 'uint256' },\n          { type: 'bytes32' },\n          { type: 'bytes32' },\n          { type: 'uint256' },\n          { type: 'uint256' },\n          { type: 'uint256' },\n          { type: 'uint256' },\n          { type: 'uint256' },\n          { type: 'bytes32' },\n        ],\n        [\n          sender,\n          nonce,\n          keccak256(initCode),\n          keccak256(callData),\n          callGasLimit,\n          verificationGasLimit,\n          preVerificationGas,\n          maxFeePerGas,\n          maxPriorityFeePerGas,\n          keccak256(paymasterAndData),\n        ],\n      )\n    }\n\n    if (entryPointVersion === '0.7') {\n      const packedUserOp = toPackedUserOperation(userOperation)\n      return encodeAbiParameters(\n        [\n          { type: 'address' },\n          { type: 'uint256' },\n          { type: 'bytes32' },\n          { type: 'bytes32' },\n          { type: 'bytes32' },\n          { type: 'uint256' },\n          { type: 'bytes32' },\n          { type: 'bytes32' },\n        ],\n        [\n          packedUserOp.sender,\n          packedUserOp.nonce,\n          keccak256(packedUserOp.initCode),\n          keccak256(packedUserOp.callData),\n          packedUserOp.accountGasLimits,\n          packedUserOp.preVerificationGas,\n          packedUserOp.gasFees,\n          keccak256(packedUserOp.paymasterAndData),\n        ],\n      )\n    }\n\n    throw new Error(`entryPointVersion \"${entryPointVersion}\" not supported.`)\n  })()\n\n  return keccak256(\n    encodeAbiParameters(\n      [{ type: 'bytes32' }, { type: 'address' }, { type: 'uint256' }],\n      [keccak256(packedUserOp), entryPointAddress, BigInt(chainId)],\n    ),\n  )\n}\n", "import { type Abi, parseAbi } from 'abitype'\n\nimport { getCode } from '../../actions/public/getCode.js'\nimport { readContract } from '../../actions/public/readContract.js'\nimport type { Prettify } from '../../types/utils.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { createNonceManager } from '../../utils/nonceManager.js'\nimport { serializeErc6492Signature } from '../../utils/signature/serializeErc6492Signature.js'\nimport type { EntryPointVersion } from '../types/entryPointVersion.js'\nimport type { SmartAccount, SmartAccountImplementation } from './types.js'\n\nexport type ToSmartAccountParameters<\n  entryPointAbi extends Abi | readonly unknown[] = Abi,\n  entryPointVersion extends EntryPointVersion = EntryPointVersion,\n  extend extends object = object,\n> = SmartAccountImplementation<entryPointAbi, entryPointVersion, extend>\n\nexport type ToSmartAccountReturnType<\n  implementation extends\n    SmartAccountImplementation = SmartAccountImplementation,\n> = Prettify<SmartAccount<implementation>>\n\n/**\n * @description Creates a Smart Account with a provided account implementation.\n *\n * @param parameters - {@link ToSmartAccountParameters}\n * @returns A Smart Account. {@link ToSmartAccountReturnType}\n */\nexport async function toSmartAccount<\n  implementation extends SmartAccountImplementation,\n>(\n  implementation: implementation,\n): Promise<ToSmartAccountReturnType<implementation>> {\n  const {\n    extend,\n    nonceKeyManager = createNonceManager({\n      source: {\n        get() {\n          return Date.now()\n        },\n        set() {},\n      },\n    }),\n    ...rest\n  } = implementation\n\n  let deployed = false\n\n  const address = await implementation.getAddress()\n\n  return {\n    ...extend,\n    ...rest,\n    address,\n    async getFactoryArgs() {\n      if ('isDeployed' in this && (await this.isDeployed()))\n        return { factory: undefined, factoryData: undefined }\n      return implementation.getFactoryArgs()\n    },\n    async getNonce(parameters) {\n      const key =\n        parameters?.key ??\n        BigInt(\n          await nonceKeyManager.consume({\n            address,\n            chainId: implementation.client.chain!.id!,\n            client: implementation.client,\n          }),\n        )\n\n      if (implementation.getNonce)\n        return await implementation.getNonce({ ...parameters, key })\n\n      const nonce = await readContract(implementation.client, {\n        abi: parseAbi([\n          'function getNonce(address, uint192) pure returns (uint256)',\n        ]),\n        address: implementation.entryPoint.address,\n        functionName: 'getNonce',\n        args: [address, key],\n      })\n      return nonce\n    },\n    async isDeployed() {\n      if (deployed) return true\n      const code = await getAction(\n        implementation.client,\n        getCode,\n        'getCode',\n      )({\n        address,\n      })\n      deployed = Boolean(code)\n      return deployed\n    },\n    ...(implementation.sign\n      ? {\n          async sign(parameters) {\n            const [{ factory, factoryData }, signature] = await Promise.all([\n              this.getFactoryArgs(),\n              implementation.sign!(parameters),\n            ])\n            if (factory && factoryData)\n              return serializeErc6492Signature({\n                address: factory,\n                data: factoryData,\n                signature,\n              })\n            return signature\n          },\n        }\n      : {}),\n    async signMessage(parameters) {\n      const [{ factory, factoryData }, signature] = await Promise.all([\n        this.getFactoryArgs(),\n        implementation.signMessage(parameters),\n      ])\n      if (factory && factoryData && factory !== '0x7702')\n        return serializeErc6492Signature({\n          address: factory,\n          data: factoryData,\n          signature,\n        })\n      return signature\n    },\n    async signTypedData(parameters) {\n      const [{ factory, factoryData }, signature] = await Promise.all([\n        this.getFactoryArgs(),\n        implementation.signTypedData(parameters),\n      ])\n      if (factory && factoryData && factory !== '0x7702')\n        return serializeErc6492Signature({\n          address: factory,\n          data: factoryData,\n          signature,\n        })\n      return signature\n    },\n    type: 'smart',\n  } as ToSmartAccountReturnType<implementation>\n}\n", "/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\nexport interface Coder<F, T> {\n  encode(from: F): T;\n  decode(to: T): F;\n}\n\nexport interface BytesCoder extends Coder<Uint8Array, string> {\n  encode: (data: Uint8Array) => string;\n  decode: (str: string) => Uint8Array;\n}\n\nfunction isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is Uint8Array. */\nfunction abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\nfunction isArrayOf(isString: boolean, arr: any[]) {\n  if (!Array.isArray(arr)) return false;\n  if (arr.length === 0) return true;\n  if (isString) {\n    return arr.every((item) => typeof item === 'string');\n  } else {\n    return arr.every((item) => Number.isSafeInteger(item));\n  }\n}\n\n// no abytes: seems to have 10% slowdown. Why?!\n\nfunction afn(input: Function): input is Function {\n  if (typeof input !== 'function') throw new Error('function expected');\n  return true;\n}\n\nfunction astr(label: string, input: unknown): input is string {\n  if (typeof input !== 'string') throw new Error(`${label}: string expected`);\n  return true;\n}\n\nfunction anumber(n: number): void {\n  if (!Number.isSafeInteger(n)) throw new Error(`invalid integer: ${n}`);\n}\n\nfunction aArr(input: any[]) {\n  if (!Array.isArray(input)) throw new Error('array expected');\n}\nfunction astrArr(label: string, input: string[]) {\n  if (!isArrayOf(true, input)) throw new Error(`${label}: array of strings expected`);\n}\nfunction anumArr(label: string, input: number[]) {\n  if (!isArrayOf(false, input)) throw new Error(`${label}: array of numbers expected`);\n}\n\n// TODO: some recusive type inference so it would check correct order of input/output inside rest?\n// like <string, number>, <number, bytes>, <bytes, float>\ntype Chain = [Coder<any, any>, ...Coder<any, any>[]];\n// Extract info from Coder type\ntype Input<F> = F extends Coder<infer T, any> ? T : never;\ntype Output<F> = F extends Coder<any, infer T> ? T : never;\n// Generic function for arrays\ntype First<T> = T extends [infer U, ...any[]] ? U : never;\ntype Last<T> = T extends [...any[], infer U] ? U : never;\ntype Tail<T> = T extends [any, ...infer U] ? U : never;\n\ntype AsChain<C extends Chain, Rest = Tail<C>> = {\n  // C[K] = Coder<Input<C[K]>, Input<Rest[k]>>\n  [K in keyof C]: Coder<Input<C[K]>, Input<K extends keyof Rest ? Rest[K] : any>>;\n};\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain<T extends Chain & AsChain<T>>(...args: T): Coder<Input<First<T>>, Output<Last<T>>> {\n  const id = (a: any) => a;\n  // Wrap call in closure so JIT can inline calls\n  const wrap = (a: any, b: any) => (c: any) => a(b(c));\n  // Construct chain of args[-1].encode(args[-2].encode([...]))\n  const encode = args.map((x) => x.encode).reduceRight(wrap, id);\n  // Construct chain of args[0].decode(args[1].decode(...))\n  const decode = args.map((x) => x.decode).reduce(wrap, id);\n  return { encode, decode };\n}\n\n/**\n * Encodes integer radix representation to array of strings using alphabet and back.\n * Could also be array of strings.\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(letters: string | string[]): Coder<number[], string[]> {\n  // mapping 1 to \"b\"\n  const lettersA = typeof letters === 'string' ? letters.split('') : letters;\n  const len = lettersA.length;\n  astrArr('alphabet', lettersA);\n\n  // mapping \"b\" to 1\n  const indexes = new Map(lettersA.map((l, i) => [l, i]));\n  return {\n    encode: (digits: number[]) => {\n      aArr(digits);\n      return digits.map((i) => {\n        if (!Number.isSafeInteger(i) || i < 0 || i >= len)\n          throw new Error(\n            `alphabet.encode: digit index outside alphabet \"${i}\". Allowed: ${letters}`\n          );\n        return lettersA[i]!;\n      });\n    },\n    decode: (input: string[]): number[] => {\n      aArr(input);\n      return input.map((letter) => {\n        astr('alphabet.decode', letter);\n        const i = indexes.get(letter);\n        if (i === undefined) throw new Error(`Unknown letter: \"${letter}\". Allowed: ${letters}`);\n        return i;\n      });\n    },\n  };\n}\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = ''): Coder<string[], string> {\n  astr('join', separator);\n  return {\n    encode: (from) => {\n      astrArr('join.decode', from);\n      return from.join(separator);\n    },\n    decode: (to) => {\n      astr('join.decode', to);\n      return to.split(separator);\n    },\n  };\n}\n\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits: number, chr = '='): Coder<string[], string[]> {\n  anumber(bits);\n  astr('padding', chr);\n  return {\n    encode(data: string[]): string[] {\n      astrArr('padding.encode', data);\n      while ((data.length * bits) % 8) data.push(chr);\n      return data;\n    },\n    decode(input: string[]): string[] {\n      astrArr('padding.decode', input);\n      let end = input.length;\n      if ((end * bits) % 8)\n        throw new Error('padding: invalid, string should have whole number of bytes');\n      for (; end > 0 && input[end - 1] === chr; end--) {\n        const last = end - 1;\n        const byte = last * bits;\n        if (byte % 8 === 0) throw new Error('padding: invalid, string has too much padding');\n      }\n      return input.slice(0, end);\n    },\n  };\n}\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize<T>(fn: (val: T) => T): Coder<T, T> {\n  afn(fn);\n  return { encode: (from: T) => from, decode: (to: T) => fn(to) };\n}\n\n/**\n * Slow: O(n^2) time complexity\n */\nfunction convertRadix(data: number[], from: number, to: number): number[] {\n  // base 1 is impossible\n  if (from < 2) throw new Error(`convertRadix: invalid from=${from}, base cannot be less than 2`);\n  if (to < 2) throw new Error(`convertRadix: invalid to=${to}, base cannot be less than 2`);\n  aArr(data);\n  if (!data.length) return [];\n  let pos = 0;\n  const res = [];\n  const digits = Array.from(data, (d) => {\n    anumber(d);\n    if (d < 0 || d >= from) throw new Error(`invalid integer: ${d}`);\n    return d;\n  });\n  const dlen = digits.length;\n  while (true) {\n    let carry = 0;\n    let done = true;\n    for (let i = pos; i < dlen; i++) {\n      const digit = digits[i]!;\n      const fromCarry = from * carry;\n      const digitBase = fromCarry + digit;\n      if (\n        !Number.isSafeInteger(digitBase) ||\n        fromCarry / from !== carry ||\n        digitBase - digit !== fromCarry\n      ) {\n        throw new Error('convertRadix: carry overflow');\n      }\n      const div = digitBase / to;\n      carry = digitBase % to;\n      const rounded = Math.floor(div);\n      digits[i] = rounded;\n      if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\n        throw new Error('convertRadix: carry overflow');\n      if (!done) continue;\n      else if (!rounded) pos = i;\n      else done = false;\n    }\n    res.push(carry);\n    if (done) break;\n  }\n  for (let i = 0; i < data.length - 1 && data[i] === 0; i++) res.push(0);\n  return res.reverse();\n}\n\nconst gcd = (a: number, b: number): number => (b === 0 ? a : gcd(b, a % b));\nconst radix2carry = /* @__NO_SIDE_EFFECTS__ */ (from: number, to: number) =>\n  from + (to - gcd(from, to));\nconst powers: number[] = /* @__PURE__ */ (() => {\n  let res = [];\n  for (let i = 0; i < 40; i++) res.push(2 ** i);\n  return res;\n})();\n/**\n * Implemented with numbers, because BigInt is 5x slower\n */\nfunction convertRadix2(data: number[], from: number, to: number, padding: boolean): number[] {\n  aArr(data);\n  if (from <= 0 || from > 32) throw new Error(`convertRadix2: wrong from=${from}`);\n  if (to <= 0 || to > 32) throw new Error(`convertRadix2: wrong to=${to}`);\n  if (radix2carry(from, to) > 32) {\n    throw new Error(\n      `convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`\n    );\n  }\n  let carry = 0;\n  let pos = 0; // bitwise position in current element\n  const max = powers[from]!;\n  const mask = powers[to]! - 1;\n  const res: number[] = [];\n  for (const n of data) {\n    anumber(n);\n    if (n >= max) throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n    carry = (carry << from) | n;\n    if (pos + from > 32) throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n    pos += from;\n    for (; pos >= to; pos -= to) res.push(((carry >> (pos - to)) & mask) >>> 0);\n    const pow = powers[pos];\n    if (pow === undefined) throw new Error('invalid carry');\n    carry &= pow - 1; // clean carry, otherwise it will cause overflow\n  }\n  carry = (carry << (to - pos)) & mask;\n  if (!padding && pos >= from) throw new Error('Excess padding');\n  if (!padding && carry > 0) throw new Error(`Non-zero padding: ${carry}`);\n  if (padding && pos > 0) res.push(carry >>> 0);\n  return res;\n}\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num: number): Coder<Uint8Array, number[]> {\n  anumber(num);\n  const _256 = 2 ** 8;\n  return {\n    encode: (bytes: Uint8Array) => {\n      if (!isBytes(bytes)) throw new Error('radix.encode input should be Uint8Array');\n      return convertRadix(Array.from(bytes), _256, num);\n    },\n    decode: (digits: number[]) => {\n      anumArr('radix.decode', digits);\n      return Uint8Array.from(convertRadix(digits, num, _256));\n    },\n  };\n}\n\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits: number, revPadding = false): Coder<Uint8Array, number[]> {\n  anumber(bits);\n  if (bits <= 0 || bits > 32) throw new Error('radix2: bits should be in (0..32]');\n  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n    throw new Error('radix2: carry overflow');\n  return {\n    encode: (bytes: Uint8Array) => {\n      if (!isBytes(bytes)) throw new Error('radix2.encode input should be Uint8Array');\n      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n    },\n    decode: (digits: number[]) => {\n      anumArr('radix2.decode', digits);\n      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n    },\n  };\n}\n\ntype ArgumentTypes<F extends Function> = F extends (...args: infer A) => any ? A : never;\nfunction unsafeWrapper<T extends (...args: any) => any>(fn: T) {\n  afn(fn);\n  return function (...args: ArgumentTypes<T>): ReturnType<T> | void {\n    try {\n      return fn.apply(null, args);\n    } catch (e) {}\n  };\n}\n\nfunction checksum(\n  len: number,\n  fn: (data: Uint8Array) => Uint8Array\n): Coder<Uint8Array, Uint8Array> {\n  anumber(len);\n  afn(fn);\n  return {\n    encode(data: Uint8Array) {\n      if (!isBytes(data)) throw new Error('checksum.encode: input should be Uint8Array');\n      const sum = fn(data).slice(0, len);\n      const res = new Uint8Array(data.length + len);\n      res.set(data);\n      res.set(sum, data.length);\n      return res;\n    },\n    decode(data: Uint8Array) {\n      if (!isBytes(data)) throw new Error('checksum.decode: input should be Uint8Array');\n      const payload = data.slice(0, -len);\n      const oldChecksum = data.slice(-len);\n      const newChecksum = fn(payload).slice(0, len);\n      for (let i = 0; i < len; i++)\n        if (newChecksum[i] !== oldChecksum[i]) throw new Error('Invalid checksum');\n      return payload;\n    },\n  };\n}\n\n// prettier-ignore\nexport const utils: { alphabet: typeof alphabet; chain: typeof chain; checksum: typeof checksum; convertRadix: typeof convertRadix; convertRadix2: typeof convertRadix2; radix: typeof radix; radix2: typeof radix2; join: typeof join; padding: typeof padding; } = {\n  alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,\n};\n\n// RFC 4648 aka RFC 3548\n// ---------------------\n\n/**\n * base16 encoding from RFC 4648.\n * @example\n * ```js\n * base16.encode(Uint8Array.from([0x12, 0xab]));\n * // => '12AB'\n * ```\n */\nexport const base16: BytesCoder = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\n\n/**\n * base32 encoding from RFC 4648. Has padding.\n * Use `base32nopad` for unpadded version.\n * Also check out `base32hex`, `base32hexnopad`, `base32crockford`.\n * @example\n * ```js\n * base32.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'CKVQ===='\n * base32.decode('CKVQ====');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32: BytesCoder = chain(\n  radix2(5),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'),\n  padding(5),\n  join('')\n);\n\n/**\n * base32 encoding from RFC 4648. No padding.\n * Use `base32` for padded version.\n * Also check out `base32hex`, `base32hexnopad`, `base32crockford`.\n * @example\n * ```js\n * base32nopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'CKVQ'\n * base32nopad.decode('CKVQ');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32nopad: BytesCoder = chain(\n  radix2(5),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'),\n  join('')\n);\n/**\n * base32 encoding from RFC 4648. Padded. Compared to ordinary `base32`, slightly different alphabet.\n * Use `base32hexnopad` for unpadded version.\n * @example\n * ```js\n * base32hex.encode(Uint8Array.from([0x12, 0xab]));\n * // => '2ALG===='\n * base32hex.decode('2ALG====');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32hex: BytesCoder = chain(\n  radix2(5),\n  alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'),\n  padding(5),\n  join('')\n);\n\n/**\n * base32 encoding from RFC 4648. No padding. Compared to ordinary `base32`, slightly different alphabet.\n * Use `base32hex` for padded version.\n * @example\n * ```js\n * base32hexnopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => '2ALG'\n * base32hexnopad.decode('2ALG');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32hexnopad: BytesCoder = chain(\n  radix2(5),\n  alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'),\n  join('')\n);\n/**\n * base32 encoding from RFC 4648. Doug Crockford's version.\n * https://www.crockford.com/base32.html\n * @example\n * ```js\n * base32crockford.encode(Uint8Array.from([0x12, 0xab]));\n * // => '2ANG'\n * base32crockford.decode('2ANG');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32crockford: BytesCoder = chain(\n  radix2(5),\n  alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'),\n  join(''),\n  normalize((s: string) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1'))\n);\n\n// Built-in base64 conversion https://caniuse.com/mdn-javascript_builtins_uint8array_frombase64\n// prettier-ignore\nconst hasBase64Builtin: boolean = /* @__PURE__ */ (() =>\n  typeof (Uint8Array as any).from([]).toBase64 === 'function' &&\n  typeof (Uint8Array as any).fromBase64 === 'function')();\n\nconst decodeBase64Builtin = (s: string, isUrl: boolean) => {\n  astr('base64', s);\n  const re = isUrl ? /^[A-Za-z0-9=_-]+$/ : /^[A-Za-z0-9=+/]+$/;\n  const alphabet = isUrl ? 'base64url' : 'base64';\n  if (s.length > 0 && !re.test(s)) throw new Error('invalid base64');\n  return (Uint8Array as any).fromBase64(s, { alphabet, lastChunkHandling: 'strict' });\n};\n\n/**\n * base64 from RFC 4648. Padded.\n * Use `base64nopad` for unpadded version.\n * Also check out `base64url`, `base64urlnopad`.\n * Falls back to built-in function, when available.\n * @example\n * ```js\n * base64.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs='\n * base64.decode('Eqs=');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\n// prettier-ignore\nexport const base64: BytesCoder = hasBase64Builtin ? {\n  encode(b) { abytes(b); return (b as any).toBase64(); },\n  decode(s) { return decodeBase64Builtin(s, false); },\n} : chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),\n  padding(6),\n  join('')\n);\n/**\n * base64 from RFC 4648. No padding.\n * Use `base64` for padded version.\n * @example\n * ```js\n * base64nopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs'\n * base64nopad.decode('Eqs');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base64nopad: BytesCoder = chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),\n  join('')\n);\n\n/**\n * base64 from RFC 4648, using URL-safe alphabet. Padded.\n * Use `base64urlnopad` for unpadded version.\n * Falls back to built-in function, when available.\n * @example\n * ```js\n * base64url.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs='\n * base64url.decode('Eqs=');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\n// prettier-ignore\nexport const base64url: BytesCoder = hasBase64Builtin ? {\n  encode(b) { abytes(b); return (b as any).toBase64({ alphabet: 'base64url' }); },\n  decode(s) { return decodeBase64Builtin(s, true); },\n} : chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),\n  padding(6),\n  join('')\n);\n\n/**\n * base64 from RFC 4648, using URL-safe alphabet. No padding.\n * Use `base64url` for padded version.\n * @example\n * ```js\n * base64urlnopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs'\n * base64urlnopad.decode('Eqs');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base64urlnopad: BytesCoder = chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),\n  join('')\n);\n\n// base58 code\n// -----------\nconst genBase58 = /* @__NO_SIDE_EFFECTS__ */ (abc: string) =>\n  chain(radix(58), alphabet(abc), join(''));\n\n/**\n * base58: base64 without ambigous characters +, /, 0, O, I, l.\n * Quadratic (O(n^2)) - so, can't be used on large inputs.\n * @example\n * ```js\n * base58.decode('01abcdef');\n * // => '3UhJW'\n * ```\n */\nexport const base58: BytesCoder = genBase58(\n  '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n);\n/**\n * base58: flickr version. Check out `base58`.\n */\nexport const base58flickr: BytesCoder = genBase58(\n  '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n);\n/**\n * base58: XRP version. Check out `base58`.\n */\nexport const base58xrp: BytesCoder = genBase58(\n  'rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz'\n);\n\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\n\n/**\n * base58: XMR version. Check out `base58`.\n * Done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n * Block encoding significantly reduces quadratic complexity of base58.\n */\nexport const base58xmr: BytesCoder = {\n  encode(data: Uint8Array) {\n    let res = '';\n    for (let i = 0; i < data.length; i += 8) {\n      const block = data.subarray(i, i + 8);\n      res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length]!, '1');\n    }\n    return res;\n  },\n  decode(str: string) {\n    let res: number[] = [];\n    for (let i = 0; i < str.length; i += 11) {\n      const slice = str.slice(i, i + 11);\n      const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n      const block = base58.decode(slice);\n      for (let j = 0; j < block.length - blockLen; j++) {\n        if (block[j] !== 0) throw new Error('base58xmr: wrong padding');\n      }\n      res = res.concat(Array.from(block.slice(block.length - blockLen)));\n    }\n    return Uint8Array.from(res);\n  },\n};\n\n/**\n * Method, which creates base58check encoder.\n * Requires function, calculating sha256.\n */\nexport const createBase58check = (sha256: (data: Uint8Array) => Uint8Array): BytesCoder =>\n  chain(\n    checksum(4, (data) => sha256(sha256(data))),\n    base58\n  );\n\n/**\n * Use `createBase58check` instead.\n * @deprecated\n */\nexport const base58check: (sha256: (data: Uint8Array) => Uint8Array) => BytesCoder =\n  createBase58check;\n\n// Bech32 code\n// -----------\nexport interface Bech32Decoded<Prefix extends string = string> {\n  prefix: Prefix;\n  words: number[];\n}\nexport interface Bech32DecodedWithArray<Prefix extends string = string> {\n  prefix: Prefix;\n  words: number[];\n  bytes: Uint8Array;\n}\n\nconst BECH_ALPHABET: Coder<number[], string> = chain(\n  alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'),\n  join('')\n);\n\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre: number): number {\n  const b = pre >> 25;\n  let chk = (pre & 0x1ffffff) << 5;\n  for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n    if (((b >> i) & 1) === 1) chk ^= POLYMOD_GENERATORS[i]!;\n  }\n  return chk;\n}\n\nfunction bechChecksum(prefix: string, words: number[], encodingConst = 1): string {\n  const len = prefix.length;\n  let chk = 1;\n  for (let i = 0; i < len; i++) {\n    const c = prefix.charCodeAt(i);\n    if (c < 33 || c > 126) throw new Error(`Invalid prefix (${prefix})`);\n    chk = bech32Polymod(chk) ^ (c >> 5);\n  }\n  chk = bech32Polymod(chk);\n  for (let i = 0; i < len; i++) chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n  for (let v of words) chk = bech32Polymod(chk) ^ v;\n  for (let i = 0; i < 6; i++) chk = bech32Polymod(chk);\n  chk ^= encodingConst;\n  return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]!], 30, 5, false));\n}\n\nexport interface Bech32 {\n  encode<Prefix extends string>(\n    prefix: Prefix,\n    words: number[] | Uint8Array,\n    limit?: number | false\n  ): `${Lowercase<Prefix>}1${string}`;\n  decode<Prefix extends string>(\n    str: `${Prefix}1${string}`,\n    limit?: number | false\n  ): Bech32Decoded<Prefix>;\n  encodeFromBytes(prefix: string, bytes: Uint8Array): string;\n  decodeToBytes(str: string): Bech32DecodedWithArray;\n  decodeUnsafe(str: string, limit?: number | false): void | Bech32Decoded<string>;\n  fromWords(to: number[]): Uint8Array;\n  fromWordsUnsafe(to: number[]): void | Uint8Array;\n  toWords(from: Uint8Array): number[];\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding: 'bech32' | 'bech32m'): Bech32 {\n  const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n  const _words = radix2(5);\n  const fromWords = _words.decode;\n  const toWords = _words.encode;\n  const fromWordsUnsafe = unsafeWrapper(fromWords);\n\n  function encode<Prefix extends string>(\n    prefix: Prefix,\n    words: number[] | Uint8Array,\n    limit: number | false = 90\n  ): `${Lowercase<Prefix>}1${string}` {\n    astr('bech32.encode prefix', prefix);\n    if (isBytes(words)) words = Array.from(words);\n    anumArr('bech32.encode', words);\n    const plen = prefix.length;\n    if (plen === 0) throw new TypeError(`Invalid prefix length ${plen}`);\n    const actualLength = plen + 7 + words.length;\n    if (limit !== false && actualLength > limit)\n      throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n    const lowered = prefix.toLowerCase();\n    const sum = bechChecksum(lowered, words, ENCODING_CONST);\n    return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}` as `${Lowercase<Prefix>}1${string}`;\n  }\n\n  function decode<Prefix extends string>(\n    str: `${Prefix}1${string}`,\n    limit?: number | false\n  ): Bech32Decoded<Prefix>;\n  function decode(str: string, limit?: number | false): Bech32Decoded;\n  function decode(str: string, limit: number | false = 90): Bech32Decoded {\n    astr('bech32.decode input', str);\n    const slen = str.length;\n    if (slen < 8 || (limit !== false && slen > limit))\n      throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit})`);\n    // don't allow mixed case\n    const lowered = str.toLowerCase();\n    if (str !== lowered && str !== str.toUpperCase())\n      throw new Error(`String must be lowercase or uppercase`);\n    const sepIndex = lowered.lastIndexOf('1');\n    if (sepIndex === 0 || sepIndex === -1)\n      throw new Error(`Letter \"1\" must be present between prefix and data only`);\n    const prefix = lowered.slice(0, sepIndex);\n    const data = lowered.slice(sepIndex + 1);\n    if (data.length < 6) throw new Error('Data must be at least 6 characters long');\n    const words = BECH_ALPHABET.decode(data).slice(0, -6);\n    const sum = bechChecksum(prefix, words, ENCODING_CONST);\n    if (!data.endsWith(sum)) throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n    return { prefix, words };\n  }\n\n  const decodeUnsafe = unsafeWrapper(decode);\n\n  function decodeToBytes(str: string): Bech32DecodedWithArray {\n    const { prefix, words } = decode(str, false);\n    return { prefix, words, bytes: fromWords(words) };\n  }\n\n  function encodeFromBytes(prefix: string, bytes: Uint8Array) {\n    return encode(prefix, toWords(bytes));\n  }\n\n  return {\n    encode,\n    decode,\n    encodeFromBytes,\n    decodeToBytes,\n    decodeUnsafe,\n    fromWords,\n    fromWordsUnsafe,\n    toWords,\n  };\n}\n\n/**\n * bech32 from BIP 173. Operates on words.\n * For high-level, check out scure-btc-signer:\n * https://github.com/paulmillr/scure-btc-signer.\n */\nexport const bech32: Bech32 = genBech32('bech32');\n\n/**\n * bech32m from BIP 350. Operates on words.\n * It was to mitigate `bech32` weaknesses.\n * For high-level, check out scure-btc-signer:\n * https://github.com/paulmillr/scure-btc-signer.\n */\nexport const bech32m: Bech32 = genBech32('bech32m');\n\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\n/**\n * UTF-8-to-byte decoder. Uses built-in TextDecoder / TextEncoder.\n * @example\n * ```js\n * const b = utf8.decode(\"hey\"); // => new Uint8Array([ 104, 101, 121 ])\n * const str = utf8.encode(b); // \"hey\"\n * ```\n */\nexport const utf8: BytesCoder = {\n  encode: (data) => new TextDecoder().decode(data),\n  decode: (str) => new TextEncoder().encode(str),\n};\n\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\n// prettier-ignore\nconst hasHexBuiltin: boolean = /* @__PURE__ */ (() =>\n  typeof (Uint8Array as any).from([]).toHex === 'function' &&\n  typeof (Uint8Array as any).fromHex === 'function')();\n// prettier-ignore\nconst hexBuiltin: BytesCoder = {\n  encode(data) { abytes(data); return (data as any).toHex(); },\n  decode(s) { astr('hex', s); return (Uint8Array as any).fromHex(s); },\n};\n/**\n * hex string decoder. Uses built-in function, when available.\n * @example\n * ```js\n * const b = hex.decode(\"0102ff\"); // => new Uint8Array([ 1, 2, 255 ])\n * const str = hex.encode(b); // \"0102ff\"\n * ```\n */\nexport const hex: BytesCoder = hasHexBuiltin\n  ? hexBuiltin\n  : chain(\n      radix2(4),\n      alphabet('0123456789abcdef'),\n      join(''),\n      normalize((s: string) => {\n        if (typeof s !== 'string' || s.length % 2 !== 0)\n          throw new TypeError(\n            `hex.decode: expected string, got ${typeof s} with length ${s.length}`\n          );\n        return s.toLowerCase();\n      })\n    );\n\nexport type SomeCoders = {\n  utf8: BytesCoder;\n  hex: BytesCoder;\n  base16: BytesCoder;\n  base32: BytesCoder;\n  base64: BytesCoder;\n  base64url: BytesCoder;\n  base58: BytesCoder;\n  base58xmr: BytesCoder;\n};\n// prettier-ignore\nconst CODERS: SomeCoders = {\n  utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\ntype CoderType = keyof SomeCoders;\nconst coderTypeError =\n  'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\n\n/** @deprecated */\nexport const bytesToString = (type: CoderType, bytes: Uint8Array): string => {\n  if (typeof type !== 'string' || !CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (!isBytes(bytes)) throw new TypeError('bytesToString() expects Uint8Array');\n  return CODERS[type].encode(bytes);\n};\n\n/** @deprecated */\nexport const str: (type: CoderType, bytes: Uint8Array) => string = bytesToString; // as in python, but for bytes only\n\n/** @deprecated */\nexport const stringToBytes = (type: CoderType, str: string): Uint8Array => {\n  if (!CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (typeof str !== 'string') throw new TypeError('stringToBytes() expects string');\n  return CODERS[type].decode(str);\n};\n/** @deprecated */\nexport const bytes: (type: CoderType, str: string) => Uint8Array = stringToBytes;\n", "/**\n * @module BIP32 hierarchical deterministic (HD) wallets over secp256k1.\n * @example\n * ```js\n * import { HDKey } from \"@scure/bip32\";\n * const hdkey1 = HDKey.fromMasterSeed(seed);\n * const hdkey2 = HDKey.fromExtendedKey(base58key);\n * const hdkey3 = HDKey.fromJSON({ xpriv: string });\n *\n * // props\n * [hdkey1.depth, hdkey1.index, hdkey1.chainCode];\n * console.log(hdkey2.privateKey, hdkey2.publicKey);\n * console.log(hdkey3.derive(\"m/0/2147483647'/1\"));\n * const sig = hdkey3.sign(hash);\n * hdkey3.verify(hash, sig);\n * ```\n */\n/*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nimport { mod } from '@noble/curves/abstract/modular';\nimport { secp256k1 as secp } from '@noble/curves/secp256k1';\nimport { hmac } from '@noble/hashes/hmac';\nimport { ripemd160 } from '@noble/hashes/legacy';\nimport { sha256, sha512 } from '@noble/hashes/sha2';\nimport {\n  abytes,\n  bytesToHex,\n  concatBytes,\n  createView,\n  hexToBytes,\n  utf8ToBytes,\n} from '@noble/hashes/utils';\nimport { createBase58check } from '@scure/base';\n\nconst Point = secp.ProjectivePoint;\nconst base58check = createBase58check(sha256);\n\nfunction bytesToNumber(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  const h = bytes.length === 0 ? '0' : bytesToHex(bytes);\n  return BigInt('0x' + h);\n}\n\nfunction numberToBytes(num: bigint): Uint8Array {\n  if (typeof num !== 'bigint') throw new Error('bigint expected');\n  return hexToBytes(num.toString(16).padStart(64, '0'));\n}\n\nconst MASTER_SECRET = utf8ToBytes('Bitcoin seed');\n// Bitcoin hardcoded by default\nconst BITCOIN_VERSIONS: Versions = { private: 0x0488ade4, public: 0x0488b21e };\nexport const HARDENED_OFFSET: number = 0x80000000;\n\nexport interface Versions {\n  private: number;\n  public: number;\n}\n\nconst hash160 = (data: Uint8Array) => ripemd160(sha256(data));\nconst fromU32 = (data: Uint8Array) => createView(data).getUint32(0, false);\nconst toU32 = (n: number) => {\n  if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n    throw new Error('invalid number, should be from 0 to 2**32-1, got ' + n);\n  }\n  const buf = new Uint8Array(4);\n  createView(buf).setUint32(0, n, false);\n  return buf;\n};\n\ninterface HDKeyOpt {\n  versions?: Versions;\n  depth?: number;\n  index?: number;\n  parentFingerprint?: number;\n  chainCode?: Uint8Array;\n  publicKey?: Uint8Array;\n  privateKey?: Uint8Array | bigint;\n}\n\nexport class HDKey {\n  get fingerprint(): number {\n    if (!this.pubHash) {\n      throw new Error('No publicKey set!');\n    }\n    return fromU32(this.pubHash);\n  }\n  get identifier(): Uint8Array | undefined {\n    return this.pubHash;\n  }\n  get pubKeyHash(): Uint8Array | undefined {\n    return this.pubHash;\n  }\n  get privateKey(): Uint8Array | null {\n    return this.privKeyBytes || null;\n  }\n  get publicKey(): Uint8Array | null {\n    return this.pubKey || null;\n  }\n  get privateExtendedKey(): string {\n    const priv = this.privateKey;\n    if (!priv) {\n      throw new Error('No private key');\n    }\n    return base58check.encode(\n      this.serialize(this.versions.private, concatBytes(new Uint8Array([0]), priv))\n    );\n  }\n  get publicExtendedKey(): string {\n    if (!this.pubKey) {\n      throw new Error('No public key');\n    }\n    return base58check.encode(this.serialize(this.versions.public, this.pubKey));\n  }\n\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions = BITCOIN_VERSIONS): HDKey {\n    abytes(seed);\n    if (8 * seed.length < 128 || 8 * seed.length > 512) {\n      throw new Error(\n        'HDKey: seed length must be between 128 and 512 bits; 256 bits is advised, got ' +\n          seed.length\n      );\n    }\n    const I = hmac(sha512, MASTER_SECRET, seed);\n    return new HDKey({\n      versions,\n      chainCode: I.slice(32),\n      privateKey: I.slice(0, 32),\n    });\n  }\n\n  public static fromExtendedKey(base58key: string, versions: Versions = BITCOIN_VERSIONS): HDKey {\n    // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n    const keyBuffer: Uint8Array = base58check.decode(base58key);\n    const keyView = createView(keyBuffer);\n    const version = keyView.getUint32(0, false);\n    const opt = {\n      versions,\n      depth: keyBuffer[4],\n      parentFingerprint: keyView.getUint32(5, false),\n      index: keyView.getUint32(9, false),\n      chainCode: keyBuffer.slice(13, 45),\n    };\n    const key = keyBuffer.slice(45);\n    const isPriv = key[0] === 0;\n    if (version !== versions[isPriv ? 'private' : 'public']) {\n      throw new Error('Version mismatch');\n    }\n    if (isPriv) {\n      return new HDKey({ ...opt, privateKey: key.slice(1) });\n    } else {\n      return new HDKey({ ...opt, publicKey: key });\n    }\n  }\n\n  public static fromJSON(json: { xpriv: string }): HDKey {\n    return HDKey.fromExtendedKey(json.xpriv);\n  }\n  public readonly versions: Versions;\n  public readonly depth: number = 0;\n  public readonly index: number = 0;\n  public readonly chainCode: Uint8Array | null = null;\n  public readonly parentFingerprint: number = 0;\n  private privKey?: bigint;\n  private privKeyBytes?: Uint8Array;\n  private pubKey?: Uint8Array;\n  private pubHash: Uint8Array | undefined;\n\n  constructor(opt: HDKeyOpt) {\n    if (!opt || typeof opt !== 'object') {\n      throw new Error('HDKey.constructor must not be called directly');\n    }\n    this.versions = opt.versions || BITCOIN_VERSIONS;\n    this.depth = opt.depth || 0;\n    this.chainCode = opt.chainCode || null;\n    this.index = opt.index || 0;\n    this.parentFingerprint = opt.parentFingerprint || 0;\n    if (!this.depth) {\n      if (this.parentFingerprint || this.index) {\n        throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n      }\n    }\n    if (opt.publicKey && opt.privateKey) {\n      throw new Error('HDKey: publicKey and privateKey at same time.');\n    }\n    if (opt.privateKey) {\n      if (!secp.utils.isValidPrivateKey(opt.privateKey)) {\n        throw new Error('Invalid private key');\n      }\n      this.privKey =\n        typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\n      this.privKeyBytes = numberToBytes(this.privKey);\n      this.pubKey = secp.getPublicKey(opt.privateKey, true);\n    } else if (opt.publicKey) {\n      this.pubKey = Point.fromHex(opt.publicKey).toRawBytes(true); // force compressed point\n    } else {\n      throw new Error('HDKey: no public or private key provided');\n    }\n    this.pubHash = hash160(this.pubKey);\n  }\n\n  public derive(path: string): HDKey {\n    if (!/^[mM]'?/.test(path)) {\n      throw new Error('Path must start with \"m\" or \"M\"');\n    }\n    if (/^[mM]'?$/.test(path)) {\n      return this;\n    }\n    const parts = path.replace(/^[mM]'?\\//, '').split('/');\n    // tslint:disable-next-line\n    let child: HDKey = this;\n    for (const c of parts) {\n      const m = /^(\\d+)('?)$/.exec(c);\n      const m1 = m && m[1];\n      if (!m || m.length !== 3 || typeof m1 !== 'string')\n        throw new Error('invalid child index: ' + c);\n      let idx = +m1;\n      if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET) {\n        throw new Error('Invalid index');\n      }\n      // hardened key\n      if (m[2] === \"'\") {\n        idx += HARDENED_OFFSET;\n      }\n      child = child.deriveChild(idx);\n    }\n    return child;\n  }\n\n  public deriveChild(index: number): HDKey {\n    if (!this.pubKey || !this.chainCode) {\n      throw new Error('No publicKey or chainCode set');\n    }\n    let data = toU32(index);\n    if (index >= HARDENED_OFFSET) {\n      // Hardened\n      const priv = this.privateKey;\n      if (!priv) {\n        throw new Error('Could not derive hardened child key');\n      }\n      // Hardened child: 0x00 || ser256(kpar) || ser32(index)\n      data = concatBytes(new Uint8Array([0]), priv, data);\n    } else {\n      // Normal child: serP(point(kpar)) || ser32(index)\n      data = concatBytes(this.pubKey, data);\n    }\n    const I = hmac(sha512, this.chainCode, data);\n    const childTweak = bytesToNumber(I.slice(0, 32));\n    const chainCode = I.slice(32);\n    if (!secp.utils.isValidPrivateKey(childTweak)) {\n      throw new Error('Tweak bigger than curve order');\n    }\n    const opt: HDKeyOpt = {\n      versions: this.versions,\n      chainCode,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n      index,\n    };\n    try {\n      // Private parent key -> private child key\n      if (this.privateKey) {\n        const added = mod(this.privKey! + childTweak, secp.CURVE.n);\n        if (!secp.utils.isValidPrivateKey(added)) {\n          throw new Error('The tweak was out of range or the resulted private key is invalid');\n        }\n        opt.privateKey = added;\n      } else {\n        const added = Point.fromHex(this.pubKey).add(Point.fromPrivateKey(childTweak));\n        // Cryptographically impossible: hmac-sha512 preimage would need to be found\n        if (added.equals(Point.ZERO)) {\n          throw new Error('The tweak was equal to negative P, which made the result key invalid');\n        }\n        opt.publicKey = added.toRawBytes(true);\n      }\n      return new HDKey(opt);\n    } catch (err) {\n      return this.deriveChild(index + 1);\n    }\n  }\n\n  public sign(hash: Uint8Array): Uint8Array {\n    if (!this.privateKey) {\n      throw new Error('No privateKey set!');\n    }\n    abytes(hash, 32);\n    return secp.sign(hash, this.privKey!).toCompactRawBytes();\n  }\n\n  public verify(hash: Uint8Array, signature: Uint8Array): boolean {\n    abytes(hash, 32);\n    abytes(signature, 64);\n    if (!this.publicKey) {\n      throw new Error('No publicKey set!');\n    }\n    let sig;\n    try {\n      sig = secp.Signature.fromCompact(signature);\n    } catch (error) {\n      return false;\n    }\n    return secp.verify(sig, hash, this.publicKey);\n  }\n\n  public wipePrivateData(): this {\n    this.privKey = undefined;\n    if (this.privKeyBytes) {\n      this.privKeyBytes.fill(0);\n      this.privKeyBytes = undefined;\n    }\n    return this;\n  }\n  public toJSON(): { xpriv: string; xpub: string } {\n    return {\n      xpriv: this.privateExtendedKey,\n      xpub: this.publicExtendedKey,\n    };\n  }\n\n  private serialize(version: number, key: Uint8Array) {\n    if (!this.chainCode) {\n      throw new Error('No chainCode set');\n    }\n    abytes(key, 33);\n    // version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n    return concatBytes(\n      toU32(version),\n      new Uint8Array([this.depth]),\n      toU32(this.parentFingerprint),\n      toU32(this.index),\n      this.chainCode,\n      key\n    );\n  }\n}\n", "// TODO(v3): Rename to `toLocalAccount` + add `source` property to define source (privateKey, mnemonic, hdKey, etc).\n\nimport type { Address } from 'abitype'\n\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../errors/address.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport {\n  type IsAddressErrorType,\n  isAddress,\n} from '../utils/address/isAddress.js'\nimport type {\n  AccountSource,\n  CustomSource,\n  JsonRpcAccount,\n  LocalAccount,\n} from './types.js'\n\ntype GetAccountReturnType<accountSource extends AccountSource> =\n  | (accountSource extends Address ? JsonRpcAccount : never)\n  | (accountSource extends CustomSource ? LocalAccount : never)\n\nexport type ToAccountErrorType =\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\n/**\n * @description Creates an Account from a custom signing implementation.\n *\n * @returns A Local Account.\n */\nexport function toAccount<accountSource extends AccountSource>(\n  source: accountSource,\n): GetAccountReturnType<accountSource> {\n  if (typeof source === 'string') {\n    if (!isAddress(source, { strict: false }))\n      throw new InvalidAddressError({ address: source })\n    return {\n      address: source,\n      type: 'json-rpc',\n    } as GetAccountReturnType<accountSource>\n  }\n\n  if (!isAddress(source.address, { strict: false }))\n    throw new InvalidAddressError({ address: source.address })\n  return {\n    address: source.address,\n    nonceManager: source.nonceManager,\n    sign: source.sign,\n    signAuthorization: source.signAuthorization,\n    signMessage: source.signMessage,\n    signTransaction: source.signTransaction,\n    signTypedData: source.signTypedData,\n    source: 'custom',\n    type: 'local',\n  } as GetAccountReturnType<accountSource>\n}\n", "export const wordlist = `abdikace\nabeceda\nadresa\nagrese\nakce\naktovka\nalej\nalkohol\namputace\nananas\nandulka\nanekdota\nanketa\nantika\nanulovat\narcha\narogance\nasfalt\nasistent\naspirace\nastma\nastronom\natlas\natletika\natol\nautobus\nazyl\nbabka\nbachor\nbacil\nbaculka\nbadatel\nbageta\nbagr\nbahno\nbakterie\nbalada\nbaletka\nbalkon\nbalonek\nbalvan\nbalza\nbambus\nbankomat\nbarbar\nbaret\nbarman\nbaroko\nbarva\nbaterka\nbatoh\nbavlna\nbazalka\nbazilika\nbazuka\nbedna\nberan\nbeseda\nbestie\nbeton\nbezinka\nbezmoc\nbeztak\nbicykl\nbidlo\nbiftek\nbikiny\nbilance\nbiograf\nbiolog\nbitva\nbizon\nblahobyt\nblatouch\nblecha\nbledule\nblesk\nblikat\nblizna\nblokovat\nbloudit\nblud\nbobek\nbobr\nbodlina\nbodnout\nbohatost\nbojkot\nbojovat\nbokorys\nbolest\nborec\nborovice\nbota\nboubel\nbouchat\nbouda\nboule\nbourat\nboxer\nbradavka\nbrambora\nbranka\nbratr\nbrepta\nbriketa\nbrko\nbrloh\nbronz\nbroskev\nbrunetka\nbrusinka\nbrzda\nbrzy\nbublina\nbubnovat\nbuchta\nbuditel\nbudka\nbudova\nbufet\nbujarost\nbukvice\nbuldok\nbulva\nbunda\nbunkr\nburza\nbutik\nbuvol\nbuzola\nbydlet\nbylina\nbytovka\nbzukot\ncapart\ncarevna\ncedr\ncedule\ncejch\ncejn\ncela\nceler\ncelkem\ncelnice\ncenina\ncennost\ncenovka\ncentrum\ncenzor\ncestopis\ncetka\nchalupa\nchapadlo\ncharita\nchata\nchechtat\nchemie\nchichot\nchirurg\nchlad\nchleba\nchlubit\nchmel\nchmura\nchobot\nchochol\nchodba\ncholera\nchomout\nchopit\nchoroba\nchov\nchrapot\nchrlit\nchrt\nchrup\nchtivost\nchudina\nchutnat\nchvat\nchvilka\nchvost\nchyba\nchystat\nchytit\ncibule\ncigareta\ncihelna\ncihla\ncinkot\ncirkus\ncisterna\ncitace\ncitrus\ncizinec\ncizost\nclona\ncokoliv\ncouvat\nctitel\nctnost\ncudnost\ncuketa\ncukr\ncupot\ncvaknout\ncval\ncvik\ncvrkot\ncyklista\ndaleko\ndareba\ndatel\ndatum\ndcera\ndebata\ndechovka\ndecibel\ndeficit\ndeflace\ndekl\ndekret\ndemokrat\ndeprese\nderby\ndeska\ndetektiv\ndikobraz\ndiktovat\ndioda\ndiplom\ndisk\ndisplej\ndivadlo\ndivoch\ndlaha\ndlouho\ndluhopis\ndnes\ndobro\ndobytek\ndocent\ndochutit\ndodnes\ndohled\ndohoda\ndohra\ndojem\ndojnice\ndoklad\ndokola\ndoktor\ndokument\ndolar\ndoleva\ndolina\ndoma\ndominant\ndomluvit\ndomov\ndonutit\ndopad\ndopis\ndoplnit\ndoposud\ndoprovod\ndopustit\ndorazit\ndorost\ndort\ndosah\ndoslov\ndostatek\ndosud\ndosyta\ndotaz\ndotek\ndotknout\ndoufat\ndoutnat\ndovozce\ndozadu\ndoznat\ndozorce\ndrahota\ndrak\ndramatik\ndravec\ndraze\ndrdol\ndrobnost\ndrogerie\ndrozd\ndrsnost\ndrtit\ndrzost\nduben\nduchovno\ndudek\nduha\nduhovka\ndusit\ndusno\ndutost\ndvojice\ndvorec\ndynamit\nekolog\nekonomie\nelektron\nelipsa\nemail\nemise\nemoce\nempatie\nepizoda\nepocha\nepopej\nepos\nesej\nesence\neskorta\neskymo\netiketa\neuforie\nevoluce\nexekuce\nexkurze\nexpedice\nexploze\nexport\nextrakt\nfacka\nfajfka\nfakulta\nfanatik\nfantazie\nfarmacie\nfavorit\nfazole\nfederace\nfejeton\nfenka\nfialka\nfigurant\nfilozof\nfiltr\nfinance\nfinta\nfixace\nfjord\nflanel\nflirt\nflotila\nfond\nfosfor\nfotbal\nfotka\nfoton\nfrakce\nfreska\nfronta\nfukar\nfunkce\nfyzika\ngaleje\ngarant\ngenetika\ngeolog\ngilotina\nglazura\nglejt\ngolem\ngolfista\ngotika\ngraf\ngramofon\ngranule\ngrep\ngril\ngrog\ngroteska\nguma\nhadice\nhadr\nhala\nhalenka\nhanba\nhanopis\nharfa\nharpuna\nhavran\nhebkost\nhejkal\nhejno\nhejtman\nhektar\nhelma\nhematom\nherec\nherna\nheslo\nhezky\nhistorik\nhladovka\nhlasivky\nhlava\nhledat\nhlen\nhlodavec\nhloh\nhloupost\nhltat\nhlubina\nhluchota\nhmat\nhmota\nhmyz\nhnis\nhnojivo\nhnout\nhoblina\nhoboj\nhoch\nhodiny\nhodlat\nhodnota\nhodovat\nhojnost\nhokej\nholinka\nholka\nholub\nhomole\nhonitba\nhonorace\nhoral\nhorda\nhorizont\nhorko\nhorlivec\nhormon\nhornina\nhoroskop\nhorstvo\nhospoda\nhostina\nhotovost\nhouba\nhouf\nhoupat\nhouska\nhovor\nhradba\nhranice\nhravost\nhrazda\nhrbolek\nhrdina\nhrdlo\nhrdost\nhrnek\nhrobka\nhromada\nhrot\nhrouda\nhrozen\nhrstka\nhrubost\nhryzat\nhubenost\nhubnout\nhudba\nhukot\nhumr\nhusita\nhustota\nhvozd\nhybnost\nhydrant\nhygiena\nhymna\nhysterik\nidylka\nihned\nikona\niluze\nimunita\ninfekce\ninflace\ninkaso\ninovace\ninspekce\ninternet\ninvalida\ninvestor\ninzerce\nironie\njablko\njachta\njahoda\njakmile\njakost\njalovec\njantar\njarmark\njaro\njasan\njasno\njatka\njavor\njazyk\njedinec\njedle\njednatel\njehlan\njekot\njelen\njelito\njemnost\njenom\njepice\njeseter\njevit\njezdec\njezero\njinak\njindy\njinoch\njiskra\njistota\njitrnice\njizva\njmenovat\njogurt\njurta\nkabaret\nkabel\nkabinet\nkachna\nkadet\nkadidlo\nkahan\nkajak\nkajuta\nkakao\nkaktus\nkalamita\nkalhoty\nkalibr\nkalnost\nkamera\nkamkoliv\nkamna\nkanibal\nkanoe\nkantor\nkapalina\nkapela\nkapitola\nkapka\nkaple\nkapota\nkapr\nkapusta\nkapybara\nkaramel\nkarotka\nkarton\nkasa\nkatalog\nkatedra\nkauce\nkauza\nkavalec\nkazajka\nkazeta\nkazivost\nkdekoliv\nkdesi\nkedluben\nkemp\nkeramika\nkino\nklacek\nkladivo\nklam\nklapot\nklasika\nklaun\nklec\nklenba\nklepat\nklesnout\nklid\nklima\nklisna\nklobouk\nklokan\nklopa\nkloub\nklubovna\nklusat\nkluzkost\nkmen\nkmitat\nkmotr\nkniha\nknot\nkoalice\nkoberec\nkobka\nkobliha\nkobyla\nkocour\nkohout\nkojenec\nkokos\nkoktejl\nkolaps\nkoleda\nkolize\nkolo\nkomando\nkometa\nkomik\nkomnata\nkomora\nkompas\nkomunita\nkonat\nkoncept\nkondice\nkonec\nkonfese\nkongres\nkonina\nkonkurs\nkontakt\nkonzerva\nkopanec\nkopie\nkopnout\nkoprovka\nkorbel\nkorektor\nkormidlo\nkoroptev\nkorpus\nkoruna\nkoryto\nkorzet\nkosatec\nkostka\nkotel\nkotleta\nkotoul\nkoukat\nkoupelna\nkousek\nkouzlo\nkovboj\nkoza\nkozoroh\nkrabice\nkrach\nkrajina\nkralovat\nkrasopis\nkravata\nkredit\nkrejcar\nkresba\nkreveta\nkriket\nkritik\nkrize\nkrkavec\nkrmelec\nkrmivo\nkrocan\nkrok\nkronika\nkropit\nkroupa\nkrovka\nkrtek\nkruhadlo\nkrupice\nkrutost\nkrvinka\nkrychle\nkrypta\nkrystal\nkryt\nkudlanka\nkufr\nkujnost\nkukla\nkulajda\nkulich\nkulka\nkulomet\nkultura\nkuna\nkupodivu\nkurt\nkurzor\nkutil\nkvalita\nkvasinka\nkvestor\nkynolog\nkyselina\nkytara\nkytice\nkytka\nkytovec\nkyvadlo\nlabrador\nlachtan\nladnost\nlaik\nlakomec\nlamela\nlampa\nlanovka\nlasice\nlaso\nlastura\nlatinka\nlavina\nlebka\nleckdy\nleden\nlednice\nledovka\nledvina\nlegenda\nlegie\nlegrace\nlehce\nlehkost\nlehnout\nlektvar\nlenochod\nlentilka\nlepenka\nlepidlo\nletadlo\nletec\nletmo\nletokruh\nlevhart\nlevitace\nlevobok\nlibra\nlichotka\nlidojed\nlidskost\nlihovina\nlijavec\nlilek\nlimetka\nlinie\nlinka\nlinoleum\nlistopad\nlitina\nlitovat\nlobista\nlodivod\nlogika\nlogoped\nlokalita\nloket\nlomcovat\nlopata\nlopuch\nlord\nlosos\nlotr\nloudal\nlouh\nlouka\nlouskat\nlovec\nlstivost\nlucerna\nlucifer\nlump\nlusk\nlustrace\nlvice\nlyra\nlyrika\nlysina\nmadam\nmadlo\nmagistr\nmahagon\nmajetek\nmajitel\nmajorita\nmakak\nmakovice\nmakrela\nmalba\nmalina\nmalovat\nmalvice\nmaminka\nmandle\nmanko\nmarnost\nmasakr\nmaskot\nmasopust\nmatice\nmatrika\nmaturita\nmazanec\nmazivo\nmazlit\nmazurka\nmdloba\nmechanik\nmeditace\nmedovina\nmelasa\nmeloun\nmentolka\nmetla\nmetoda\nmetr\nmezera\nmigrace\nmihnout\nmihule\nmikina\nmikrofon\nmilenec\nmilimetr\nmilost\nmimika\nmincovna\nminibar\nminomet\nminulost\nmiska\nmistr\nmixovat\nmladost\nmlha\nmlhovina\nmlok\nmlsat\nmluvit\nmnich\nmnohem\nmobil\nmocnost\nmodelka\nmodlitba\nmohyla\nmokro\nmolekula\nmomentka\nmonarcha\nmonokl\nmonstrum\nmontovat\nmonzun\nmosaz\nmoskyt\nmost\nmotivace\nmotorka\nmotyka\nmoucha\nmoudrost\nmozaika\nmozek\nmozol\nmramor\nmravenec\nmrkev\nmrtvola\nmrzet\nmrzutost\nmstitel\nmudrc\nmuflon\nmulat\nmumie\nmunice\nmuset\nmutace\nmuzeum\nmuzikant\nmyslivec\nmzda\nnabourat\nnachytat\nnadace\nnadbytek\nnadhoz\nnadobro\nnadpis\nnahlas\nnahnat\nnahodile\nnahradit\nnaivita\nnajednou\nnajisto\nnajmout\nnaklonit\nnakonec\nnakrmit\nnalevo\nnamazat\nnamluvit\nnanometr\nnaoko\nnaopak\nnaostro\nnapadat\nnapevno\nnaplnit\nnapnout\nnaposled\nnaprosto\nnarodit\nnaruby\nnarychlo\nnasadit\nnasekat\nnaslepo\nnastat\nnatolik\nnavenek\nnavrch\nnavzdory\nnazvat\nnebe\nnechat\nnecky\nnedaleko\nnedbat\nneduh\nnegace\nnehet\nnehoda\nnejen\nnejprve\nneklid\nnelibost\nnemilost\nnemoc\nneochota\nneonka\nnepokoj\nnerost\nnerv\nnesmysl\nnesoulad\nnetvor\nneuron\nnevina\nnezvykle\nnicota\nnijak\nnikam\nnikdy\nnikl\nnikterak\nnitro\nnocleh\nnohavice\nnominace\nnora\nnorek\nnositel\nnosnost\nnouze\nnoviny\nnovota\nnozdra\nnuda\nnudle\nnuget\nnutit\nnutnost\nnutrie\nnymfa\nobal\nobarvit\nobava\nobdiv\nobec\nobehnat\nobejmout\nobezita\nobhajoba\nobilnice\nobjasnit\nobjekt\nobklopit\noblast\noblek\nobliba\nobloha\nobluda\nobnos\nobohatit\nobojek\nobout\nobrazec\nobrna\nobruba\nobrys\nobsah\nobsluha\nobstarat\nobuv\nobvaz\nobvinit\nobvod\nobvykle\nobyvatel\nobzor\nocas\nocel\nocenit\nochladit\nochota\nochrana\nocitnout\nodboj\nodbyt\nodchod\nodcizit\nodebrat\nodeslat\nodevzdat\nodezva\nodhadce\nodhodit\nodjet\nodjinud\nodkaz\nodkoupit\nodliv\nodluka\nodmlka\nodolnost\nodpad\nodpis\nodplout\nodpor\nodpustit\nodpykat\nodrazka\nodsoudit\nodstup\nodsun\nodtok\nodtud\nodvaha\nodveta\nodvolat\nodvracet\nodznak\nofina\nofsajd\nohlas\nohnisko\nohrada\nohrozit\nohryzek\nokap\nokenice\noklika\nokno\nokouzlit\nokovy\nokrasa\nokres\nokrsek\nokruh\nokupant\nokurka\nokusit\nolejnina\nolizovat\nomak\nomeleta\nomezit\nomladina\nomlouvat\nomluva\nomyl\nonehdy\nopakovat\nopasek\noperace\nopice\nopilost\nopisovat\nopora\nopozice\nopravdu\noproti\norbital\norchestr\norgie\norlice\norloj\nortel\nosada\noschnout\nosika\nosivo\noslava\noslepit\noslnit\noslovit\nosnova\nosoba\nosolit\nospalec\nosten\nostraha\nostuda\nostych\nosvojit\noteplit\notisk\notop\notrhat\notrlost\notrok\notruby\notvor\novanout\novar\noves\novlivnit\novoce\noxid\nozdoba\npachatel\npacient\npadouch\npahorek\npakt\npalanda\npalec\npalivo\npaluba\npamflet\npamlsek\npanenka\npanika\npanna\npanovat\npanstvo\npantofle\npaprika\nparketa\nparodie\nparta\nparuka\nparyba\npaseka\npasivita\npastelka\npatent\npatrona\npavouk\npazneht\npazourek\npecka\npedagog\npejsek\npeklo\npeloton\npenalta\npendrek\npenze\nperiskop\npero\npestrost\npetarda\npetice\npetrolej\npevnina\npexeso\npianista\npiha\npijavice\npikle\npiknik\npilina\npilnost\npilulka\npinzeta\npipeta\npisatel\npistole\npitevna\npivnice\npivovar\nplacenta\nplakat\nplamen\nplaneta\nplastika\nplatit\nplavidlo\nplaz\nplech\nplemeno\nplenta\nples\npletivo\nplevel\nplivat\nplnit\nplno\nplocha\nplodina\nplomba\nplout\npluk\nplyn\npobavit\npobyt\npochod\npocit\npoctivec\npodat\npodcenit\npodepsat\npodhled\npodivit\npodklad\npodmanit\npodnik\npodoba\npodpora\npodraz\npodstata\npodvod\npodzim\npoezie\npohanka\npohnutka\npohovor\npohroma\npohyb\npointa\npojistka\npojmout\npokazit\npokles\npokoj\npokrok\npokuta\npokyn\npoledne\npolibek\npolknout\npoloha\npolynom\npomalu\npominout\npomlka\npomoc\npomsta\npomyslet\nponechat\nponorka\nponurost\npopadat\npopel\npopisek\npoplach\npoprosit\npopsat\npopud\nporadce\nporce\nporod\nporucha\nporyv\nposadit\nposed\nposila\nposkok\nposlanec\nposoudit\npospolu\npostava\nposudek\nposyp\npotah\npotkan\npotlesk\npotomek\npotrava\npotupa\npotvora\npoukaz\npouto\npouzdro\npovaha\npovidla\npovlak\npovoz\npovrch\npovstat\npovyk\npovzdech\npozdrav\npozemek\npoznatek\npozor\npozvat\npracovat\nprahory\npraktika\nprales\npraotec\npraporek\nprase\npravda\nprincip\nprkno\nprobudit\nprocento\nprodej\nprofese\nprohra\nprojekt\nprolomit\npromile\npronikat\npropad\nprorok\nprosba\nproton\nproutek\nprovaz\nprskavka\nprsten\nprudkost\nprut\nprvek\nprvohory\npsanec\npsovod\npstruh\nptactvo\npuberta\npuch\npudl\npukavec\npuklina\npukrle\npult\npumpa\npunc\npupen\npusa\npusinka\npustina\nputovat\nputyka\npyramida\npysk\npytel\nracek\nrachot\nradiace\nradnice\nradon\nraft\nragby\nraketa\nrakovina\nrameno\nrampouch\nrande\nrarach\nrarita\nrasovna\nrastr\nratolest\nrazance\nrazidlo\nreagovat\nreakce\nrecept\nredaktor\nreferent\nreflex\nrejnok\nreklama\nrekord\nrekrut\nrektor\nreputace\nrevize\nrevma\nrevolver\nrezerva\nriskovat\nriziko\nrobotika\nrodokmen\nrohovka\nrokle\nrokoko\nromaneto\nropovod\nropucha\nrorejs\nrosol\nrostlina\nrotmistr\nrotoped\nrotunda\nroubenka\nroucho\nroup\nroura\nrovina\nrovnice\nrozbor\nrozchod\nrozdat\nrozeznat\nrozhodce\nrozinka\nrozjezd\nrozkaz\nrozloha\nrozmar\nrozpad\nrozruch\nrozsah\nroztok\nrozum\nrozvod\nrubrika\nruchadlo\nrukavice\nrukopis\nryba\nrybolov\nrychlost\nrydlo\nrypadlo\nrytina\nryzost\nsadista\nsahat\nsako\nsamec\nsamizdat\nsamota\nsanitka\nsardinka\nsasanka\nsatelit\nsazba\nsazenice\nsbor\nschovat\nsebranka\nsecese\nsedadlo\nsediment\nsedlo\nsehnat\nsejmout\nsekera\nsekta\nsekunda\nsekvoje\nsemeno\nseno\nservis\nsesadit\nseshora\nseskok\nseslat\nsestra\nsesuv\nsesypat\nsetba\nsetina\nsetkat\nsetnout\nsetrvat\nsever\nseznam\nshoda\nshrnout\nsifon\nsilnice\nsirka\nsirotek\nsirup\nsituace\nskafandr\nskalisko\nskanzen\nskaut\nskeptik\nskica\nskladba\nsklenice\nsklo\nskluz\nskoba\nskokan\nskoro\nskripta\nskrz\nskupina\nskvost\nskvrna\nslabika\nsladidlo\nslanina\nslast\nslavnost\nsledovat\nslepec\nsleva\nslezina\nslib\nslina\nsliznice\nslon\nsloupek\nslovo\nsluch\nsluha\nslunce\nslupka\nslza\nsmaragd\nsmetana\nsmilstvo\nsmlouva\nsmog\nsmrad\nsmrk\nsmrtka\nsmutek\nsmysl\nsnad\nsnaha\nsnob\nsobota\nsocha\nsodovka\nsokol\nsopka\nsotva\nsouboj\nsoucit\nsoudce\nsouhlas\nsoulad\nsoumrak\nsouprava\nsoused\nsoutok\nsouviset\nspalovna\nspasitel\nspis\nsplav\nspodek\nspojenec\nspolu\nsponzor\nspornost\nspousta\nsprcha\nspustit\nsranda\nsraz\nsrdce\nsrna\nsrnec\nsrovnat\nsrpen\nsrst\nsrub\nstanice\nstarosta\nstatika\nstavba\nstehno\nstezka\nstodola\nstolek\nstopa\nstorno\nstoupat\nstrach\nstres\nstrhnout\nstrom\nstruna\nstudna\nstupnice\nstvol\nstyk\nsubjekt\nsubtropy\nsuchar\nsudost\nsukno\nsundat\nsunout\nsurikata\nsurovina\nsvah\nsvalstvo\nsvetr\nsvatba\nsvazek\nsvisle\nsvitek\nsvoboda\nsvodidlo\nsvorka\nsvrab\nsykavka\nsykot\nsynek\nsynovec\nsypat\nsypkost\nsyrovost\nsysel\nsytost\ntabletka\ntabule\ntahoun\ntajemno\ntajfun\ntajga\ntajit\ntajnost\ntaktika\ntamhle\ntampon\ntancovat\ntanec\ntanker\ntapeta\ntavenina\ntazatel\ntechnika\ntehdy\ntekutina\ntelefon\ntemnota\ntendence\ntenista\ntenor\nteplota\ntepna\nteprve\nterapie\ntermoska\ntextil\nticho\ntiskopis\ntitulek\ntkadlec\ntkanina\ntlapka\ntleskat\ntlukot\ntlupa\ntmel\ntoaleta\ntopinka\ntopol\ntorzo\ntouha\ntoulec\ntradice\ntraktor\ntramp\ntrasa\ntraverza\ntrefit\ntrest\ntrezor\ntrhavina\ntrhlina\ntrochu\ntrojice\ntroska\ntrouba\ntrpce\ntrpitel\ntrpkost\ntrubec\ntruchlit\ntruhlice\ntrus\ntrvat\ntudy\ntuhnout\ntuhost\ntundra\nturista\nturnaj\ntuzemsko\ntvaroh\ntvorba\ntvrdost\ntvrz\ntygr\ntykev\nubohost\nuboze\nubrat\nubrousek\nubrus\nubytovna\nucho\nuctivost\nudivit\nuhradit\nujednat\nujistit\nujmout\nukazatel\nuklidnit\nuklonit\nukotvit\nukrojit\nulice\nulita\nulovit\numyvadlo\nunavit\nuniforma\nuniknout\nupadnout\nuplatnit\nuplynout\nupoutat\nupravit\nuran\nurazit\nusednout\nusilovat\nusmrtit\nusnadnit\nusnout\nusoudit\nustlat\nustrnout\nutahovat\nutkat\nutlumit\nutonout\nutopenec\nutrousit\nuvalit\nuvolnit\nuvozovka\nuzdravit\nuzel\nuzenina\nuzlina\nuznat\nvagon\nvalcha\nvaloun\nvana\nvandal\nvanilka\nvaran\nvarhany\nvarovat\nvcelku\nvchod\nvdova\nvedro\nvegetace\nvejce\nvelbloud\nveletrh\nvelitel\nvelmoc\nvelryba\nvenkov\nveranda\nverze\nveselka\nveskrze\nvesnice\nvespodu\nvesta\nveterina\nveverka\nvibrace\nvichr\nvideohra\nvidina\nvidle\nvila\nvinice\nviset\nvitalita\nvize\nvizitka\nvjezd\nvklad\nvkus\nvlajka\nvlak\nvlasec\nvlevo\nvlhkost\nvliv\nvlnovka\nvloupat\nvnucovat\nvnuk\nvoda\nvodivost\nvodoznak\nvodstvo\nvojensky\nvojna\nvojsko\nvolant\nvolba\nvolit\nvolno\nvoskovka\nvozidlo\nvozovna\nvpravo\nvrabec\nvracet\nvrah\nvrata\nvrba\nvrcholek\nvrhat\nvrstva\nvrtule\nvsadit\nvstoupit\nvstup\nvtip\nvybavit\nvybrat\nvychovat\nvydat\nvydra\nvyfotit\nvyhledat\nvyhnout\nvyhodit\nvyhradit\nvyhubit\nvyjasnit\nvyjet\nvyjmout\nvyklopit\nvykonat\nvylekat\nvymazat\nvymezit\nvymizet\nvymyslet\nvynechat\nvynikat\nvynutit\nvypadat\nvyplatit\nvypravit\nvypustit\nvyrazit\nvyrovnat\nvyrvat\nvyslovit\nvysoko\nvystavit\nvysunout\nvysypat\nvytasit\nvytesat\nvytratit\nvyvinout\nvyvolat\nvyvrhel\nvyzdobit\nvyznat\nvzadu\nvzbudit\nvzchopit\nvzdor\nvzduch\nvzdychat\nvzestup\nvzhledem\nvzkaz\nvzlykat\nvznik\nvzorek\nvzpoura\nvztah\nvztek\nxylofon\nzabrat\nzabydlet\nzachovat\nzadarmo\nzadusit\nzafoukat\nzahltit\nzahodit\nzahrada\nzahynout\nzajatec\nzajet\nzajistit\nzaklepat\nzakoupit\nzalepit\nzamezit\nzamotat\nzamyslet\nzanechat\nzanikat\nzaplatit\nzapojit\nzapsat\nzarazit\nzastavit\nzasunout\nzatajit\nzatemnit\nzatknout\nzaujmout\nzavalit\nzavelet\nzavinit\nzavolat\nzavrtat\nzazvonit\nzbavit\nzbrusu\nzbudovat\nzbytek\nzdaleka\nzdarma\nzdatnost\nzdivo\nzdobit\nzdroj\nzdvih\nzdymadlo\nzelenina\nzeman\nzemina\nzeptat\nzezadu\nzezdola\nzhatit\nzhltnout\nzhluboka\nzhotovit\nzhruba\nzima\nzimnice\nzjemnit\nzklamat\nzkoumat\nzkratka\nzkumavka\nzlato\nzlehka\nzloba\nzlom\nzlost\nzlozvyk\nzmapovat\nzmar\nzmatek\nzmije\nzmizet\nzmocnit\nzmodrat\nzmrzlina\nzmutovat\nznak\nznalost\nznamenat\nznovu\nzobrazit\nzotavit\nzoubek\nzoufale\nzplodit\nzpomalit\nzprava\nzprostit\nzprudka\nzprvu\nzrada\nzranit\nzrcadlo\nzrnitost\nzrno\nzrovna\nzrychlit\nzrzavost\nzticha\nztratit\nzubovina\nzubr\nzvednout\nzvenku\nzvesela\nzvon\nzvrat\nzvukovod\nzvyk`.split('\\n');\n", "export const wordlist = `abandon\nability\nable\nabout\nabove\nabsent\nabsorb\nabstract\nabsurd\nabuse\naccess\naccident\naccount\naccuse\nachieve\nacid\nacoustic\nacquire\nacross\nact\naction\nactor\nactress\nactual\nadapt\nadd\naddict\naddress\nadjust\nadmit\nadult\nadvance\nadvice\naerobic\naffair\nafford\nafraid\nagain\nage\nagent\nagree\nahead\naim\nair\nairport\naisle\nalarm\nalbum\nalcohol\nalert\nalien\nall\nalley\nallow\nalmost\nalone\nalpha\nalready\nalso\nalter\nalways\namateur\namazing\namong\namount\namused\nanalyst\nanchor\nancient\nanger\nangle\nangry\nanimal\nankle\nannounce\nannual\nanother\nanswer\nantenna\nantique\nanxiety\nany\napart\napology\nappear\napple\napprove\napril\narch\narctic\narea\narena\nargue\narm\narmed\narmor\narmy\naround\narrange\narrest\narrive\narrow\nart\nartefact\nartist\nartwork\nask\naspect\nassault\nasset\nassist\nassume\nasthma\nathlete\natom\nattack\nattend\nattitude\nattract\nauction\naudit\naugust\naunt\nauthor\nauto\nautumn\naverage\navocado\navoid\nawake\naware\naway\nawesome\nawful\nawkward\naxis\nbaby\nbachelor\nbacon\nbadge\nbag\nbalance\nbalcony\nball\nbamboo\nbanana\nbanner\nbar\nbarely\nbargain\nbarrel\nbase\nbasic\nbasket\nbattle\nbeach\nbean\nbeauty\nbecause\nbecome\nbeef\nbefore\nbegin\nbehave\nbehind\nbelieve\nbelow\nbelt\nbench\nbenefit\nbest\nbetray\nbetter\nbetween\nbeyond\nbicycle\nbid\nbike\nbind\nbiology\nbird\nbirth\nbitter\nblack\nblade\nblame\nblanket\nblast\nbleak\nbless\nblind\nblood\nblossom\nblouse\nblue\nblur\nblush\nboard\nboat\nbody\nboil\nbomb\nbone\nbonus\nbook\nboost\nborder\nboring\nborrow\nboss\nbottom\nbounce\nbox\nboy\nbracket\nbrain\nbrand\nbrass\nbrave\nbread\nbreeze\nbrick\nbridge\nbrief\nbright\nbring\nbrisk\nbroccoli\nbroken\nbronze\nbroom\nbrother\nbrown\nbrush\nbubble\nbuddy\nbudget\nbuffalo\nbuild\nbulb\nbulk\nbullet\nbundle\nbunker\nburden\nburger\nburst\nbus\nbusiness\nbusy\nbutter\nbuyer\nbuzz\ncabbage\ncabin\ncable\ncactus\ncage\ncake\ncall\ncalm\ncamera\ncamp\ncan\ncanal\ncancel\ncandy\ncannon\ncanoe\ncanvas\ncanyon\ncapable\ncapital\ncaptain\ncar\ncarbon\ncard\ncargo\ncarpet\ncarry\ncart\ncase\ncash\ncasino\ncastle\ncasual\ncat\ncatalog\ncatch\ncategory\ncattle\ncaught\ncause\ncaution\ncave\nceiling\ncelery\ncement\ncensus\ncentury\ncereal\ncertain\nchair\nchalk\nchampion\nchange\nchaos\nchapter\ncharge\nchase\nchat\ncheap\ncheck\ncheese\nchef\ncherry\nchest\nchicken\nchief\nchild\nchimney\nchoice\nchoose\nchronic\nchuckle\nchunk\nchurn\ncigar\ncinnamon\ncircle\ncitizen\ncity\ncivil\nclaim\nclap\nclarify\nclaw\nclay\nclean\nclerk\nclever\nclick\nclient\ncliff\nclimb\nclinic\nclip\nclock\nclog\nclose\ncloth\ncloud\nclown\nclub\nclump\ncluster\nclutch\ncoach\ncoast\ncoconut\ncode\ncoffee\ncoil\ncoin\ncollect\ncolor\ncolumn\ncombine\ncome\ncomfort\ncomic\ncommon\ncompany\nconcert\nconduct\nconfirm\ncongress\nconnect\nconsider\ncontrol\nconvince\ncook\ncool\ncopper\ncopy\ncoral\ncore\ncorn\ncorrect\ncost\ncotton\ncouch\ncountry\ncouple\ncourse\ncousin\ncover\ncoyote\ncrack\ncradle\ncraft\ncram\ncrane\ncrash\ncrater\ncrawl\ncrazy\ncream\ncredit\ncreek\ncrew\ncricket\ncrime\ncrisp\ncritic\ncrop\ncross\ncrouch\ncrowd\ncrucial\ncruel\ncruise\ncrumble\ncrunch\ncrush\ncry\ncrystal\ncube\nculture\ncup\ncupboard\ncurious\ncurrent\ncurtain\ncurve\ncushion\ncustom\ncute\ncycle\ndad\ndamage\ndamp\ndance\ndanger\ndaring\ndash\ndaughter\ndawn\nday\ndeal\ndebate\ndebris\ndecade\ndecember\ndecide\ndecline\ndecorate\ndecrease\ndeer\ndefense\ndefine\ndefy\ndegree\ndelay\ndeliver\ndemand\ndemise\ndenial\ndentist\ndeny\ndepart\ndepend\ndeposit\ndepth\ndeputy\nderive\ndescribe\ndesert\ndesign\ndesk\ndespair\ndestroy\ndetail\ndetect\ndevelop\ndevice\ndevote\ndiagram\ndial\ndiamond\ndiary\ndice\ndiesel\ndiet\ndiffer\ndigital\ndignity\ndilemma\ndinner\ndinosaur\ndirect\ndirt\ndisagree\ndiscover\ndisease\ndish\ndismiss\ndisorder\ndisplay\ndistance\ndivert\ndivide\ndivorce\ndizzy\ndoctor\ndocument\ndog\ndoll\ndolphin\ndomain\ndonate\ndonkey\ndonor\ndoor\ndose\ndouble\ndove\ndraft\ndragon\ndrama\ndrastic\ndraw\ndream\ndress\ndrift\ndrill\ndrink\ndrip\ndrive\ndrop\ndrum\ndry\nduck\ndumb\ndune\nduring\ndust\ndutch\nduty\ndwarf\ndynamic\neager\neagle\nearly\nearn\nearth\neasily\neast\neasy\necho\necology\neconomy\nedge\nedit\neducate\neffort\negg\neight\neither\nelbow\nelder\nelectric\nelegant\nelement\nelephant\nelevator\nelite\nelse\nembark\nembody\nembrace\nemerge\nemotion\nemploy\nempower\nempty\nenable\nenact\nend\nendless\nendorse\nenemy\nenergy\nenforce\nengage\nengine\nenhance\nenjoy\nenlist\nenough\nenrich\nenroll\nensure\nenter\nentire\nentry\nenvelope\nepisode\nequal\nequip\nera\nerase\nerode\nerosion\nerror\nerupt\nescape\nessay\nessence\nestate\neternal\nethics\nevidence\nevil\nevoke\nevolve\nexact\nexample\nexcess\nexchange\nexcite\nexclude\nexcuse\nexecute\nexercise\nexhaust\nexhibit\nexile\nexist\nexit\nexotic\nexpand\nexpect\nexpire\nexplain\nexpose\nexpress\nextend\nextra\neye\neyebrow\nfabric\nface\nfaculty\nfade\nfaint\nfaith\nfall\nfalse\nfame\nfamily\nfamous\nfan\nfancy\nfantasy\nfarm\nfashion\nfat\nfatal\nfather\nfatigue\nfault\nfavorite\nfeature\nfebruary\nfederal\nfee\nfeed\nfeel\nfemale\nfence\nfestival\nfetch\nfever\nfew\nfiber\nfiction\nfield\nfigure\nfile\nfilm\nfilter\nfinal\nfind\nfine\nfinger\nfinish\nfire\nfirm\nfirst\nfiscal\nfish\nfit\nfitness\nfix\nflag\nflame\nflash\nflat\nflavor\nflee\nflight\nflip\nfloat\nflock\nfloor\nflower\nfluid\nflush\nfly\nfoam\nfocus\nfog\nfoil\nfold\nfollow\nfood\nfoot\nforce\nforest\nforget\nfork\nfortune\nforum\nforward\nfossil\nfoster\nfound\nfox\nfragile\nframe\nfrequent\nfresh\nfriend\nfringe\nfrog\nfront\nfrost\nfrown\nfrozen\nfruit\nfuel\nfun\nfunny\nfurnace\nfury\nfuture\ngadget\ngain\ngalaxy\ngallery\ngame\ngap\ngarage\ngarbage\ngarden\ngarlic\ngarment\ngas\ngasp\ngate\ngather\ngauge\ngaze\ngeneral\ngenius\ngenre\ngentle\ngenuine\ngesture\nghost\ngiant\ngift\ngiggle\nginger\ngiraffe\ngirl\ngive\nglad\nglance\nglare\nglass\nglide\nglimpse\nglobe\ngloom\nglory\nglove\nglow\nglue\ngoat\ngoddess\ngold\ngood\ngoose\ngorilla\ngospel\ngossip\ngovern\ngown\ngrab\ngrace\ngrain\ngrant\ngrape\ngrass\ngravity\ngreat\ngreen\ngrid\ngrief\ngrit\ngrocery\ngroup\ngrow\ngrunt\nguard\nguess\nguide\nguilt\nguitar\ngun\ngym\nhabit\nhair\nhalf\nhammer\nhamster\nhand\nhappy\nharbor\nhard\nharsh\nharvest\nhat\nhave\nhawk\nhazard\nhead\nhealth\nheart\nheavy\nhedgehog\nheight\nhello\nhelmet\nhelp\nhen\nhero\nhidden\nhigh\nhill\nhint\nhip\nhire\nhistory\nhobby\nhockey\nhold\nhole\nholiday\nhollow\nhome\nhoney\nhood\nhope\nhorn\nhorror\nhorse\nhospital\nhost\nhotel\nhour\nhover\nhub\nhuge\nhuman\nhumble\nhumor\nhundred\nhungry\nhunt\nhurdle\nhurry\nhurt\nhusband\nhybrid\nice\nicon\nidea\nidentify\nidle\nignore\nill\nillegal\nillness\nimage\nimitate\nimmense\nimmune\nimpact\nimpose\nimprove\nimpulse\ninch\ninclude\nincome\nincrease\nindex\nindicate\nindoor\nindustry\ninfant\ninflict\ninform\ninhale\ninherit\ninitial\ninject\ninjury\ninmate\ninner\ninnocent\ninput\ninquiry\ninsane\ninsect\ninside\ninspire\ninstall\nintact\ninterest\ninto\ninvest\ninvite\ninvolve\niron\nisland\nisolate\nissue\nitem\nivory\njacket\njaguar\njar\njazz\njealous\njeans\njelly\njewel\njob\njoin\njoke\njourney\njoy\njudge\njuice\njump\njungle\njunior\njunk\njust\nkangaroo\nkeen\nkeep\nketchup\nkey\nkick\nkid\nkidney\nkind\nkingdom\nkiss\nkit\nkitchen\nkite\nkitten\nkiwi\nknee\nknife\nknock\nknow\nlab\nlabel\nlabor\nladder\nlady\nlake\nlamp\nlanguage\nlaptop\nlarge\nlater\nlatin\nlaugh\nlaundry\nlava\nlaw\nlawn\nlawsuit\nlayer\nlazy\nleader\nleaf\nlearn\nleave\nlecture\nleft\nleg\nlegal\nlegend\nleisure\nlemon\nlend\nlength\nlens\nleopard\nlesson\nletter\nlevel\nliar\nliberty\nlibrary\nlicense\nlife\nlift\nlight\nlike\nlimb\nlimit\nlink\nlion\nliquid\nlist\nlittle\nlive\nlizard\nload\nloan\nlobster\nlocal\nlock\nlogic\nlonely\nlong\nloop\nlottery\nloud\nlounge\nlove\nloyal\nlucky\nluggage\nlumber\nlunar\nlunch\nluxury\nlyrics\nmachine\nmad\nmagic\nmagnet\nmaid\nmail\nmain\nmajor\nmake\nmammal\nman\nmanage\nmandate\nmango\nmansion\nmanual\nmaple\nmarble\nmarch\nmargin\nmarine\nmarket\nmarriage\nmask\nmass\nmaster\nmatch\nmaterial\nmath\nmatrix\nmatter\nmaximum\nmaze\nmeadow\nmean\nmeasure\nmeat\nmechanic\nmedal\nmedia\nmelody\nmelt\nmember\nmemory\nmention\nmenu\nmercy\nmerge\nmerit\nmerry\nmesh\nmessage\nmetal\nmethod\nmiddle\nmidnight\nmilk\nmillion\nmimic\nmind\nminimum\nminor\nminute\nmiracle\nmirror\nmisery\nmiss\nmistake\nmix\nmixed\nmixture\nmobile\nmodel\nmodify\nmom\nmoment\nmonitor\nmonkey\nmonster\nmonth\nmoon\nmoral\nmore\nmorning\nmosquito\nmother\nmotion\nmotor\nmountain\nmouse\nmove\nmovie\nmuch\nmuffin\nmule\nmultiply\nmuscle\nmuseum\nmushroom\nmusic\nmust\nmutual\nmyself\nmystery\nmyth\nnaive\nname\nnapkin\nnarrow\nnasty\nnation\nnature\nnear\nneck\nneed\nnegative\nneglect\nneither\nnephew\nnerve\nnest\nnet\nnetwork\nneutral\nnever\nnews\nnext\nnice\nnight\nnoble\nnoise\nnominee\nnoodle\nnormal\nnorth\nnose\nnotable\nnote\nnothing\nnotice\nnovel\nnow\nnuclear\nnumber\nnurse\nnut\noak\nobey\nobject\noblige\nobscure\nobserve\nobtain\nobvious\noccur\nocean\noctober\nodor\noff\noffer\noffice\noften\noil\nokay\nold\nolive\nolympic\nomit\nonce\none\nonion\nonline\nonly\nopen\nopera\nopinion\noppose\noption\norange\norbit\norchard\norder\nordinary\norgan\norient\noriginal\norphan\nostrich\nother\noutdoor\nouter\noutput\noutside\noval\noven\nover\nown\nowner\noxygen\noyster\nozone\npact\npaddle\npage\npair\npalace\npalm\npanda\npanel\npanic\npanther\npaper\nparade\nparent\npark\nparrot\nparty\npass\npatch\npath\npatient\npatrol\npattern\npause\npave\npayment\npeace\npeanut\npear\npeasant\npelican\npen\npenalty\npencil\npeople\npepper\nperfect\npermit\nperson\npet\nphone\nphoto\nphrase\nphysical\npiano\npicnic\npicture\npiece\npig\npigeon\npill\npilot\npink\npioneer\npipe\npistol\npitch\npizza\nplace\nplanet\nplastic\nplate\nplay\nplease\npledge\npluck\nplug\nplunge\npoem\npoet\npoint\npolar\npole\npolice\npond\npony\npool\npopular\nportion\nposition\npossible\npost\npotato\npottery\npoverty\npowder\npower\npractice\npraise\npredict\nprefer\nprepare\npresent\npretty\nprevent\nprice\npride\nprimary\nprint\npriority\nprison\nprivate\nprize\nproblem\nprocess\nproduce\nprofit\nprogram\nproject\npromote\nproof\nproperty\nprosper\nprotect\nproud\nprovide\npublic\npudding\npull\npulp\npulse\npumpkin\npunch\npupil\npuppy\npurchase\npurity\npurpose\npurse\npush\nput\npuzzle\npyramid\nquality\nquantum\nquarter\nquestion\nquick\nquit\nquiz\nquote\nrabbit\nraccoon\nrace\nrack\nradar\nradio\nrail\nrain\nraise\nrally\nramp\nranch\nrandom\nrange\nrapid\nrare\nrate\nrather\nraven\nraw\nrazor\nready\nreal\nreason\nrebel\nrebuild\nrecall\nreceive\nrecipe\nrecord\nrecycle\nreduce\nreflect\nreform\nrefuse\nregion\nregret\nregular\nreject\nrelax\nrelease\nrelief\nrely\nremain\nremember\nremind\nremove\nrender\nrenew\nrent\nreopen\nrepair\nrepeat\nreplace\nreport\nrequire\nrescue\nresemble\nresist\nresource\nresponse\nresult\nretire\nretreat\nreturn\nreunion\nreveal\nreview\nreward\nrhythm\nrib\nribbon\nrice\nrich\nride\nridge\nrifle\nright\nrigid\nring\nriot\nripple\nrisk\nritual\nrival\nriver\nroad\nroast\nrobot\nrobust\nrocket\nromance\nroof\nrookie\nroom\nrose\nrotate\nrough\nround\nroute\nroyal\nrubber\nrude\nrug\nrule\nrun\nrunway\nrural\nsad\nsaddle\nsadness\nsafe\nsail\nsalad\nsalmon\nsalon\nsalt\nsalute\nsame\nsample\nsand\nsatisfy\nsatoshi\nsauce\nsausage\nsave\nsay\nscale\nscan\nscare\nscatter\nscene\nscheme\nschool\nscience\nscissors\nscorpion\nscout\nscrap\nscreen\nscript\nscrub\nsea\nsearch\nseason\nseat\nsecond\nsecret\nsection\nsecurity\nseed\nseek\nsegment\nselect\nsell\nseminar\nsenior\nsense\nsentence\nseries\nservice\nsession\nsettle\nsetup\nseven\nshadow\nshaft\nshallow\nshare\nshed\nshell\nsheriff\nshield\nshift\nshine\nship\nshiver\nshock\nshoe\nshoot\nshop\nshort\nshoulder\nshove\nshrimp\nshrug\nshuffle\nshy\nsibling\nsick\nside\nsiege\nsight\nsign\nsilent\nsilk\nsilly\nsilver\nsimilar\nsimple\nsince\nsing\nsiren\nsister\nsituate\nsix\nsize\nskate\nsketch\nski\nskill\nskin\nskirt\nskull\nslab\nslam\nsleep\nslender\nslice\nslide\nslight\nslim\nslogan\nslot\nslow\nslush\nsmall\nsmart\nsmile\nsmoke\nsmooth\nsnack\nsnake\nsnap\nsniff\nsnow\nsoap\nsoccer\nsocial\nsock\nsoda\nsoft\nsolar\nsoldier\nsolid\nsolution\nsolve\nsomeone\nsong\nsoon\nsorry\nsort\nsoul\nsound\nsoup\nsource\nsouth\nspace\nspare\nspatial\nspawn\nspeak\nspecial\nspeed\nspell\nspend\nsphere\nspice\nspider\nspike\nspin\nspirit\nsplit\nspoil\nsponsor\nspoon\nsport\nspot\nspray\nspread\nspring\nspy\nsquare\nsqueeze\nsquirrel\nstable\nstadium\nstaff\nstage\nstairs\nstamp\nstand\nstart\nstate\nstay\nsteak\nsteel\nstem\nstep\nstereo\nstick\nstill\nsting\nstock\nstomach\nstone\nstool\nstory\nstove\nstrategy\nstreet\nstrike\nstrong\nstruggle\nstudent\nstuff\nstumble\nstyle\nsubject\nsubmit\nsubway\nsuccess\nsuch\nsudden\nsuffer\nsugar\nsuggest\nsuit\nsummer\nsun\nsunny\nsunset\nsuper\nsupply\nsupreme\nsure\nsurface\nsurge\nsurprise\nsurround\nsurvey\nsuspect\nsustain\nswallow\nswamp\nswap\nswarm\nswear\nsweet\nswift\nswim\nswing\nswitch\nsword\nsymbol\nsymptom\nsyrup\nsystem\ntable\ntackle\ntag\ntail\ntalent\ntalk\ntank\ntape\ntarget\ntask\ntaste\ntattoo\ntaxi\nteach\nteam\ntell\nten\ntenant\ntennis\ntent\nterm\ntest\ntext\nthank\nthat\ntheme\nthen\ntheory\nthere\nthey\nthing\nthis\nthought\nthree\nthrive\nthrow\nthumb\nthunder\nticket\ntide\ntiger\ntilt\ntimber\ntime\ntiny\ntip\ntired\ntissue\ntitle\ntoast\ntobacco\ntoday\ntoddler\ntoe\ntogether\ntoilet\ntoken\ntomato\ntomorrow\ntone\ntongue\ntonight\ntool\ntooth\ntop\ntopic\ntopple\ntorch\ntornado\ntortoise\ntoss\ntotal\ntourist\ntoward\ntower\ntown\ntoy\ntrack\ntrade\ntraffic\ntragic\ntrain\ntransfer\ntrap\ntrash\ntravel\ntray\ntreat\ntree\ntrend\ntrial\ntribe\ntrick\ntrigger\ntrim\ntrip\ntrophy\ntrouble\ntruck\ntrue\ntruly\ntrumpet\ntrust\ntruth\ntry\ntube\ntuition\ntumble\ntuna\ntunnel\nturkey\nturn\nturtle\ntwelve\ntwenty\ntwice\ntwin\ntwist\ntwo\ntype\ntypical\nugly\numbrella\nunable\nunaware\nuncle\nuncover\nunder\nundo\nunfair\nunfold\nunhappy\nuniform\nunique\nunit\nuniverse\nunknown\nunlock\nuntil\nunusual\nunveil\nupdate\nupgrade\nuphold\nupon\nupper\nupset\nurban\nurge\nusage\nuse\nused\nuseful\nuseless\nusual\nutility\nvacant\nvacuum\nvague\nvalid\nvalley\nvalve\nvan\nvanish\nvapor\nvarious\nvast\nvault\nvehicle\nvelvet\nvendor\nventure\nvenue\nverb\nverify\nversion\nvery\nvessel\nveteran\nviable\nvibrant\nvicious\nvictory\nvideo\nview\nvillage\nvintage\nviolin\nvirtual\nvirus\nvisa\nvisit\nvisual\nvital\nvivid\nvocal\nvoice\nvoid\nvolcano\nvolume\nvote\nvoyage\nwage\nwagon\nwait\nwalk\nwall\nwalnut\nwant\nwarfare\nwarm\nwarrior\nwash\nwasp\nwaste\nwater\nwave\nway\nwealth\nweapon\nwear\nweasel\nweather\nweb\nwedding\nweekend\nweird\nwelcome\nwest\nwet\nwhale\nwhat\nwheat\nwheel\nwhen\nwhere\nwhip\nwhisper\nwide\nwidth\nwife\nwild\nwill\nwin\nwindow\nwine\nwing\nwink\nwinner\nwinter\nwire\nwisdom\nwise\nwish\nwitness\nwolf\nwoman\nwonder\nwood\nwool\nword\nwork\nworld\nworry\nworth\nwrap\nwreck\nwrestle\nwrist\nwrite\nwrong\nyard\nyear\nyellow\nyou\nyoung\nyouth\nzebra\nzero\nzone\nzoo`.split('\\n');\n", "export const wordlist = `abaisser\nabandon\nabdiquer\nabeille\nabolir\naborder\naboutir\naboyer\nabrasif\nabreuver\nabriter\nabroger\nabrupt\nabsence\nabsolu\nabsurde\nabusif\nabyssal\nacadémie\nacajou\nacarien\naccabler\naccepter\nacclamer\naccolade\naccroche\naccuser\nacerbe\nachat\nacheter\naciduler\nacier\nacompte\nacquérir\nacronyme\nacteur\nactif\nactuel\nadepte\nadéquat\nadhésif\nadjectif\nadjuger\nadmettre\nadmirer\nadopter\nadorer\nadoucir\nadresse\nadroit\nadulte\nadverbe\naérer\naéronef\naffaire\naffecter\naffiche\naffreux\naffubler\nagacer\nagencer\nagile\nagiter\nagrafer\nagréable\nagrume\naider\naiguille\nailier\naimable\naisance\najouter\najuster\nalarmer\nalchimie\nalerte\nalgèbre\nalgue\naliéner\naliment\nalléger\nalliage\nallouer\nallumer\nalourdir\nalpaga\naltesse\nalvéole\namateur\nambigu\nambre\naménager\namertume\namidon\namiral\namorcer\namour\namovible\namphibie\nampleur\namusant\nanalyse\nanaphore\nanarchie\nanatomie\nancien\nanéantir\nangle\nangoisse\nanguleux\nanimal\nannexer\nannonce\nannuel\nanodin\nanomalie\nanonyme\nanormal\nantenne\nantidote\nanxieux\napaiser\napéritif\naplanir\napologie\nappareil\nappeler\napporter\nappuyer\naquarium\naqueduc\narbitre\narbuste\nardeur\nardoise\nargent\narlequin\narmature\narmement\narmoire\narmure\narpenter\narracher\narriver\narroser\narsenic\nartériel\narticle\naspect\nasphalte\naspirer\nassaut\nasservir\nassiette\nassocier\nassurer\nasticot\nastre\nastuce\natelier\natome\natrium\natroce\nattaque\nattentif\nattirer\nattraper\naubaine\nauberge\naudace\naudible\naugurer\naurore\nautomne\nautruche\navaler\navancer\navarice\navenir\naverse\naveugle\naviateur\navide\navion\naviser\navoine\navouer\navril\naxial\naxiome\nbadge\nbafouer\nbagage\nbaguette\nbaignade\nbalancer\nbalcon\nbaleine\nbalisage\nbambin\nbancaire\nbandage\nbanlieue\nbannière\nbanquier\nbarbier\nbaril\nbaron\nbarque\nbarrage\nbassin\nbastion\nbataille\nbateau\nbatterie\nbaudrier\nbavarder\nbelette\nbélier\nbelote\nbénéfice\nberceau\nberger\nberline\nbermuda\nbesace\nbesogne\nbétail\nbeurre\nbiberon\nbicycle\nbidule\nbijou\nbilan\nbilingue\nbillard\nbinaire\nbiologie\nbiopsie\nbiotype\nbiscuit\nbison\nbistouri\nbitume\nbizarre\nblafard\nblague\nblanchir\nblessant\nblinder\nblond\nbloquer\nblouson\nbobard\nbobine\nboire\nboiser\nbolide\nbonbon\nbondir\nbonheur\nbonifier\nbonus\nbordure\nborne\nbotte\nboucle\nboueux\nbougie\nboulon\nbouquin\nbourse\nboussole\nboutique\nboxeur\nbranche\nbrasier\nbrave\nbrebis\nbrèche\nbreuvage\nbricoler\nbrigade\nbrillant\nbrioche\nbrique\nbrochure\nbroder\nbronzer\nbrousse\nbroyeur\nbrume\nbrusque\nbrutal\nbruyant\nbuffle\nbuisson\nbulletin\nbureau\nburin\nbustier\nbutiner\nbutoir\nbuvable\nbuvette\ncabanon\ncabine\ncachette\ncadeau\ncadre\ncaféine\ncaillou\ncaisson\ncalculer\ncalepin\ncalibre\ncalmer\ncalomnie\ncalvaire\ncamarade\ncaméra\ncamion\ncampagne\ncanal\ncaneton\ncanon\ncantine\ncanular\ncapable\ncaporal\ncaprice\ncapsule\ncapter\ncapuche\ncarabine\ncarbone\ncaresser\ncaribou\ncarnage\ncarotte\ncarreau\ncarton\ncascade\ncasier\ncasque\ncassure\ncauser\ncaution\ncavalier\ncaverne\ncaviar\ncédille\nceinture\ncéleste\ncellule\ncendrier\ncensurer\ncentral\ncercle\ncérébral\ncerise\ncerner\ncerveau\ncesser\nchagrin\nchaise\nchaleur\nchambre\nchance\nchapitre\ncharbon\nchasseur\nchaton\nchausson\nchavirer\nchemise\nchenille\nchéquier\nchercher\ncheval\nchien\nchiffre\nchignon\nchimère\nchiot\nchlorure\nchocolat\nchoisir\nchose\nchouette\nchrome\nchute\ncigare\ncigogne\ncimenter\ncinéma\ncintrer\ncirculer\ncirer\ncirque\nciterne\ncitoyen\ncitron\ncivil\nclairon\nclameur\nclaquer\nclasse\nclavier\nclient\ncligner\nclimat\nclivage\ncloche\nclonage\ncloporte\ncobalt\ncobra\ncocasse\ncocotier\ncoder\ncodifier\ncoffre\ncogner\ncohésion\ncoiffer\ncoincer\ncolère\ncolibri\ncolline\ncolmater\ncolonel\ncombat\ncomédie\ncommande\ncompact\nconcert\nconduire\nconfier\ncongeler\nconnoter\nconsonne\ncontact\nconvexe\ncopain\ncopie\ncorail\ncorbeau\ncordage\ncorniche\ncorpus\ncorrect\ncortège\ncosmique\ncostume\ncoton\ncoude\ncoupure\ncourage\ncouteau\ncouvrir\ncoyote\ncrabe\ncrainte\ncravate\ncrayon\ncréature\ncréditer\ncrémeux\ncreuser\ncrevette\ncribler\ncrier\ncristal\ncritère\ncroire\ncroquer\ncrotale\ncrucial\ncruel\ncrypter\ncubique\ncueillir\ncuillère\ncuisine\ncuivre\nculminer\ncultiver\ncumuler\ncupide\ncuratif\ncurseur\ncyanure\ncycle\ncylindre\ncynique\ndaigner\ndamier\ndanger\ndanseur\ndauphin\ndébattre\ndébiter\ndéborder\ndébrider\ndébutant\ndécaler\ndécembre\ndéchirer\ndécider\ndéclarer\ndécorer\ndécrire\ndécupler\ndédale\ndéductif\ndéesse\ndéfensif\ndéfiler\ndéfrayer\ndégager\ndégivrer\ndéglutir\ndégrafer\ndéjeuner\ndélice\ndéloger\ndemander\ndemeurer\ndémolir\ndénicher\ndénouer\ndentelle\ndénuder\ndépart\ndépenser\ndéphaser\ndéplacer\ndéposer\ndéranger\ndérober\ndésastre\ndescente\ndésert\ndésigner\ndésobéir\ndessiner\ndestrier\ndétacher\ndétester\ndétourer\ndétresse\ndevancer\ndevenir\ndeviner\ndevoir\ndiable\ndialogue\ndiamant\ndicter\ndifférer\ndigérer\ndigital\ndigne\ndiluer\ndimanche\ndiminuer\ndioxyde\ndirectif\ndiriger\ndiscuter\ndisposer\ndissiper\ndistance\ndivertir\ndiviser\ndocile\ndocteur\ndogme\ndoigt\ndomaine\ndomicile\ndompter\ndonateur\ndonjon\ndonner\ndopamine\ndortoir\ndorure\ndosage\ndoseur\ndossier\ndotation\ndouanier\ndouble\ndouceur\ndouter\ndoyen\ndragon\ndraper\ndresser\ndribbler\ndroiture\nduperie\nduplexe\ndurable\ndurcir\ndynastie\néblouir\nécarter\nécharpe\néchelle\néclairer\néclipse\néclore\nécluse\nécole\néconomie\nécorce\nécouter\nécraser\nécrémer\nécrivain\nécrou\nécume\nécureuil\nédifier\néduquer\neffacer\neffectif\neffigie\neffort\neffrayer\neffusion\négaliser\négarer\néjecter\nélaborer\nélargir\nélectron\nélégant\néléphant\nélève\néligible\nélitisme\néloge\nélucider\néluder\nemballer\nembellir\nembryon\némeraude\némission\nemmener\némotion\némouvoir\nempereur\nemployer\nemporter\nemprise\némulsion\nencadrer\nenchère\nenclave\nencoche\nendiguer\nendosser\nendroit\nenduire\nénergie\nenfance\nenfermer\nenfouir\nengager\nengin\nenglober\nénigme\nenjamber\nenjeu\nenlever\nennemi\nennuyeux\nenrichir\nenrobage\nenseigne\nentasser\nentendre\nentier\nentourer\nentraver\nénumérer\nenvahir\nenviable\nenvoyer\nenzyme\néolien\népaissir\népargne\népatant\népaule\népicerie\népidémie\népier\népilogue\népine\népisode\népitaphe\népoque\népreuve\néprouver\népuisant\néquerre\néquipe\nériger\nérosion\nerreur\néruption\nescalier\nespadon\nespèce\nespiègle\nespoir\nesprit\nesquiver\nessayer\nessence\nessieu\nessorer\nestime\nestomac\nestrade\nétagère\nétaler\nétanche\nétatique\néteindre\nétendoir\néternel\néthanol\néthique\nethnie\nétirer\nétoffer\nétoile\nétonnant\nétourdir\nétrange\nétroit\nétude\neuphorie\névaluer\névasion\néventail\névidence\néviter\névolutif\névoquer\nexact\nexagérer\nexaucer\nexceller\nexcitant\nexclusif\nexcuse\nexécuter\nexemple\nexercer\nexhaler\nexhorter\nexigence\nexiler\nexister\nexotique\nexpédier\nexplorer\nexposer\nexprimer\nexquis\nextensif\nextraire\nexulter\nfable\nfabuleux\nfacette\nfacile\nfacture\nfaiblir\nfalaise\nfameux\nfamille\nfarceur\nfarfelu\nfarine\nfarouche\nfasciner\nfatal\nfatigue\nfaucon\nfautif\nfaveur\nfavori\nfébrile\nféconder\nfédérer\nfélin\nfemme\nfémur\nfendoir\nféodal\nfermer\nféroce\nferveur\nfestival\nfeuille\nfeutre\nfévrier\nfiasco\nficeler\nfictif\nfidèle\nfigure\nfilature\nfiletage\nfilière\nfilleul\nfilmer\nfilou\nfiltrer\nfinancer\nfinir\nfiole\nfirme\nfissure\nfixer\nflairer\nflamme\nflasque\nflatteur\nfléau\nflèche\nfleur\nflexion\nflocon\nflore\nfluctuer\nfluide\nfluvial\nfolie\nfonderie\nfongible\nfontaine\nforcer\nforgeron\nformuler\nfortune\nfossile\nfoudre\nfougère\nfouiller\nfoulure\nfourmi\nfragile\nfraise\nfranchir\nfrapper\nfrayeur\nfrégate\nfreiner\nfrelon\nfrémir\nfrénésie\nfrère\nfriable\nfriction\nfrisson\nfrivole\nfroid\nfromage\nfrontal\nfrotter\nfruit\nfugitif\nfuite\nfureur\nfurieux\nfurtif\nfusion\nfutur\ngagner\ngalaxie\ngalerie\ngambader\ngarantir\ngardien\ngarnir\ngarrigue\ngazelle\ngazon\ngéant\ngélatine\ngélule\ngendarme\ngénéral\ngénie\ngenou\ngentil\ngéologie\ngéomètre\ngéranium\ngerme\ngestuel\ngeyser\ngibier\ngicler\ngirafe\ngivre\nglace\nglaive\nglisser\nglobe\ngloire\nglorieux\ngolfeur\ngomme\ngonfler\ngorge\ngorille\ngoudron\ngouffre\ngoulot\ngoupille\ngourmand\ngoutte\ngraduel\ngraffiti\ngraine\ngrand\ngrappin\ngratuit\ngravir\ngrenat\ngriffure\ngriller\ngrimper\ngrogner\ngronder\ngrotte\ngroupe\ngruger\ngrutier\ngruyère\nguépard\nguerrier\nguide\nguimauve\nguitare\ngustatif\ngymnaste\ngyrostat\nhabitude\nhachoir\nhalte\nhameau\nhangar\nhanneton\nharicot\nharmonie\nharpon\nhasard\nhélium\nhématome\nherbe\nhérisson\nhermine\nhéron\nhésiter\nheureux\nhiberner\nhibou\nhilarant\nhistoire\nhiver\nhomard\nhommage\nhomogène\nhonneur\nhonorer\nhonteux\nhorde\nhorizon\nhorloge\nhormone\nhorrible\nhouleux\nhousse\nhublot\nhuileux\nhumain\nhumble\nhumide\nhumour\nhurler\nhydromel\nhygiène\nhymne\nhypnose\nidylle\nignorer\niguane\nillicite\nillusion\nimage\nimbiber\nimiter\nimmense\nimmobile\nimmuable\nimpact\nimpérial\nimplorer\nimposer\nimprimer\nimputer\nincarner\nincendie\nincident\nincliner\nincolore\nindexer\nindice\ninductif\ninédit\nineptie\ninexact\ninfini\ninfliger\ninformer\ninfusion\ningérer\ninhaler\ninhiber\ninjecter\ninjure\ninnocent\ninoculer\ninonder\ninscrire\ninsecte\ninsigne\ninsolite\ninspirer\ninstinct\ninsulter\nintact\nintense\nintime\nintrigue\nintuitif\ninutile\ninvasion\ninventer\ninviter\ninvoquer\nironique\nirradier\nirréel\nirriter\nisoler\nivoire\nivresse\njaguar\njaillir\njambe\njanvier\njardin\njauger\njaune\njavelot\njetable\njeton\njeudi\njeunesse\njoindre\njoncher\njongler\njoueur\njouissif\njournal\njovial\njoyau\njoyeux\njubiler\njugement\njunior\njupon\njuriste\njustice\njuteux\njuvénile\nkayak\nkimono\nkiosque\nlabel\nlabial\nlabourer\nlacérer\nlactose\nlagune\nlaine\nlaisser\nlaitier\nlambeau\nlamelle\nlampe\nlanceur\nlangage\nlanterne\nlapin\nlargeur\nlarme\nlaurier\nlavabo\nlavoir\nlecture\nlégal\nléger\nlégume\nlessive\nlettre\nlevier\nlexique\nlézard\nliasse\nlibérer\nlibre\nlicence\nlicorne\nliège\nlièvre\nligature\nligoter\nligue\nlimer\nlimite\nlimonade\nlimpide\nlinéaire\nlingot\nlionceau\nliquide\nlisière\nlister\nlithium\nlitige\nlittoral\nlivreur\nlogique\nlointain\nloisir\nlombric\nloterie\nlouer\nlourd\nloutre\nlouve\nloyal\nlubie\nlucide\nlucratif\nlueur\nlugubre\nluisant\nlumière\nlunaire\nlundi\nluron\nlutter\nluxueux\nmachine\nmagasin\nmagenta\nmagique\nmaigre\nmaillon\nmaintien\nmairie\nmaison\nmajorer\nmalaxer\nmaléfice\nmalheur\nmalice\nmallette\nmammouth\nmandater\nmaniable\nmanquant\nmanteau\nmanuel\nmarathon\nmarbre\nmarchand\nmardi\nmaritime\nmarqueur\nmarron\nmarteler\nmascotte\nmassif\nmatériel\nmatière\nmatraque\nmaudire\nmaussade\nmauve\nmaximal\nméchant\nméconnu\nmédaille\nmédecin\nméditer\nméduse\nmeilleur\nmélange\nmélodie\nmembre\nmémoire\nmenacer\nmener\nmenhir\nmensonge\nmentor\nmercredi\nmérite\nmerle\nmessager\nmesure\nmétal\nmétéore\nméthode\nmétier\nmeuble\nmiauler\nmicrobe\nmiette\nmignon\nmigrer\nmilieu\nmillion\nmimique\nmince\nminéral\nminimal\nminorer\nminute\nmiracle\nmiroiter\nmissile\nmixte\nmobile\nmoderne\nmoelleux\nmondial\nmoniteur\nmonnaie\nmonotone\nmonstre\nmontagne\nmonument\nmoqueur\nmorceau\nmorsure\nmortier\nmoteur\nmotif\nmouche\nmoufle\nmoulin\nmousson\nmouton\nmouvant\nmultiple\nmunition\nmuraille\nmurène\nmurmure\nmuscle\nmuséum\nmusicien\nmutation\nmuter\nmutuel\nmyriade\nmyrtille\nmystère\nmythique\nnageur\nnappe\nnarquois\nnarrer\nnatation\nnation\nnature\nnaufrage\nnautique\nnavire\nnébuleux\nnectar\nnéfaste\nnégation\nnégliger\nnégocier\nneige\nnerveux\nnettoyer\nneurone\nneutron\nneveu\nniche\nnickel\nnitrate\nniveau\nnoble\nnocif\nnocturne\nnoirceur\nnoisette\nnomade\nnombreux\nnommer\nnormatif\nnotable\nnotifier\nnotoire\nnourrir\nnouveau\nnovateur\nnovembre\nnovice\nnuage\nnuancer\nnuire\nnuisible\nnuméro\nnuptial\nnuque\nnutritif\nobéir\nobjectif\nobliger\nobscur\nobserver\nobstacle\nobtenir\nobturer\noccasion\noccuper\nocéan\noctobre\noctroyer\noctupler\noculaire\nodeur\nodorant\noffenser\nofficier\noffrir\nogive\noiseau\noisillon\nolfactif\nolivier\nombrage\nomettre\nonctueux\nonduler\nonéreux\nonirique\nopale\nopaque\nopérer\nopinion\nopportun\nopprimer\nopter\noptique\norageux\norange\norbite\nordonner\noreille\norgane\norgueil\norifice\nornement\norque\nortie\nosciller\nosmose\nossature\notarie\nouragan\nourson\noutil\noutrager\nouvrage\novation\noxyde\noxygène\nozone\npaisible\npalace\npalmarès\npalourde\npalper\npanache\npanda\npangolin\npaniquer\npanneau\npanorama\npantalon\npapaye\npapier\npapoter\npapyrus\nparadoxe\nparcelle\nparesse\nparfumer\nparler\nparole\nparrain\nparsemer\npartager\nparure\nparvenir\npassion\npastèque\npaternel\npatience\npatron\npavillon\npavoiser\npayer\npaysage\npeigne\npeintre\npelage\npélican\npelle\npelouse\npeluche\npendule\npénétrer\npénible\npensif\npénurie\npépite\npéplum\nperdrix\nperforer\npériode\npermuter\nperplexe\npersil\nperte\npeser\npétale\npetit\npétrir\npeuple\npharaon\nphobie\nphoque\nphoton\nphrase\nphysique\npiano\npictural\npièce\npierre\npieuvre\npilote\npinceau\npipette\npiquer\npirogue\npiscine\npiston\npivoter\npixel\npizza\nplacard\nplafond\nplaisir\nplaner\nplaque\nplastron\nplateau\npleurer\nplexus\npliage\nplomb\nplonger\npluie\nplumage\npochette\npoésie\npoète\npointe\npoirier\npoisson\npoivre\npolaire\npolicier\npollen\npolygone\npommade\npompier\nponctuel\npondérer\nponey\nportique\nposition\nposséder\nposture\npotager\npoteau\npotion\npouce\npoulain\npoumon\npourpre\npoussin\npouvoir\nprairie\npratique\nprécieux\nprédire\npréfixe\nprélude\nprénom\nprésence\nprétexte\nprévoir\nprimitif\nprince\nprison\npriver\nproblème\nprocéder\nprodige\nprofond\nprogrès\nproie\nprojeter\nprologue\npromener\npropre\nprospère\nprotéger\nprouesse\nproverbe\nprudence\npruneau\npsychose\npublic\npuceron\npuiser\npulpe\npulsar\npunaise\npunitif\npupitre\npurifier\npuzzle\npyramide\nquasar\nquerelle\nquestion\nquiétude\nquitter\nquotient\nracine\nraconter\nradieux\nragondin\nraideur\nraisin\nralentir\nrallonge\nramasser\nrapide\nrasage\nratisser\nravager\nravin\nrayonner\nréactif\nréagir\nréaliser\nréanimer\nrecevoir\nréciter\nréclamer\nrécolter\nrecruter\nreculer\nrecycler\nrédiger\nredouter\nrefaire\nréflexe\nréformer\nrefrain\nrefuge\nrégalien\nrégion\nréglage\nrégulier\nréitérer\nrejeter\nrejouer\nrelatif\nrelever\nrelief\nremarque\nremède\nremise\nremonter\nremplir\nremuer\nrenard\nrenfort\nrenifler\nrenoncer\nrentrer\nrenvoi\nreplier\nreporter\nreprise\nreptile\nrequin\nréserve\nrésineux\nrésoudre\nrespect\nrester\nrésultat\nrétablir\nretenir\nréticule\nretomber\nretracer\nréunion\nréussir\nrevanche\nrevivre\nrévolte\nrévulsif\nrichesse\nrideau\nrieur\nrigide\nrigoler\nrincer\nriposter\nrisible\nrisque\nrituel\nrival\nrivière\nrocheux\nromance\nrompre\nronce\nrondin\nroseau\nrosier\nrotatif\nrotor\nrotule\nrouge\nrouille\nrouleau\nroutine\nroyaume\nruban\nrubis\nruche\nruelle\nrugueux\nruiner\nruisseau\nruser\nrustique\nrythme\nsabler\nsaboter\nsabre\nsacoche\nsafari\nsagesse\nsaisir\nsalade\nsalive\nsalon\nsaluer\nsamedi\nsanction\nsanglier\nsarcasme\nsardine\nsaturer\nsaugrenu\nsaumon\nsauter\nsauvage\nsavant\nsavonner\nscalpel\nscandale\nscélérat\nscénario\nsceptre\nschéma\nscience\nscinder\nscore\nscrutin\nsculpter\nséance\nsécable\nsécher\nsecouer\nsécréter\nsédatif\nséduire\nseigneur\nséjour\nsélectif\nsemaine\nsembler\nsemence\nséminal\nsénateur\nsensible\nsentence\nséparer\nséquence\nserein\nsergent\nsérieux\nserrure\nsérum\nservice\nsésame\nsévir\nsevrage\nsextuple\nsidéral\nsiècle\nsiéger\nsiffler\nsigle\nsignal\nsilence\nsilicium\nsimple\nsincère\nsinistre\nsiphon\nsirop\nsismique\nsituer\nskier\nsocial\nsocle\nsodium\nsoigneux\nsoldat\nsoleil\nsolitude\nsoluble\nsombre\nsommeil\nsomnoler\nsonde\nsongeur\nsonnette\nsonore\nsorcier\nsortir\nsosie\nsottise\nsoucieux\nsoudure\nsouffle\nsoulever\nsoupape\nsource\nsoutirer\nsouvenir\nspacieux\nspatial\nspécial\nsphère\nspiral\nstable\nstation\nsternum\nstimulus\nstipuler\nstrict\nstudieux\nstupeur\nstyliste\nsublime\nsubstrat\nsubtil\nsubvenir\nsuccès\nsucre\nsuffixe\nsuggérer\nsuiveur\nsulfate\nsuperbe\nsupplier\nsurface\nsuricate\nsurmener\nsurprise\nsursaut\nsurvie\nsuspect\nsyllabe\nsymbole\nsymétrie\nsynapse\nsyntaxe\nsystème\ntabac\ntablier\ntactile\ntailler\ntalent\ntalisman\ntalonner\ntambour\ntamiser\ntangible\ntapis\ntaquiner\ntarder\ntarif\ntartine\ntasse\ntatami\ntatouage\ntaupe\ntaureau\ntaxer\ntémoin\ntemporel\ntenaille\ntendre\nteneur\ntenir\ntension\nterminer\nterne\nterrible\ntétine\ntexte\nthème\nthéorie\nthérapie\nthorax\ntibia\ntiède\ntimide\ntirelire\ntiroir\ntissu\ntitane\ntitre\ntituber\ntoboggan\ntolérant\ntomate\ntonique\ntonneau\ntoponyme\ntorche\ntordre\ntornade\ntorpille\ntorrent\ntorse\ntortue\ntotem\ntoucher\ntournage\ntousser\ntoxine\ntraction\ntrafic\ntragique\ntrahir\ntrain\ntrancher\ntravail\ntrèfle\ntremper\ntrésor\ntreuil\ntriage\ntribunal\ntricoter\ntrilogie\ntriomphe\ntripler\ntriturer\ntrivial\ntrombone\ntronc\ntropical\ntroupeau\ntuile\ntulipe\ntumulte\ntunnel\nturbine\ntuteur\ntutoyer\ntuyau\ntympan\ntyphon\ntypique\ntyran\nubuesque\nultime\nultrason\nunanime\nunifier\nunion\nunique\nunitaire\nunivers\nuranium\nurbain\nurticant\nusage\nusine\nusuel\nusure\nutile\nutopie\nvacarme\nvaccin\nvagabond\nvague\nvaillant\nvaincre\nvaisseau\nvalable\nvalise\nvallon\nvalve\nvampire\nvanille\nvapeur\nvarier\nvaseux\nvassal\nvaste\nvecteur\nvedette\nvégétal\nvéhicule\nveinard\nvéloce\nvendredi\nvénérer\nvenger\nvenimeux\nventouse\nverdure\nvérin\nvernir\nverrou\nverser\nvertu\nveston\nvétéran\nvétuste\nvexant\nvexer\nviaduc\nviande\nvictoire\nvidange\nvidéo\nvignette\nvigueur\nvilain\nvillage\nvinaigre\nviolon\nvipère\nvirement\nvirtuose\nvirus\nvisage\nviseur\nvision\nvisqueux\nvisuel\nvital\nvitesse\nviticole\nvitrine\nvivace\nvivipare\nvocation\nvoguer\nvoile\nvoisin\nvoiture\nvolaille\nvolcan\nvoltiger\nvolume\nvorace\nvortex\nvoter\nvouloir\nvoyage\nvoyelle\nwagon\nxénon\nyacht\nzèbre\nzénith\nzeste\nzoologie`.split('\\n');\n", "export const wordlist = `abaco\nabbaglio\nabbinato\nabete\nabisso\nabolire\nabrasivo\nabrogato\naccadere\naccenno\naccusato\nacetone\nachille\nacido\nacqua\nacre\nacrilico\nacrobata\nacuto\nadagio\naddebito\naddome\nadeguato\naderire\nadipe\nadottare\nadulare\naffabile\naffetto\naffisso\naffranto\naforisma\nafoso\nafricano\nagave\nagente\nagevole\naggancio\nagire\nagitare\nagonismo\nagricolo\nagrumeto\naguzzo\nalabarda\nalato\nalbatro\nalberato\nalbo\nalbume\nalce\nalcolico\nalettone\nalfa\nalgebra\naliante\nalibi\nalimento\nallagato\nallegro\nallievo\nallodola\nallusivo\nalmeno\nalogeno\nalpaca\nalpestre\naltalena\nalterno\nalticcio\naltrove\nalunno\nalveolo\nalzare\namalgama\namanita\namarena\nambito\nambrato\nameba\namerica\nametista\namico\nammasso\nammenda\nammirare\nammonito\namore\nampio\nampliare\namuleto\nanacardo\nanagrafe\nanalista\nanarchia\nanatra\nanca\nancella\nancora\nandare\nandrea\nanello\nangelo\nangolare\nangusto\nanima\nannegare\nannidato\nanno\nannuncio\nanonimo\nanticipo\nanzi\napatico\napertura\napode\napparire\nappetito\nappoggio\napprodo\nappunto\naprile\narabica\narachide\naragosta\naraldica\narancio\naratura\narazzo\narbitro\narchivio\nardito\narenile\nargento\nargine\narguto\naria\narmonia\narnese\narredato\narringa\narrosto\narsenico\narso\nartefice\narzillo\nasciutto\nascolto\nasepsi\nasettico\nasfalto\nasino\nasola\naspirato\naspro\nassaggio\nasse\nassoluto\nassurdo\nasta\nastenuto\nastice\nastratto\natavico\nateismo\natomico\natono\nattesa\nattivare\nattorno\nattrito\nattuale\nausilio\naustria\nautista\nautonomo\nautunno\navanzato\navere\navvenire\navviso\navvolgere\nazione\nazoto\nazzimo\nazzurro\nbabele\nbaccano\nbacino\nbaco\nbadessa\nbadilata\nbagnato\nbaita\nbalcone\nbaldo\nbalena\nballata\nbalzano\nbambino\nbandire\nbaraonda\nbarbaro\nbarca\nbaritono\nbarlume\nbarocco\nbasilico\nbasso\nbatosta\nbattuto\nbaule\nbava\nbavosa\nbecco\nbeffa\nbelgio\nbelva\nbenda\nbenevole\nbenigno\nbenzina\nbere\nberlina\nbeta\nbibita\nbici\nbidone\nbifido\nbiga\nbilancia\nbimbo\nbinocolo\nbiologo\nbipede\nbipolare\nbirbante\nbirra\nbiscotto\nbisesto\nbisnonno\nbisonte\nbisturi\nbizzarro\nblando\nblatta\nbollito\nbonifico\nbordo\nbosco\nbotanico\nbottino\nbozzolo\nbraccio\nbradipo\nbrama\nbranca\nbravura\nbretella\nbrevetto\nbrezza\nbriglia\nbrillante\nbrindare\nbroccolo\nbrodo\nbronzina\nbrullo\nbruno\nbubbone\nbuca\nbudino\nbuffone\nbuio\nbulbo\nbuono\nburlone\nburrasca\nbussola\nbusta\ncadetto\ncaduco\ncalamaro\ncalcolo\ncalesse\ncalibro\ncalmo\ncaloria\ncambusa\ncamerata\ncamicia\ncammino\ncamola\ncampale\ncanapa\ncandela\ncane\ncanino\ncanotto\ncantina\ncapace\ncapello\ncapitolo\ncapogiro\ncappero\ncapra\ncapsula\ncarapace\ncarcassa\ncardo\ncarisma\ncarovana\ncarretto\ncartolina\ncasaccio\ncascata\ncaserma\ncaso\ncassone\ncastello\ncasuale\ncatasta\ncatena\ncatrame\ncauto\ncavillo\ncedibile\ncedrata\ncefalo\ncelebre\ncellulare\ncena\ncenone\ncentesimo\nceramica\ncercare\ncerto\ncerume\ncervello\ncesoia\ncespo\nceto\nchela\nchiaro\nchicca\nchiedere\nchimera\nchina\nchirurgo\nchitarra\nciao\nciclismo\ncifrare\ncigno\ncilindro\nciottolo\ncirca\ncirrosi\ncitrico\ncittadino\nciuffo\ncivetta\ncivile\nclassico\nclinica\ncloro\ncocco\ncodardo\ncodice\ncoerente\ncognome\ncollare\ncolmato\ncolore\ncolposo\ncoltivato\ncolza\ncoma\ncometa\ncommando\ncomodo\ncomputer\ncomune\nconciso\ncondurre\nconferma\ncongelare\nconiuge\nconnesso\nconoscere\nconsumo\ncontinuo\nconvegno\ncoperto\ncopione\ncoppia\ncopricapo\ncorazza\ncordata\ncoricato\ncornice\ncorolla\ncorpo\ncorredo\ncorsia\ncortese\ncosmico\ncostante\ncottura\ncovato\ncratere\ncravatta\ncreato\ncredere\ncremoso\ncrescita\ncreta\ncriceto\ncrinale\ncrisi\ncritico\ncroce\ncronaca\ncrostata\ncruciale\ncrusca\ncucire\ncuculo\ncugino\ncullato\ncupola\ncuratore\ncursore\ncurvo\ncuscino\ncustode\ndado\ndaino\ndalmata\ndamerino\ndaniela\ndannoso\ndanzare\ndatato\ndavanti\ndavvero\ndebutto\ndecennio\ndeciso\ndeclino\ndecollo\ndecreto\ndedicato\ndefinito\ndeforme\ndegno\ndelegare\ndelfino\ndelirio\ndelta\ndemenza\ndenotato\ndentro\ndeposito\nderapata\nderivare\nderoga\ndescritto\ndeserto\ndesiderio\ndesumere\ndetersivo\ndevoto\ndiametro\ndicembre\ndiedro\ndifeso\ndiffuso\ndigerire\ndigitale\ndiluvio\ndinamico\ndinnanzi\ndipinto\ndiploma\ndipolo\ndiradare\ndire\ndirotto\ndirupo\ndisagio\ndiscreto\ndisfare\ndisgelo\ndisposto\ndistanza\ndisumano\ndito\ndivano\ndivelto\ndividere\ndivorato\ndoblone\ndocente\ndoganale\ndogma\ndolce\ndomato\ndomenica\ndominare\ndondolo\ndono\ndormire\ndote\ndottore\ndovuto\ndozzina\ndrago\ndruido\ndubbio\ndubitare\nducale\nduna\nduomo\nduplice\nduraturo\nebano\neccesso\necco\neclissi\neconomia\nedera\nedicola\nedile\neditoria\neducare\negemonia\negli\negoismo\negregio\nelaborato\nelargire\nelegante\nelencato\neletto\nelevare\nelfico\nelica\nelmo\nelsa\neluso\nemanato\nemblema\nemesso\nemiro\nemotivo\nemozione\nempirico\nemulo\nendemico\nenduro\nenergia\nenfasi\nenoteca\nentrare\nenzima\nepatite\nepilogo\nepisodio\nepocale\neppure\nequatore\nerario\nerba\nerboso\nerede\neremita\nerigere\nermetico\neroe\nerosivo\nerrante\nesagono\nesame\nesanime\nesaudire\nesca\nesempio\nesercito\nesibito\nesigente\nesistere\nesito\nesofago\nesortato\nesoso\nespanso\nespresso\nessenza\nesso\nesteso\nestimare\nestonia\nestroso\nesultare\netilico\netnico\netrusco\netto\neuclideo\neuropa\nevaso\nevidenza\nevitato\nevoluto\nevviva\nfabbrica\nfaccenda\nfachiro\nfalco\nfamiglia\nfanale\nfanfara\nfango\nfantasma\nfare\nfarfalla\nfarinoso\nfarmaco\nfascia\nfastoso\nfasullo\nfaticare\nfato\nfavoloso\nfebbre\nfecola\nfede\nfegato\nfelpa\nfeltro\nfemmina\nfendere\nfenomeno\nfermento\nferro\nfertile\nfessura\nfestivo\nfetta\nfeudo\nfiaba\nfiducia\nfifa\nfigurato\nfilo\nfinanza\nfinestra\nfinire\nfiore\nfiscale\nfisico\nfiume\nflacone\nflamenco\nflebo\nflemma\nflorido\nfluente\nfluoro\nfobico\nfocaccia\nfocoso\nfoderato\nfoglio\nfolata\nfolclore\nfolgore\nfondente\nfonetico\nfonia\nfontana\nforbito\nforchetta\nforesta\nformica\nfornaio\nforo\nfortezza\nforzare\nfosfato\nfosso\nfracasso\nfrana\nfrassino\nfratello\nfreccetta\nfrenata\nfresco\nfrigo\nfrollino\nfronde\nfrugale\nfrutta\nfucilata\nfucsia\nfuggente\nfulmine\nfulvo\nfumante\nfumetto\nfumoso\nfune\nfunzione\nfuoco\nfurbo\nfurgone\nfurore\nfuso\nfutile\ngabbiano\ngaffe\ngalateo\ngallina\ngaloppo\ngambero\ngamma\ngaranzia\ngarbo\ngarofano\ngarzone\ngasdotto\ngasolio\ngastrico\ngatto\ngaudio\ngazebo\ngazzella\ngeco\ngelatina\ngelso\ngemello\ngemmato\ngene\ngenitore\ngennaio\ngenotipo\ngergo\nghepardo\nghiaccio\nghisa\ngiallo\ngilda\nginepro\ngiocare\ngioiello\ngiorno\ngiove\ngirato\ngirone\ngittata\ngiudizio\ngiurato\ngiusto\nglobulo\nglutine\ngnomo\ngobba\ngolf\ngomito\ngommone\ngonfio\ngonna\ngoverno\ngracile\ngrado\ngrafico\ngrammo\ngrande\ngrattare\ngravoso\ngrazia\ngreca\ngregge\ngrifone\ngrigio\ngrinza\ngrotta\ngruppo\nguadagno\nguaio\nguanto\nguardare\ngufo\nguidare\nibernato\nicona\nidentico\nidillio\nidolo\nidra\nidrico\nidrogeno\nigiene\nignaro\nignorato\nilare\nilleso\nillogico\nilludere\nimballo\nimbevuto\nimbocco\nimbuto\nimmane\nimmerso\nimmolato\nimpacco\nimpeto\nimpiego\nimporto\nimpronta\ninalare\ninarcare\ninattivo\nincanto\nincendio\ninchino\nincisivo\nincluso\nincontro\nincrocio\nincubo\nindagine\nindia\nindole\ninedito\ninfatti\ninfilare\ninflitto\ningaggio\ningegno\ninglese\ningordo\ningrosso\ninnesco\ninodore\ninoltrare\ninondato\ninsano\ninsetto\ninsieme\ninsonnia\ninsulina\nintasato\nintero\nintonaco\nintuito\ninumidire\ninvalido\ninvece\ninvito\niperbole\nipnotico\nipotesi\nippica\niride\nirlanda\nironico\nirrigato\nirrorare\nisolato\nisotopo\nisterico\nistituto\nistrice\nitalia\niterare\nlabbro\nlabirinto\nlacca\nlacerato\nlacrima\nlacuna\nladdove\nlago\nlampo\nlancetta\nlanterna\nlardoso\nlarga\nlaringe\nlastra\nlatenza\nlatino\nlattuga\nlavagna\nlavoro\nlegale\nleggero\nlembo\nlentezza\nlenza\nleone\nlepre\nlesivo\nlessato\nlesto\nletterale\nleva\nlevigato\nlibero\nlido\nlievito\nlilla\nlimatura\nlimitare\nlimpido\nlineare\nlingua\nliquido\nlira\nlirica\nlisca\nlite\nlitigio\nlivrea\nlocanda\nlode\nlogica\nlombare\nlondra\nlongevo\nloquace\nlorenzo\nloto\nlotteria\nluce\nlucidato\nlumaca\nluminoso\nlungo\nlupo\nluppolo\nlusinga\nlusso\nlutto\nmacabro\nmacchina\nmacero\nmacinato\nmadama\nmagico\nmaglia\nmagnete\nmagro\nmaiolica\nmalafede\nmalgrado\nmalinteso\nmalsano\nmalto\nmalumore\nmana\nmancia\nmandorla\nmangiare\nmanifesto\nmannaro\nmanovra\nmansarda\nmantide\nmanubrio\nmappa\nmaratona\nmarcire\nmaretta\nmarmo\nmarsupio\nmaschera\nmassaia\nmastino\nmaterasso\nmatricola\nmattone\nmaturo\nmazurca\nmeandro\nmeccanico\nmecenate\nmedesimo\nmeditare\nmega\nmelassa\nmelis\nmelodia\nmeninge\nmeno\nmensola\nmercurio\nmerenda\nmerlo\nmeschino\nmese\nmessere\nmestolo\nmetallo\nmetodo\nmettere\nmiagolare\nmica\nmicelio\nmichele\nmicrobo\nmidollo\nmiele\nmigliore\nmilano\nmilite\nmimosa\nminerale\nmini\nminore\nmirino\nmirtillo\nmiscela\nmissiva\nmisto\nmisurare\nmitezza\nmitigare\nmitra\nmittente\nmnemonico\nmodello\nmodifica\nmodulo\nmogano\nmogio\nmole\nmolosso\nmonastero\nmonco\nmondina\nmonetario\nmonile\nmonotono\nmonsone\nmontato\nmonviso\nmora\nmordere\nmorsicato\nmostro\nmotivato\nmotosega\nmotto\nmovenza\nmovimento\nmozzo\nmucca\nmucosa\nmuffa\nmughetto\nmugnaio\nmulatto\nmulinello\nmultiplo\nmummia\nmunto\nmuovere\nmurale\nmusa\nmuscolo\nmusica\nmutevole\nmuto\nnababbo\nnafta\nnanometro\nnarciso\nnarice\nnarrato\nnascere\nnastrare\nnaturale\nnautica\nnaviglio\nnebulosa\nnecrosi\nnegativo\nnegozio\nnemmeno\nneofita\nneretto\nnervo\nnessuno\nnettuno\nneutrale\nneve\nnevrotico\nnicchia\nninfa\nnitido\nnobile\nnocivo\nnodo\nnome\nnomina\nnordico\nnormale\nnorvegese\nnostrano\nnotare\nnotizia\nnotturno\nnovella\nnucleo\nnulla\nnumero\nnuovo\nnutrire\nnuvola\nnuziale\noasi\nobbedire\nobbligo\nobelisco\noblio\nobolo\nobsoleto\noccasione\nocchio\noccidente\noccorrere\noccultare\nocra\noculato\nodierno\nodorare\nofferta\noffrire\noffuscato\noggetto\noggi\nognuno\nolandese\nolfatto\noliato\noliva\nologramma\noltre\nomaggio\nombelico\nombra\nomega\nomissione\nondoso\nonere\nonice\nonnivoro\nonorevole\nonta\noperato\nopinione\nopposto\noracolo\norafo\nordine\norecchino\norefice\norfano\norganico\norigine\norizzonte\norma\normeggio\nornativo\norologio\norrendo\norribile\nortensia\nortica\norzata\norzo\nosare\noscurare\nosmosi\nospedale\nospite\nossa\nossidare\nostacolo\noste\notite\notre\nottagono\nottimo\nottobre\novale\novest\novino\noviparo\novocito\novunque\novviare\nozio\npacchetto\npace\npacifico\npadella\npadrone\npaese\npaga\npagina\npalazzina\npalesare\npallido\npalo\npalude\npandoro\npannello\npaolo\npaonazzo\npaprica\nparabola\nparcella\nparere\npargolo\npari\nparlato\nparola\npartire\nparvenza\nparziale\npassivo\npasticca\npatacca\npatologia\npattume\npavone\npeccato\npedalare\npedonale\npeggio\npeloso\npenare\npendice\npenisola\npennuto\npenombra\npensare\npentola\npepe\npepita\nperbene\npercorso\nperdonato\nperforare\npergamena\nperiodo\npermesso\nperno\nperplesso\npersuaso\npertugio\npervaso\npesatore\npesista\npeso\npestifero\npetalo\npettine\npetulante\npezzo\npiacere\npianta\npiattino\npiccino\npicozza\npiega\npietra\npiffero\npigiama\npigolio\npigro\npila\npilifero\npillola\npilota\npimpante\npineta\npinna\npinolo\npioggia\npiombo\npiramide\npiretico\npirite\npirolisi\npitone\npizzico\nplacebo\nplanare\nplasma\nplatano\nplenario\npochezza\npoderoso\npodismo\npoesia\npoggiare\npolenta\npoligono\npollice\npolmonite\npolpetta\npolso\npoltrona\npolvere\npomice\npomodoro\nponte\npopoloso\nporfido\nporoso\nporpora\nporre\nportata\nposa\npositivo\npossesso\npostulato\npotassio\npotere\npranzo\nprassi\npratica\nprecluso\npredica\nprefisso\npregiato\nprelievo\npremere\nprenotare\npreparato\npresenza\npretesto\nprevalso\nprima\nprincipe\nprivato\nproblema\nprocura\nprodurre\nprofumo\nprogetto\nprolunga\npromessa\npronome\nproposta\nproroga\nproteso\nprova\nprudente\nprugna\nprurito\npsiche\npubblico\npudica\npugilato\npugno\npulce\npulito\npulsante\npuntare\npupazzo\npupilla\npuro\nquadro\nqualcosa\nquasi\nquerela\nquota\nraccolto\nraddoppio\nradicale\nradunato\nraffica\nragazzo\nragione\nragno\nramarro\nramingo\nramo\nrandagio\nrantolare\nrapato\nrapina\nrappreso\nrasatura\nraschiato\nrasente\nrassegna\nrastrello\nrata\nravveduto\nreale\nrecepire\nrecinto\nrecluta\nrecondito\nrecupero\nreddito\nredimere\nregalato\nregistro\nregola\nregresso\nrelazione\nremare\nremoto\nrenna\nreplica\nreprimere\nreputare\nresa\nresidente\nresponso\nrestauro\nrete\nretina\nretorica\nrettifica\nrevocato\nriassunto\nribadire\nribelle\nribrezzo\nricarica\nricco\nricevere\nriciclato\nricordo\nricreduto\nridicolo\nridurre\nrifasare\nriflesso\nriforma\nrifugio\nrigare\nrigettato\nrighello\nrilassato\nrilevato\nrimanere\nrimbalzo\nrimedio\nrimorchio\nrinascita\nrincaro\nrinforzo\nrinnovo\nrinomato\nrinsavito\nrintocco\nrinuncia\nrinvenire\nriparato\nripetuto\nripieno\nriportare\nripresa\nripulire\nrisata\nrischio\nriserva\nrisibile\nriso\nrispetto\nristoro\nrisultato\nrisvolto\nritardo\nritegno\nritmico\nritrovo\nriunione\nriva\nriverso\nrivincita\nrivolto\nrizoma\nroba\nrobotico\nrobusto\nroccia\nroco\nrodaggio\nrodere\nroditore\nrogito\nrollio\nromantico\nrompere\nronzio\nrosolare\nrospo\nrotante\nrotondo\nrotula\nrovescio\nrubizzo\nrubrica\nruga\nrullino\nrumine\nrumoroso\nruolo\nrupe\nrussare\nrustico\nsabato\nsabbiare\nsabotato\nsagoma\nsalasso\nsaldatura\nsalgemma\nsalivare\nsalmone\nsalone\nsaltare\nsaluto\nsalvo\nsapere\nsapido\nsaporito\nsaraceno\nsarcasmo\nsarto\nsassoso\nsatellite\nsatira\nsatollo\nsaturno\nsavana\nsavio\nsaziato\nsbadiglio\nsbalzo\nsbancato\nsbarra\nsbattere\nsbavare\nsbendare\nsbirciare\nsbloccato\nsbocciato\nsbrinare\nsbruffone\nsbuffare\nscabroso\nscadenza\nscala\nscambiare\nscandalo\nscapola\nscarso\nscatenare\nscavato\nscelto\nscenico\nscettro\nscheda\nschiena\nsciarpa\nscienza\nscindere\nscippo\nsciroppo\nscivolo\nsclerare\nscodella\nscolpito\nscomparto\nsconforto\nscoprire\nscorta\nscossone\nscozzese\nscriba\nscrollare\nscrutinio\nscuderia\nscultore\nscuola\nscuro\nscusare\nsdebitare\nsdoganare\nseccatura\nsecondo\nsedano\nseggiola\nsegnalato\nsegregato\nseguito\nselciato\nselettivo\nsella\nselvaggio\nsemaforo\nsembrare\nseme\nseminato\nsempre\nsenso\nsentire\nsepolto\nsequenza\nserata\nserbato\nsereno\nserio\nserpente\nserraglio\nservire\nsestina\nsetola\nsettimana\nsfacelo\nsfaldare\nsfamato\nsfarzoso\nsfaticato\nsfera\nsfida\nsfilato\nsfinge\nsfocato\nsfoderare\nsfogo\nsfoltire\nsforzato\nsfratto\nsfruttato\nsfuggito\nsfumare\nsfuso\nsgabello\nsgarbato\nsgonfiare\nsgorbio\nsgrassato\nsguardo\nsibilo\nsiccome\nsierra\nsigla\nsignore\nsilenzio\nsillaba\nsimbolo\nsimpatico\nsimulato\nsinfonia\nsingolo\nsinistro\nsino\nsintesi\nsinusoide\nsipario\nsisma\nsistole\nsituato\nslitta\nslogatura\nsloveno\nsmarrito\nsmemorato\nsmentito\nsmeraldo\nsmilzo\nsmontare\nsmottato\nsmussato\nsnellire\nsnervato\nsnodo\nsobbalzo\nsobrio\nsoccorso\nsociale\nsodale\nsoffitto\nsogno\nsoldato\nsolenne\nsolido\nsollazzo\nsolo\nsolubile\nsolvente\nsomatico\nsomma\nsonda\nsonetto\nsonnifero\nsopire\nsoppeso\nsopra\nsorgere\nsorpasso\nsorriso\nsorso\nsorteggio\nsorvolato\nsospiro\nsosta\nsottile\nspada\nspalla\nspargere\nspatola\nspavento\nspazzola\nspecie\nspedire\nspegnere\nspelatura\nsperanza\nspessore\nspettrale\nspezzato\nspia\nspigoloso\nspillato\nspinoso\nspirale\nsplendido\nsportivo\nsposo\nspranga\nsprecare\nspronato\nspruzzo\nspuntino\nsquillo\nsradicare\nsrotolato\nstabile\nstacco\nstaffa\nstagnare\nstampato\nstantio\nstarnuto\nstasera\nstatuto\nstelo\nsteppa\nsterzo\nstiletto\nstima\nstirpe\nstivale\nstizzoso\nstonato\nstorico\nstrappo\nstregato\nstridulo\nstrozzare\nstrutto\nstuccare\nstufo\nstupendo\nsubentro\nsuccoso\nsudore\nsuggerito\nsugo\nsultano\nsuonare\nsuperbo\nsupporto\nsurgelato\nsurrogato\nsussurro\nsutura\nsvagare\nsvedese\nsveglio\nsvelare\nsvenuto\nsvezia\nsviluppo\nsvista\nsvizzera\nsvolta\nsvuotare\ntabacco\ntabulato\ntacciare\ntaciturno\ntale\ntalismano\ntampone\ntannino\ntara\ntardivo\ntargato\ntariffa\ntarpare\ntartaruga\ntasto\ntattico\ntaverna\ntavolata\ntazza\nteca\ntecnico\ntelefono\ntemerario\ntempo\ntemuto\ntendone\ntenero\ntensione\ntentacolo\nteorema\nterme\nterrazzo\nterzetto\ntesi\ntesserato\ntestato\ntetro\ntettoia\ntifare\ntigella\ntimbro\ntinto\ntipico\ntipografo\ntiraggio\ntiro\ntitanio\ntitolo\ntitubante\ntizio\ntizzone\ntoccare\ntollerare\ntolto\ntombola\ntomo\ntonfo\ntonsilla\ntopazio\ntopologia\ntoppa\ntorba\ntornare\ntorrone\ntortora\ntoscano\ntossire\ntostatura\ntotano\ntrabocco\ntrachea\ntrafila\ntragedia\ntralcio\ntramonto\ntransito\ntrapano\ntrarre\ntrasloco\ntrattato\ntrave\ntreccia\ntremolio\ntrespolo\ntributo\ntricheco\ntrifoglio\ntrillo\ntrincea\ntrio\ntristezza\ntriturato\ntrivella\ntromba\ntrono\ntroppo\ntrottola\ntrovare\ntruccato\ntubatura\ntuffato\ntulipano\ntumulto\ntunisia\nturbare\nturchino\ntuta\ntutela\nubicato\nuccello\nuccisore\nudire\nuditivo\nuffa\nufficio\nuguale\nulisse\nultimato\numano\numile\numorismo\nuncinetto\nungere\nungherese\nunicorno\nunificato\nunisono\nunitario\nunte\nuovo\nupupa\nuragano\nurgenza\nurlo\nusanza\nusato\nuscito\nusignolo\nusuraio\nutensile\nutilizzo\nutopia\nvacante\nvaccinato\nvagabondo\nvagliato\nvalanga\nvalgo\nvalico\nvalletta\nvaloroso\nvalutare\nvalvola\nvampata\nvangare\nvanitoso\nvano\nvantaggio\nvanvera\nvapore\nvarano\nvarcato\nvariante\nvasca\nvedetta\nvedova\nveduto\nvegetale\nveicolo\nvelcro\nvelina\nvelluto\nveloce\nvenato\nvendemmia\nvento\nverace\nverbale\nvergogna\nverifica\nvero\nverruca\nverticale\nvescica\nvessillo\nvestale\nveterano\nvetrina\nvetusto\nviandante\nvibrante\nvicenda\nvichingo\nvicinanza\nvidimare\nvigilia\nvigneto\nvigore\nvile\nvillano\nvimini\nvincitore\nviola\nvipera\nvirgola\nvirologo\nvirulento\nviscoso\nvisione\nvispo\nvissuto\nvisura\nvita\nvitello\nvittima\nvivanda\nvivido\nviziare\nvoce\nvoga\nvolatile\nvolere\nvolpe\nvoragine\nvulcano\nzampogna\nzanna\nzappato\nzattera\nzavorra\nzefiro\nzelante\nzelo\nzenzero\nzerbino\nzibetto\nzinco\nzircone\nzitto\nzolla\nzotico\nzucchero\nzufolo\nzulu\nzuppa`.split('\\n');\n", "export const wordlist = `あいこくしん\nあいさつ\nあいだ\nあおぞら\nあかちゃん\nあきる\nあけがた\nあける\nあこがれる\nあさい\nあさひ\nあしあと\nあじわう\nあずかる\nあずき\nあそぶ\nあたえる\nあたためる\nあたりまえ\nあたる\nあつい\nあつかう\nあっしゅく\nあつまり\nあつめる\nあてな\nあてはまる\nあひる\nあぶら\nあぶる\nあふれる\nあまい\nあまど\nあまやかす\nあまり\nあみもの\nあめりか\nあやまる\nあゆむ\nあらいぐま\nあらし\nあらすじ\nあらためる\nあらゆる\nあらわす\nありがとう\nあわせる\nあわてる\nあんい\nあんがい\nあんこ\nあんぜん\nあんてい\nあんない\nあんまり\nいいだす\nいおん\nいがい\nいがく\nいきおい\nいきなり\nいきもの\nいきる\nいくじ\nいくぶん\nいけばな\nいけん\nいこう\nいこく\nいこつ\nいさましい\nいさん\nいしき\nいじゅう\nいじょう\nいじわる\nいずみ\nいずれ\nいせい\nいせえび\nいせかい\nいせき\nいぜん\nいそうろう\nいそがしい\nいだい\nいだく\nいたずら\nいたみ\nいたりあ\nいちおう\nいちじ\nいちど\nいちば\nいちぶ\nいちりゅう\nいつか\nいっしゅん\nいっせい\nいっそう\nいったん\nいっち\nいってい\nいっぽう\nいてざ\nいてん\nいどう\nいとこ\nいない\nいなか\nいねむり\nいのち\nいのる\nいはつ\nいばる\nいはん\nいびき\nいひん\nいふく\nいへん\nいほう\nいみん\nいもうと\nいもたれ\nいもり\nいやがる\nいやす\nいよかん\nいよく\nいらい\nいらすと\nいりぐち\nいりょう\nいれい\nいれもの\nいれる\nいろえんぴつ\nいわい\nいわう\nいわかん\nいわば\nいわゆる\nいんげんまめ\nいんさつ\nいんしょう\nいんよう\nうえき\nうえる\nうおざ\nうがい\nうかぶ\nうかべる\nうきわ\nうくらいな\nうくれれ\nうけたまわる\nうけつけ\nうけとる\nうけもつ\nうける\nうごかす\nうごく\nうこん\nうさぎ\nうしなう\nうしろがみ\nうすい\nうすぎ\nうすぐらい\nうすめる\nうせつ\nうちあわせ\nうちがわ\nうちき\nうちゅう\nうっかり\nうつくしい\nうったえる\nうつる\nうどん\nうなぎ\nうなじ\nうなずく\nうなる\nうねる\nうのう\nうぶげ\nうぶごえ\nうまれる\nうめる\nうもう\nうやまう\nうよく\nうらがえす\nうらぐち\nうらない\nうりあげ\nうりきれ\nうるさい\nうれしい\nうれゆき\nうれる\nうろこ\nうわき\nうわさ\nうんこう\nうんちん\nうんてん\nうんどう\nえいえん\nえいが\nえいきょう\nえいご\nえいせい\nえいぶん\nえいよう\nえいわ\nえおり\nえがお\nえがく\nえきたい\nえくせる\nえしゃく\nえすて\nえつらん\nえのぐ\nえほうまき\nえほん\nえまき\nえもじ\nえもの\nえらい\nえらぶ\nえりあ\nえんえん\nえんかい\nえんぎ\nえんげき\nえんしゅう\nえんぜつ\nえんそく\nえんちょう\nえんとつ\nおいかける\nおいこす\nおいしい\nおいつく\nおうえん\nおうさま\nおうじ\nおうせつ\nおうたい\nおうふく\nおうべい\nおうよう\nおえる\nおおい\nおおう\nおおどおり\nおおや\nおおよそ\nおかえり\nおかず\nおがむ\nおかわり\nおぎなう\nおきる\nおくさま\nおくじょう\nおくりがな\nおくる\nおくれる\nおこす\nおこなう\nおこる\nおさえる\nおさない\nおさめる\nおしいれ\nおしえる\nおじぎ\nおじさん\nおしゃれ\nおそらく\nおそわる\nおたがい\nおたく\nおだやか\nおちつく\nおっと\nおつり\nおでかけ\nおとしもの\nおとなしい\nおどり\nおどろかす\nおばさん\nおまいり\nおめでとう\nおもいで\nおもう\nおもたい\nおもちゃ\nおやつ\nおやゆび\nおよぼす\nおらんだ\nおろす\nおんがく\nおんけい\nおんしゃ\nおんせん\nおんだん\nおんちゅう\nおんどけい\nかあつ\nかいが\nがいき\nがいけん\nがいこう\nかいさつ\nかいしゃ\nかいすいよく\nかいぜん\nかいぞうど\nかいつう\nかいてん\nかいとう\nかいふく\nがいへき\nかいほう\nかいよう\nがいらい\nかいわ\nかえる\nかおり\nかかえる\nかがく\nかがし\nかがみ\nかくご\nかくとく\nかざる\nがぞう\nかたい\nかたち\nがちょう\nがっきゅう\nがっこう\nがっさん\nがっしょう\nかなざわし\nかのう\nがはく\nかぶか\nかほう\nかほご\nかまう\nかまぼこ\nかめれおん\nかゆい\nかようび\nからい\nかるい\nかろう\nかわく\nかわら\nがんか\nかんけい\nかんこう\nかんしゃ\nかんそう\nかんたん\nかんち\nがんばる\nきあい\nきあつ\nきいろ\nぎいん\nきうい\nきうん\nきえる\nきおう\nきおく\nきおち\nきおん\nきかい\nきかく\nきかんしゃ\nききて\nきくばり\nきくらげ\nきけんせい\nきこう\nきこえる\nきこく\nきさい\nきさく\nきさま\nきさらぎ\nぎじかがく\nぎしき\nぎじたいけん\nぎじにってい\nぎじゅつしゃ\nきすう\nきせい\nきせき\nきせつ\nきそう\nきぞく\nきぞん\nきたえる\nきちょう\nきつえん\nぎっちり\nきつつき\nきつね\nきてい\nきどう\nきどく\nきない\nきなが\nきなこ\nきぬごし\nきねん\nきのう\nきのした\nきはく\nきびしい\nきひん\nきふく\nきぶん\nきぼう\nきほん\nきまる\nきみつ\nきむずかしい\nきめる\nきもだめし\nきもち\nきもの\nきゃく\nきやく\nぎゅうにく\nきよう\nきょうりゅう\nきらい\nきらく\nきりん\nきれい\nきれつ\nきろく\nぎろん\nきわめる\nぎんいろ\nきんかくじ\nきんじょ\nきんようび\nぐあい\nくいず\nくうかん\nくうき\nくうぐん\nくうこう\nぐうせい\nくうそう\nぐうたら\nくうふく\nくうぼ\nくかん\nくきょう\nくげん\nぐこう\nくさい\nくさき\nくさばな\nくさる\nくしゃみ\nくしょう\nくすのき\nくすりゆび\nくせげ\nくせん\nぐたいてき\nくださる\nくたびれる\nくちこみ\nくちさき\nくつした\nぐっすり\nくつろぐ\nくとうてん\nくどく\nくなん\nくねくね\nくのう\nくふう\nくみあわせ\nくみたてる\nくめる\nくやくしょ\nくらす\nくらべる\nくるま\nくれる\nくろう\nくわしい\nぐんかん\nぐんしょく\nぐんたい\nぐんて\nけあな\nけいかく\nけいけん\nけいこ\nけいさつ\nげいじゅつ\nけいたい\nげいのうじん\nけいれき\nけいろ\nけおとす\nけおりもの\nげきか\nげきげん\nげきだん\nげきちん\nげきとつ\nげきは\nげきやく\nげこう\nげこくじょう\nげざい\nけさき\nげざん\nけしき\nけしごむ\nけしょう\nげすと\nけたば\nけちゃっぷ\nけちらす\nけつあつ\nけつい\nけつえき\nけっこん\nけつじょ\nけっせき\nけってい\nけつまつ\nげつようび\nげつれい\nけつろん\nげどく\nけとばす\nけとる\nけなげ\nけなす\nけなみ\nけぬき\nげねつ\nけねん\nけはい\nげひん\nけぶかい\nげぼく\nけまり\nけみかる\nけむし\nけむり\nけもの\nけらい\nけろけろ\nけわしい\nけんい\nけんえつ\nけんお\nけんか\nげんき\nけんげん\nけんこう\nけんさく\nけんしゅう\nけんすう\nげんそう\nけんちく\nけんてい\nけんとう\nけんない\nけんにん\nげんぶつ\nけんま\nけんみん\nけんめい\nけんらん\nけんり\nこあくま\nこいぬ\nこいびと\nごうい\nこうえん\nこうおん\nこうかん\nごうきゅう\nごうけい\nこうこう\nこうさい\nこうじ\nこうすい\nごうせい\nこうそく\nこうたい\nこうちゃ\nこうつう\nこうてい\nこうどう\nこうない\nこうはい\nごうほう\nごうまん\nこうもく\nこうりつ\nこえる\nこおり\nごかい\nごがつ\nごかん\nこくご\nこくさい\nこくとう\nこくない\nこくはく\nこぐま\nこけい\nこける\nここのか\nこころ\nこさめ\nこしつ\nこすう\nこせい\nこせき\nこぜん\nこそだて\nこたい\nこたえる\nこたつ\nこちょう\nこっか\nこつこつ\nこつばん\nこつぶ\nこてい\nこてん\nことがら\nことし\nことば\nことり\nこなごな\nこねこね\nこのまま\nこのみ\nこのよ\nごはん\nこひつじ\nこふう\nこふん\nこぼれる\nごまあぶら\nこまかい\nごますり\nこまつな\nこまる\nこむぎこ\nこもじ\nこもち\nこもの\nこもん\nこやく\nこやま\nこゆう\nこゆび\nこよい\nこよう\nこりる\nこれくしょん\nころっけ\nこわもて\nこわれる\nこんいん\nこんかい\nこんき\nこんしゅう\nこんすい\nこんだて\nこんとん\nこんなん\nこんびに\nこんぽん\nこんまけ\nこんや\nこんれい\nこんわく\nざいえき\nさいかい\nさいきん\nざいげん\nざいこ\nさいしょ\nさいせい\nざいたく\nざいちゅう\nさいてき\nざいりょう\nさうな\nさかいし\nさがす\nさかな\nさかみち\nさがる\nさぎょう\nさくし\nさくひん\nさくら\nさこく\nさこつ\nさずかる\nざせき\nさたん\nさつえい\nざつおん\nざっか\nざつがく\nさっきょく\nざっし\nさつじん\nざっそう\nさつたば\nさつまいも\nさてい\nさといも\nさとう\nさとおや\nさとし\nさとる\nさのう\nさばく\nさびしい\nさべつ\nさほう\nさほど\nさます\nさみしい\nさみだれ\nさむけ\nさめる\nさやえんどう\nさゆう\nさよう\nさよく\nさらだ\nざるそば\nさわやか\nさわる\nさんいん\nさんか\nさんきゃく\nさんこう\nさんさい\nざんしょ\nさんすう\nさんせい\nさんそ\nさんち\nさんま\nさんみ\nさんらん\nしあい\nしあげ\nしあさって\nしあわせ\nしいく\nしいん\nしうち\nしえい\nしおけ\nしかい\nしかく\nじかん\nしごと\nしすう\nじだい\nしたうけ\nしたぎ\nしたて\nしたみ\nしちょう\nしちりん\nしっかり\nしつじ\nしつもん\nしてい\nしてき\nしてつ\nじてん\nじどう\nしなぎれ\nしなもの\nしなん\nしねま\nしねん\nしのぐ\nしのぶ\nしはい\nしばかり\nしはつ\nしはらい\nしはん\nしひょう\nしふく\nじぶん\nしへい\nしほう\nしほん\nしまう\nしまる\nしみん\nしむける\nじむしょ\nしめい\nしめる\nしもん\nしゃいん\nしゃうん\nしゃおん\nじゃがいも\nしやくしょ\nしゃくほう\nしゃけん\nしゃこ\nしゃざい\nしゃしん\nしゃせん\nしゃそう\nしゃたい\nしゃちょう\nしゃっきん\nじゃま\nしゃりん\nしゃれい\nじゆう\nじゅうしょ\nしゅくはく\nじゅしん\nしゅっせき\nしゅみ\nしゅらば\nじゅんばん\nしょうかい\nしょくたく\nしょっけん\nしょどう\nしょもつ\nしらせる\nしらべる\nしんか\nしんこう\nじんじゃ\nしんせいじ\nしんちく\nしんりん\nすあげ\nすあし\nすあな\nずあん\nすいえい\nすいか\nすいとう\nずいぶん\nすいようび\nすうがく\nすうじつ\nすうせん\nすおどり\nすきま\nすくう\nすくない\nすける\nすごい\nすこし\nずさん\nすずしい\nすすむ\nすすめる\nすっかり\nずっしり\nずっと\nすてき\nすてる\nすねる\nすのこ\nすはだ\nすばらしい\nずひょう\nずぶぬれ\nすぶり\nすふれ\nすべて\nすべる\nずほう\nすぼん\nすまい\nすめし\nすもう\nすやき\nすらすら\nするめ\nすれちがう\nすろっと\nすわる\nすんぜん\nすんぽう\nせあぶら\nせいかつ\nせいげん\nせいじ\nせいよう\nせおう\nせかいかん\nせきにん\nせきむ\nせきゆ\nせきらんうん\nせけん\nせこう\nせすじ\nせたい\nせたけ\nせっかく\nせっきゃく\nぜっく\nせっけん\nせっこつ\nせっさたくま\nせつぞく\nせつだん\nせつでん\nせっぱん\nせつび\nせつぶん\nせつめい\nせつりつ\nせなか\nせのび\nせはば\nせびろ\nせぼね\nせまい\nせまる\nせめる\nせもたれ\nせりふ\nぜんあく\nせんい\nせんえい\nせんか\nせんきょ\nせんく\nせんげん\nぜんご\nせんさい\nせんしゅ\nせんすい\nせんせい\nせんぞ\nせんたく\nせんちょう\nせんてい\nせんとう\nせんぬき\nせんねん\nせんぱい\nぜんぶ\nぜんぽう\nせんむ\nせんめんじょ\nせんもん\nせんやく\nせんゆう\nせんよう\nぜんら\nぜんりゃく\nせんれい\nせんろ\nそあく\nそいとげる\nそいね\nそうがんきょう\nそうき\nそうご\nそうしん\nそうだん\nそうなん\nそうび\nそうめん\nそうり\nそえもの\nそえん\nそがい\nそげき\nそこう\nそこそこ\nそざい\nそしな\nそせい\nそせん\nそそぐ\nそだてる\nそつう\nそつえん\nそっかん\nそつぎょう\nそっけつ\nそっこう\nそっせん\nそっと\nそとがわ\nそとづら\nそなえる\nそなた\nそふぼ\nそぼく\nそぼろ\nそまつ\nそまる\nそむく\nそむりえ\nそめる\nそもそも\nそよかぜ\nそらまめ\nそろう\nそんかい\nそんけい\nそんざい\nそんしつ\nそんぞく\nそんちょう\nぞんび\nぞんぶん\nそんみん\nたあい\nたいいん\nたいうん\nたいえき\nたいおう\nだいがく\nたいき\nたいぐう\nたいけん\nたいこ\nたいざい\nだいじょうぶ\nだいすき\nたいせつ\nたいそう\nだいたい\nたいちょう\nたいてい\nだいどころ\nたいない\nたいねつ\nたいのう\nたいはん\nだいひょう\nたいふう\nたいへん\nたいほ\nたいまつばな\nたいみんぐ\nたいむ\nたいめん\nたいやき\nたいよう\nたいら\nたいりょく\nたいる\nたいわん\nたうえ\nたえる\nたおす\nたおる\nたおれる\nたかい\nたかね\nたきび\nたくさん\nたこく\nたこやき\nたさい\nたしざん\nだじゃれ\nたすける\nたずさわる\nたそがれ\nたたかう\nたたく\nただしい\nたたみ\nたちばな\nだっかい\nだっきゃく\nだっこ\nだっしゅつ\nだったい\nたてる\nたとえる\nたなばた\nたにん\nたぬき\nたのしみ\nたはつ\nたぶん\nたべる\nたぼう\nたまご\nたまる\nだむる\nためいき\nためす\nためる\nたもつ\nたやすい\nたよる\nたらす\nたりきほんがん\nたりょう\nたりる\nたると\nたれる\nたれんと\nたろっと\nたわむれる\nだんあつ\nたんい\nたんおん\nたんか\nたんき\nたんけん\nたんご\nたんさん\nたんじょうび\nだんせい\nたんそく\nたんたい\nだんち\nたんてい\nたんとう\nだんな\nたんにん\nだんねつ\nたんのう\nたんぴん\nだんぼう\nたんまつ\nたんめい\nだんれつ\nだんろ\nだんわ\nちあい\nちあん\nちいき\nちいさい\nちえん\nちかい\nちから\nちきゅう\nちきん\nちけいず\nちけん\nちこく\nちさい\nちしき\nちしりょう\nちせい\nちそう\nちたい\nちたん\nちちおや\nちつじょ\nちてき\nちてん\nちぬき\nちぬり\nちのう\nちひょう\nちへいせん\nちほう\nちまた\nちみつ\nちみどろ\nちめいど\nちゃんこなべ\nちゅうい\nちゆりょく\nちょうし\nちょさくけん\nちらし\nちらみ\nちりがみ\nちりょう\nちるど\nちわわ\nちんたい\nちんもく\nついか\nついたち\nつうか\nつうじょう\nつうはん\nつうわ\nつかう\nつかれる\nつくね\nつくる\nつけね\nつける\nつごう\nつたえる\nつづく\nつつじ\nつつむ\nつとめる\nつながる\nつなみ\nつねづね\nつのる\nつぶす\nつまらない\nつまる\nつみき\nつめたい\nつもり\nつもる\nつよい\nつるぼ\nつるみく\nつわもの\nつわり\nてあし\nてあて\nてあみ\nていおん\nていか\nていき\nていけい\nていこく\nていさつ\nていし\nていせい\nていたい\nていど\nていねい\nていひょう\nていへん\nていぼう\nてうち\nておくれ\nてきとう\nてくび\nでこぼこ\nてさぎょう\nてさげ\nてすり\nてそう\nてちがい\nてちょう\nてつがく\nてつづき\nでっぱ\nてつぼう\nてつや\nでぬかえ\nてぬき\nてぬぐい\nてのひら\nてはい\nてぶくろ\nてふだ\nてほどき\nてほん\nてまえ\nてまきずし\nてみじか\nてみやげ\nてらす\nてれび\nてわけ\nてわたし\nでんあつ\nてんいん\nてんかい\nてんき\nてんぐ\nてんけん\nてんごく\nてんさい\nてんし\nてんすう\nでんち\nてんてき\nてんとう\nてんない\nてんぷら\nてんぼうだい\nてんめつ\nてんらんかい\nでんりょく\nでんわ\nどあい\nといれ\nどうかん\nとうきゅう\nどうぐ\nとうし\nとうむぎ\nとおい\nとおか\nとおく\nとおす\nとおる\nとかい\nとかす\nときおり\nときどき\nとくい\nとくしゅう\nとくてん\nとくに\nとくべつ\nとけい\nとける\nとこや\nとさか\nとしょかん\nとそう\nとたん\nとちゅう\nとっきゅう\nとっくん\nとつぜん\nとつにゅう\nとどける\nととのえる\nとない\nとなえる\nとなり\nとのさま\nとばす\nどぶがわ\nとほう\nとまる\nとめる\nともだち\nともる\nどようび\nとらえる\nとんかつ\nどんぶり\nないかく\nないこう\nないしょ\nないす\nないせん\nないそう\nなおす\nながい\nなくす\nなげる\nなこうど\nなさけ\nなたでここ\nなっとう\nなつやすみ\nななおし\nなにごと\nなにもの\nなにわ\nなのか\nなふだ\nなまいき\nなまえ\nなまみ\nなみだ\nなめらか\nなめる\nなやむ\nならう\nならび\nならぶ\nなれる\nなわとび\nなわばり\nにあう\nにいがた\nにうけ\nにおい\nにかい\nにがて\nにきび\nにくしみ\nにくまん\nにげる\nにさんかたんそ\nにしき\nにせもの\nにちじょう\nにちようび\nにっか\nにっき\nにっけい\nにっこう\nにっさん\nにっしょく\nにっすう\nにっせき\nにってい\nになう\nにほん\nにまめ\nにもつ\nにやり\nにゅういん\nにりんしゃ\nにわとり\nにんい\nにんか\nにんき\nにんげん\nにんしき\nにんずう\nにんそう\nにんたい\nにんち\nにんてい\nにんにく\nにんぷ\nにんまり\nにんむ\nにんめい\nにんよう\nぬいくぎ\nぬかす\nぬぐいとる\nぬぐう\nぬくもり\nぬすむ\nぬまえび\nぬめり\nぬらす\nぬんちゃく\nねあげ\nねいき\nねいる\nねいろ\nねぐせ\nねくたい\nねくら\nねこぜ\nねこむ\nねさげ\nねすごす\nねそべる\nねだん\nねつい\nねっしん\nねつぞう\nねったいぎょ\nねぶそく\nねふだ\nねぼう\nねほりはほり\nねまき\nねまわし\nねみみ\nねむい\nねむたい\nねもと\nねらう\nねわざ\nねんいり\nねんおし\nねんかん\nねんきん\nねんぐ\nねんざ\nねんし\nねんちゃく\nねんど\nねんぴ\nねんぶつ\nねんまつ\nねんりょう\nねんれい\nのいず\nのおづま\nのがす\nのきなみ\nのこぎり\nのこす\nのこる\nのせる\nのぞく\nのぞむ\nのたまう\nのちほど\nのっく\nのばす\nのはら\nのべる\nのぼる\nのみもの\nのやま\nのらいぬ\nのらねこ\nのりもの\nのりゆき\nのれん\nのんき\nばあい\nはあく\nばあさん\nばいか\nばいく\nはいけん\nはいご\nはいしん\nはいすい\nはいせん\nはいそう\nはいち\nばいばい\nはいれつ\nはえる\nはおる\nはかい\nばかり\nはかる\nはくしゅ\nはけん\nはこぶ\nはさみ\nはさん\nはしご\nばしょ\nはしる\nはせる\nぱそこん\nはそん\nはたん\nはちみつ\nはつおん\nはっかく\nはづき\nはっきり\nはっくつ\nはっけん\nはっこう\nはっさん\nはっしん\nはったつ\nはっちゅう\nはってん\nはっぴょう\nはっぽう\nはなす\nはなび\nはにかむ\nはぶらし\nはみがき\nはむかう\nはめつ\nはやい\nはやし\nはらう\nはろうぃん\nはわい\nはんい\nはんえい\nはんおん\nはんかく\nはんきょう\nばんぐみ\nはんこ\nはんしゃ\nはんすう\nはんだん\nぱんち\nぱんつ\nはんてい\nはんとし\nはんのう\nはんぱ\nはんぶん\nはんぺん\nはんぼうき\nはんめい\nはんらん\nはんろん\nひいき\nひうん\nひえる\nひかく\nひかり\nひかる\nひかん\nひくい\nひけつ\nひこうき\nひこく\nひさい\nひさしぶり\nひさん\nびじゅつかん\nひしょ\nひそか\nひそむ\nひたむき\nひだり\nひたる\nひつぎ\nひっこし\nひっし\nひつじゅひん\nひっす\nひつぜん\nぴったり\nぴっちり\nひつよう\nひてい\nひとごみ\nひなまつり\nひなん\nひねる\nひはん\nひびく\nひひょう\nひほう\nひまわり\nひまん\nひみつ\nひめい\nひめじし\nひやけ\nひやす\nひよう\nびょうき\nひらがな\nひらく\nひりつ\nひりょう\nひるま\nひるやすみ\nひれい\nひろい\nひろう\nひろき\nひろゆき\nひんかく\nひんけつ\nひんこん\nひんしゅ\nひんそう\nぴんち\nひんぱん\nびんぼう\nふあん\nふいうち\nふうけい\nふうせん\nぷうたろう\nふうとう\nふうふ\nふえる\nふおん\nふかい\nふきん\nふくざつ\nふくぶくろ\nふこう\nふさい\nふしぎ\nふじみ\nふすま\nふせい\nふせぐ\nふそく\nぶたにく\nふたん\nふちょう\nふつう\nふつか\nふっかつ\nふっき\nふっこく\nぶどう\nふとる\nふとん\nふのう\nふはい\nふひょう\nふへん\nふまん\nふみん\nふめつ\nふめん\nふよう\nふりこ\nふりる\nふるい\nふんいき\nぶんがく\nぶんぐ\nふんしつ\nぶんせき\nふんそう\nぶんぽう\nへいあん\nへいおん\nへいがい\nへいき\nへいげん\nへいこう\nへいさ\nへいしゃ\nへいせつ\nへいそ\nへいたく\nへいてん\nへいねつ\nへいわ\nへきが\nへこむ\nべにいろ\nべにしょうが\nへらす\nへんかん\nべんきょう\nべんごし\nへんさい\nへんたい\nべんり\nほあん\nほいく\nぼうぎょ\nほうこく\nほうそう\nほうほう\nほうもん\nほうりつ\nほえる\nほおん\nほかん\nほきょう\nぼきん\nほくろ\nほけつ\nほけん\nほこう\nほこる\nほしい\nほしつ\nほしゅ\nほしょう\nほせい\nほそい\nほそく\nほたて\nほたる\nぽちぶくろ\nほっきょく\nほっさ\nほったん\nほとんど\nほめる\nほんい\nほんき\nほんけ\nほんしつ\nほんやく\nまいにち\nまかい\nまかせる\nまがる\nまける\nまこと\nまさつ\nまじめ\nますく\nまぜる\nまつり\nまとめ\nまなぶ\nまぬけ\nまねく\nまほう\nまもる\nまゆげ\nまよう\nまろやか\nまわす\nまわり\nまわる\nまんが\nまんきつ\nまんぞく\nまんなか\nみいら\nみうち\nみえる\nみがく\nみかた\nみかん\nみけん\nみこん\nみじかい\nみすい\nみすえる\nみせる\nみっか\nみつかる\nみつける\nみてい\nみとめる\nみなと\nみなみかさい\nみねらる\nみのう\nみのがす\nみほん\nみもと\nみやげ\nみらい\nみりょく\nみわく\nみんか\nみんぞく\nむいか\nむえき\nむえん\nむかい\nむかう\nむかえ\nむかし\nむぎちゃ\nむける\nむげん\nむさぼる\nむしあつい\nむしば\nむじゅん\nむしろ\nむすう\nむすこ\nむすぶ\nむすめ\nむせる\nむせん\nむちゅう\nむなしい\nむのう\nむやみ\nむよう\nむらさき\nむりょう\nむろん\nめいあん\nめいうん\nめいえん\nめいかく\nめいきょく\nめいさい\nめいし\nめいそう\nめいぶつ\nめいれい\nめいわく\nめぐまれる\nめざす\nめした\nめずらしい\nめだつ\nめまい\nめやす\nめんきょ\nめんせき\nめんどう\nもうしあげる\nもうどうけん\nもえる\nもくし\nもくてき\nもくようび\nもちろん\nもどる\nもらう\nもんく\nもんだい\nやおや\nやける\nやさい\nやさしい\nやすい\nやすたろう\nやすみ\nやせる\nやそう\nやたい\nやちん\nやっと\nやっぱり\nやぶる\nやめる\nややこしい\nやよい\nやわらかい\nゆうき\nゆうびんきょく\nゆうべ\nゆうめい\nゆけつ\nゆしゅつ\nゆせん\nゆそう\nゆたか\nゆちゃく\nゆでる\nゆにゅう\nゆびわ\nゆらい\nゆれる\nようい\nようか\nようきゅう\nようじ\nようす\nようちえん\nよかぜ\nよかん\nよきん\nよくせい\nよくぼう\nよけい\nよごれる\nよさん\nよしゅう\nよそう\nよそく\nよっか\nよてい\nよどがわく\nよねつ\nよやく\nよゆう\nよろこぶ\nよろしい\nらいう\nらくがき\nらくご\nらくさつ\nらくだ\nらしんばん\nらせん\nらぞく\nらたい\nらっか\nられつ\nりえき\nりかい\nりきさく\nりきせつ\nりくぐん\nりくつ\nりけん\nりこう\nりせい\nりそう\nりそく\nりてん\nりねん\nりゆう\nりゅうがく\nりよう\nりょうり\nりょかん\nりょくちゃ\nりょこう\nりりく\nりれき\nりろん\nりんご\nるいけい\nるいさい\nるいじ\nるいせき\nるすばん\nるりがわら\nれいかん\nれいぎ\nれいせい\nれいぞうこ\nれいとう\nれいぼう\nれきし\nれきだい\nれんあい\nれんけい\nれんこん\nれんさい\nれんしゅう\nれんぞく\nれんらく\nろうか\nろうご\nろうじん\nろうそく\nろくが\nろこつ\nろじうら\nろしゅつ\nろせん\nろてん\nろめん\nろれつ\nろんぎ\nろんぱ\nろんぶん\nろんり\nわかす\nわかめ\nわかやま\nわかれる\nわしつ\nわじまし\nわすれもの\nわらう\nわれる`.split('\\n');\n", "export const wordlist = `가격\n가끔\n가난\n가능\n가득\n가르침\n가뭄\n가방\n가상\n가슴\n가운데\n가을\n가이드\n가입\n가장\n가정\n가족\n가죽\n각오\n각자\n간격\n간부\n간섭\n간장\n간접\n간판\n갈등\n갈비\n갈색\n갈증\n감각\n감기\n감소\n감수성\n감자\n감정\n갑자기\n강남\n강당\n강도\n강력히\n강변\n강북\n강사\n강수량\n강아지\n강원도\n강의\n강제\n강조\n같이\n개구리\n개나리\n개방\n개별\n개선\n개성\n개인\n객관적\n거실\n거액\n거울\n거짓\n거품\n걱정\n건강\n건물\n건설\n건조\n건축\n걸음\n검사\n검토\n게시판\n게임\n겨울\n견해\n결과\n결국\n결론\n결석\n결승\n결심\n결정\n결혼\n경계\n경고\n경기\n경력\n경복궁\n경비\n경상도\n경영\n경우\n경쟁\n경제\n경주\n경찰\n경치\n경향\n경험\n계곡\n계단\n계란\n계산\n계속\n계약\n계절\n계층\n계획\n고객\n고구려\n고궁\n고급\n고등학생\n고무신\n고민\n고양이\n고장\n고전\n고집\n고춧가루\n고통\n고향\n곡식\n골목\n골짜기\n골프\n공간\n공개\n공격\n공군\n공급\n공기\n공동\n공무원\n공부\n공사\n공식\n공업\n공연\n공원\n공장\n공짜\n공책\n공통\n공포\n공항\n공휴일\n과목\n과일\n과장\n과정\n과학\n관객\n관계\n관광\n관념\n관람\n관련\n관리\n관습\n관심\n관점\n관찰\n광경\n광고\n광장\n광주\n괴로움\n굉장히\n교과서\n교문\n교복\n교실\n교양\n교육\n교장\n교직\n교통\n교환\n교훈\n구경\n구름\n구멍\n구별\n구분\n구석\n구성\n구속\n구역\n구입\n구청\n구체적\n국가\n국기\n국내\n국립\n국물\n국민\n국수\n국어\n국왕\n국적\n국제\n국회\n군대\n군사\n군인\n궁극적\n권리\n권위\n권투\n귀국\n귀신\n규정\n규칙\n균형\n그날\n그냥\n그늘\n그러나\n그룹\n그릇\n그림\n그제서야\n그토록\n극복\n극히\n근거\n근교\n근래\n근로\n근무\n근본\n근원\n근육\n근처\n글씨\n글자\n금강산\n금고\n금년\n금메달\n금액\n금연\n금요일\n금지\n긍정적\n기간\n기관\n기념\n기능\n기독교\n기둥\n기록\n기름\n기법\n기본\n기분\n기쁨\n기숙사\n기술\n기억\n기업\n기온\n기운\n기원\n기적\n기준\n기침\n기혼\n기획\n긴급\n긴장\n길이\n김밥\n김치\n김포공항\n깍두기\n깜빡\n깨달음\n깨소금\n껍질\n꼭대기\n꽃잎\n나들이\n나란히\n나머지\n나물\n나침반\n나흘\n낙엽\n난방\n날개\n날씨\n날짜\n남녀\n남대문\n남매\n남산\n남자\n남편\n남학생\n낭비\n낱말\n내년\n내용\n내일\n냄비\n냄새\n냇물\n냉동\n냉면\n냉방\n냉장고\n넥타이\n넷째\n노동\n노란색\n노력\n노인\n녹음\n녹차\n녹화\n논리\n논문\n논쟁\n놀이\n농구\n농담\n농민\n농부\n농업\n농장\n농촌\n높이\n눈동자\n눈물\n눈썹\n뉴욕\n느낌\n늑대\n능동적\n능력\n다방\n다양성\n다음\n다이어트\n다행\n단계\n단골\n단독\n단맛\n단순\n단어\n단위\n단점\n단체\n단추\n단편\n단풍\n달걀\n달러\n달력\n달리\n닭고기\n담당\n담배\n담요\n담임\n답변\n답장\n당근\n당분간\n당연히\n당장\n대규모\n대낮\n대단히\n대답\n대도시\n대략\n대량\n대륙\n대문\n대부분\n대신\n대응\n대장\n대전\n대접\n대중\n대책\n대출\n대충\n대통령\n대학\n대한민국\n대합실\n대형\n덩어리\n데이트\n도대체\n도덕\n도둑\n도망\n도서관\n도심\n도움\n도입\n도자기\n도저히\n도전\n도중\n도착\n독감\n독립\n독서\n독일\n독창적\n동화책\n뒷모습\n뒷산\n딸아이\n마누라\n마늘\n마당\n마라톤\n마련\n마무리\n마사지\n마약\n마요네즈\n마을\n마음\n마이크\n마중\n마지막\n마찬가지\n마찰\n마흔\n막걸리\n막내\n막상\n만남\n만두\n만세\n만약\n만일\n만점\n만족\n만화\n많이\n말기\n말씀\n말투\n맘대로\n망원경\n매년\n매달\n매력\n매번\n매스컴\n매일\n매장\n맥주\n먹이\n먼저\n먼지\n멀리\n메일\n며느리\n며칠\n면담\n멸치\n명단\n명령\n명예\n명의\n명절\n명칭\n명함\n모금\n모니터\n모델\n모든\n모범\n모습\n모양\n모임\n모조리\n모집\n모퉁이\n목걸이\n목록\n목사\n목소리\n목숨\n목적\n목표\n몰래\n몸매\n몸무게\n몸살\n몸속\n몸짓\n몸통\n몹시\n무관심\n무궁화\n무더위\n무덤\n무릎\n무슨\n무엇\n무역\n무용\n무조건\n무지개\n무척\n문구\n문득\n문법\n문서\n문제\n문학\n문화\n물가\n물건\n물결\n물고기\n물론\n물리학\n물음\n물질\n물체\n미국\n미디어\n미사일\n미술\n미역\n미용실\n미움\n미인\n미팅\n미혼\n민간\n민족\n민주\n믿음\n밀가루\n밀리미터\n밑바닥\n바가지\n바구니\n바나나\n바늘\n바닥\n바닷가\n바람\n바이러스\n바탕\n박물관\n박사\n박수\n반대\n반드시\n반말\n반발\n반성\n반응\n반장\n반죽\n반지\n반찬\n받침\n발가락\n발걸음\n발견\n발달\n발레\n발목\n발바닥\n발생\n발음\n발자국\n발전\n발톱\n발표\n밤하늘\n밥그릇\n밥맛\n밥상\n밥솥\n방금\n방면\n방문\n방바닥\n방법\n방송\n방식\n방안\n방울\n방지\n방학\n방해\n방향\n배경\n배꼽\n배달\n배드민턴\n백두산\n백색\n백성\n백인\n백제\n백화점\n버릇\n버섯\n버튼\n번개\n번역\n번지\n번호\n벌금\n벌레\n벌써\n범위\n범인\n범죄\n법률\n법원\n법적\n법칙\n베이징\n벨트\n변경\n변동\n변명\n변신\n변호사\n변화\n별도\n별명\n별일\n병실\n병아리\n병원\n보관\n보너스\n보라색\n보람\n보름\n보상\n보안\n보자기\n보장\n보전\n보존\n보통\n보편적\n보험\n복도\n복사\n복숭아\n복습\n볶음\n본격적\n본래\n본부\n본사\n본성\n본인\n본질\n볼펜\n봉사\n봉지\n봉투\n부근\n부끄러움\n부담\n부동산\n부문\n부분\n부산\n부상\n부엌\n부인\n부작용\n부장\n부정\n부족\n부지런히\n부친\n부탁\n부품\n부회장\n북부\n북한\n분노\n분량\n분리\n분명\n분석\n분야\n분위기\n분필\n분홍색\n불고기\n불과\n불교\n불꽃\n불만\n불법\n불빛\n불안\n불이익\n불행\n브랜드\n비극\n비난\n비닐\n비둘기\n비디오\n비로소\n비만\n비명\n비밀\n비바람\n비빔밥\n비상\n비용\n비율\n비중\n비타민\n비판\n빌딩\n빗물\n빗방울\n빗줄기\n빛깔\n빨간색\n빨래\n빨리\n사건\n사계절\n사나이\n사냥\n사람\n사랑\n사립\n사모님\n사물\n사방\n사상\n사생활\n사설\n사슴\n사실\n사업\n사용\n사월\n사장\n사전\n사진\n사촌\n사춘기\n사탕\n사투리\n사흘\n산길\n산부인과\n산업\n산책\n살림\n살인\n살짝\n삼계탕\n삼국\n삼십\n삼월\n삼촌\n상관\n상금\n상대\n상류\n상반기\n상상\n상식\n상업\n상인\n상자\n상점\n상처\n상추\n상태\n상표\n상품\n상황\n새벽\n색깔\n색연필\n생각\n생명\n생물\n생방송\n생산\n생선\n생신\n생일\n생활\n서랍\n서른\n서명\n서민\n서비스\n서양\n서울\n서적\n서점\n서쪽\n서클\n석사\n석유\n선거\n선물\n선배\n선생\n선수\n선원\n선장\n선전\n선택\n선풍기\n설거지\n설날\n설렁탕\n설명\n설문\n설사\n설악산\n설치\n설탕\n섭씨\n성공\n성당\n성명\n성별\n성인\n성장\n성적\n성질\n성함\n세금\n세미나\n세상\n세월\n세종대왕\n세탁\n센터\n센티미터\n셋째\n소규모\n소극적\n소금\n소나기\n소년\n소득\n소망\n소문\n소설\n소속\n소아과\n소용\n소원\n소음\n소중히\n소지품\n소질\n소풍\n소형\n속담\n속도\n속옷\n손가락\n손길\n손녀\n손님\n손등\n손목\n손뼉\n손실\n손질\n손톱\n손해\n솔직히\n솜씨\n송아지\n송이\n송편\n쇠고기\n쇼핑\n수건\n수년\n수단\n수돗물\n수동적\n수면\n수명\n수박\n수상\n수석\n수술\n수시로\n수업\n수염\n수영\n수입\n수준\n수집\n수출\n수컷\n수필\n수학\n수험생\n수화기\n숙녀\n숙소\n숙제\n순간\n순서\n순수\n순식간\n순위\n숟가락\n술병\n술집\n숫자\n스님\n스물\n스스로\n스승\n스웨터\n스위치\n스케이트\n스튜디오\n스트레스\n스포츠\n슬쩍\n슬픔\n습관\n습기\n승객\n승리\n승부\n승용차\n승진\n시각\n시간\n시골\n시금치\n시나리오\n시댁\n시리즈\n시멘트\n시민\n시부모\n시선\n시설\n시스템\n시아버지\n시어머니\n시월\n시인\n시일\n시작\n시장\n시절\n시점\n시중\n시즌\n시집\n시청\n시합\n시험\n식구\n식기\n식당\n식량\n식료품\n식물\n식빵\n식사\n식생활\n식초\n식탁\n식품\n신고\n신규\n신념\n신문\n신발\n신비\n신사\n신세\n신용\n신제품\n신청\n신체\n신화\n실감\n실내\n실력\n실례\n실망\n실수\n실습\n실시\n실장\n실정\n실질적\n실천\n실체\n실컷\n실태\n실패\n실험\n실현\n심리\n심부름\n심사\n심장\n심정\n심판\n쌍둥이\n씨름\n씨앗\n아가씨\n아나운서\n아드님\n아들\n아쉬움\n아스팔트\n아시아\n아울러\n아저씨\n아줌마\n아직\n아침\n아파트\n아프리카\n아픔\n아홉\n아흔\n악기\n악몽\n악수\n안개\n안경\n안과\n안내\n안녕\n안동\n안방\n안부\n안주\n알루미늄\n알코올\n암시\n암컷\n압력\n앞날\n앞문\n애인\n애정\n액수\n앨범\n야간\n야단\n야옹\n약간\n약국\n약속\n약수\n약점\n약품\n약혼녀\n양념\n양력\n양말\n양배추\n양주\n양파\n어둠\n어려움\n어른\n어젯밤\n어쨌든\n어쩌다가\n어쩐지\n언니\n언덕\n언론\n언어\n얼굴\n얼른\n얼음\n얼핏\n엄마\n업무\n업종\n업체\n엉덩이\n엉망\n엉터리\n엊그제\n에너지\n에어컨\n엔진\n여건\n여고생\n여관\n여군\n여권\n여대생\n여덟\n여동생\n여든\n여론\n여름\n여섯\n여성\n여왕\n여인\n여전히\n여직원\n여학생\n여행\n역사\n역시\n역할\n연결\n연구\n연극\n연기\n연락\n연설\n연세\n연속\n연습\n연애\n연예인\n연인\n연장\n연주\n연출\n연필\n연합\n연휴\n열기\n열매\n열쇠\n열심히\n열정\n열차\n열흘\n염려\n엽서\n영국\n영남\n영상\n영양\n영역\n영웅\n영원히\n영하\n영향\n영혼\n영화\n옆구리\n옆방\n옆집\n예감\n예금\n예방\n예산\n예상\n예선\n예술\n예습\n예식장\n예약\n예전\n예절\n예정\n예컨대\n옛날\n오늘\n오락\n오랫동안\n오렌지\n오로지\n오른발\n오븐\n오십\n오염\n오월\n오전\n오직\n오징어\n오페라\n오피스텔\n오히려\n옥상\n옥수수\n온갖\n온라인\n온몸\n온종일\n온통\n올가을\n올림픽\n올해\n옷차림\n와이셔츠\n와인\n완성\n완전\n왕비\n왕자\n왜냐하면\n왠지\n외갓집\n외국\n외로움\n외삼촌\n외출\n외침\n외할머니\n왼발\n왼손\n왼쪽\n요금\n요일\n요즘\n요청\n용기\n용서\n용어\n우산\n우선\n우승\n우연히\n우정\n우체국\n우편\n운동\n운명\n운반\n운전\n운행\n울산\n울음\n움직임\n웃어른\n웃음\n워낙\n원고\n원래\n원서\n원숭이\n원인\n원장\n원피스\n월급\n월드컵\n월세\n월요일\n웨이터\n위반\n위법\n위성\n위원\n위험\n위협\n윗사람\n유난히\n유럽\n유명\n유물\n유산\n유적\n유치원\n유학\n유행\n유형\n육군\n육상\n육십\n육체\n은행\n음력\n음료\n음반\n음성\n음식\n음악\n음주\n의견\n의논\n의문\n의복\n의식\n의심\n의외로\n의욕\n의원\n의학\n이것\n이곳\n이념\n이놈\n이달\n이대로\n이동\n이렇게\n이력서\n이론적\n이름\n이민\n이발소\n이별\n이불\n이빨\n이상\n이성\n이슬\n이야기\n이용\n이웃\n이월\n이윽고\n이익\n이전\n이중\n이튿날\n이틀\n이혼\n인간\n인격\n인공\n인구\n인근\n인기\n인도\n인류\n인물\n인생\n인쇄\n인연\n인원\n인재\n인종\n인천\n인체\n인터넷\n인하\n인형\n일곱\n일기\n일단\n일대\n일등\n일반\n일본\n일부\n일상\n일생\n일손\n일요일\n일월\n일정\n일종\n일주일\n일찍\n일체\n일치\n일행\n일회용\n임금\n임무\n입대\n입력\n입맛\n입사\n입술\n입시\n입원\n입장\n입학\n자가용\n자격\n자극\n자동\n자랑\n자부심\n자식\n자신\n자연\n자원\n자율\n자전거\n자정\n자존심\n자판\n작가\n작년\n작성\n작업\n작용\n작은딸\n작품\n잔디\n잔뜩\n잔치\n잘못\n잠깐\n잠수함\n잠시\n잠옷\n잠자리\n잡지\n장관\n장군\n장기간\n장래\n장례\n장르\n장마\n장면\n장모\n장미\n장비\n장사\n장소\n장식\n장애인\n장인\n장점\n장차\n장학금\n재능\n재빨리\n재산\n재생\n재작년\n재정\n재채기\n재판\n재학\n재활용\n저것\n저고리\n저곳\n저녁\n저런\n저렇게\n저번\n저울\n저절로\n저축\n적극\n적당히\n적성\n적용\n적응\n전개\n전공\n전기\n전달\n전라도\n전망\n전문\n전반\n전부\n전세\n전시\n전용\n전자\n전쟁\n전주\n전철\n전체\n전통\n전혀\n전후\n절대\n절망\n절반\n절약\n절차\n점검\n점수\n점심\n점원\n점점\n점차\n접근\n접시\n접촉\n젓가락\n정거장\n정도\n정류장\n정리\n정말\n정면\n정문\n정반대\n정보\n정부\n정비\n정상\n정성\n정오\n정원\n정장\n정지\n정치\n정확히\n제공\n제과점\n제대로\n제목\n제발\n제법\n제삿날\n제안\n제일\n제작\n제주도\n제출\n제품\n제한\n조각\n조건\n조금\n조깅\n조명\n조미료\n조상\n조선\n조용히\n조절\n조정\n조직\n존댓말\n존재\n졸업\n졸음\n종교\n종로\n종류\n종소리\n종업원\n종종\n종합\n좌석\n죄인\n주관적\n주름\n주말\n주머니\n주먹\n주문\n주민\n주방\n주변\n주식\n주인\n주일\n주장\n주전자\n주택\n준비\n줄거리\n줄기\n줄무늬\n중간\n중계방송\n중국\n중년\n중단\n중독\n중반\n중부\n중세\n중소기업\n중순\n중앙\n중요\n중학교\n즉석\n즉시\n즐거움\n증가\n증거\n증권\n증상\n증세\n지각\n지갑\n지경\n지극히\n지금\n지급\n지능\n지름길\n지리산\n지방\n지붕\n지식\n지역\n지우개\n지원\n지적\n지점\n지진\n지출\n직선\n직업\n직원\n직장\n진급\n진동\n진로\n진료\n진리\n진짜\n진찰\n진출\n진통\n진행\n질문\n질병\n질서\n짐작\n집단\n집안\n집중\n짜증\n찌꺼기\n차남\n차라리\n차량\n차림\n차별\n차선\n차츰\n착각\n찬물\n찬성\n참가\n참기름\n참새\n참석\n참여\n참외\n참조\n찻잔\n창가\n창고\n창구\n창문\n창밖\n창작\n창조\n채널\n채점\n책가방\n책방\n책상\n책임\n챔피언\n처벌\n처음\n천국\n천둥\n천장\n천재\n천천히\n철도\n철저히\n철학\n첫날\n첫째\n청년\n청바지\n청소\n청춘\n체계\n체력\n체온\n체육\n체중\n체험\n초등학생\n초반\n초밥\n초상화\n초순\n초여름\n초원\n초저녁\n초점\n초청\n초콜릿\n촛불\n총각\n총리\n총장\n촬영\n최근\n최상\n최선\n최신\n최악\n최종\n추석\n추억\n추진\n추천\n추측\n축구\n축소\n축제\n축하\n출근\n출발\n출산\n출신\n출연\n출입\n출장\n출판\n충격\n충고\n충돌\n충분히\n충청도\n취업\n취직\n취향\n치약\n친구\n친척\n칠십\n칠월\n칠판\n침대\n침묵\n침실\n칫솔\n칭찬\n카메라\n카운터\n칼국수\n캐릭터\n캠퍼스\n캠페인\n커튼\n컨디션\n컬러\n컴퓨터\n코끼리\n코미디\n콘서트\n콜라\n콤플렉스\n콩나물\n쾌감\n쿠데타\n크림\n큰길\n큰딸\n큰소리\n큰아들\n큰어머니\n큰일\n큰절\n클래식\n클럽\n킬로\n타입\n타자기\n탁구\n탁자\n탄생\n태권도\n태양\n태풍\n택시\n탤런트\n터널\n터미널\n테니스\n테스트\n테이블\n텔레비전\n토론\n토마토\n토요일\n통계\n통과\n통로\n통신\n통역\n통일\n통장\n통제\n통증\n통합\n통화\n퇴근\n퇴원\n퇴직금\n튀김\n트럭\n특급\n특별\n특성\n특수\n특징\n특히\n튼튼히\n티셔츠\n파란색\n파일\n파출소\n판결\n판단\n판매\n판사\n팔십\n팔월\n팝송\n패션\n팩스\n팩시밀리\n팬티\n퍼센트\n페인트\n편견\n편의\n편지\n편히\n평가\n평균\n평생\n평소\n평양\n평일\n평화\n포스터\n포인트\n포장\n포함\n표면\n표정\n표준\n표현\n품목\n품질\n풍경\n풍속\n풍습\n프랑스\n프린터\n플라스틱\n피곤\n피망\n피아노\n필름\n필수\n필요\n필자\n필통\n핑계\n하느님\n하늘\n하드웨어\n하룻밤\n하반기\n하숙집\n하순\n하여튼\n하지만\n하천\n하품\n하필\n학과\n학교\n학급\n학기\n학년\n학력\n학번\n학부모\n학비\n학생\n학술\n학습\n학용품\n학원\n학위\n학자\n학점\n한계\n한글\n한꺼번에\n한낮\n한눈\n한동안\n한때\n한라산\n한마디\n한문\n한번\n한복\n한식\n한여름\n한쪽\n할머니\n할아버지\n할인\n함께\n함부로\n합격\n합리적\n항공\n항구\n항상\n항의\n해결\n해군\n해답\n해당\n해물\n해석\n해설\n해수욕장\n해안\n핵심\n핸드백\n햄버거\n햇볕\n햇살\n행동\n행복\n행사\n행운\n행위\n향기\n향상\n향수\n허락\n허용\n헬기\n현관\n현금\n현대\n현상\n현실\n현장\n현재\n현지\n혈액\n협력\n형부\n형사\n형수\n형식\n형제\n형태\n형편\n혜택\n호기심\n호남\n호랑이\n호박\n호텔\n호흡\n혹시\n홀로\n홈페이지\n홍보\n홍수\n홍차\n화면\n화분\n화살\n화요일\n화장\n화학\n확보\n확인\n확장\n확정\n환갑\n환경\n환영\n환율\n환자\n활기\n활동\n활발히\n활용\n활짝\n회견\n회관\n회복\n회색\n회원\n회장\n회전\n횟수\n횡단보도\n효율적\n후반\n후춧가루\n훈련\n훨씬\n휴식\n휴일\n흉내\n흐름\n흑백\n흑인\n흔적\n흔히\n흥미\n흥분\n희곡\n희망\n희생\n흰색\n힘껏`.split('\\n');\n", "export const wordlist = `abacate\nabaixo\nabalar\nabater\nabduzir\nabelha\naberto\nabismo\nabotoar\nabranger\nabreviar\nabrigar\nabrupto\nabsinto\nabsoluto\nabsurdo\nabutre\nacabado\nacalmar\nacampar\nacanhar\nacaso\naceitar\nacelerar\nacenar\nacervo\nacessar\nacetona\nachatar\nacidez\nacima\nacionado\nacirrar\naclamar\naclive\nacolhida\nacomodar\nacoplar\nacordar\nacumular\nacusador\nadaptar\nadega\nadentro\nadepto\nadequar\naderente\nadesivo\nadeus\nadiante\naditivo\nadjetivo\nadjunto\nadmirar\nadorar\nadquirir\nadubo\nadverso\nadvogado\naeronave\nafastar\naferir\nafetivo\nafinador\nafivelar\naflito\nafluente\nafrontar\nagachar\nagarrar\nagasalho\nagenciar\nagilizar\nagiota\nagitado\nagora\nagradar\nagreste\nagrupar\naguardar\nagulha\najoelhar\najudar\najustar\nalameda\nalarme\nalastrar\nalavanca\nalbergue\nalbino\nalcatra\naldeia\nalecrim\nalegria\nalertar\nalface\nalfinete\nalgum\nalheio\naliar\nalicate\nalienar\nalinhar\naliviar\nalmofada\nalocar\nalpiste\nalterar\naltitude\nalucinar\nalugar\naluno\nalusivo\nalvo\namaciar\namador\namarelo\namassar\nambas\nambiente\nameixa\namenizar\namido\namistoso\namizade\namolador\namontoar\namoroso\namostra\namparar\nampliar\nampola\nanagrama\nanalisar\nanarquia\nanatomia\nandaime\nanel\nanexo\nangular\nanimar\nanjo\nanomalia\nanotado\nansioso\nanterior\nanuidade\nanunciar\nanzol\napagador\napalpar\napanhado\napego\napelido\napertada\napesar\napetite\napito\naplauso\naplicada\napoio\napontar\naposta\naprendiz\naprovar\naquecer\narame\naranha\narara\narcada\nardente\nareia\narejar\narenito\naresta\nargiloso\nargola\narma\narquivo\narraial\narrebate\narriscar\narroba\narrumar\narsenal\narterial\nartigo\narvoredo\nasfaltar\nasilado\naspirar\nassador\nassinar\nassoalho\nassunto\nastral\natacado\natadura\natalho\natarefar\natear\natender\naterro\nateu\natingir\natirador\nativo\natoleiro\natracar\natrevido\natriz\natual\natum\nauditor\naumentar\naura\naurora\nautismo\nautoria\nautuar\navaliar\navante\navaria\navental\navesso\naviador\navisar\navulso\naxila\nazarar\nazedo\nazeite\nazulejo\nbabar\nbabosa\nbacalhau\nbacharel\nbacia\nbagagem\nbaiano\nbailar\nbaioneta\nbairro\nbaixista\nbajular\nbaleia\nbaliza\nbalsa\nbanal\nbandeira\nbanho\nbanir\nbanquete\nbarato\nbarbado\nbaronesa\nbarraca\nbarulho\nbaseado\nbastante\nbatata\nbatedor\nbatida\nbatom\nbatucar\nbaunilha\nbeber\nbeijo\nbeirada\nbeisebol\nbeldade\nbeleza\nbelga\nbeliscar\nbendito\nbengala\nbenzer\nberimbau\nberlinda\nberro\nbesouro\nbexiga\nbezerro\nbico\nbicudo\nbienal\nbifocal\nbifurcar\nbigorna\nbilhete\nbimestre\nbimotor\nbiologia\nbiombo\nbiosfera\nbipolar\nbirrento\nbiscoito\nbisneto\nbispo\nbissexto\nbitola\nbizarro\nblindado\nbloco\nbloquear\nboato\nbobagem\nbocado\nbocejo\nbochecha\nboicotar\nbolada\nboletim\nbolha\nbolo\nbombeiro\nbonde\nboneco\nbonita\nborbulha\nborda\nboreal\nborracha\nbovino\nboxeador\nbranco\nbrasa\nbraveza\nbreu\nbriga\nbrilho\nbrincar\nbroa\nbrochura\nbronzear\nbroto\nbruxo\nbucha\nbudismo\nbufar\nbule\nburaco\nbusca\nbusto\nbuzina\ncabana\ncabelo\ncabide\ncabo\ncabrito\ncacau\ncacetada\ncachorro\ncacique\ncadastro\ncadeado\ncafezal\ncaiaque\ncaipira\ncaixote\ncajado\ncaju\ncalafrio\ncalcular\ncaldeira\ncalibrar\ncalmante\ncalota\ncamada\ncambista\ncamisa\ncamomila\ncampanha\ncamuflar\ncanavial\ncancelar\ncaneta\ncanguru\ncanhoto\ncanivete\ncanoa\ncansado\ncantar\ncanudo\ncapacho\ncapela\ncapinar\ncapotar\ncapricho\ncaptador\ncapuz\ncaracol\ncarbono\ncardeal\ncareca\ncarimbar\ncarneiro\ncarpete\ncarreira\ncartaz\ncarvalho\ncasaco\ncasca\ncasebre\ncastelo\ncasulo\ncatarata\ncativar\ncaule\ncausador\ncautelar\ncavalo\ncaverna\ncebola\ncedilha\ncegonha\ncelebrar\ncelular\ncenoura\ncenso\ncenteio\ncercar\ncerrado\ncerteiro\ncerveja\ncetim\ncevada\nchacota\nchaleira\nchamado\nchapada\ncharme\nchatice\nchave\nchefe\nchegada\ncheiro\ncheque\nchicote\nchifre\nchinelo\nchocalho\nchover\nchumbo\nchutar\nchuva\ncicatriz\nciclone\ncidade\ncidreira\nciente\ncigana\ncimento\ncinto\ncinza\nciranda\ncircuito\ncirurgia\ncitar\nclareza\nclero\nclicar\nclone\nclube\ncoado\ncoagir\ncobaia\ncobertor\ncobrar\ncocada\ncoelho\ncoentro\ncoeso\ncogumelo\ncoibir\ncoifa\ncoiote\ncolar\ncoleira\ncolher\ncolidir\ncolmeia\ncolono\ncoluna\ncomando\ncombinar\ncomentar\ncomitiva\ncomover\ncomplexo\ncomum\nconcha\ncondor\nconectar\nconfuso\ncongelar\nconhecer\nconjugar\nconsumir\ncontrato\nconvite\ncooperar\ncopeiro\ncopiador\ncopo\ncoquetel\ncoragem\ncordial\ncorneta\ncoronha\ncorporal\ncorreio\ncortejo\ncoruja\ncorvo\ncosseno\ncostela\ncotonete\ncouro\ncouve\ncovil\ncozinha\ncratera\ncravo\ncreche\ncredor\ncreme\ncrer\ncrespo\ncriada\ncriminal\ncrioulo\ncrise\ncriticar\ncrosta\ncrua\ncruzeiro\ncubano\ncueca\ncuidado\ncujo\nculatra\nculminar\nculpar\ncultura\ncumprir\ncunhado\ncupido\ncurativo\ncurral\ncursar\ncurto\ncuspir\ncustear\ncutelo\ndamasco\ndatar\ndebater\ndebitar\ndeboche\ndebulhar\ndecalque\ndecimal\ndeclive\ndecote\ndecretar\ndedal\ndedicado\ndeduzir\ndefesa\ndefumar\ndegelo\ndegrau\ndegustar\ndeitado\ndeixar\ndelator\ndelegado\ndelinear\ndelonga\ndemanda\ndemitir\ndemolido\ndentista\ndepenado\ndepilar\ndepois\ndepressa\ndepurar\nderiva\nderramar\ndesafio\ndesbotar\ndescanso\ndesenho\ndesfiado\ndesgaste\ndesigual\ndeslize\ndesmamar\ndesova\ndespesa\ndestaque\ndesviar\ndetalhar\ndetentor\ndetonar\ndetrito\ndeusa\ndever\ndevido\ndevotado\ndezena\ndiagrama\ndialeto\ndidata\ndifuso\ndigitar\ndilatado\ndiluente\ndiminuir\ndinastia\ndinheiro\ndiocese\ndireto\ndiscreta\ndisfarce\ndisparo\ndisquete\ndissipar\ndistante\nditador\ndiurno\ndiverso\ndivisor\ndivulgar\ndizer\ndobrador\ndolorido\ndomador\ndominado\ndonativo\ndonzela\ndormente\ndorsal\ndosagem\ndourado\ndoutor\ndrenagem\ndrible\ndrogaria\nduelar\nduende\ndueto\nduplo\nduquesa\ndurante\nduvidoso\neclodir\necoar\necologia\nedificar\nedital\neducado\nefeito\nefetivar\nejetar\nelaborar\neleger\neleitor\nelenco\nelevador\neliminar\nelogiar\nembargo\nembolado\nembrulho\nembutido\nemenda\nemergir\nemissor\nempatia\nempenho\nempinado\nempolgar\nemprego\nempurrar\nemulador\nencaixe\nencenado\nenchente\nencontro\nendeusar\nendossar\nenfaixar\nenfeite\nenfim\nengajado\nengenho\nenglobar\nengomado\nengraxar\nenguia\nenjoar\nenlatar\nenquanto\nenraizar\nenrolado\nenrugar\nensaio\nenseada\nensino\nensopado\nentanto\nenteado\nentidade\nentortar\nentrada\nentulho\nenvergar\nenviado\nenvolver\nenxame\nenxerto\nenxofre\nenxuto\nepiderme\nequipar\nereto\nerguido\nerrata\nerva\nervilha\nesbanjar\nesbelto\nescama\nescola\nescrita\nescuta\nesfinge\nesfolar\nesfregar\nesfumado\nesgrima\nesmalte\nespanto\nespelho\nespiga\nesponja\nespreita\nespumar\nesquerda\nestaca\nesteira\nesticar\nestofado\nestrela\nestudo\nesvaziar\netanol\netiqueta\neuforia\neuropeu\nevacuar\nevaporar\nevasivo\neventual\nevidente\nevoluir\nexagero\nexalar\nexaminar\nexato\nexausto\nexcesso\nexcitar\nexclamar\nexecutar\nexemplo\nexibir\nexigente\nexonerar\nexpandir\nexpelir\nexpirar\nexplanar\nexposto\nexpresso\nexpulsar\nexterno\nextinto\nextrato\nfabricar\nfabuloso\nfaceta\nfacial\nfada\nfadiga\nfaixa\nfalar\nfalta\nfamiliar\nfandango\nfanfarra\nfantoche\nfardado\nfarelo\nfarinha\nfarofa\nfarpa\nfartura\nfatia\nfator\nfavorita\nfaxina\nfazenda\nfechado\nfeijoada\nfeirante\nfelino\nfeminino\nfenda\nfeno\nfera\nferiado\nferrugem\nferver\nfestejar\nfetal\nfeudal\nfiapo\nfibrose\nficar\nficheiro\nfigurado\nfileira\nfilho\nfilme\nfiltrar\nfirmeza\nfisgada\nfissura\nfita\nfivela\nfixador\nfixo\nflacidez\nflamingo\nflanela\nflechada\nflora\nflutuar\nfluxo\nfocal\nfocinho\nfofocar\nfogo\nfoguete\nfoice\nfolgado\nfolheto\nforjar\nformiga\nforno\nforte\nfosco\nfossa\nfragata\nfralda\nfrango\nfrasco\nfraterno\nfreira\nfrente\nfretar\nfrieza\nfriso\nfritura\nfronha\nfrustrar\nfruteira\nfugir\nfulano\nfuligem\nfundar\nfungo\nfunil\nfurador\nfurioso\nfutebol\ngabarito\ngabinete\ngado\ngaiato\ngaiola\ngaivota\ngalega\ngalho\ngalinha\ngalocha\nganhar\ngaragem\ngarfo\ngargalo\ngarimpo\ngaroupa\ngarrafa\ngasoduto\ngasto\ngata\ngatilho\ngaveta\ngazela\ngelado\ngeleia\ngelo\ngemada\ngemer\ngemido\ngeneroso\ngengiva\ngenial\ngenoma\ngenro\ngeologia\ngerador\ngerminar\ngesso\ngestor\nginasta\ngincana\ngingado\ngirafa\ngirino\nglacial\nglicose\nglobal\nglorioso\ngoela\ngoiaba\ngolfe\ngolpear\ngordura\ngorjeta\ngorro\ngostoso\ngoteira\ngovernar\ngracejo\ngradual\ngrafite\ngralha\ngrampo\ngranada\ngratuito\ngraveto\ngraxa\ngrego\ngrelhar\ngreve\ngrilo\ngrisalho\ngritaria\ngrosso\ngrotesco\ngrudado\ngrunhido\ngruta\nguache\nguarani\nguaxinim\nguerrear\nguiar\nguincho\nguisado\ngula\nguloso\nguru\nhabitar\nharmonia\nhaste\nhaver\nhectare\nherdar\nheresia\nhesitar\nhiato\nhibernar\nhidratar\nhiena\nhino\nhipismo\nhipnose\nhipoteca\nhoje\nholofote\nhomem\nhonesto\nhonrado\nhormonal\nhospedar\nhumorado\niate\nideia\nidoso\nignorado\nigreja\niguana\nileso\nilha\niludido\niluminar\nilustrar\nimagem\nimediato\nimenso\nimersivo\niminente\nimitador\nimortal\nimpacto\nimpedir\nimplante\nimpor\nimprensa\nimpune\nimunizar\ninalador\ninapto\ninativo\nincenso\ninchar\nincidir\nincluir\nincolor\nindeciso\nindireto\nindutor\nineficaz\ninerente\ninfantil\ninfestar\ninfinito\ninflamar\ninformal\ninfrator\ningerir\ninibido\ninicial\ninimigo\ninjetar\ninocente\ninodoro\ninovador\ninox\ninquieto\ninscrito\ninseto\ninsistir\ninspetor\ninstalar\ninsulto\nintacto\nintegral\nintimar\nintocado\nintriga\ninvasor\ninverno\ninvicto\ninvocar\niogurte\niraniano\nironizar\nirreal\nirritado\nisca\nisento\nisolado\nisqueiro\nitaliano\njaneiro\njangada\njanta\njararaca\njardim\njarro\njasmim\njato\njavali\njazida\njejum\njoaninha\njoelhada\njogador\njoia\njornal\njorrar\njovem\njuba\njudeu\njudoca\njuiz\njulgador\njulho\njurado\njurista\njuro\njusta\nlabareda\nlaboral\nlacre\nlactante\nladrilho\nlagarta\nlagoa\nlaje\nlamber\nlamentar\nlaminar\nlampejo\nlanche\nlapidar\nlapso\nlaranja\nlareira\nlargura\nlasanha\nlastro\nlateral\nlatido\nlavanda\nlavoura\nlavrador\nlaxante\nlazer\nlealdade\nlebre\nlegado\nlegendar\nlegista\nleigo\nleiloar\nleitura\nlembrete\nleme\nlenhador\nlentilha\nleoa\nlesma\nleste\nletivo\nletreiro\nlevar\nleveza\nlevitar\nliberal\nlibido\nliderar\nligar\nligeiro\nlimitar\nlimoeiro\nlimpador\nlinda\nlinear\nlinhagem\nliquidez\nlistagem\nlisura\nlitoral\nlivro\nlixa\nlixeira\nlocador\nlocutor\nlojista\nlombo\nlona\nlonge\nlontra\nlorde\nlotado\nloteria\nloucura\nlousa\nlouvar\nluar\nlucidez\nlucro\nluneta\nlustre\nlutador\nluva\nmacaco\nmacete\nmachado\nmacio\nmadeira\nmadrinha\nmagnata\nmagreza\nmaior\nmais\nmalandro\nmalha\nmalote\nmaluco\nmamilo\nmamoeiro\nmamute\nmanada\nmancha\nmandato\nmanequim\nmanhoso\nmanivela\nmanobrar\nmansa\nmanter\nmanusear\nmapeado\nmaquinar\nmarcador\nmaresia\nmarfim\nmargem\nmarinho\nmarmita\nmaroto\nmarquise\nmarreco\nmartelo\nmarujo\nmascote\nmasmorra\nmassagem\nmastigar\nmatagal\nmaterno\nmatinal\nmatutar\nmaxilar\nmedalha\nmedida\nmedusa\nmegafone\nmeiga\nmelancia\nmelhor\nmembro\nmemorial\nmenino\nmenos\nmensagem\nmental\nmerecer\nmergulho\nmesada\nmesclar\nmesmo\nmesquita\nmestre\nmetade\nmeteoro\nmetragem\nmexer\nmexicano\nmicro\nmigalha\nmigrar\nmilagre\nmilenar\nmilhar\nmimado\nminerar\nminhoca\nministro\nminoria\nmiolo\nmirante\nmirtilo\nmisturar\nmocidade\nmoderno\nmodular\nmoeda\nmoer\nmoinho\nmoita\nmoldura\nmoleza\nmolho\nmolinete\nmolusco\nmontanha\nmoqueca\nmorango\nmorcego\nmordomo\nmorena\nmosaico\nmosquete\nmostarda\nmotel\nmotim\nmoto\nmotriz\nmuda\nmuito\nmulata\nmulher\nmultar\nmundial\nmunido\nmuralha\nmurcho\nmuscular\nmuseu\nmusical\nnacional\nnadador\nnaja\nnamoro\nnarina\nnarrado\nnascer\nnativa\nnatureza\nnavalha\nnavegar\nnavio\nneblina\nnebuloso\nnegativa\nnegociar\nnegrito\nnervoso\nneta\nneural\nnevasca\nnevoeiro\nninar\nninho\nnitidez\nnivelar\nnobreza\nnoite\nnoiva\nnomear\nnominal\nnordeste\nnortear\nnotar\nnoticiar\nnoturno\nnovelo\nnovilho\nnovo\nnublado\nnudez\nnumeral\nnupcial\nnutrir\nnuvem\nobcecado\nobedecer\nobjetivo\nobrigado\nobscuro\nobstetra\nobter\nobturar\nocidente\nocioso\nocorrer\noculista\nocupado\nofegante\nofensiva\noferenda\noficina\nofuscado\nogiva\nolaria\noleoso\nolhar\noliveira\nombro\nomelete\nomisso\nomitir\nondulado\noneroso\nontem\nopcional\noperador\noponente\noportuno\noposto\norar\norbitar\nordem\nordinal\norfanato\norgasmo\norgulho\noriental\norigem\noriundo\norla\nortodoxo\norvalho\noscilar\nossada\nosso\nostentar\notimismo\nousadia\noutono\noutubro\nouvido\novelha\novular\noxidar\noxigenar\npacato\npaciente\npacote\npactuar\npadaria\npadrinho\npagar\npagode\npainel\npairar\npaisagem\npalavra\npalestra\npalheta\npalito\npalmada\npalpitar\npancada\npanela\npanfleto\npanqueca\npantanal\npapagaio\npapelada\npapiro\nparafina\nparcial\npardal\nparede\npartida\npasmo\npassado\npastel\npatamar\npatente\npatinar\npatrono\npaulada\npausar\npeculiar\npedalar\npedestre\npediatra\npedra\npegada\npeitoral\npeixe\npele\npelicano\npenca\npendurar\npeneira\npenhasco\npensador\npente\nperceber\nperfeito\npergunta\nperito\npermitir\nperna\nperplexo\npersiana\npertence\nperuca\npescado\npesquisa\npessoa\npetiscar\npiada\npicado\npiedade\npigmento\npilastra\npilhado\npilotar\npimenta\npincel\npinguim\npinha\npinote\npintar\npioneiro\npipoca\npiquete\npiranha\npires\npirueta\npiscar\npistola\npitanga\npivete\nplanta\nplaqueta\nplatina\nplebeu\nplumagem\npluvial\npneu\npoda\npoeira\npoetisa\npolegada\npoliciar\npoluente\npolvilho\npomar\npomba\nponderar\npontaria\npopuloso\nporta\npossuir\npostal\npote\npoupar\npouso\npovoar\npraia\nprancha\nprato\npraxe\nprece\npredador\nprefeito\npremiar\nprensar\npreparar\npresilha\npretexto\nprevenir\nprezar\nprimata\nprincesa\nprisma\nprivado\nprocesso\nproduto\nprofeta\nproibido\nprojeto\nprometer\npropagar\nprosa\nprotetor\nprovador\npublicar\npudim\npular\npulmonar\npulseira\npunhal\npunir\npupilo\npureza\npuxador\nquadra\nquantia\nquarto\nquase\nquebrar\nqueda\nqueijo\nquente\nquerido\nquimono\nquina\nquiosque\nrabanada\nrabisco\nrachar\nracionar\nradial\nraiar\nrainha\nraio\nraiva\nrajada\nralado\nramal\nranger\nranhura\nrapadura\nrapel\nrapidez\nraposa\nraquete\nraridade\nrasante\nrascunho\nrasgar\nraspador\nrasteira\nrasurar\nratazana\nratoeira\nrealeza\nreanimar\nreaver\nrebaixar\nrebelde\nrebolar\nrecado\nrecente\nrecheio\nrecibo\nrecordar\nrecrutar\nrecuar\nrede\nredimir\nredonda\nreduzida\nreenvio\nrefinar\nrefletir\nrefogar\nrefresco\nrefugiar\nregalia\nregime\nregra\nreinado\nreitor\nrejeitar\nrelativo\nremador\nremendo\nremorso\nrenovado\nreparo\nrepelir\nrepleto\nrepolho\nrepresa\nrepudiar\nrequerer\nresenha\nresfriar\nresgatar\nresidir\nresolver\nrespeito\nressaca\nrestante\nresumir\nretalho\nreter\nretirar\nretomada\nretratar\nrevelar\nrevisor\nrevolta\nriacho\nrica\nrigidez\nrigoroso\nrimar\nringue\nrisada\nrisco\nrisonho\nrobalo\nrochedo\nrodada\nrodeio\nrodovia\nroedor\nroleta\nromano\nroncar\nrosado\nroseira\nrosto\nrota\nroteiro\nrotina\nrotular\nrouco\nroupa\nroxo\nrubro\nrugido\nrugoso\nruivo\nrumo\nrupestre\nrusso\nsabor\nsaciar\nsacola\nsacudir\nsadio\nsafira\nsaga\nsagrada\nsaibro\nsalada\nsaleiro\nsalgado\nsaliva\nsalpicar\nsalsicha\nsaltar\nsalvador\nsambar\nsamurai\nsanar\nsanfona\nsangue\nsanidade\nsapato\nsarda\nsargento\nsarjeta\nsaturar\nsaudade\nsaxofone\nsazonal\nsecar\nsecular\nseda\nsedento\nsediado\nsedoso\nsedutor\nsegmento\nsegredo\nsegundo\nseiva\nseleto\nselvagem\nsemanal\nsemente\nsenador\nsenhor\nsensual\nsentado\nseparado\nsereia\nseringa\nserra\nservo\nsetembro\nsetor\nsigilo\nsilhueta\nsilicone\nsimetria\nsimpatia\nsimular\nsinal\nsincero\nsingular\nsinopse\nsintonia\nsirene\nsiri\nsituado\nsoberano\nsobra\nsocorro\nsogro\nsoja\nsolda\nsoletrar\nsolteiro\nsombrio\nsonata\nsondar\nsonegar\nsonhador\nsono\nsoprano\nsoquete\nsorrir\nsorteio\nsossego\nsotaque\nsoterrar\nsovado\nsozinho\nsuavizar\nsubida\nsubmerso\nsubsolo\nsubtrair\nsucata\nsucesso\nsuco\nsudeste\nsufixo\nsugador\nsugerir\nsujeito\nsulfato\nsumir\nsuor\nsuperior\nsuplicar\nsuposto\nsuprimir\nsurdina\nsurfista\nsurpresa\nsurreal\nsurtir\nsuspiro\nsustento\ntabela\ntablete\ntabuada\ntacho\ntagarela\ntalher\ntalo\ntalvez\ntamanho\ntamborim\ntampa\ntangente\ntanto\ntapar\ntapioca\ntardio\ntarefa\ntarja\ntarraxa\ntatuagem\ntaurino\ntaxativo\ntaxista\nteatral\ntecer\ntecido\nteclado\ntedioso\nteia\nteimar\ntelefone\ntelhado\ntempero\ntenente\ntensor\ntentar\ntermal\nterno\nterreno\ntese\ntesoura\ntestado\nteto\ntextura\ntexugo\ntiara\ntigela\ntijolo\ntimbrar\ntimidez\ntingido\ntinteiro\ntiragem\ntitular\ntoalha\ntocha\ntolerar\ntolice\ntomada\ntomilho\ntonel\ntontura\ntopete\ntora\ntorcido\ntorneio\ntorque\ntorrada\ntorto\ntostar\ntouca\ntoupeira\ntoxina\ntrabalho\ntracejar\ntradutor\ntrafegar\ntrajeto\ntrama\ntrancar\ntrapo\ntraseiro\ntratador\ntravar\ntreino\ntremer\ntrepidar\ntrevo\ntriagem\ntribo\ntriciclo\ntridente\ntrilogia\ntrindade\ntriplo\ntriturar\ntriunfal\ntrocar\ntrombeta\ntrova\ntrunfo\ntruque\ntubular\ntucano\ntudo\ntulipa\ntupi\nturbo\nturma\nturquesa\ntutelar\ntutorial\nuivar\numbigo\nunha\nunidade\nuniforme\nurologia\nurso\nurtiga\nurubu\nusado\nusina\nusufruir\nvacina\nvadiar\nvagaroso\nvaidoso\nvala\nvalente\nvalidade\nvalores\nvantagem\nvaqueiro\nvaranda\nvareta\nvarrer\nvascular\nvasilha\nvassoura\nvazar\nvazio\nveado\nvedar\nvegetar\nveicular\nveleiro\nvelhice\nveludo\nvencedor\nvendaval\nvenerar\nventre\nverbal\nverdade\nvereador\nvergonha\nvermelho\nverniz\nversar\nvertente\nvespa\nvestido\nvetorial\nviaduto\nviagem\nviajar\nviatura\nvibrador\nvideira\nvidraria\nviela\nviga\nvigente\nvigiar\nvigorar\nvilarejo\nvinco\nvinheta\nvinil\nvioleta\nvirada\nvirtude\nvisitar\nvisto\nvitral\nviveiro\nvizinho\nvoador\nvoar\nvogal\nvolante\nvoleibol\nvoltagem\nvolumoso\nvontade\nvulto\nvuvuzela\nxadrez\nxarope\nxeque\nxeretar\nxerife\nxingar\nzangado\nzarpar\nzebu\nzelador\nzombar\nzoologia\nzumbido`.split('\\n');\n", "export const wordlist = `的\n一\n是\n在\n不\n了\n有\n和\n人\n这\n中\n大\n为\n上\n个\n国\n我\n以\n要\n他\n时\n来\n用\n们\n生\n到\n作\n地\n于\n出\n就\n分\n对\n成\n会\n可\n主\n发\n年\n动\n同\n工\n也\n能\n下\n过\n子\n说\n产\n种\n面\n而\n方\n后\n多\n定\n行\n学\n法\n所\n民\n得\n经\n十\n三\n之\n进\n着\n等\n部\n度\n家\n电\n力\n里\n如\n水\n化\n高\n自\n二\n理\n起\n小\n物\n现\n实\n加\n量\n都\n两\n体\n制\n机\n当\n使\n点\n从\n业\n本\n去\n把\n性\n好\n应\n开\n它\n合\n还\n因\n由\n其\n些\n然\n前\n外\n天\n政\n四\n日\n那\n社\n义\n事\n平\n形\n相\n全\n表\n间\n样\n与\n关\n各\n重\n新\n线\n内\n数\n正\n心\n反\n你\n明\n看\n原\n又\n么\n利\n比\n或\n但\n质\n气\n第\n向\n道\n命\n此\n变\n条\n只\n没\n结\n解\n问\n意\n建\n月\n公\n无\n系\n军\n很\n情\n者\n最\n立\n代\n想\n已\n通\n并\n提\n直\n题\n党\n程\n展\n五\n果\n料\n象\n员\n革\n位\n入\n常\n文\n总\n次\n品\n式\n活\n设\n及\n管\n特\n件\n长\n求\n老\n头\n基\n资\n边\n流\n路\n级\n少\n图\n山\n统\n接\n知\n较\n将\n组\n见\n计\n别\n她\n手\n角\n期\n根\n论\n运\n农\n指\n几\n九\n区\n强\n放\n决\n西\n被\n干\n做\n必\n战\n先\n回\n则\n任\n取\n据\n处\n队\n南\n给\n色\n光\n门\n即\n保\n治\n北\n造\n百\n规\n热\n领\n七\n海\n口\n东\n导\n器\n压\n志\n世\n金\n增\n争\n济\n阶\n油\n思\n术\n极\n交\n受\n联\n什\n认\n六\n共\n权\n收\n证\n改\n清\n美\n再\n采\n转\n更\n单\n风\n切\n打\n白\n教\n速\n花\n带\n安\n场\n身\n车\n例\n真\n务\n具\n万\n每\n目\n至\n达\n走\n积\n示\n议\n声\n报\n斗\n完\n类\n八\n离\n华\n名\n确\n才\n科\n张\n信\n马\n节\n话\n米\n整\n空\n元\n况\n今\n集\n温\n传\n土\n许\n步\n群\n广\n石\n记\n需\n段\n研\n界\n拉\n林\n律\n叫\n且\n究\n观\n越\n织\n装\n影\n算\n低\n持\n音\n众\n书\n布\n复\n容\n儿\n须\n际\n商\n非\n验\n连\n断\n深\n难\n近\n矿\n千\n周\n委\n素\n技\n备\n半\n办\n青\n省\n列\n习\n响\n约\n支\n般\n史\n感\n劳\n便\n团\n往\n酸\n历\n市\n克\n何\n除\n消\n构\n府\n称\n太\n准\n精\n值\n号\n率\n族\n维\n划\n选\n标\n写\n存\n候\n毛\n亲\n快\n效\n斯\n院\n查\n江\n型\n眼\n王\n按\n格\n养\n易\n置\n派\n层\n片\n始\n却\n专\n状\n育\n厂\n京\n识\n适\n属\n圆\n包\n火\n住\n调\n满\n县\n局\n照\n参\n红\n细\n引\n听\n该\n铁\n价\n严\n首\n底\n液\n官\n德\n随\n病\n苏\n失\n尔\n死\n讲\n配\n女\n黄\n推\n显\n谈\n罪\n神\n艺\n呢\n席\n含\n企\n望\n密\n批\n营\n项\n防\n举\n球\n英\n氧\n势\n告\n李\n台\n落\n木\n帮\n轮\n破\n亚\n师\n围\n注\n远\n字\n材\n排\n供\n河\n态\n封\n另\n施\n减\n树\n溶\n怎\n止\n案\n言\n士\n均\n武\n固\n叶\n鱼\n波\n视\n仅\n费\n紧\n爱\n左\n章\n早\n朝\n害\n续\n轻\n服\n试\n食\n充\n兵\n源\n判\n护\n司\n足\n某\n练\n差\n致\n板\n田\n降\n黑\n犯\n负\n击\n范\n继\n兴\n似\n余\n坚\n曲\n输\n修\n故\n城\n夫\n够\n送\n笔\n船\n占\n右\n财\n吃\n富\n春\n职\n觉\n汉\n画\n功\n巴\n跟\n虽\n杂\n飞\n检\n吸\n助\n升\n阳\n互\n初\n创\n抗\n考\n投\n坏\n策\n古\n径\n换\n未\n跑\n留\n钢\n曾\n端\n责\n站\n简\n述\n钱\n副\n尽\n帝\n射\n草\n冲\n承\n独\n令\n限\n阿\n宣\n环\n双\n请\n超\n微\n让\n控\n州\n良\n轴\n找\n否\n纪\n益\n依\n优\n顶\n础\n载\n倒\n房\n突\n坐\n粉\n敌\n略\n客\n袁\n冷\n胜\n绝\n析\n块\n剂\n测\n丝\n协\n诉\n念\n陈\n仍\n罗\n盐\n友\n洋\n错\n苦\n夜\n刑\n移\n频\n逐\n靠\n混\n母\n短\n皮\n终\n聚\n汽\n村\n云\n哪\n既\n距\n卫\n停\n烈\n央\n察\n烧\n迅\n境\n若\n印\n洲\n刻\n括\n激\n孔\n搞\n甚\n室\n待\n核\n校\n散\n侵\n吧\n甲\n游\n久\n菜\n味\n旧\n模\n湖\n货\n损\n预\n阻\n毫\n普\n稳\n乙\n妈\n植\n息\n扩\n银\n语\n挥\n酒\n守\n拿\n序\n纸\n医\n缺\n雨\n吗\n针\n刘\n啊\n急\n唱\n误\n训\n愿\n审\n附\n获\n茶\n鲜\n粮\n斤\n孩\n脱\n硫\n肥\n善\n龙\n演\n父\n渐\n血\n欢\n械\n掌\n歌\n沙\n刚\n攻\n谓\n盾\n讨\n晚\n粒\n乱\n燃\n矛\n乎\n杀\n药\n宁\n鲁\n贵\n钟\n煤\n读\n班\n伯\n香\n介\n迫\n句\n丰\n培\n握\n兰\n担\n弦\n蛋\n沉\n假\n穿\n执\n答\n乐\n谁\n顺\n烟\n缩\n征\n脸\n喜\n松\n脚\n困\n异\n免\n背\n星\n福\n买\n染\n井\n概\n慢\n怕\n磁\n倍\n祖\n皇\n促\n静\n补\n评\n翻\n肉\n践\n尼\n衣\n宽\n扬\n棉\n希\n伤\n操\n垂\n秋\n宜\n氢\n套\n督\n振\n架\n亮\n末\n宪\n庆\n编\n牛\n触\n映\n雷\n销\n诗\n座\n居\n抓\n裂\n胞\n呼\n娘\n景\n威\n绿\n晶\n厚\n盟\n衡\n鸡\n孙\n延\n危\n胶\n屋\n乡\n临\n陆\n顾\n掉\n呀\n灯\n岁\n措\n束\n耐\n剧\n玉\n赵\n跳\n哥\n季\n课\n凯\n胡\n额\n款\n绍\n卷\n齐\n伟\n蒸\n殖\n永\n宗\n苗\n川\n炉\n岩\n弱\n零\n杨\n奏\n沿\n露\n杆\n探\n滑\n镇\n饭\n浓\n航\n怀\n赶\n库\n夺\n伊\n灵\n税\n途\n灭\n赛\n归\n召\n鼓\n播\n盘\n裁\n险\n康\n唯\n录\n菌\n纯\n借\n糖\n盖\n横\n符\n私\n努\n堂\n域\n枪\n润\n幅\n哈\n竟\n熟\n虫\n泽\n脑\n壤\n碳\n欧\n遍\n侧\n寨\n敢\n彻\n虑\n斜\n薄\n庭\n纳\n弹\n饲\n伸\n折\n麦\n湿\n暗\n荷\n瓦\n塞\n床\n筑\n恶\n户\n访\n塔\n奇\n透\n梁\n刀\n旋\n迹\n卡\n氯\n遇\n份\n毒\n泥\n退\n洗\n摆\n灰\n彩\n卖\n耗\n夏\n择\n忙\n铜\n献\n硬\n予\n繁\n圈\n雪\n函\n亦\n抽\n篇\n阵\n阴\n丁\n尺\n追\n堆\n雄\n迎\n泛\n爸\n楼\n避\n谋\n吨\n野\n猪\n旗\n累\n偏\n典\n馆\n索\n秦\n脂\n潮\n爷\n豆\n忽\n托\n惊\n塑\n遗\n愈\n朱\n替\n纤\n粗\n倾\n尚\n痛\n楚\n谢\n奋\n购\n磨\n君\n池\n旁\n碎\n骨\n监\n捕\n弟\n暴\n割\n贯\n殊\n释\n词\n亡\n壁\n顿\n宝\n午\n尘\n闻\n揭\n炮\n残\n冬\n桥\n妇\n警\n综\n招\n吴\n付\n浮\n遭\n徐\n您\n摇\n谷\n赞\n箱\n隔\n订\n男\n吹\n园\n纷\n唐\n败\n宋\n玻\n巨\n耕\n坦\n荣\n闭\n湾\n键\n凡\n驻\n锅\n救\n恩\n剥\n凝\n碱\n齿\n截\n炼\n麻\n纺\n禁\n废\n盛\n版\n缓\n净\n睛\n昌\n婚\n涉\n筒\n嘴\n插\n岸\n朗\n庄\n街\n藏\n姑\n贸\n腐\n奴\n啦\n惯\n乘\n伙\n恢\n匀\n纱\n扎\n辩\n耳\n彪\n臣\n亿\n璃\n抵\n脉\n秀\n萨\n俄\n网\n舞\n店\n喷\n纵\n寸\n汗\n挂\n洪\n贺\n闪\n柬\n爆\n烯\n津\n稻\n墙\n软\n勇\n像\n滚\n厘\n蒙\n芳\n肯\n坡\n柱\n荡\n腿\n仪\n旅\n尾\n轧\n冰\n贡\n登\n黎\n削\n钻\n勒\n逃\n障\n氨\n郭\n峰\n币\n港\n伏\n轨\n亩\n毕\n擦\n莫\n刺\n浪\n秘\n援\n株\n健\n售\n股\n岛\n甘\n泡\n睡\n童\n铸\n汤\n阀\n休\n汇\n舍\n牧\n绕\n炸\n哲\n磷\n绩\n朋\n淡\n尖\n启\n陷\n柴\n呈\n徒\n颜\n泪\n稍\n忘\n泵\n蓝\n拖\n洞\n授\n镜\n辛\n壮\n锋\n贫\n虚\n弯\n摩\n泰\n幼\n廷\n尊\n窗\n纲\n弄\n隶\n疑\n氏\n宫\n姐\n震\n瑞\n怪\n尤\n琴\n循\n描\n膜\n违\n夹\n腰\n缘\n珠\n穷\n森\n枝\n竹\n沟\n催\n绳\n忆\n邦\n剩\n幸\n浆\n栏\n拥\n牙\n贮\n礼\n滤\n钠\n纹\n罢\n拍\n咱\n喊\n袖\n埃\n勤\n罚\n焦\n潜\n伍\n墨\n欲\n缝\n姓\n刊\n饱\n仿\n奖\n铝\n鬼\n丽\n跨\n默\n挖\n链\n扫\n喝\n袋\n炭\n污\n幕\n诸\n弧\n励\n梅\n奶\n洁\n灾\n舟\n鉴\n苯\n讼\n抱\n毁\n懂\n寒\n智\n埔\n寄\n届\n跃\n渡\n挑\n丹\n艰\n贝\n碰\n拔\n爹\n戴\n码\n梦\n芽\n熔\n赤\n渔\n哭\n敬\n颗\n奔\n铅\n仲\n虎\n稀\n妹\n乏\n珍\n申\n桌\n遵\n允\n隆\n螺\n仓\n魏\n锐\n晓\n氮\n兼\n隐\n碍\n赫\n拨\n忠\n肃\n缸\n牵\n抢\n博\n巧\n壳\n兄\n杜\n讯\n诚\n碧\n祥\n柯\n页\n巡\n矩\n悲\n灌\n龄\n伦\n票\n寻\n桂\n铺\n圣\n恐\n恰\n郑\n趣\n抬\n荒\n腾\n贴\n柔\n滴\n猛\n阔\n辆\n妻\n填\n撤\n储\n签\n闹\n扰\n紫\n砂\n递\n戏\n吊\n陶\n伐\n喂\n疗\n瓶\n婆\n抚\n臂\n摸\n忍\n虾\n蜡\n邻\n胸\n巩\n挤\n偶\n弃\n槽\n劲\n乳\n邓\n吉\n仁\n烂\n砖\n租\n乌\n舰\n伴\n瓜\n浅\n丙\n暂\n燥\n橡\n柳\n迷\n暖\n牌\n秧\n胆\n详\n簧\n踏\n瓷\n谱\n呆\n宾\n糊\n洛\n辉\n愤\n竞\n隙\n怒\n粘\n乃\n绪\n肩\n籍\n敏\n涂\n熙\n皆\n侦\n悬\n掘\n享\n纠\n醒\n狂\n锁\n淀\n恨\n牲\n霸\n爬\n赏\n逆\n玩\n陵\n祝\n秒\n浙\n貌\n役\n彼\n悉\n鸭\n趋\n凤\n晨\n畜\n辈\n秩\n卵\n署\n梯\n炎\n滩\n棋\n驱\n筛\n峡\n冒\n啥\n寿\n译\n浸\n泉\n帽\n迟\n硅\n疆\n贷\n漏\n稿\n冠\n嫩\n胁\n芯\n牢\n叛\n蚀\n奥\n鸣\n岭\n羊\n凭\n串\n塘\n绘\n酵\n融\n盆\n锡\n庙\n筹\n冻\n辅\n摄\n袭\n筋\n拒\n僚\n旱\n钾\n鸟\n漆\n沈\n眉\n疏\n添\n棒\n穗\n硝\n韩\n逼\n扭\n侨\n凉\n挺\n碗\n栽\n炒\n杯\n患\n馏\n劝\n豪\n辽\n勃\n鸿\n旦\n吏\n拜\n狗\n埋\n辊\n掩\n饮\n搬\n骂\n辞\n勾\n扣\n估\n蒋\n绒\n雾\n丈\n朵\n姆\n拟\n宇\n辑\n陕\n雕\n偿\n蓄\n崇\n剪\n倡\n厅\n咬\n驶\n薯\n刷\n斥\n番\n赋\n奉\n佛\n浇\n漫\n曼\n扇\n钙\n桃\n扶\n仔\n返\n俗\n亏\n腔\n鞋\n棱\n覆\n框\n悄\n叔\n撞\n骗\n勘\n旺\n沸\n孤\n吐\n孟\n渠\n屈\n疾\n妙\n惜\n仰\n狠\n胀\n谐\n抛\n霉\n桑\n岗\n嘛\n衰\n盗\n渗\n脏\n赖\n涌\n甜\n曹\n阅\n肌\n哩\n厉\n烃\n纬\n毅\n昨\n伪\n症\n煮\n叹\n钉\n搭\n茎\n笼\n酷\n偷\n弓\n锥\n恒\n杰\n坑\n鼻\n翼\n纶\n叙\n狱\n逮\n罐\n络\n棚\n抑\n膨\n蔬\n寺\n骤\n穆\n冶\n枯\n册\n尸\n凸\n绅\n坯\n牺\n焰\n轰\n欣\n晋\n瘦\n御\n锭\n锦\n丧\n旬\n锻\n垄\n搜\n扑\n邀\n亭\n酯\n迈\n舒\n脆\n酶\n闲\n忧\n酚\n顽\n羽\n涨\n卸\n仗\n陪\n辟\n惩\n杭\n姚\n肚\n捉\n飘\n漂\n昆\n欺\n吾\n郎\n烷\n汁\n呵\n饰\n萧\n雅\n邮\n迁\n燕\n撒\n姻\n赴\n宴\n烦\n债\n帐\n斑\n铃\n旨\n醇\n董\n饼\n雏\n姿\n拌\n傅\n腹\n妥\n揉\n贤\n拆\n歪\n葡\n胺\n丢\n浩\n徽\n昂\n垫\n挡\n览\n贪\n慰\n缴\n汪\n慌\n冯\n诺\n姜\n谊\n凶\n劣\n诬\n耀\n昏\n躺\n盈\n骑\n乔\n溪\n丛\n卢\n抹\n闷\n咨\n刮\n驾\n缆\n悟\n摘\n铒\n掷\n颇\n幻\n柄\n惠\n惨\n佳\n仇\n腊\n窝\n涤\n剑\n瞧\n堡\n泼\n葱\n罩\n霍\n捞\n胎\n苍\n滨\n俩\n捅\n湘\n砍\n霞\n邵\n萄\n疯\n淮\n遂\n熊\n粪\n烘\n宿\n档\n戈\n驳\n嫂\n裕\n徙\n箭\n捐\n肠\n撑\n晒\n辨\n殿\n莲\n摊\n搅\n酱\n屏\n疫\n哀\n蔡\n堵\n沫\n皱\n畅\n叠\n阁\n莱\n敲\n辖\n钩\n痕\n坝\n巷\n饿\n祸\n丘\n玄\n溜\n曰\n逻\n彭\n尝\n卿\n妨\n艇\n吞\n韦\n怨\n矮\n歇`.split('\\n');\n", "export const wordlist = `ábaco\nabdomen\nabeja\nabierto\nabogado\nabono\naborto\nabrazo\nabrir\nabuelo\nabuso\nacabar\nacademia\nacceso\nacción\naceite\nacelga\nacento\naceptar\nácido\naclarar\nacné\nacoger\nacoso\nactivo\nacto\nactriz\nactuar\nacudir\nacuerdo\nacusar\nadicto\nadmitir\nadoptar\nadorno\naduana\nadulto\naéreo\nafectar\nafición\nafinar\nafirmar\nágil\nagitar\nagonía\nagosto\nagotar\nagregar\nagrio\nagua\nagudo\náguila\naguja\nahogo\nahorro\naire\naislar\najedrez\najeno\najuste\nalacrán\nalambre\nalarma\nalba\nálbum\nalcalde\naldea\nalegre\nalejar\nalerta\naleta\nalfiler\nalga\nalgodón\naliado\naliento\nalivio\nalma\nalmeja\nalmíbar\naltar\nalteza\naltivo\nalto\naltura\nalumno\nalzar\namable\namante\namapola\namargo\namasar\námbar\námbito\nameno\namigo\namistad\namor\namparo\namplio\nancho\nanciano\nancla\nandar\nandén\nanemia\nángulo\nanillo\nánimo\nanís\nanotar\nantena\nantiguo\nantojo\nanual\nanular\nanuncio\nañadir\nañejo\naño\napagar\naparato\napetito\napio\naplicar\napodo\naporte\napoyo\naprender\naprobar\napuesta\napuro\narado\naraña\narar\nárbitro\nárbol\narbusto\narchivo\narco\narder\nardilla\narduo\nárea\nárido\naries\narmonía\narnés\naroma\narpa\narpón\narreglo\narroz\narruga\narte\nartista\nasa\nasado\nasalto\nascenso\nasegurar\naseo\nasesor\nasiento\nasilo\nasistir\nasno\nasombro\náspero\nastilla\nastro\nastuto\nasumir\nasunto\natajo\nataque\natar\natento\nateo\nático\natleta\nátomo\natraer\natroz\natún\naudaz\naudio\nauge\naula\naumento\nausente\nautor\naval\navance\navaro\nave\navellana\navena\navestruz\navión\naviso\nayer\nayuda\nayuno\nazafrán\nazar\nazote\nazúcar\nazufre\nazul\nbaba\nbabor\nbache\nbahía\nbaile\nbajar\nbalanza\nbalcón\nbalde\nbambú\nbanco\nbanda\nbaño\nbarba\nbarco\nbarniz\nbarro\nbáscula\nbastón\nbasura\nbatalla\nbatería\nbatir\nbatuta\nbaúl\nbazar\nbebé\nbebida\nbello\nbesar\nbeso\nbestia\nbicho\nbien\nbingo\nblanco\nbloque\nblusa\nboa\nbobina\nbobo\nboca\nbocina\nboda\nbodega\nboina\nbola\nbolero\nbolsa\nbomba\nbondad\nbonito\nbono\nbonsái\nborde\nborrar\nbosque\nbote\nbotín\nbóveda\nbozal\nbravo\nbrazo\nbrecha\nbreve\nbrillo\nbrinco\nbrisa\nbroca\nbroma\nbronce\nbrote\nbruja\nbrusco\nbruto\nbuceo\nbucle\nbueno\nbuey\nbufanda\nbufón\nbúho\nbuitre\nbulto\nburbuja\nburla\nburro\nbuscar\nbutaca\nbuzón\ncaballo\ncabeza\ncabina\ncabra\ncacao\ncadáver\ncadena\ncaer\ncafé\ncaída\ncaimán\ncaja\ncajón\ncal\ncalamar\ncalcio\ncaldo\ncalidad\ncalle\ncalma\ncalor\ncalvo\ncama\ncambio\ncamello\ncamino\ncampo\ncáncer\ncandil\ncanela\ncanguro\ncanica\ncanto\ncaña\ncañón\ncaoba\ncaos\ncapaz\ncapitán\ncapote\ncaptar\ncapucha\ncara\ncarbón\ncárcel\ncareta\ncarga\ncariño\ncarne\ncarpeta\ncarro\ncarta\ncasa\ncasco\ncasero\ncaspa\ncastor\ncatorce\ncatre\ncaudal\ncausa\ncazo\ncebolla\nceder\ncedro\ncelda\ncélebre\nceloso\ncélula\ncemento\nceniza\ncentro\ncerca\ncerdo\ncereza\ncero\ncerrar\ncerteza\ncésped\ncetro\nchacal\nchaleco\nchampú\nchancla\nchapa\ncharla\nchico\nchiste\nchivo\nchoque\nchoza\nchuleta\nchupar\nciclón\nciego\ncielo\ncien\ncierto\ncifra\ncigarro\ncima\ncinco\ncine\ncinta\nciprés\ncirco\nciruela\ncisne\ncita\nciudad\nclamor\nclan\nclaro\nclase\nclave\ncliente\nclima\nclínica\ncobre\ncocción\ncochino\ncocina\ncoco\ncódigo\ncodo\ncofre\ncoger\ncohete\ncojín\ncojo\ncola\ncolcha\ncolegio\ncolgar\ncolina\ncollar\ncolmo\ncolumna\ncombate\ncomer\ncomida\ncómodo\ncompra\nconde\nconejo\nconga\nconocer\nconsejo\ncontar\ncopa\ncopia\ncorazón\ncorbata\ncorcho\ncordón\ncorona\ncorrer\ncoser\ncosmos\ncosta\ncráneo\ncráter\ncrear\ncrecer\ncreído\ncrema\ncría\ncrimen\ncripta\ncrisis\ncromo\ncrónica\ncroqueta\ncrudo\ncruz\ncuadro\ncuarto\ncuatro\ncubo\ncubrir\ncuchara\ncuello\ncuento\ncuerda\ncuesta\ncueva\ncuidar\nculebra\nculpa\nculto\ncumbre\ncumplir\ncuna\ncuneta\ncuota\ncupón\ncúpula\ncurar\ncurioso\ncurso\ncurva\ncutis\ndama\ndanza\ndar\ndardo\ndátil\ndeber\ndébil\ndécada\ndecir\ndedo\ndefensa\ndefinir\ndejar\ndelfín\ndelgado\ndelito\ndemora\ndenso\ndental\ndeporte\nderecho\nderrota\ndesayuno\ndeseo\ndesfile\ndesnudo\ndestino\ndesvío\ndetalle\ndetener\ndeuda\ndía\ndiablo\ndiadema\ndiamante\ndiana\ndiario\ndibujo\ndictar\ndiente\ndieta\ndiez\ndifícil\ndigno\ndilema\ndiluir\ndinero\ndirecto\ndirigir\ndisco\ndiseño\ndisfraz\ndiva\ndivino\ndoble\ndoce\ndolor\ndomingo\ndon\ndonar\ndorado\ndormir\ndorso\ndos\ndosis\ndragón\ndroga\nducha\nduda\nduelo\ndueño\ndulce\ndúo\nduque\ndurar\ndureza\nduro\nébano\nebrio\nechar\neco\necuador\nedad\nedición\nedificio\neditor\neducar\nefecto\neficaz\neje\nejemplo\nelefante\nelegir\nelemento\nelevar\nelipse\nélite\nelixir\nelogio\neludir\nembudo\nemitir\nemoción\nempate\nempeño\nempleo\nempresa\nenano\nencargo\nenchufe\nencía\nenemigo\nenero\nenfado\nenfermo\nengaño\nenigma\nenlace\nenorme\nenredo\nensayo\nenseñar\nentero\nentrar\nenvase\nenvío\népoca\nequipo\nerizo\nescala\nescena\nescolar\nescribir\nescudo\nesencia\nesfera\nesfuerzo\nespada\nespejo\nespía\nesposa\nespuma\nesquí\nestar\neste\nestilo\nestufa\netapa\neterno\nética\netnia\nevadir\nevaluar\nevento\nevitar\nexacto\nexamen\nexceso\nexcusa\nexento\nexigir\nexilio\nexistir\néxito\nexperto\nexplicar\nexponer\nextremo\nfábrica\nfábula\nfachada\nfácil\nfactor\nfaena\nfaja\nfalda\nfallo\nfalso\nfaltar\nfama\nfamilia\nfamoso\nfaraón\nfarmacia\nfarol\nfarsa\nfase\nfatiga\nfauna\nfavor\nfax\nfebrero\nfecha\nfeliz\nfeo\nferia\nferoz\nfértil\nfervor\nfestín\nfiable\nfianza\nfiar\nfibra\nficción\nficha\nfideo\nfiebre\nfiel\nfiera\nfiesta\nfigura\nfijar\nfijo\nfila\nfilete\nfilial\nfiltro\nfin\nfinca\nfingir\nfinito\nfirma\nflaco\nflauta\nflecha\nflor\nflota\nfluir\nflujo\nflúor\nfobia\nfoca\nfogata\nfogón\nfolio\nfolleto\nfondo\nforma\nforro\nfortuna\nforzar\nfosa\nfoto\nfracaso\nfrágil\nfranja\nfrase\nfraude\nfreír\nfreno\nfresa\nfrío\nfrito\nfruta\nfuego\nfuente\nfuerza\nfuga\nfumar\nfunción\nfunda\nfurgón\nfuria\nfusil\nfútbol\nfuturo\ngacela\ngafas\ngaita\ngajo\ngala\ngalería\ngallo\ngamba\nganar\ngancho\nganga\nganso\ngaraje\ngarza\ngasolina\ngastar\ngato\ngavilán\ngemelo\ngemir\ngen\ngénero\ngenio\ngente\ngeranio\ngerente\ngermen\ngesto\ngigante\ngimnasio\ngirar\ngiro\nglaciar\nglobo\ngloria\ngol\ngolfo\ngoloso\ngolpe\ngoma\ngordo\ngorila\ngorra\ngota\ngoteo\ngozar\ngrada\ngráfico\ngrano\ngrasa\ngratis\ngrave\ngrieta\ngrillo\ngripe\ngris\ngrito\ngrosor\ngrúa\ngrueso\ngrumo\ngrupo\nguante\nguapo\nguardia\nguerra\nguía\nguiño\nguion\nguiso\nguitarra\ngusano\ngustar\nhaber\nhábil\nhablar\nhacer\nhacha\nhada\nhallar\nhamaca\nharina\nhaz\nhazaña\nhebilla\nhebra\nhecho\nhelado\nhelio\nhembra\nherir\nhermano\nhéroe\nhervir\nhielo\nhierro\nhígado\nhigiene\nhijo\nhimno\nhistoria\nhocico\nhogar\nhoguera\nhoja\nhombre\nhongo\nhonor\nhonra\nhora\nhormiga\nhorno\nhostil\nhoyo\nhueco\nhuelga\nhuerta\nhueso\nhuevo\nhuida\nhuir\nhumano\nhúmedo\nhumilde\nhumo\nhundir\nhuracán\nhurto\nicono\nideal\nidioma\nídolo\niglesia\niglú\nigual\nilegal\nilusión\nimagen\nimán\nimitar\nimpar\nimperio\nimponer\nimpulso\nincapaz\níndice\ninerte\ninfiel\ninforme\ningenio\ninicio\ninmenso\ninmune\ninnato\ninsecto\ninstante\ninterés\níntimo\nintuir\ninútil\ninvierno\nira\niris\nironía\nisla\nislote\njabalí\njabón\njamón\njarabe\njardín\njarra\njaula\njazmín\njefe\njeringa\njinete\njornada\njoroba\njoven\njoya\njuerga\njueves\njuez\njugador\njugo\njuguete\njuicio\njunco\njungla\njunio\njuntar\njúpiter\njurar\njusto\njuvenil\njuzgar\nkilo\nkoala\nlabio\nlacio\nlacra\nlado\nladrón\nlagarto\nlágrima\nlaguna\nlaico\nlamer\nlámina\nlámpara\nlana\nlancha\nlangosta\nlanza\nlápiz\nlargo\nlarva\nlástima\nlata\nlátex\nlatir\nlaurel\nlavar\nlazo\nleal\nlección\nleche\nlector\nleer\nlegión\nlegumbre\nlejano\nlengua\nlento\nleña\nleón\nleopardo\nlesión\nletal\nletra\nleve\nleyenda\nlibertad\nlibro\nlicor\nlíder\nlidiar\nlienzo\nliga\nligero\nlima\nlímite\nlimón\nlimpio\nlince\nlindo\nlínea\nlingote\nlino\nlinterna\nlíquido\nliso\nlista\nlitera\nlitio\nlitro\nllaga\nllama\nllanto\nllave\nllegar\nllenar\nllevar\nllorar\nllover\nlluvia\nlobo\nloción\nloco\nlocura\nlógica\nlogro\nlombriz\nlomo\nlonja\nlote\nlucha\nlucir\nlugar\nlujo\nluna\nlunes\nlupa\nlustro\nluto\nluz\nmaceta\nmacho\nmadera\nmadre\nmaduro\nmaestro\nmafia\nmagia\nmago\nmaíz\nmaldad\nmaleta\nmalla\nmalo\nmamá\nmambo\nmamut\nmanco\nmando\nmanejar\nmanga\nmaniquí\nmanjar\nmano\nmanso\nmanta\nmañana\nmapa\nmáquina\nmar\nmarco\nmarea\nmarfil\nmargen\nmarido\nmármol\nmarrón\nmartes\nmarzo\nmasa\nmáscara\nmasivo\nmatar\nmateria\nmatiz\nmatriz\nmáximo\nmayor\nmazorca\nmecha\nmedalla\nmedio\nmédula\nmejilla\nmejor\nmelena\nmelón\nmemoria\nmenor\nmensaje\nmente\nmenú\nmercado\nmerengue\nmérito\nmes\nmesón\nmeta\nmeter\nmétodo\nmetro\nmezcla\nmiedo\nmiel\nmiembro\nmiga\nmil\nmilagro\nmilitar\nmillón\nmimo\nmina\nminero\nmínimo\nminuto\nmiope\nmirar\nmisa\nmiseria\nmisil\nmismo\nmitad\nmito\nmochila\nmoción\nmoda\nmodelo\nmoho\nmojar\nmolde\nmoler\nmolino\nmomento\nmomia\nmonarca\nmoneda\nmonja\nmonto\nmoño\nmorada\nmorder\nmoreno\nmorir\nmorro\nmorsa\nmortal\nmosca\nmostrar\nmotivo\nmover\nmóvil\nmozo\nmucho\nmudar\nmueble\nmuela\nmuerte\nmuestra\nmugre\nmujer\nmula\nmuleta\nmulta\nmundo\nmuñeca\nmural\nmuro\nmúsculo\nmuseo\nmusgo\nmúsica\nmuslo\nnácar\nnación\nnadar\nnaipe\nnaranja\nnariz\nnarrar\nnasal\nnatal\nnativo\nnatural\nnáusea\nnaval\nnave\nnavidad\nnecio\nnéctar\nnegar\nnegocio\nnegro\nneón\nnervio\nneto\nneutro\nnevar\nnevera\nnicho\nnido\nniebla\nnieto\nniñez\nniño\nnítido\nnivel\nnobleza\nnoche\nnómina\nnoria\nnorma\nnorte\nnota\nnoticia\nnovato\nnovela\nnovio\nnube\nnuca\nnúcleo\nnudillo\nnudo\nnuera\nnueve\nnuez\nnulo\nnúmero\nnutria\noasis\nobeso\nobispo\nobjeto\nobra\nobrero\nobservar\nobtener\nobvio\noca\nocaso\nocéano\nochenta\nocho\nocio\nocre\noctavo\noctubre\noculto\nocupar\nocurrir\nodiar\nodio\nodisea\noeste\nofensa\noferta\noficio\nofrecer\nogro\noído\noír\nojo\nola\noleada\nolfato\nolivo\nolla\nolmo\nolor\nolvido\nombligo\nonda\nonza\nopaco\nopción\nópera\nopinar\noponer\noptar\nóptica\nopuesto\noración\norador\noral\nórbita\norca\norden\noreja\nórgano\norgía\norgullo\noriente\norigen\norilla\noro\norquesta\noruga\nosadía\noscuro\nosezno\noso\nostra\notoño\notro\noveja\nóvulo\nóxido\noxígeno\noyente\nozono\npacto\npadre\npaella\npágina\npago\npaís\npájaro\npalabra\npalco\npaleta\npálido\npalma\npaloma\npalpar\npan\npanal\npánico\npantera\npañuelo\npapá\npapel\npapilla\npaquete\nparar\nparcela\npared\nparir\nparo\npárpado\nparque\npárrafo\nparte\npasar\npaseo\npasión\npaso\npasta\npata\npatio\npatria\npausa\npauta\npavo\npayaso\npeatón\npecado\npecera\npecho\npedal\npedir\npegar\npeine\npelar\npeldaño\npelea\npeligro\npellejo\npelo\npeluca\npena\npensar\npeñón\npeón\npeor\npepino\npequeño\npera\npercha\nperder\npereza\nperfil\nperico\nperla\npermiso\nperro\npersona\npesa\npesca\npésimo\npestaña\npétalo\npetróleo\npez\npezuña\npicar\npichón\npie\npiedra\npierna\npieza\npijama\npilar\npiloto\npimienta\npino\npintor\npinza\npiña\npiojo\npipa\npirata\npisar\npiscina\npiso\npista\npitón\npizca\nplaca\nplan\nplata\nplaya\nplaza\npleito\npleno\nplomo\npluma\nplural\npobre\npoco\npoder\npodio\npoema\npoesía\npoeta\npolen\npolicía\npollo\npolvo\npomada\npomelo\npomo\npompa\nponer\nporción\nportal\nposada\nposeer\nposible\nposte\npotencia\npotro\npozo\nprado\nprecoz\npregunta\npremio\nprensa\npreso\nprevio\nprimo\npríncipe\nprisión\nprivar\nproa\nprobar\nproceso\nproducto\nproeza\nprofesor\nprograma\nprole\npromesa\npronto\npropio\npróximo\nprueba\npúblico\npuchero\npudor\npueblo\npuerta\npuesto\npulga\npulir\npulmón\npulpo\npulso\npuma\npunto\npuñal\npuño\npupa\npupila\npuré\nquedar\nqueja\nquemar\nquerer\nqueso\nquieto\nquímica\nquince\nquitar\nrábano\nrabia\nrabo\nración\nradical\nraíz\nrama\nrampa\nrancho\nrango\nrapaz\nrápido\nrapto\nrasgo\nraspa\nrato\nrayo\nraza\nrazón\nreacción\nrealidad\nrebaño\nrebote\nrecaer\nreceta\nrechazo\nrecoger\nrecreo\nrecto\nrecurso\nred\nredondo\nreducir\nreflejo\nreforma\nrefrán\nrefugio\nregalo\nregir\nregla\nregreso\nrehén\nreino\nreír\nreja\nrelato\nrelevo\nrelieve\nrelleno\nreloj\nremar\nremedio\nremo\nrencor\nrendir\nrenta\nreparto\nrepetir\nreposo\nreptil\nres\nrescate\nresina\nrespeto\nresto\nresumen\nretiro\nretorno\nretrato\nreunir\nrevés\nrevista\nrey\nrezar\nrico\nriego\nrienda\nriesgo\nrifa\nrígido\nrigor\nrincón\nriñón\nrío\nriqueza\nrisa\nritmo\nrito\nrizo\nroble\nroce\nrociar\nrodar\nrodeo\nrodilla\nroer\nrojizo\nrojo\nromero\nromper\nron\nronco\nronda\nropa\nropero\nrosa\nrosca\nrostro\nrotar\nrubí\nrubor\nrudo\nrueda\nrugir\nruido\nruina\nruleta\nrulo\nrumbo\nrumor\nruptura\nruta\nrutina\nsábado\nsaber\nsabio\nsable\nsacar\nsagaz\nsagrado\nsala\nsaldo\nsalero\nsalir\nsalmón\nsalón\nsalsa\nsalto\nsalud\nsalvar\nsamba\nsanción\nsandía\nsanear\nsangre\nsanidad\nsano\nsanto\nsapo\nsaque\nsardina\nsartén\nsastre\nsatán\nsauna\nsaxofón\nsección\nseco\nsecreto\nsecta\nsed\nseguir\nseis\nsello\nselva\nsemana\nsemilla\nsenda\nsensor\nseñal\nseñor\nseparar\nsepia\nsequía\nser\nserie\nsermón\nservir\nsesenta\nsesión\nseta\nsetenta\nsevero\nsexo\nsexto\nsidra\nsiesta\nsiete\nsiglo\nsigno\nsílaba\nsilbar\nsilencio\nsilla\nsímbolo\nsimio\nsirena\nsistema\nsitio\nsituar\nsobre\nsocio\nsodio\nsol\nsolapa\nsoldado\nsoledad\nsólido\nsoltar\nsolución\nsombra\nsondeo\nsonido\nsonoro\nsonrisa\nsopa\nsoplar\nsoporte\nsordo\nsorpresa\nsorteo\nsostén\nsótano\nsuave\nsubir\nsuceso\nsudor\nsuegra\nsuelo\nsueño\nsuerte\nsufrir\nsujeto\nsultán\nsumar\nsuperar\nsuplir\nsuponer\nsupremo\nsur\nsurco\nsureño\nsurgir\nsusto\nsutil\ntabaco\ntabique\ntabla\ntabú\ntaco\ntacto\ntajo\ntalar\ntalco\ntalento\ntalla\ntalón\ntamaño\ntambor\ntango\ntanque\ntapa\ntapete\ntapia\ntapón\ntaquilla\ntarde\ntarea\ntarifa\ntarjeta\ntarot\ntarro\ntarta\ntatuaje\ntauro\ntaza\ntazón\nteatro\ntecho\ntecla\ntécnica\ntejado\ntejer\ntejido\ntela\nteléfono\ntema\ntemor\ntemplo\ntenaz\ntender\ntener\ntenis\ntenso\nteoría\nterapia\nterco\ntérmino\nternura\nterror\ntesis\ntesoro\ntestigo\ntetera\ntexto\ntez\ntibio\ntiburón\ntiempo\ntienda\ntierra\ntieso\ntigre\ntijera\ntilde\ntimbre\ntímido\ntimo\ntinta\ntío\ntípico\ntipo\ntira\ntirón\ntitán\ntítere\ntítulo\ntiza\ntoalla\ntobillo\ntocar\ntocino\ntodo\ntoga\ntoldo\ntomar\ntono\ntonto\ntopar\ntope\ntoque\ntórax\ntorero\ntormenta\ntorneo\ntoro\ntorpedo\ntorre\ntorso\ntortuga\ntos\ntosco\ntoser\ntóxico\ntrabajo\ntractor\ntraer\ntráfico\ntrago\ntraje\ntramo\ntrance\ntrato\ntrauma\ntrazar\ntrébol\ntregua\ntreinta\ntren\ntrepar\ntres\ntribu\ntrigo\ntripa\ntriste\ntriunfo\ntrofeo\ntrompa\ntronco\ntropa\ntrote\ntrozo\ntruco\ntrueno\ntrufa\ntubería\ntubo\ntuerto\ntumba\ntumor\ntúnel\ntúnica\nturbina\nturismo\nturno\ntutor\nubicar\núlcera\numbral\nunidad\nunir\nuniverso\nuno\nuntar\nuña\nurbano\nurbe\nurgente\nurna\nusar\nusuario\nútil\nutopía\nuva\nvaca\nvacío\nvacuna\nvagar\nvago\nvaina\nvajilla\nvale\nválido\nvalle\nvalor\nválvula\nvampiro\nvara\nvariar\nvarón\nvaso\nvecino\nvector\nvehículo\nveinte\nvejez\nvela\nvelero\nveloz\nvena\nvencer\nvenda\nveneno\nvengar\nvenir\nventa\nvenus\nver\nverano\nverbo\nverde\nvereda\nverja\nverso\nverter\nvía\nviaje\nvibrar\nvicio\nvíctima\nvida\nvídeo\nvidrio\nviejo\nviernes\nvigor\nvil\nvilla\nvinagre\nvino\nviñedo\nviolín\nviral\nvirgo\nvirtud\nvisor\nvíspera\nvista\nvitamina\nviudo\nvivaz\nvivero\nvivir\nvivo\nvolcán\nvolumen\nvolver\nvoraz\nvotar\nvoto\nvoz\nvuelo\nvulgar\nyacer\nyate\nyegua\nyema\nyerno\nyeso\nyodo\nyoga\nyogur\nzafiro\nzanja\nzapato\nzarza\nzona\nzorro\nzumo\nzurdo`.split('\\n');\n", "export const wordlist = `的\n一\n是\n在\n不\n了\n有\n和\n人\n這\n中\n大\n為\n上\n個\n國\n我\n以\n要\n他\n時\n來\n用\n們\n生\n到\n作\n地\n於\n出\n就\n分\n對\n成\n會\n可\n主\n發\n年\n動\n同\n工\n也\n能\n下\n過\n子\n說\n產\n種\n面\n而\n方\n後\n多\n定\n行\n學\n法\n所\n民\n得\n經\n十\n三\n之\n進\n著\n等\n部\n度\n家\n電\n力\n裡\n如\n水\n化\n高\n自\n二\n理\n起\n小\n物\n現\n實\n加\n量\n都\n兩\n體\n制\n機\n當\n使\n點\n從\n業\n本\n去\n把\n性\n好\n應\n開\n它\n合\n還\n因\n由\n其\n些\n然\n前\n外\n天\n政\n四\n日\n那\n社\n義\n事\n平\n形\n相\n全\n表\n間\n樣\n與\n關\n各\n重\n新\n線\n內\n數\n正\n心\n反\n你\n明\n看\n原\n又\n麼\n利\n比\n或\n但\n質\n氣\n第\n向\n道\n命\n此\n變\n條\n只\n沒\n結\n解\n問\n意\n建\n月\n公\n無\n系\n軍\n很\n情\n者\n最\n立\n代\n想\n已\n通\n並\n提\n直\n題\n黨\n程\n展\n五\n果\n料\n象\n員\n革\n位\n入\n常\n文\n總\n次\n品\n式\n活\n設\n及\n管\n特\n件\n長\n求\n老\n頭\n基\n資\n邊\n流\n路\n級\n少\n圖\n山\n統\n接\n知\n較\n將\n組\n見\n計\n別\n她\n手\n角\n期\n根\n論\n運\n農\n指\n幾\n九\n區\n強\n放\n決\n西\n被\n幹\n做\n必\n戰\n先\n回\n則\n任\n取\n據\n處\n隊\n南\n給\n色\n光\n門\n即\n保\n治\n北\n造\n百\n規\n熱\n領\n七\n海\n口\n東\n導\n器\n壓\n志\n世\n金\n增\n爭\n濟\n階\n油\n思\n術\n極\n交\n受\n聯\n什\n認\n六\n共\n權\n收\n證\n改\n清\n美\n再\n採\n轉\n更\n單\n風\n切\n打\n白\n教\n速\n花\n帶\n安\n場\n身\n車\n例\n真\n務\n具\n萬\n每\n目\n至\n達\n走\n積\n示\n議\n聲\n報\n鬥\n完\n類\n八\n離\n華\n名\n確\n才\n科\n張\n信\n馬\n節\n話\n米\n整\n空\n元\n況\n今\n集\n溫\n傳\n土\n許\n步\n群\n廣\n石\n記\n需\n段\n研\n界\n拉\n林\n律\n叫\n且\n究\n觀\n越\n織\n裝\n影\n算\n低\n持\n音\n眾\n書\n布\n复\n容\n兒\n須\n際\n商\n非\n驗\n連\n斷\n深\n難\n近\n礦\n千\n週\n委\n素\n技\n備\n半\n辦\n青\n省\n列\n習\n響\n約\n支\n般\n史\n感\n勞\n便\n團\n往\n酸\n歷\n市\n克\n何\n除\n消\n構\n府\n稱\n太\n準\n精\n值\n號\n率\n族\n維\n劃\n選\n標\n寫\n存\n候\n毛\n親\n快\n效\n斯\n院\n查\n江\n型\n眼\n王\n按\n格\n養\n易\n置\n派\n層\n片\n始\n卻\n專\n狀\n育\n廠\n京\n識\n適\n屬\n圓\n包\n火\n住\n調\n滿\n縣\n局\n照\n參\n紅\n細\n引\n聽\n該\n鐵\n價\n嚴\n首\n底\n液\n官\n德\n隨\n病\n蘇\n失\n爾\n死\n講\n配\n女\n黃\n推\n顯\n談\n罪\n神\n藝\n呢\n席\n含\n企\n望\n密\n批\n營\n項\n防\n舉\n球\n英\n氧\n勢\n告\n李\n台\n落\n木\n幫\n輪\n破\n亞\n師\n圍\n注\n遠\n字\n材\n排\n供\n河\n態\n封\n另\n施\n減\n樹\n溶\n怎\n止\n案\n言\n士\n均\n武\n固\n葉\n魚\n波\n視\n僅\n費\n緊\n愛\n左\n章\n早\n朝\n害\n續\n輕\n服\n試\n食\n充\n兵\n源\n判\n護\n司\n足\n某\n練\n差\n致\n板\n田\n降\n黑\n犯\n負\n擊\n范\n繼\n興\n似\n餘\n堅\n曲\n輸\n修\n故\n城\n夫\n夠\n送\n筆\n船\n佔\n右\n財\n吃\n富\n春\n職\n覺\n漢\n畫\n功\n巴\n跟\n雖\n雜\n飛\n檢\n吸\n助\n昇\n陽\n互\n初\n創\n抗\n考\n投\n壞\n策\n古\n徑\n換\n未\n跑\n留\n鋼\n曾\n端\n責\n站\n簡\n述\n錢\n副\n盡\n帝\n射\n草\n衝\n承\n獨\n令\n限\n阿\n宣\n環\n雙\n請\n超\n微\n讓\n控\n州\n良\n軸\n找\n否\n紀\n益\n依\n優\n頂\n礎\n載\n倒\n房\n突\n坐\n粉\n敵\n略\n客\n袁\n冷\n勝\n絕\n析\n塊\n劑\n測\n絲\n協\n訴\n念\n陳\n仍\n羅\n鹽\n友\n洋\n錯\n苦\n夜\n刑\n移\n頻\n逐\n靠\n混\n母\n短\n皮\n終\n聚\n汽\n村\n雲\n哪\n既\n距\n衛\n停\n烈\n央\n察\n燒\n迅\n境\n若\n印\n洲\n刻\n括\n激\n孔\n搞\n甚\n室\n待\n核\n校\n散\n侵\n吧\n甲\n遊\n久\n菜\n味\n舊\n模\n湖\n貨\n損\n預\n阻\n毫\n普\n穩\n乙\n媽\n植\n息\n擴\n銀\n語\n揮\n酒\n守\n拿\n序\n紙\n醫\n缺\n雨\n嗎\n針\n劉\n啊\n急\n唱\n誤\n訓\n願\n審\n附\n獲\n茶\n鮮\n糧\n斤\n孩\n脫\n硫\n肥\n善\n龍\n演\n父\n漸\n血\n歡\n械\n掌\n歌\n沙\n剛\n攻\n謂\n盾\n討\n晚\n粒\n亂\n燃\n矛\n乎\n殺\n藥\n寧\n魯\n貴\n鐘\n煤\n讀\n班\n伯\n香\n介\n迫\n句\n豐\n培\n握\n蘭\n擔\n弦\n蛋\n沉\n假\n穿\n執\n答\n樂\n誰\n順\n煙\n縮\n徵\n臉\n喜\n松\n腳\n困\n異\n免\n背\n星\n福\n買\n染\n井\n概\n慢\n怕\n磁\n倍\n祖\n皇\n促\n靜\n補\n評\n翻\n肉\n踐\n尼\n衣\n寬\n揚\n棉\n希\n傷\n操\n垂\n秋\n宜\n氫\n套\n督\n振\n架\n亮\n末\n憲\n慶\n編\n牛\n觸\n映\n雷\n銷\n詩\n座\n居\n抓\n裂\n胞\n呼\n娘\n景\n威\n綠\n晶\n厚\n盟\n衡\n雞\n孫\n延\n危\n膠\n屋\n鄉\n臨\n陸\n顧\n掉\n呀\n燈\n歲\n措\n束\n耐\n劇\n玉\n趙\n跳\n哥\n季\n課\n凱\n胡\n額\n款\n紹\n卷\n齊\n偉\n蒸\n殖\n永\n宗\n苗\n川\n爐\n岩\n弱\n零\n楊\n奏\n沿\n露\n桿\n探\n滑\n鎮\n飯\n濃\n航\n懷\n趕\n庫\n奪\n伊\n靈\n稅\n途\n滅\n賽\n歸\n召\n鼓\n播\n盤\n裁\n險\n康\n唯\n錄\n菌\n純\n借\n糖\n蓋\n橫\n符\n私\n努\n堂\n域\n槍\n潤\n幅\n哈\n竟\n熟\n蟲\n澤\n腦\n壤\n碳\n歐\n遍\n側\n寨\n敢\n徹\n慮\n斜\n薄\n庭\n納\n彈\n飼\n伸\n折\n麥\n濕\n暗\n荷\n瓦\n塞\n床\n築\n惡\n戶\n訪\n塔\n奇\n透\n梁\n刀\n旋\n跡\n卡\n氯\n遇\n份\n毒\n泥\n退\n洗\n擺\n灰\n彩\n賣\n耗\n夏\n擇\n忙\n銅\n獻\n硬\n予\n繁\n圈\n雪\n函\n亦\n抽\n篇\n陣\n陰\n丁\n尺\n追\n堆\n雄\n迎\n泛\n爸\n樓\n避\n謀\n噸\n野\n豬\n旗\n累\n偏\n典\n館\n索\n秦\n脂\n潮\n爺\n豆\n忽\n托\n驚\n塑\n遺\n愈\n朱\n替\n纖\n粗\n傾\n尚\n痛\n楚\n謝\n奮\n購\n磨\n君\n池\n旁\n碎\n骨\n監\n捕\n弟\n暴\n割\n貫\n殊\n釋\n詞\n亡\n壁\n頓\n寶\n午\n塵\n聞\n揭\n炮\n殘\n冬\n橋\n婦\n警\n綜\n招\n吳\n付\n浮\n遭\n徐\n您\n搖\n谷\n贊\n箱\n隔\n訂\n男\n吹\n園\n紛\n唐\n敗\n宋\n玻\n巨\n耕\n坦\n榮\n閉\n灣\n鍵\n凡\n駐\n鍋\n救\n恩\n剝\n凝\n鹼\n齒\n截\n煉\n麻\n紡\n禁\n廢\n盛\n版\n緩\n淨\n睛\n昌\n婚\n涉\n筒\n嘴\n插\n岸\n朗\n莊\n街\n藏\n姑\n貿\n腐\n奴\n啦\n慣\n乘\n夥\n恢\n勻\n紗\n扎\n辯\n耳\n彪\n臣\n億\n璃\n抵\n脈\n秀\n薩\n俄\n網\n舞\n店\n噴\n縱\n寸\n汗\n掛\n洪\n賀\n閃\n柬\n爆\n烯\n津\n稻\n牆\n軟\n勇\n像\n滾\n厘\n蒙\n芳\n肯\n坡\n柱\n盪\n腿\n儀\n旅\n尾\n軋\n冰\n貢\n登\n黎\n削\n鑽\n勒\n逃\n障\n氨\n郭\n峰\n幣\n港\n伏\n軌\n畝\n畢\n擦\n莫\n刺\n浪\n秘\n援\n株\n健\n售\n股\n島\n甘\n泡\n睡\n童\n鑄\n湯\n閥\n休\n匯\n舍\n牧\n繞\n炸\n哲\n磷\n績\n朋\n淡\n尖\n啟\n陷\n柴\n呈\n徒\n顏\n淚\n稍\n忘\n泵\n藍\n拖\n洞\n授\n鏡\n辛\n壯\n鋒\n貧\n虛\n彎\n摩\n泰\n幼\n廷\n尊\n窗\n綱\n弄\n隸\n疑\n氏\n宮\n姐\n震\n瑞\n怪\n尤\n琴\n循\n描\n膜\n違\n夾\n腰\n緣\n珠\n窮\n森\n枝\n竹\n溝\n催\n繩\n憶\n邦\n剩\n幸\n漿\n欄\n擁\n牙\n貯\n禮\n濾\n鈉\n紋\n罷\n拍\n咱\n喊\n袖\n埃\n勤\n罰\n焦\n潛\n伍\n墨\n欲\n縫\n姓\n刊\n飽\n仿\n獎\n鋁\n鬼\n麗\n跨\n默\n挖\n鏈\n掃\n喝\n袋\n炭\n污\n幕\n諸\n弧\n勵\n梅\n奶\n潔\n災\n舟\n鑑\n苯\n訟\n抱\n毀\n懂\n寒\n智\n埔\n寄\n屆\n躍\n渡\n挑\n丹\n艱\n貝\n碰\n拔\n爹\n戴\n碼\n夢\n芽\n熔\n赤\n漁\n哭\n敬\n顆\n奔\n鉛\n仲\n虎\n稀\n妹\n乏\n珍\n申\n桌\n遵\n允\n隆\n螺\n倉\n魏\n銳\n曉\n氮\n兼\n隱\n礙\n赫\n撥\n忠\n肅\n缸\n牽\n搶\n博\n巧\n殼\n兄\n杜\n訊\n誠\n碧\n祥\n柯\n頁\n巡\n矩\n悲\n灌\n齡\n倫\n票\n尋\n桂\n鋪\n聖\n恐\n恰\n鄭\n趣\n抬\n荒\n騰\n貼\n柔\n滴\n猛\n闊\n輛\n妻\n填\n撤\n儲\n簽\n鬧\n擾\n紫\n砂\n遞\n戲\n吊\n陶\n伐\n餵\n療\n瓶\n婆\n撫\n臂\n摸\n忍\n蝦\n蠟\n鄰\n胸\n鞏\n擠\n偶\n棄\n槽\n勁\n乳\n鄧\n吉\n仁\n爛\n磚\n租\n烏\n艦\n伴\n瓜\n淺\n丙\n暫\n燥\n橡\n柳\n迷\n暖\n牌\n秧\n膽\n詳\n簧\n踏\n瓷\n譜\n呆\n賓\n糊\n洛\n輝\n憤\n競\n隙\n怒\n粘\n乃\n緒\n肩\n籍\n敏\n塗\n熙\n皆\n偵\n懸\n掘\n享\n糾\n醒\n狂\n鎖\n淀\n恨\n牲\n霸\n爬\n賞\n逆\n玩\n陵\n祝\n秒\n浙\n貌\n役\n彼\n悉\n鴨\n趨\n鳳\n晨\n畜\n輩\n秩\n卵\n署\n梯\n炎\n灘\n棋\n驅\n篩\n峽\n冒\n啥\n壽\n譯\n浸\n泉\n帽\n遲\n矽\n疆\n貸\n漏\n稿\n冠\n嫩\n脅\n芯\n牢\n叛\n蝕\n奧\n鳴\n嶺\n羊\n憑\n串\n塘\n繪\n酵\n融\n盆\n錫\n廟\n籌\n凍\n輔\n攝\n襲\n筋\n拒\n僚\n旱\n鉀\n鳥\n漆\n沈\n眉\n疏\n添\n棒\n穗\n硝\n韓\n逼\n扭\n僑\n涼\n挺\n碗\n栽\n炒\n杯\n患\n餾\n勸\n豪\n遼\n勃\n鴻\n旦\n吏\n拜\n狗\n埋\n輥\n掩\n飲\n搬\n罵\n辭\n勾\n扣\n估\n蔣\n絨\n霧\n丈\n朵\n姆\n擬\n宇\n輯\n陝\n雕\n償\n蓄\n崇\n剪\n倡\n廳\n咬\n駛\n薯\n刷\n斥\n番\n賦\n奉\n佛\n澆\n漫\n曼\n扇\n鈣\n桃\n扶\n仔\n返\n俗\n虧\n腔\n鞋\n棱\n覆\n框\n悄\n叔\n撞\n騙\n勘\n旺\n沸\n孤\n吐\n孟\n渠\n屈\n疾\n妙\n惜\n仰\n狠\n脹\n諧\n拋\n黴\n桑\n崗\n嘛\n衰\n盜\n滲\n臟\n賴\n湧\n甜\n曹\n閱\n肌\n哩\n厲\n烴\n緯\n毅\n昨\n偽\n症\n煮\n嘆\n釘\n搭\n莖\n籠\n酷\n偷\n弓\n錐\n恆\n傑\n坑\n鼻\n翼\n綸\n敘\n獄\n逮\n罐\n絡\n棚\n抑\n膨\n蔬\n寺\n驟\n穆\n冶\n枯\n冊\n屍\n凸\n紳\n坯\n犧\n焰\n轟\n欣\n晉\n瘦\n禦\n錠\n錦\n喪\n旬\n鍛\n壟\n搜\n撲\n邀\n亭\n酯\n邁\n舒\n脆\n酶\n閒\n憂\n酚\n頑\n羽\n漲\n卸\n仗\n陪\n闢\n懲\n杭\n姚\n肚\n捉\n飄\n漂\n昆\n欺\n吾\n郎\n烷\n汁\n呵\n飾\n蕭\n雅\n郵\n遷\n燕\n撒\n姻\n赴\n宴\n煩\n債\n帳\n斑\n鈴\n旨\n醇\n董\n餅\n雛\n姿\n拌\n傅\n腹\n妥\n揉\n賢\n拆\n歪\n葡\n胺\n丟\n浩\n徽\n昂\n墊\n擋\n覽\n貪\n慰\n繳\n汪\n慌\n馮\n諾\n姜\n誼\n兇\n劣\n誣\n耀\n昏\n躺\n盈\n騎\n喬\n溪\n叢\n盧\n抹\n悶\n諮\n刮\n駕\n纜\n悟\n摘\n鉺\n擲\n頗\n幻\n柄\n惠\n慘\n佳\n仇\n臘\n窩\n滌\n劍\n瞧\n堡\n潑\n蔥\n罩\n霍\n撈\n胎\n蒼\n濱\n倆\n捅\n湘\n砍\n霞\n邵\n萄\n瘋\n淮\n遂\n熊\n糞\n烘\n宿\n檔\n戈\n駁\n嫂\n裕\n徙\n箭\n捐\n腸\n撐\n曬\n辨\n殿\n蓮\n攤\n攪\n醬\n屏\n疫\n哀\n蔡\n堵\n沫\n皺\n暢\n疊\n閣\n萊\n敲\n轄\n鉤\n痕\n壩\n巷\n餓\n禍\n丘\n玄\n溜\n曰\n邏\n彭\n嘗\n卿\n妨\n艇\n吞\n韋\n怨\n矮\n歇`.split('\\n');\n", "import type { Address } from 'abitype'\nimport { BaseError } from '../../errors/base.js'\nimport type { Hex } from '../../types/misc.js'\n\nexport type AccountNotDeployedErrorType = AccountNotDeployedError & {\n  name: 'AccountNotDeployedError'\n}\nexport class AccountNotDeployedError extends BaseError {\n  static message = /aa20/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Smart Account is not deployed.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- No `factory`/`factoryData` or `initCode` properties are provided for Smart Account deployment.',\n        '- An incorrect `sender` address is provided.',\n      ],\n      name: 'AccountNotDeployedError',\n    })\n  }\n}\n\nexport type ExecutionRevertedErrorType = ExecutionRevertedError & {\n  code: -32521\n  name: 'ExecutionRevertedError'\n}\nexport class ExecutionRevertedError extends BaseError {\n  static code = -32521\n  static message = /execution reverted/\n\n  data?: { revertData?: Hex } | undefined\n\n  constructor({\n    cause,\n    data,\n    message,\n  }: {\n    cause?: BaseError | undefined\n    data?: { revertData?: Hex } | undefined\n    message?: string | undefined\n  } = {}) {\n    const reason = message\n      ?.replace('execution reverted: ', '')\n      ?.replace('execution reverted', '')\n    super(\n      `Execution reverted ${\n        reason ? `with reason: ${reason}` : 'for an unknown reason'\n      }.`,\n      {\n        cause,\n        name: 'ExecutionRevertedError',\n      },\n    )\n\n    this.data = data\n  }\n}\n\nexport type FailedToSendToBeneficiaryErrorType =\n  FailedToSendToBeneficiaryError & {\n    name: 'FailedToSendToBeneficiaryError'\n  }\nexport class FailedToSendToBeneficiaryError extends BaseError {\n  static message = /aa91/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Failed to send funds to beneficiary.', {\n      cause,\n      name: 'FailedToSendToBeneficiaryError',\n    })\n  }\n}\n\nexport type GasValuesOverflowErrorType = GasValuesOverflowError & {\n  name: 'GasValuesOverflowError'\n}\nexport class GasValuesOverflowError extends BaseError {\n  static message = /aa94/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Gas value overflowed.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- one of the gas values exceeded 2**120 (uint120)',\n      ].filter(Boolean) as string[],\n      name: 'GasValuesOverflowError',\n    })\n  }\n}\n\nexport type HandleOpsOutOfGasErrorType = HandleOpsOutOfGasError & {\n  name: 'HandleOpsOutOfGasError'\n}\nexport class HandleOpsOutOfGasError extends BaseError {\n  static message = /aa95/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super(\n      'The `handleOps` function was called by the Bundler with a gas limit too low.',\n      {\n        cause,\n        name: 'HandleOpsOutOfGasError',\n      },\n    )\n  }\n}\n\nexport type InitCodeFailedErrorType = InitCodeFailedError & {\n  name: 'InitCodeFailedError'\n}\nexport class InitCodeFailedError extends BaseError {\n  static message = /aa13/\n  constructor({\n    cause,\n    factory,\n    factoryData,\n    initCode,\n  }: {\n    cause?: BaseError | undefined\n    factory?: Address | undefined\n    factoryData?: Hex | undefined\n    initCode?: Hex | undefined\n  }) {\n    super('Failed to simulate deployment for Smart Account.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- Invalid `factory`/`factoryData` or `initCode` properties are present',\n        '- Smart Account deployment execution ran out of gas (low `verificationGasLimit` value)',\n        '- Smart Account deployment execution reverted with an error\\n',\n        factory && `factory: ${factory}`,\n        factoryData && `factoryData: ${factoryData}`,\n        initCode && `initCode: ${initCode}`,\n      ].filter(Boolean) as string[],\n      name: 'InitCodeFailedError',\n    })\n  }\n}\n\nexport type InitCodeMustCreateSenderErrorType =\n  InitCodeMustCreateSenderError & {\n    name: 'InitCodeMustCreateSenderError'\n  }\nexport class InitCodeMustCreateSenderError extends BaseError {\n  static message = /aa15/\n  constructor({\n    cause,\n    factory,\n    factoryData,\n    initCode,\n  }: {\n    cause?: BaseError | undefined\n    factory?: Address | undefined\n    factoryData?: Hex | undefined\n    initCode?: Hex | undefined\n  }) {\n    super(\n      'Smart Account initialization implementation did not create an account.',\n      {\n        cause,\n        metaMessages: [\n          'This could arise when:',\n          '- `factory`/`factoryData` or `initCode` properties are invalid',\n          '- Smart Account initialization implementation is incorrect\\n',\n          factory && `factory: ${factory}`,\n          factoryData && `factoryData: ${factoryData}`,\n          initCode && `initCode: ${initCode}`,\n        ].filter(Boolean) as string[],\n        name: 'InitCodeMustCreateSenderError',\n      },\n    )\n  }\n}\n\nexport type InitCodeMustReturnSenderErrorType =\n  InitCodeMustReturnSenderError & {\n    name: 'InitCodeMustReturnSenderError'\n  }\nexport class InitCodeMustReturnSenderError extends BaseError {\n  static message = /aa14/\n  constructor({\n    cause,\n    factory,\n    factoryData,\n    initCode,\n    sender,\n  }: {\n    cause?: BaseError | undefined\n    factory?: Address | undefined\n    factoryData?: Hex | undefined\n    initCode?: Hex | undefined\n    sender?: Address | undefined\n  }) {\n    super(\n      'Smart Account initialization implementation does not return the expected sender.',\n      {\n        cause,\n        metaMessages: [\n          'This could arise when:',\n          'Smart Account initialization implementation does not return a sender address\\n',\n          factory && `factory: ${factory}`,\n          factoryData && `factoryData: ${factoryData}`,\n          initCode && `initCode: ${initCode}`,\n          sender && `sender: ${sender}`,\n        ].filter(Boolean) as string[],\n        name: 'InitCodeMustReturnSenderError',\n      },\n    )\n  }\n}\n\nexport type InsufficientPrefundErrorType = InsufficientPrefundError & {\n  name: 'InsufficientPrefundError'\n}\nexport class InsufficientPrefundError extends BaseError {\n  static message = /aa21/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super(\n      'Smart Account does not have sufficient funds to execute the User Operation.',\n      {\n        cause,\n        metaMessages: [\n          'This could arise when:',\n          '- the Smart Account does not have sufficient funds to cover the required prefund, or',\n          '- a Paymaster was not provided',\n        ].filter(Boolean) as string[],\n        name: 'InsufficientPrefundError',\n      },\n    )\n  }\n}\n\nexport type InternalCallOnlyErrorType = InternalCallOnlyError & {\n  name: 'InternalCallOnlyError'\n}\nexport class InternalCallOnlyError extends BaseError {\n  static message = /aa92/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Bundler attempted to call an invalid function on the EntryPoint.', {\n      cause,\n      name: 'InternalCallOnlyError',\n    })\n  }\n}\n\nexport type InvalidAggregatorErrorType = InvalidAggregatorError & {\n  name: 'InvalidAggregatorError'\n}\nexport class InvalidAggregatorError extends BaseError {\n  static message = /aa96/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super(\n      'Bundler used an invalid aggregator for handling aggregated User Operations.',\n      {\n        cause,\n        name: 'InvalidAggregatorError',\n      },\n    )\n  }\n}\n\nexport type InvalidAccountNonceErrorType = InvalidAccountNonceError & {\n  name: 'InvalidAccountNonceError'\n}\nexport class InvalidAccountNonceError extends BaseError {\n  static message = /aa25/\n  constructor({\n    cause,\n    nonce,\n  }: {\n    cause?: BaseError | undefined\n    nonce?: bigint | undefined\n  }) {\n    super('Invalid Smart Account nonce used for User Operation.', {\n      cause,\n      metaMessages: [nonce && `nonce: ${nonce}`].filter(Boolean) as string[],\n      name: 'InvalidAccountNonceError',\n    })\n  }\n}\n\nexport type InvalidBeneficiaryErrorType = InvalidBeneficiaryError & {\n  name: 'InvalidBeneficiaryError'\n}\nexport class InvalidBeneficiaryError extends BaseError {\n  static message = /aa90/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Bundler has not set a beneficiary address.', {\n      cause,\n      name: 'InvalidBeneficiaryError',\n    })\n  }\n}\n\nexport type InvalidFieldsErrorType = InvalidFieldsError & {\n  name: 'InvalidFieldsError'\n}\nexport class InvalidFieldsError extends BaseError {\n  static code = -32602\n\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Invalid fields set on User Operation.', {\n      cause,\n      name: 'InvalidFieldsError',\n    })\n  }\n}\n\nexport type InvalidPaymasterAndDataErrorType = InvalidPaymasterAndDataError & {\n  name: 'InvalidPaymasterAndDataError'\n}\nexport class InvalidPaymasterAndDataError extends BaseError {\n  static message = /aa93/\n  constructor({\n    cause,\n    paymasterAndData,\n  }: {\n    cause?: BaseError | undefined\n    paymasterAndData?: Hex | undefined\n  }) {\n    super('Paymaster properties provided are invalid.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- the `paymasterAndData` property is of an incorrect length\\n',\n        paymasterAndData && `paymasterAndData: ${paymasterAndData}`,\n      ].filter(Boolean) as string[],\n      name: 'InvalidPaymasterAndDataError',\n    })\n  }\n}\n\nexport type PaymasterDepositTooLowErrorType = PaymasterDepositTooLowError & {\n  code: -32508\n  name: 'PaymasterDepositTooLowError'\n}\nexport class PaymasterDepositTooLowError extends BaseError {\n  static code = -32508\n  static message = /aa31/\n\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Paymaster deposit for the User Operation is too low.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- the Paymaster has deposited less than the expected amount via the `deposit` function',\n      ].filter(Boolean) as string[],\n      name: 'PaymasterDepositTooLowError',\n    })\n  }\n}\n\nexport type PaymasterFunctionRevertedErrorType =\n  PaymasterFunctionRevertedError & {\n    name: 'PaymasterFunctionRevertedError'\n  }\nexport class PaymasterFunctionRevertedError extends BaseError {\n  static message = /aa33/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('The `validatePaymasterUserOp` function on the Paymaster reverted.', {\n      cause,\n      name: 'PaymasterFunctionRevertedError',\n    })\n  }\n}\n\nexport type PaymasterNotDeployedErrorType = PaymasterNotDeployedError & {\n  name: 'PaymasterNotDeployedError'\n}\nexport class PaymasterNotDeployedError extends BaseError {\n  static message = /aa30/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('The Paymaster contract has not been deployed.', {\n      cause,\n      name: 'PaymasterNotDeployedError',\n    })\n  }\n}\n\nexport type PaymasterRateLimitErrorType = PaymasterRateLimitError & {\n  code: -32504\n  name: 'PaymasterRateLimitError'\n}\nexport class PaymasterRateLimitError extends BaseError {\n  static code = -32504\n\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(\n      'UserOperation rejected because paymaster (or signature aggregator) is throttled/banned.',\n      {\n        cause,\n        name: 'PaymasterRateLimitError',\n      },\n    )\n  }\n}\n\nexport type PaymasterStakeTooLowErrorType = PaymasterStakeTooLowError & {\n  code: -32505\n  name: 'PaymasterStakeTooLowError'\n}\nexport class PaymasterStakeTooLowError extends BaseError {\n  static code = -32505\n\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(\n      'UserOperation rejected because paymaster (or signature aggregator) is throttled/banned.',\n      {\n        cause,\n        name: 'PaymasterStakeTooLowError',\n      },\n    )\n  }\n}\n\nexport type PaymasterPostOpFunctionRevertedErrorType =\n  PaymasterPostOpFunctionRevertedError & {\n    name: 'PaymasterPostOpFunctionRevertedError'\n  }\nexport class PaymasterPostOpFunctionRevertedError extends BaseError {\n  static message = /aa50/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Paymaster `postOp` function reverted.', {\n      cause,\n      name: 'PaymasterPostOpFunctionRevertedError',\n    })\n  }\n}\n\nexport type SenderAlreadyConstructedErrorType =\n  SenderAlreadyConstructedError & {\n    name: 'SenderAlreadyConstructedError'\n  }\nexport class SenderAlreadyConstructedError extends BaseError {\n  static message = /aa10/\n  constructor({\n    cause,\n    factory,\n    factoryData,\n    initCode,\n  }: {\n    cause?: BaseError | undefined\n    factory?: Address | undefined\n    factoryData?: Hex | undefined\n    initCode?: Hex | undefined\n  }) {\n    super('Smart Account has already been deployed.', {\n      cause,\n      metaMessages: [\n        'Remove the following properties and try again:',\n        factory && '`factory`',\n        factoryData && '`factoryData`',\n        initCode && '`initCode`',\n      ].filter(Boolean) as string[],\n      name: 'SenderAlreadyConstructedError',\n    })\n  }\n}\n\nexport type SignatureCheckFailedErrorType = SignatureCheckFailedError & {\n  code: -32507\n  name: 'SignatureCheckFailedError'\n}\nexport class SignatureCheckFailedError extends BaseError {\n  static code = -32507\n\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(\n      'UserOperation rejected because account signature check failed (or paymaster signature, if the paymaster uses its data as signature).',\n      {\n        cause,\n        name: 'SignatureCheckFailedError',\n      },\n    )\n  }\n}\n\nexport type SmartAccountFunctionRevertedErrorType =\n  SmartAccountFunctionRevertedError & {\n    name: 'SmartAccountFunctionRevertedError'\n  }\nexport class SmartAccountFunctionRevertedError extends BaseError {\n  static message = /aa23/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('The `validateUserOp` function on the Smart Account reverted.', {\n      cause,\n      name: 'SmartAccountFunctionRevertedError',\n    })\n  }\n}\n\nexport type UnsupportedSignatureAggregatorErrorType =\n  UnsupportedSignatureAggregatorError & {\n    code: -32506\n    name: 'UnsupportedSignatureAggregatorError'\n  }\nexport class UnsupportedSignatureAggregatorError extends BaseError {\n  static code = -32506\n\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(\n      'UserOperation rejected because account specified unsupported signature aggregator.',\n      {\n        cause,\n        name: 'UnsupportedSignatureAggregatorError',\n      },\n    )\n  }\n}\n\nexport type UserOperationExpiredErrorType = UserOperationExpiredError & {\n  name: 'UserOperationExpiredError'\n}\nexport class UserOperationExpiredError extends BaseError {\n  static message = /aa22/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('User Operation expired.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- the `validAfter` or `validUntil` values returned from `validateUserOp` on the Smart Account are not satisfied',\n      ].filter(Boolean) as string[],\n      name: 'UserOperationExpiredError',\n    })\n  }\n}\n\nexport type UserOperationPaymasterExpiredErrorType =\n  UserOperationPaymasterExpiredError & {\n    name: 'UserOperationPaymasterExpiredError'\n  }\nexport class UserOperationPaymasterExpiredError extends BaseError {\n  static message = /aa32/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Paymaster for User Operation expired.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- the `validAfter` or `validUntil` values returned from `validatePaymasterUserOp` on the Paymaster are not satisfied',\n      ].filter(Boolean) as string[],\n      name: 'UserOperationPaymasterExpiredError',\n    })\n  }\n}\n\nexport type UserOperationSignatureErrorType = UserOperationSignatureError & {\n  name: 'UserOperationSignatureError'\n}\nexport class UserOperationSignatureError extends BaseError {\n  static message = /aa24/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Signature provided for the User Operation is invalid.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- the `signature` for the User Operation is incorrectly computed, and unable to be verified by the Smart Account',\n      ].filter(Boolean) as string[],\n      name: 'UserOperationSignatureError',\n    })\n  }\n}\n\nexport type UserOperationPaymasterSignatureErrorType =\n  UserOperationPaymasterSignatureError & {\n    name: 'UserOperationPaymasterSignatureError'\n  }\nexport class UserOperationPaymasterSignatureError extends BaseError {\n  static message = /aa34/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Signature provided for the User Operation is invalid.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- the `signature` for the User Operation is incorrectly computed, and unable to be verified by the Paymaster',\n      ].filter(Boolean) as string[],\n      name: 'UserOperationPaymasterSignatureError',\n    })\n  }\n}\n\nexport type UserOperationRejectedByEntryPointErrorType =\n  UserOperationRejectedByEntryPointError & {\n    code: -32500\n    name: 'UserOperationRejectedByEntryPointError'\n  }\nexport class UserOperationRejectedByEntryPointError extends BaseError {\n  static code = -32500\n\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(\n      \"User Operation rejected by EntryPoint's `simulateValidation` during account creation or validation.\",\n      {\n        cause,\n        name: 'UserOperationRejectedByEntryPointError',\n      },\n    )\n  }\n}\n\nexport type UserOperationRejectedByPaymasterErrorType =\n  UserOperationRejectedByPaymasterError & {\n    code: -32501\n    name: 'UserOperationRejectedByPaymasterError'\n  }\nexport class UserOperationRejectedByPaymasterError extends BaseError {\n  static code = -32501\n\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(\"User Operation rejected by Paymaster's `validatePaymasterUserOp`.\", {\n      cause,\n      name: 'UserOperationRejectedByPaymasterError',\n    })\n  }\n}\n\nexport type UserOperationRejectedByOpCodeErrorType =\n  UserOperationRejectedByOpCodeError & {\n    code: -32502\n    name: 'UserOperationRejectedByOpCodeError'\n  }\nexport class UserOperationRejectedByOpCodeError extends BaseError {\n  static code = -32502\n\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super('User Operation rejected with op code validation error.', {\n      cause,\n      name: 'UserOperationRejectedByOpCodeError',\n    })\n  }\n}\n\nexport type UserOperationOutOfTimeRangeErrorType =\n  UserOperationOutOfTimeRangeError & {\n    code: -32503\n    name: 'UserOperationOutOfTimeRangeError'\n  }\nexport class UserOperationOutOfTimeRangeError extends BaseError {\n  static code = -32503\n\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(\n      'UserOperation out of time-range: either wallet or paymaster returned a time-range, and it is already expired (or will expire soon).',\n      {\n        cause,\n        name: 'UserOperationOutOfTimeRangeError',\n      },\n    )\n  }\n}\n\nexport type UnknownBundlerErrorType = UnknownBundlerError & {\n  name: 'UnknownBundlerError'\n}\nexport class UnknownBundlerError extends BaseError {\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(\n      `An error occurred while executing user operation: ${cause?.shortMessage}`,\n      {\n        cause,\n        name: 'UnknownBundlerError',\n      },\n    )\n  }\n}\n\nexport type VerificationGasLimitExceededErrorType =\n  VerificationGasLimitExceededError & {\n    name: 'VerificationGasLimitExceededError'\n  }\nexport class VerificationGasLimitExceededError extends BaseError {\n  static message = /aa40/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('User Operation verification gas limit exceeded.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- the gas used for verification exceeded the `verificationGasLimit`',\n      ].filter(Boolean) as string[],\n      name: 'VerificationGasLimitExceededError',\n    })\n  }\n}\n\nexport type VerificationGasLimitTooLowErrorType =\n  VerificationGasLimitTooLowError & {\n    name: 'VerificationGasLimitTooLowError'\n  }\nexport class VerificationGasLimitTooLowError extends BaseError {\n  static message = /aa41/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('User Operation verification gas limit is too low.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- the `verificationGasLimit` is too low to verify the User Operation',\n      ].filter(Boolean) as string[],\n      name: 'VerificationGasLimitTooLowError',\n    })\n  }\n}\n", "export const entryPoint06Address =\n  '0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789' as const\nexport const entryPoint07Address =\n  '0x0000000071727De22E5E9d8BAf0edAc6f37da032' as const\nexport const entryPoint08Address =\n  '0x4337084D9E255Ff0702461CF8895CE9E3b5Ff108' as const\n", "import * as AbiParameters from '../core/AbiParameters.js'\nimport type * as Address from '../core/Address.js'\nimport type * as Authorization from '../core/Authorization.js'\nimport type * as Errors from '../core/Errors.js'\nimport * as Hash from '../core/Hash.js'\nimport * as Hex from '../core/Hex.js'\nimport type { Assign, Compute, OneOf } from '../core/internal/types.js'\nimport * as Signature from '../core/Signature.js'\nimport * as TypedData from '../core/TypedData.js'\nimport type * as EntryPoint from './EntryPoint.js'\n\n/** User Operation. */\nexport type UserOperation<\n  entryPointVersion extends EntryPoint.Version = EntryPoint.Version,\n  signed extends boolean = boolean,\n  bigintType = bigint,\n  numberType = number,\n> = OneOf<\n  | (entryPointVersion extends '0.6' ? V06<signed, bigintType> : never)\n  | (entryPointVersion extends '0.7' ? V07<signed, bigintType> : never)\n  | (entryPointVersion extends '0.8'\n      ? V08<signed, bigintType, numberType>\n      : never)\n>\n\n/**\n * Packed User Operation.\n *\n * @see https://eips.ethereum.org/EIPS/eip-4337#entrypoint-definition\n */\nexport type Packed = {\n  /** Concatenation of `verificationGasLimit` (16 bytes) and `callGasLimit` (16 bytes) */\n  accountGasLimits: Hex.Hex\n  /** The data to pass to the `sender` during the main execution call. */\n  callData: Hex.Hex\n  /** Concatenation of `factory` and `factoryData`. */\n  initCode: Hex.Hex\n  /** Concatenation of `maxPriorityFee` (16 bytes) and `maxFeePerGas` (16 bytes) */\n  gasFees: Hex.Hex\n  /** Anti-replay parameter. */\n  nonce: bigint\n  /** Concatenation of paymaster fields (or empty). */\n  paymasterAndData: Hex.Hex\n  /** Extra gas to pay the Bundler. */\n  preVerificationGas: bigint\n  /** The account making the operation. */\n  sender: Address.Address\n  /** Data passed into the account to verify authorization. */\n  signature: Hex.Hex\n}\n\n/** RPC User Operation type. */\nexport type Rpc<\n  entryPointVersion extends EntryPoint.Version = EntryPoint.Version,\n  signed extends boolean = true,\n> = OneOf<\n  | (entryPointVersion extends '0.6' ? V06<signed, Hex.Hex> : never)\n  | (entryPointVersion extends '0.7' ? V07<signed, Hex.Hex> : never)\n  | (entryPointVersion extends '0.8' ? V08<signed, Hex.Hex, Hex.Hex> : never)\n>\n\n/** Transaction Info. */\nexport type TransactionInfo<\n  entryPointVersion extends EntryPoint.Version = EntryPoint.Version,\n  bigintType = bigint,\n> = {\n  blockHash: Hex.Hex\n  blockNumber: bigintType\n  entryPoint: Address.Address\n  transactionHash: Hex.Hex\n  userOperation: UserOperation<entryPointVersion, true, bigintType>\n}\n\n/** RPC Transaction Info. */\nexport type RpcTransactionInfo<\n  entryPointVersion extends EntryPoint.Version = EntryPoint.Version,\n> = TransactionInfo<entryPointVersion, Hex.Hex>\n\n/** Type for User Operation on EntryPoint 0.6 */\nexport type V06<signed extends boolean = boolean, bigintType = bigint> = {\n  /** The data to pass to the `sender` during the main execution call. */\n  callData: Hex.Hex\n  /** The amount of gas to allocate the main execution call */\n  callGasLimit: bigintType\n  /** Account init code. Only for new accounts. */\n  initCode?: Hex.Hex | undefined\n  /** Maximum fee per gas. */\n  maxFeePerGas: bigintType\n  /** Maximum priority fee per gas. */\n  maxPriorityFeePerGas: bigintType\n  /** Anti-replay parameter. */\n  nonce: bigintType\n  /** Paymaster address with calldata. */\n  paymasterAndData?: Hex.Hex | undefined\n  /** Extra gas to pay the Bundler. */\n  preVerificationGas: bigintType\n  /** The account making the operation. */\n  sender: Address.Address\n  /** Data passed into the account to verify authorization. */\n  signature?: Hex.Hex | undefined\n  /** The amount of gas to allocate for the verification step. */\n  verificationGasLimit: bigintType\n} & (signed extends true ? { signature: Hex.Hex } : {})\n\n/** RPC User Operation on EntryPoint 0.6 */\nexport type RpcV06<signed extends boolean = true> = V06<signed, Hex.Hex>\n\n/** Type for User Operation on EntryPoint 0.7 */\nexport type V07<signed extends boolean = boolean, bigintType = bigint> = {\n  /** The data to pass to the `sender` during the main execution call. */\n  callData: Hex.Hex\n  /** The amount of gas to allocate the main execution call */\n  callGasLimit: bigintType\n  /** Account factory. Only for new accounts. */\n  factory?: Address.Address | undefined\n  /** Data for account factory. */\n  factoryData?: Hex.Hex | undefined\n  /** Maximum fee per gas. */\n  maxFeePerGas: bigintType\n  /** Maximum priority fee per gas. */\n  maxPriorityFeePerGas: bigintType\n  /** Anti-replay parameter. */\n  nonce: bigintType\n  /** Address of paymaster contract. */\n  paymaster?: Address.Address | undefined\n  /** Data for paymaster. */\n  paymasterData?: Hex.Hex | undefined\n  /** The amount of gas to allocate for the paymaster post-operation code. */\n  paymasterPostOpGasLimit?: bigintType | undefined\n  /** The amount of gas to allocate for the paymaster validation code. */\n  paymasterVerificationGasLimit?: bigintType | undefined\n  /** Extra gas to pay the Bundler. */\n  preVerificationGas: bigintType\n  /** The account making the operation. */\n  sender: Address.Address\n  /** Data passed into the account to verify authorization. */\n  signature?: Hex.Hex | undefined\n  /** The amount of gas to allocate for the verification step. */\n  verificationGasLimit: bigintType\n} & (signed extends true ? { signature: Hex.Hex } : {})\n\n/** RPC User Operation on EntryPoint 0.7 */\nexport type RpcV07<signed extends boolean = true> = V07<signed, Hex.Hex>\n\n/** Type for User Operation on EntryPoint 0.8 */\nexport type V08<\n  signed extends boolean = boolean,\n  bigintType = bigint,\n  numberType = number,\n> = {\n  /** Authorization data. */\n  authorization?: Authorization.Signed<bigintType, numberType> | undefined\n  /** The data to pass to the `sender` during the main execution call. */\n  callData: Hex.Hex\n  /** The amount of gas to allocate the main execution call */\n  callGasLimit: bigintType\n  /** Account factory. Only for new accounts. */\n  factory?: Address.Address | undefined\n  /** Data for account factory. */\n  factoryData?: Hex.Hex | undefined\n  /** Maximum fee per gas. */\n  maxFeePerGas: bigintType\n  /** Maximum priority fee per gas. */\n  maxPriorityFeePerGas: bigintType\n  /** Anti-replay parameter. */\n  nonce: bigintType\n  /** Address of paymaster contract. */\n  paymaster?: Address.Address | undefined\n  /** Data for paymaster. */\n  paymasterData?: Hex.Hex | undefined\n  /** The amount of gas to allocate for the paymaster post-operation code. */\n  paymasterPostOpGasLimit?: bigintType | undefined\n  /** The amount of gas to allocate for the paymaster validation code. */\n  paymasterVerificationGasLimit?: bigintType | undefined\n  /** Extra gas to pay the Bundler. */\n  preVerificationGas: bigintType\n  /** The account making the operation. */\n  sender: Address.Address\n  /** Data passed into the account to verify authorization. */\n  signature?: Hex.Hex | undefined\n  /** The amount of gas to allocate for the verification step. */\n  verificationGasLimit: bigintType\n} & (signed extends true ? { signature: Hex.Hex } : {})\n\n/** RPC User Operation on EntryPoint 0.8 */\nexport type RpcV08<signed extends boolean = true> = V08<\n  signed,\n  Hex.Hex,\n  Hex.Hex\n>\n\n/**\n * Instantiates a {@link ox#UserOperation.UserOperation} from a provided input.\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n * import { UserOperation } from 'ox/erc4337'\n *\n * const userOperation = UserOperation.from({\n *   callData: '0xdeadbeef',\n *   callGasLimit: 300_000n,\n *   maxFeePerGas: Value.fromGwei('20'),\n *   maxPriorityFeePerGas: Value.fromGwei('2'),\n *   nonce: 69n,\n *   preVerificationGas: 100_000n,\n *   sender: '0x9f1fdab6458c5fc642fa0f4c5af7473c46837357',\n *   verificationGasLimit: 100_000n,\n * })\n * ```\n *\n * @example\n * ### From Packed User Operation\n *\n * ```ts twoslash\n * import { UserOperation } from 'ox/erc4337'\n *\n * const packed: UserOperation.Packed = {\n *   accountGasLimits: '0x...',\n *   callData: '0xdeadbeef',\n *   initCode: '0x',\n *   gasFees: '0x...',\n *   nonce: 69n,\n *   paymasterAndData: '0x',\n *   preVerificationGas: 100_000n,\n *   sender: '0x9f1fdab6458c5fc642fa0f4c5af7473c46837357',\n *   signature: '0x',\n * }\n *\n * const userOperation = UserOperation.from(packed)\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * ```ts twoslash\n * import { Secp256k1, Value } from 'ox'\n * import { UserOperation } from 'ox/erc4337'\n *\n * const userOperation = UserOperation.from({\n *   callData: '0xdeadbeef',\n *   callGasLimit: 300_000n,\n *   maxFeePerGas: Value.fromGwei('20'),\n *   maxPriorityFeePerGas: Value.fromGwei('2'),\n *   nonce: 69n,\n *   preVerificationGas: 100_000n,\n *   sender: '0x9f1fdab6458c5fc642fa0f4c5af7473c46837357',\n *   verificationGasLimit: 100_000n,\n * })\n *\n * const payload = UserOperation.getSignPayload(userOperation, {\n *   chainId: 1,\n *   entryPointAddress: '0x1234567890123456789012345678901234567890',\n *   entryPointVersion: '0.7',\n * })\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n *\n * const userOperation_signed = UserOperation.from(userOperation, { signature }) // [!code focus]\n * ```\n *\n * @param userOperation - The user operation to instantiate (structured or packed format).\n * @returns User Operation.\n */\nexport function from<\n  const userOperation extends UserOperation | Packed,\n  const signature extends Hex.Hex | undefined = undefined,\n>(\n  userOperation: userOperation | UserOperation | Packed,\n  options: from.Options<signature> = {},\n): from.ReturnType<userOperation, signature> {\n  const signature = (() => {\n    if (typeof options.signature === 'string') return options.signature\n    if (typeof options.signature === 'object')\n      return Signature.toHex(options.signature)\n    if (userOperation.signature) return userOperation.signature\n    return undefined\n  })()\n\n  const packed =\n    'accountGasLimits' in userOperation && 'gasFees' in userOperation\n\n  const userOp = packed ? fromPacked(userOperation) : userOperation\n  return { ...userOp, signature } as never\n}\n\nexport declare namespace from {\n  export type Options<\n    signature extends Signature.Signature | Hex.Hex | undefined = undefined,\n  > = {\n    signature?: signature | Signature.Signature | Hex.Hex | undefined\n  }\n\n  export type ReturnType<\n    userOperation extends UserOperation | Packed = UserOperation | Packed,\n    signature extends Signature.Signature | Hex.Hex | undefined = undefined,\n  > = Compute<\n    Assign<\n      userOperation,\n      signature extends Signature.Signature | Hex.Hex\n        ? Readonly<{ signature: Hex.Hex }>\n        : {}\n    >\n  >\n\n  export type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#UserOperation.Rpc} to an {@link ox#UserOperation.UserOperation}.\n *\n * @example\n * ```ts twoslash\n * import { UserOperation } from 'ox/erc4337'\n *\n * const userOperation = UserOperation.fromRpc({\n *   callData: '0xdeadbeef',\n *   callGasLimit: '0x69420',\n *   maxFeePerGas: '0x2ca6ae494',\n *   maxPriorityFeePerGas: '0x41cc3c0',\n *   nonce: '0x357',\n *   preVerificationGas: '0x69420',\n *   signature: '0x',\n *   sender: '0x1234567890123456789012345678901234567890',\n *   verificationGasLimit: '0x69420',\n * })\n * ```\n *\n * @param rpc - The RPC user operation to convert.\n * @returns An instantiated {@link ox#UserOperation.UserOperation}.\n */\nexport function fromRpc(rpc: Rpc): UserOperation {\n  return {\n    ...rpc,\n    callGasLimit: BigInt(rpc.callGasLimit),\n    maxFeePerGas: BigInt(rpc.maxFeePerGas),\n    maxPriorityFeePerGas: BigInt(rpc.maxPriorityFeePerGas),\n    nonce: BigInt(rpc.nonce),\n    preVerificationGas: BigInt(rpc.preVerificationGas),\n    verificationGasLimit: BigInt(rpc.verificationGasLimit),\n    ...(rpc.paymasterPostOpGasLimit && {\n      paymasterPostOpGasLimit: BigInt(rpc.paymasterPostOpGasLimit),\n    }),\n    ...(rpc.paymasterVerificationGasLimit && {\n      paymasterVerificationGasLimit: BigInt(rpc.paymasterVerificationGasLimit),\n    }),\n  } as UserOperation\n}\n\nexport declare namespace fromRpc {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Obtains the signing payload for a {@link ox#UserOperation.UserOperation}.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1, Value } from 'ox'\n * import { UserOperation } from 'ox/erc4337'\n *\n * const userOperation = UserOperation.from({\n *   callData: '0xdeadbeef',\n *   callGasLimit: 300_000n,\n *   maxFeePerGas: Value.fromGwei('20'),\n *   maxPriorityFeePerGas: Value.fromGwei('2'),\n *   nonce: 69n,\n *   preVerificationGas: 100_000n,\n *   sender: '0x9f1fdab6458c5fc642fa0f4c5af7473c46837357',\n *   verificationGasLimit: 100_000n,\n * })\n *\n * const payload = UserOperation.getSignPayload(userOperation, { // [!code focus]\n *   chainId: 1, // [!code focus]\n *   entryPointAddress: '0x1234567890123456789012345678901234567890', // [!code focus]\n *   entryPointVersion: '0.6', // [!code focus]\n * }) // [!code focus]\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param userOperation - The user operation to get the sign payload for.\n * @returns The signing payload for the user operation.\n */\nexport function getSignPayload<\n  entrypointVersion extends EntryPoint.Version = EntryPoint.Version,\n>(\n  userOperation: UserOperation<entrypointVersion>,\n  options: getSignPayload.Options<entrypointVersion>,\n): Hex.Hex {\n  return hash(userOperation, options)\n}\n\nexport declare namespace getSignPayload {\n  type Options<\n    entrypointVersion extends EntryPoint.Version = EntryPoint.Version,\n  > = hash.Options<entrypointVersion>\n\n  type ErrorType = hash.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Hashes a {@link ox#UserOperation.UserOperation}. This is the \"user operation hash\".\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n * import { UserOperation } from 'ox/erc4337'\n *\n * const userOperation = UserOperation.hash({\n *   callData: '0xdeadbeef',\n *   callGasLimit: 300_000n,\n *   maxFeePerGas: Value.fromGwei('20'),\n *   maxPriorityFeePerGas: Value.fromGwei('2'),\n *   nonce: 69n,\n *   preVerificationGas: 100_000n,\n *   sender: '0x9f1fdab6458c5fc642fa0f4c5af7473c46837357',\n *   verificationGasLimit: 100_000n,\n * }, {\n *   chainId: 1,\n *   entryPointAddress: '0x1234567890123456789012345678901234567890',\n *   entryPointVersion: '0.6',\n * })\n * ```\n *\n * @param userOperation - The user operation to hash.\n * @returns The hash of the user operation.\n */\nexport function hash<\n  entrypointVersion extends EntryPoint.Version = EntryPoint.Version,\n>(\n  userOperation: UserOperation<entrypointVersion>,\n  options: hash.Options<entrypointVersion>,\n): Hex.Hex {\n  const { chainId, entryPointAddress, entryPointVersion } = options\n  const {\n    callData,\n    callGasLimit,\n    initCode,\n    factory,\n    factoryData,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    paymaster,\n    paymasterAndData,\n    paymasterData,\n    paymasterPostOpGasLimit,\n    paymasterVerificationGasLimit,\n    preVerificationGas,\n    sender,\n    verificationGasLimit,\n  } = userOperation as UserOperation\n\n  if (entryPointVersion === '0.8') {\n    const typedData = toTypedData(userOperation as UserOperation<'0.8', true>, {\n      chainId,\n      entryPointAddress,\n    })\n    return TypedData.getSignPayload(typedData)\n  }\n\n  const packedUserOp = (() => {\n    if (entryPointVersion === '0.6') {\n      return AbiParameters.encode(\n        [\n          { type: 'address' },\n          { type: 'uint256' },\n          { type: 'bytes32' },\n          { type: 'bytes32' },\n          { type: 'uint256' },\n          { type: 'uint256' },\n          { type: 'uint256' },\n          { type: 'uint256' },\n          { type: 'uint256' },\n          { type: 'bytes32' },\n        ],\n        [\n          sender,\n          nonce,\n          Hash.keccak256(initCode ?? '0x'),\n          Hash.keccak256(callData),\n          callGasLimit,\n          verificationGasLimit,\n          preVerificationGas,\n          maxFeePerGas,\n          maxPriorityFeePerGas,\n          Hash.keccak256(paymasterAndData ?? '0x'),\n        ],\n      )\n    }\n\n    if (entryPointVersion === '0.7') {\n      const accountGasLimits = Hex.concat(\n        Hex.padLeft(Hex.fromNumber(verificationGasLimit), 16),\n        Hex.padLeft(Hex.fromNumber(callGasLimit), 16),\n      )\n      const gasFees = Hex.concat(\n        Hex.padLeft(Hex.fromNumber(maxPriorityFeePerGas), 16),\n        Hex.padLeft(Hex.fromNumber(maxFeePerGas), 16),\n      )\n      const initCode_hashed = Hash.keccak256(\n        factory && factoryData ? Hex.concat(factory, factoryData) : '0x',\n      )\n      const paymasterAndData_hashed = Hash.keccak256(\n        paymaster\n          ? Hex.concat(\n              paymaster,\n              Hex.padLeft(\n                Hex.fromNumber(paymasterVerificationGasLimit || 0),\n                16,\n              ),\n              Hex.padLeft(Hex.fromNumber(paymasterPostOpGasLimit || 0), 16),\n              paymasterData || '0x',\n            )\n          : '0x',\n      )\n\n      return AbiParameters.encode(\n        [\n          { type: 'address' },\n          { type: 'uint256' },\n          { type: 'bytes32' },\n          { type: 'bytes32' },\n          { type: 'bytes32' },\n          { type: 'uint256' },\n          { type: 'bytes32' },\n          { type: 'bytes32' },\n        ],\n        [\n          sender,\n          nonce,\n          initCode_hashed,\n          Hash.keccak256(callData),\n          accountGasLimits,\n          preVerificationGas,\n          gasFees,\n          paymasterAndData_hashed,\n        ],\n      )\n    }\n\n    throw new Error(`entryPointVersion \"${entryPointVersion}\" not supported.`)\n  })()\n\n  return Hash.keccak256(\n    AbiParameters.encode(\n      [{ type: 'bytes32' }, { type: 'address' }, { type: 'uint256' }],\n      [Hash.keccak256(packedUserOp), entryPointAddress, BigInt(chainId)],\n    ),\n  )\n}\n\nexport declare namespace hash {\n  type Options<\n    entrypointVersion extends EntryPoint.Version = EntryPoint.Version,\n  > = {\n    chainId: number\n    entryPointAddress: Address.Address\n    entryPointVersion: entrypointVersion | EntryPoint.Version\n  }\n\n  type ErrorType =\n    | AbiParameters.encode.ErrorType\n    | Hash.keccak256.ErrorType\n    | Hex.concat.ErrorType\n    | Hex.fromNumber.ErrorType\n    | Hex.padLeft.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#UserOperation.UserOperation} to `initCode`.\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n * import { UserOperation } from 'ox/erc4337'\n *\n * const initCode = UserOperation.toInitCode({\n *   authorization: {\n *     address: '0x9f1fdab6458c5fc642fa0f4c5af7473c46837357',\n *     chainId: 1,\n *     nonce: 69n,\n *     yParity: 0,\n *     r: 1n,\n *     s: 2n,\n *   },\n *   callData: '0xdeadbeef',\n *   callGasLimit: 300_000n,\n *   factory: '0x7702',\n *   factoryData: '0xdeadbeef',\n *   maxFeePerGas: Value.fromGwei('20'),\n *   maxPriorityFeePerGas: Value.fromGwei('2'),\n *   nonce: 69n,\n *   preVerificationGas: 100_000n,\n *   sender: '0x9f1fdab6458c5fc642fa0f4c5af7473c46837357',\n * })\n * ```\n *\n * @param userOperation - The user operation to convert.\n * @returns The init code.\n */\nexport function toInitCode(userOperation: Partial<UserOperation>): Hex.Hex {\n  const { authorization, factory, factoryData } = userOperation\n  if (\n    factory === '0x7702' ||\n    factory === '0x7702000000000000000000000000000000000000'\n  ) {\n    if (!authorization) return '0x7702000000000000000000000000000000000000'\n    const delegation = authorization.address\n    return Hex.concat(delegation, factoryData ?? '0x')\n  }\n  if (!factory) return '0x'\n  return Hex.concat(factory, factoryData ?? '0x')\n}\n\n/**\n * Transforms a User Operation into \"packed\" format.\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n * import { UserOperation } from 'ox/erc4337'\n *\n * const packed = UserOperation.toPacked({\n *   callData: '0xdeadbeef',\n *   callGasLimit: 300_000n,\n *   maxFeePerGas: Value.fromGwei('20'),\n *   maxPriorityFeePerGas: Value.fromGwei('2'),\n *   nonce: 69n,\n *   preVerificationGas: 100_000n,\n *   sender: '0x9f1fdab6458c5fc642fa0f4c5af7473c46837357',\n *   signature: '0x...',\n *   verificationGasLimit: 100_000n,\n * })\n * ```\n *\n * @param userOperation - The user operation to transform.\n * @returns The packed user operation.\n */\nexport function toPacked(\n  userOperation: UserOperation<'0.7' | '0.8', true>,\n): Packed {\n  const {\n    callGasLimit,\n    callData,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    nonce,\n    paymaster,\n    paymasterData,\n    paymasterPostOpGasLimit,\n    paymasterVerificationGasLimit,\n    sender,\n    signature,\n    verificationGasLimit,\n  } = userOperation\n\n  const accountGasLimits = Hex.concat(\n    Hex.padLeft(Hex.fromNumber(verificationGasLimit || 0n), 16),\n    Hex.padLeft(Hex.fromNumber(callGasLimit || 0n), 16),\n  )\n  const initCode = toInitCode(userOperation)\n  const gasFees = Hex.concat(\n    Hex.padLeft(Hex.fromNumber(maxPriorityFeePerGas || 0n), 16),\n    Hex.padLeft(Hex.fromNumber(maxFeePerGas || 0n), 16),\n  )\n  const paymasterAndData = paymaster\n    ? Hex.concat(\n        paymaster,\n        Hex.padLeft(Hex.fromNumber(paymasterVerificationGasLimit || 0n), 16),\n        Hex.padLeft(Hex.fromNumber(paymasterPostOpGasLimit || 0n), 16),\n        paymasterData || '0x',\n      )\n    : '0x'\n  const preVerificationGas = userOperation.preVerificationGas ?? 0n\n\n  return {\n    accountGasLimits,\n    callData,\n    initCode,\n    gasFees,\n    nonce,\n    paymasterAndData,\n    preVerificationGas,\n    sender,\n    signature,\n  }\n}\n\nexport declare namespace toPacked {\n  export type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Transforms a \"packed\" User Operation into a structured {@link ox#UserOperation.UserOperation}.\n *\n * @example\n * ```ts twoslash\n * import { UserOperation } from 'ox/erc4337'\n *\n * const packed: UserOperation.Packed = {\n *   accountGasLimits: '0x...',\n *   callData: '0xdeadbeef',\n *   initCode: '0x...',\n *   gasFees: '0x...',\n *   nonce: 69n,\n *   paymasterAndData: '0x',\n *   preVerificationGas: 100_000n,\n *   sender: '0x9f1fdab6458c5fc642fa0f4c5af7473c46837357',\n *   signature: '0x...',\n * }\n *\n * const userOperation = UserOperation.fromPacked(packed)\n * ```\n *\n * @param packed - The packed user operation to transform.\n * @returns The structured user operation.\n */\nexport function fromPacked(packed: Packed): UserOperation<'0.7' | '0.8', true> {\n  const {\n    accountGasLimits,\n    callData,\n    initCode,\n    gasFees,\n    nonce,\n    paymasterAndData,\n    preVerificationGas,\n    sender,\n    signature,\n  } = packed\n\n  const verificationGasLimit = BigInt(Hex.slice(accountGasLimits, 0, 16))\n  const callGasLimit = BigInt(Hex.slice(accountGasLimits, 16, 32))\n\n  const { factory, factoryData } = (() => {\n    if (initCode === '0x') return { factory: undefined, factoryData: undefined }\n\n    const factory = Hex.slice(initCode, 0, 20)\n    const factoryData =\n      Hex.size(initCode) > 20 ? Hex.slice(initCode, 20) : undefined\n\n    return { factory, factoryData }\n  })()\n\n  const maxPriorityFeePerGas = BigInt(Hex.slice(gasFees, 0, 16))\n  const maxFeePerGas = BigInt(Hex.slice(gasFees, 16, 32))\n\n  const {\n    paymaster,\n    paymasterVerificationGasLimit,\n    paymasterPostOpGasLimit,\n    paymasterData,\n  } = (() => {\n    if (paymasterAndData === '0x')\n      return {\n        paymaster: undefined,\n        paymasterVerificationGasLimit: undefined,\n        paymasterPostOpGasLimit: undefined,\n        paymasterData: undefined,\n      }\n\n    const paymaster = Hex.slice(paymasterAndData, 0, 20)\n    const paymasterVerificationGasLimit = BigInt(\n      Hex.slice(paymasterAndData, 20, 36),\n    )\n    const paymasterPostOpGasLimit = BigInt(Hex.slice(paymasterAndData, 36, 52))\n    const paymasterData =\n      Hex.size(paymasterAndData) > 52\n        ? Hex.slice(paymasterAndData, 52)\n        : undefined\n\n    return {\n      paymaster,\n      paymasterVerificationGasLimit,\n      paymasterPostOpGasLimit,\n      paymasterData,\n    }\n  })()\n\n  return {\n    callData,\n    callGasLimit,\n    ...(factory && { factory }),\n    ...(factoryData && { factoryData }),\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    ...(paymaster && { paymaster }),\n    ...(paymasterData && { paymasterData }),\n    ...(typeof paymasterPostOpGasLimit === 'bigint' && {\n      paymasterPostOpGasLimit,\n    }),\n    ...(typeof paymasterVerificationGasLimit === 'bigint' && {\n      paymasterVerificationGasLimit,\n    }),\n    preVerificationGas,\n    sender,\n    signature,\n    verificationGasLimit,\n  }\n}\n\nexport declare namespace fromPacked {\n  export type ErrorType = Hex.slice.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#UserOperation.UserOperation} to a {@link ox#UserOperation.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n * import { UserOperation } from 'ox/erc4337'\n *\n * const userOperation = UserOperation.toRpc({\n *   callData: '0xdeadbeef',\n *   callGasLimit: 300_000n,\n *   maxFeePerGas: Value.fromGwei('20'),\n *   maxPriorityFeePerGas: Value.fromGwei('2'),\n *   nonce: 69n,\n *   preVerificationGas: 100_000n,\n *   sender: '0x9f1fdab6458c5fc642fa0f4c5af7473c46837357',\n *   verificationGasLimit: 100_000n,\n * })\n * ```\n *\n * @param userOperation - The user operation to convert.\n * @returns An RPC-formatted user operation.\n */\nexport function toRpc(userOperation: UserOperation): Rpc {\n  const rpc = {} as Rpc\n\n  rpc.callData = userOperation.callData\n  rpc.callGasLimit = Hex.fromNumber(userOperation.callGasLimit)\n  rpc.maxFeePerGas = Hex.fromNumber(userOperation.maxFeePerGas)\n  rpc.maxPriorityFeePerGas = Hex.fromNumber(userOperation.maxPriorityFeePerGas)\n  rpc.nonce = Hex.fromNumber(userOperation.nonce)\n  rpc.preVerificationGas = Hex.fromNumber(userOperation.preVerificationGas)\n  rpc.sender = userOperation.sender\n  rpc.verificationGasLimit = Hex.fromNumber(userOperation.verificationGasLimit)\n\n  if (userOperation.factory) rpc.factory = userOperation.factory\n  if (userOperation.factoryData) rpc.factoryData = userOperation.factoryData\n  if (userOperation.initCode) rpc.initCode = userOperation.initCode\n  if (userOperation.paymaster) rpc.paymaster = userOperation.paymaster\n  if (userOperation.paymasterData)\n    rpc.paymasterData = userOperation.paymasterData\n  if (typeof userOperation.paymasterPostOpGasLimit === 'bigint')\n    rpc.paymasterPostOpGasLimit = Hex.fromNumber(\n      userOperation.paymasterPostOpGasLimit,\n    )\n  if (typeof userOperation.paymasterVerificationGasLimit === 'bigint')\n    rpc.paymasterVerificationGasLimit = Hex.fromNumber(\n      userOperation.paymasterVerificationGasLimit,\n    )\n  if (userOperation.signature) rpc.signature = userOperation.signature\n\n  return rpc\n}\n\nexport declare namespace toRpc {\n  export type ErrorType = Hex.fromNumber.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Converts a signed {@link ox#UserOperation.UserOperation} to a {@link ox#TypedData.Definition}.\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n * import { UserOperation } from 'ox/erc4337'\n *\n * const typedData = UserOperation.toTypedData({\n *   authorization: {\n *     chainId: 1,\n *     address: '0x9f1fdab6458c5fc642fa0f4c5af7473c46837357',\n *     nonce: 69n,\n *     yParity: 0,\n *     r: 1n,\n *     s: 2n,\n *   },\n *   callData: '0xdeadbeef',\n *   callGasLimit: 300_000n,\n *   maxFeePerGas: Value.fromGwei('20'),\n *   maxPriorityFeePerGas: Value.fromGwei('2'),\n *   nonce: 69n,\n *   preVerificationGas: 100_000n,\n *   sender: '0x9f1fdab6458c5fc642fa0f4c5af7473c46837357',\n *   signature: '0x...',\n *   verificationGasLimit: 100_000n,\n * }, {\n *   chainId: 1,\n *   entryPointAddress: '0x1234567890123456789012345678901234567890',\n * })\n * ```\n *\n * @param userOperation - The user operation to convert.\n * @returns A Typed Data definition.\n */\nexport function toTypedData(\n  userOperation: UserOperation<'0.8', true>,\n  options: toTypedData.Options,\n): TypedData.Definition<typeof toTypedData.types, 'PackedUserOperation'> {\n  const { chainId, entryPointAddress } = options\n\n  const packedUserOp = toPacked(userOperation)\n\n  return {\n    domain: {\n      name: 'ERC4337',\n      version: '1',\n      chainId,\n      verifyingContract: entryPointAddress,\n    },\n    message: packedUserOp,\n    primaryType: 'PackedUserOperation',\n    types: toTypedData.types,\n  }\n}\n\nexport namespace toTypedData {\n  export type Options = {\n    chainId: number\n    entryPointAddress: Address.Address\n  }\n\n  export type ErrorType = Errors.GlobalErrorType\n\n  export const types = {\n    PackedUserOperation: [\n      { type: 'address', name: 'sender' },\n      { type: 'uint256', name: 'nonce' },\n      { type: 'bytes', name: 'initCode' },\n      { type: 'bytes', name: 'callData' },\n      { type: 'bytes32', name: 'accountGasLimits' },\n      { type: 'uint256', name: 'preVerificationGas' },\n      { type: 'bytes32', name: 'gasFees' },\n      { type: 'bytes', name: 'paymasterAndData' },\n    ],\n  } as const\n}\n", "import type * as abitype from 'abitype'\nimport * as AbiParameters from './AbiParameters.js'\nimport * as Address from './Address.js'\nimport * as Bytes from './Bytes.js'\nimport * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport type { Compute } from './internal/types.js'\nimport * as Json from './Json.js'\nimport * as Solidity from './Solidity.js'\n\nexport type TypedData = abitype.TypedData\nexport type Domain = abitype.TypedDataDomain\nexport type Parameter = abitype.TypedDataParameter\n\n// TODO: Make reusable for Viem?\nexport type Definition<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n  ///\n  primaryTypes = typedData extends TypedData ? keyof typedData : string,\n> = primaryType extends 'EIP712Domain'\n  ? EIP712DomainDefinition<typedData, primaryType>\n  : MessageDefinition<typedData, primaryType, primaryTypes>\n\nexport type EIP712DomainDefinition<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends 'EIP712Domain' = 'EIP712Domain',\n  ///\n  schema extends Record<string, unknown> = typedData extends TypedData\n    ? abitype.TypedDataToPrimitiveTypes<typedData>\n    : Record<string, unknown>,\n> = {\n  types?: typedData | undefined\n} & {\n  primaryType:\n    | 'EIP712Domain'\n    | (primaryType extends 'EIP712Domain' ? primaryType : never)\n  domain: schema extends { EIP712Domain: infer domain }\n    ? domain\n    : Compute<Domain>\n  message?: undefined\n}\n\nexport type MessageDefinition<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData = keyof typedData,\n  ///\n  primaryTypes = typedData extends TypedData ? keyof typedData : string,\n  schema extends Record<string, unknown> = typedData extends TypedData\n    ? abitype.TypedDataToPrimitiveTypes<typedData>\n    : Record<string, unknown>,\n  message = schema[primaryType extends keyof schema\n    ? primaryType\n    : keyof schema],\n> = {\n  types: typedData\n} & {\n  primaryType:\n    | primaryTypes // show all values\n    | (primaryType extends primaryTypes ? primaryType : never) // infer value\n  domain?:\n    | (schema extends { EIP712Domain: infer domain } ? domain : Compute<Domain>)\n    | undefined\n  message: { [_: string]: any } extends message // Check if message was inferred\n    ? Record<string, unknown>\n    : message\n}\n\n/**\n * Asserts that [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) is valid.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.assert({\n *   domain: {\n *     name: 'Ether!',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   primaryType: 'Foo',\n *   types: {\n *     Foo: [\n *       { name: 'address', type: 'address' },\n *       { name: 'name', type: 'string' },\n *       { name: 'foo', type: 'string' },\n *     ],\n *   },\n *   message: {\n *     address: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *     name: 'jxom',\n *     foo: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *   },\n * })\n * ```\n *\n * @param value - The Typed Data to validate.\n */\nexport function assert<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(value: assert.Value<typedData, primaryType>): void {\n  const { domain, message, primaryType, types } =\n    value as unknown as assert.Value\n\n  const validateData = (\n    struct: readonly Parameter[],\n    data: Record<string, unknown>,\n  ) => {\n    for (const param of struct) {\n      const { name, type } = param\n      const value = data[name]\n\n      const integerMatch = type.match(Solidity.integerRegex)\n      if (\n        integerMatch &&\n        (typeof value === 'number' || typeof value === 'bigint')\n      ) {\n        const [, base, size_] = integerMatch\n        // If number cannot be cast to a sized hex value, it is out of range\n        // and will throw.\n        Hex.fromNumber(value, {\n          signed: base === 'int',\n          size: Number.parseInt(size_ ?? '', 10) / 8,\n        })\n      }\n\n      if (\n        type === 'address' &&\n        typeof value === 'string' &&\n        !Address.validate(value)\n      )\n        throw new Address.InvalidAddressError({\n          address: value,\n          cause: new Address.InvalidInputError(),\n        })\n\n      const bytesMatch = type.match(Solidity.bytesRegex)\n      if (bytesMatch) {\n        const [, size] = bytesMatch\n        if (size && Hex.size(value as Hex.Hex) !== Number.parseInt(size, 10))\n          throw new BytesSizeMismatchError({\n            expectedSize: Number.parseInt(size, 10),\n            givenSize: Hex.size(value as Hex.Hex),\n          })\n      }\n\n      const struct = types[type]\n      if (struct) {\n        validateReference(type)\n        validateData(struct, value as Record<string, unknown>)\n      }\n    }\n  }\n\n  // Validate domain types.\n  if (types.EIP712Domain && domain) {\n    if (typeof domain !== 'object') throw new InvalidDomainError({ domain })\n    validateData(types.EIP712Domain, domain)\n  }\n\n  // Validate message types.\n  if (primaryType !== 'EIP712Domain') {\n    if (types[primaryType]) validateData(types[primaryType], message)\n    else throw new InvalidPrimaryTypeError({ primaryType, types })\n  }\n}\n\nexport declare namespace assert {\n  type Value<\n    typedData extends TypedData | Record<string, unknown> = TypedData,\n    primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n  > = Definition<typedData, primaryType>\n\n  type ErrorType =\n    | Address.InvalidAddressError\n    | BytesSizeMismatchError\n    | InvalidPrimaryTypeError\n    | Hex.fromNumber.ErrorType\n    | Hex.size.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Creates [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) [`domainSeparator`](https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator) for the provided domain.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.domainSeparator({\n *   name: 'Ether!',\n *   version: '1',\n *   chainId: 1,\n *   verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n * })\n * // @log: '0x9911ee4f58a7059a8f5385248040e6984d80e2c849500fe6a4d11c4fa98c2af3'\n * ```\n *\n * @param domain - The domain for which to create the domain separator.\n * @returns The domain separator.\n */\nexport function domainSeparator(domain: Domain): Hex.Hex {\n  return hashDomain({\n    domain,\n  })\n}\n\nexport declare namespace domainSeparator {\n  type ErrorType = hashDomain.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Encodes typed data in [EIP-712 format](https://eips.ethereum.org/EIPS/eip-712): `0x19 ‖ 0x01 ‖ domainSeparator ‖ hashStruct(message)`.\n *\n * @example\n * ```ts twoslash\n * import { TypedData, Hash } from 'ox'\n *\n * const data = TypedData.encode({ // [!code focus:33]\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0x0000000000000000000000000000000000000000',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n * })\n * // @log: '0x19012fdf3441fcaf4f30c7e16292b258a5d7054a4e2e00dbd7b7d2f467f2b8fb9413c52c0ee5d84264471806290a3f2c4cecfc5490626bf912d01f240d7a274b371e'\n * // @log: (0x19 ‖ 0x01 ‖ domainSeparator ‖ hashStruct(message))\n *\n * const hash = Hash.keccak256(data)\n * ```\n *\n * @param value - The Typed Data to encode.\n * @returns The encoded Typed Data.\n */\nexport function encode<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(value: encode.Value<typedData, primaryType>): Hex.Hex {\n  const { domain = {}, message, primaryType } = value as encode.Value\n\n  const types = {\n    EIP712Domain: extractEip712DomainTypes(domain),\n    ...value.types,\n  } as TypedData\n\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n  // as we can't statically check this with TypeScript.\n  assert({\n    domain,\n    message,\n    primaryType,\n    types,\n  })\n\n  // Typed Data Format: `0x19 ‖ 0x01 ‖ domainSeparator ‖ hashStruct(message)`\n  const parts: Hex.Hex[] = ['0x19', '0x01']\n  if (domain)\n    parts.push(\n      hashDomain({\n        domain,\n        types,\n      }),\n    )\n  if (primaryType !== 'EIP712Domain')\n    parts.push(\n      hashStruct({\n        data: message,\n        primaryType,\n        types,\n      }),\n    )\n\n  return Hex.concat(...parts)\n}\n\nexport declare namespace encode {\n  type Value<\n    typedData extends TypedData | Record<string, unknown> = TypedData,\n    primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n  > = Definition<typedData, primaryType>\n\n  type ErrorType =\n    | extractEip712DomainTypes.ErrorType\n    | hashDomain.ErrorType\n    | hashStruct.ErrorType\n    | assert.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Encodes [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) schema for the provided primaryType.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.encodeType({\n *   types: {\n *     Foo: [\n *       { name: 'address', type: 'address' },\n *       { name: 'name', type: 'string' },\n *       { name: 'foo', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Foo',\n * })\n * // @log: 'Foo(address address,string name,string foo)'\n * ```\n *\n * @param value - The Typed Data schema.\n * @returns The encoded type.\n */\nexport function encodeType(value: encodeType.Value): string {\n  const { primaryType, types } = value\n\n  let result = ''\n  const unsortedDeps = findTypeDependencies({ primaryType, types })\n  unsortedDeps.delete(primaryType)\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()]\n  for (const type of deps) {\n    result += `${type}(${(types[type] ?? [])\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`\n  }\n\n  return result\n}\n\nexport declare namespace encodeType {\n  type Value = {\n    primaryType: string\n    types: TypedData\n  }\n\n  type ErrorType = findTypeDependencies.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Gets [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) schema for EIP-721 domain.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.extractEip712DomainTypes({\n *   name: 'Ether!',\n *   version: '1',\n *   chainId: 1,\n *   verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n * })\n * // @log: [\n * // @log:   { 'name': 'name', 'type': 'string' },\n * // @log:   { 'name': 'version', 'type': 'string' },\n * // @log:   { 'name': 'chainId', 'type': 'uint256' },\n * // @log:   { 'name': 'verifyingContract', 'type': 'address' },\n * // @log: ]\n * ```\n *\n * @param domain - The EIP-712 domain.\n * @returns The EIP-712 domain schema.\n */\nexport function extractEip712DomainTypes(\n  domain: Domain | undefined,\n): Parameter[] {\n  return [\n    typeof domain?.name === 'string' && { name: 'name', type: 'string' },\n    domain?.version && { name: 'version', type: 'string' },\n    (typeof domain?.chainId === 'number' ||\n      typeof domain?.chainId === 'bigint') && {\n      name: 'chainId',\n      type: 'uint256',\n    },\n    domain?.verifyingContract && {\n      name: 'verifyingContract',\n      type: 'address',\n    },\n    domain?.salt && { name: 'salt', type: 'bytes32' },\n  ].filter(Boolean) as Parameter[]\n}\n\nexport declare namespace extractEip712DomainTypes {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Gets the payload to use for signing typed data in [EIP-712 format](https://eips.ethereum.org/EIPS/eip-712).\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1, TypedData, Hash } from 'ox'\n *\n * const payload = TypedData.getSignPayload({ // [!code focus:99]\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0x0000000000000000000000000000000000000000',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n * })\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param value - The typed data to get the sign payload for.\n * @returns The payload to use for signing.\n */\nexport function getSignPayload<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(value: encode.Value<typedData, primaryType>): Hex.Hex {\n  return Hash.keccak256(encode(value))\n}\n\nexport declare namespace getSignPayload {\n  type ErrorType =\n    | Hash.keccak256.ErrorType\n    | encode.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Hashes [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) domain.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.hashDomain({\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0x0000000000000000000000000000000000000000',\n *   },\n * })\n * // @log: '0x6192106f129ce05c9075d319c1fa6ea9b3ae37cbd0c1ef92e2be7137bb07baa1'\n * ```\n *\n * @param value - The Typed Data domain and types.\n * @returns The hashed domain.\n */\nexport function hashDomain(value: hashDomain.Value): Hex.Hex {\n  const { domain, types } = value\n  return hashStruct({\n    data: domain,\n    primaryType: 'EIP712Domain',\n    types: {\n      ...types,\n      EIP712Domain: types?.EIP712Domain || extractEip712DomainTypes(domain),\n    },\n  })\n}\n\nexport declare namespace hashDomain {\n  type Value = {\n    /** The Typed Data domain. */\n    domain: Domain\n    /** The Typed Data types. */\n    types?:\n      | {\n          EIP712Domain?: readonly Parameter[] | undefined\n          [key: string]: readonly Parameter[] | undefined\n        }\n      | undefined\n  }\n\n  type ErrorType = hashStruct.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Hashes [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) struct.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.hashStruct({\n *   types: {\n *     Foo: [\n *       { name: 'address', type: 'address' },\n *       { name: 'name', type: 'string' },\n *       { name: 'foo', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Foo',\n *   data: {\n *     address: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *     name: 'jxom',\n *     foo: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *   },\n * })\n * // @log: '0x996fb3b6d48c50312d69abdd4c1b6fb02057c85aa86bb8d04c6f023326a168ce'\n * ```\n *\n * @param value - The Typed Data struct to hash.\n * @returns The hashed Typed Data struct.\n */\nexport function hashStruct(value: hashStruct.Value): Hex.Hex {\n  const { data, primaryType, types } = value\n  const encoded = encodeData({\n    data,\n    primaryType,\n    types,\n  })\n  return Hash.keccak256(encoded)\n}\n\nexport declare namespace hashStruct {\n  type Value = {\n    /** The Typed Data struct to hash. */\n    data: Record<string, unknown>\n    /** The primary type of the Typed Data struct. */\n    primaryType: string\n    /** The types of the Typed Data struct. */\n    types: TypedData\n  }\n\n  type ErrorType =\n    | encodeData.ErrorType\n    | Hash.keccak256.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Serializes [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) schema into string.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.serialize({\n *   domain: {\n *     name: 'Ether!',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   primaryType: 'Foo',\n *   types: {\n *     Foo: [\n *       { name: 'address', type: 'address' },\n *       { name: 'name', type: 'string' },\n *       { name: 'foo', type: 'string' },\n *     ],\n *   },\n *   message: {\n *     address: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *     name: 'jxom',\n *     foo: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *   },\n * })\n * // @log: \"{\"domain\":{},\"message\":{\"address\":\"0xb9cab4f0e46f7f6b1024b5a7463734fa68e633f9\",\"name\":\"jxom\",\"foo\":\"0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9\"},\"primaryType\":\"Foo\",\"types\":{\"Foo\":[{\"name\":\"address\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"foo\",\"type\":\"string\"}]}}\"\n * ```\n *\n * @param value - The Typed Data schema to serialize.\n * @returns The serialized Typed Data schema. w\n */\nexport function serialize<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(value: serialize.Value<typedData, primaryType>): string {\n  const {\n    domain: domain_,\n    message: message_,\n    primaryType,\n    types,\n  } = value as unknown as serialize.Value\n\n  const normalizeData = (\n    struct: readonly Parameter[],\n    value: Record<string, unknown>,\n  ) => {\n    const data = { ...value }\n    for (const param of struct) {\n      const { name, type } = param\n      if (type === 'address') data[name] = (data[name] as string).toLowerCase()\n    }\n    return data\n  }\n\n  const domain = (() => {\n    if (!domain_) return {}\n    const type = types.EIP712Domain ?? extractEip712DomainTypes(domain_)\n    return normalizeData(type, domain_)\n  })()\n\n  const message = (() => {\n    if (primaryType === 'EIP712Domain') return undefined\n    if (!types[primaryType]) return {}\n    return normalizeData(types[primaryType], message_)\n  })()\n\n  return Json.stringify({ domain, message, primaryType, types }, (_, value) => {\n    if (typeof value === 'bigint') return value.toString()\n    return value\n  })\n}\n\nexport declare namespace serialize {\n  type Value<\n    typedData extends TypedData | Record<string, unknown> = TypedData,\n    primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n  > = Definition<typedData, primaryType>\n\n  type ErrorType = Json.stringify.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Checks if [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) is valid.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * const valid = TypedData.validate({\n *   domain: {\n *     name: 'Ether!',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   primaryType: 'Foo',\n *   types: {\n *     Foo: [\n *       { name: 'address', type: 'address' },\n *       { name: 'name', type: 'string' },\n *       { name: 'foo', type: 'string' },\n *     ],\n *   },\n *   message: {\n *     address: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *     name: 'jxom',\n *     foo: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *   },\n * })\n * // @log: true\n * ```\n *\n * @param value - The Typed Data to validate.\n */\nexport function validate<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(value: assert.Value<typedData, primaryType>): boolean {\n  try {\n    assert(value)\n    return true\n  } catch {\n    return false\n  }\n}\n\nexport declare namespace validate {\n  type ErrorType = assert.ErrorType | Errors.GlobalErrorType\n}\n\n/** Thrown when the bytes size of a typed data value does not match the expected size. */\nexport class BytesSizeMismatchError extends Errors.BaseError {\n  override readonly name = 'TypedData.BytesSizeMismatchError'\n\n  constructor({\n    expectedSize,\n    givenSize,\n  }: { expectedSize: number; givenSize: number }) {\n    super(`Expected bytes${expectedSize}, got bytes${givenSize}.`)\n  }\n}\n\n/** Thrown when the domain is invalid. */\nexport class InvalidDomainError extends Errors.BaseError {\n  override readonly name = 'TypedData.InvalidDomainError'\n\n  constructor({ domain }: { domain: unknown }) {\n    super(`Invalid domain \"${Json.stringify(domain)}\".`, {\n      metaMessages: ['Must be a valid EIP-712 domain.'],\n    })\n  }\n}\n\n/** Thrown when the primary type of a typed data value is invalid. */\nexport class InvalidPrimaryTypeError extends Errors.BaseError {\n  override readonly name = 'TypedData.InvalidPrimaryTypeError'\n\n  constructor({\n    primaryType,\n    types,\n  }: { primaryType: string; types: TypedData | Record<string, unknown> }) {\n    super(\n      `Invalid primary type \\`${primaryType}\\` must be one of \\`${JSON.stringify(Object.keys(types))}\\`.`,\n      {\n        metaMessages: ['Check that the primary type is a key in `types`.'],\n      },\n    )\n  }\n}\n\n/** Thrown when the struct type is not a valid type. */\nexport class InvalidStructTypeError extends Errors.BaseError {\n  override readonly name = 'TypedData.InvalidStructTypeError'\n\n  constructor({ type }: { type: string }) {\n    super(`Struct type \"${type}\" is invalid.`, {\n      metaMessages: ['Struct type must not be a Solidity type.'],\n    })\n  }\n}\n\n/** @internal */\nexport function encodeData(value: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: TypedData\n}): Hex.Hex {\n  const { data, primaryType, types } = value\n  const encodedTypes: AbiParameters.Parameter[] = [{ type: 'bytes32' }]\n  const encodedValues: unknown[] = [hashType({ primaryType, types })]\n\n  for (const field of types[primaryType] ?? []) {\n    const [type, value] = encodeField({\n      types,\n      name: field.name,\n      type: field.type,\n      value: data[field.name],\n    })\n    encodedTypes.push(type)\n    encodedValues.push(value)\n  }\n\n  return AbiParameters.encode(encodedTypes, encodedValues)\n}\n\n/** @internal */\nexport declare namespace encodeData {\n  type ErrorType =\n    | AbiParameters.encode.ErrorType\n    | encodeField.ErrorType\n    | hashType.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function hashType(value: {\n  primaryType: string\n  types: TypedData\n}): Hex.Hex {\n  const { primaryType, types } = value\n  const encodedHashType = Hex.fromString(encodeType({ primaryType, types }))\n  return Hash.keccak256(encodedHashType)\n}\n\n/** @internal */\nexport declare namespace hashType {\n  type ErrorType =\n    | Hex.fromString.ErrorType\n    | encodeType.ErrorType\n    | Hash.keccak256.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function encodeField(properties: {\n  types: TypedData\n  name: string\n  type: string\n  value: any\n}): [type: AbiParameters.Parameter, value: Hex.Hex] {\n  let { types, name, type, value } = properties\n\n  if (types[type] !== undefined)\n    return [\n      { type: 'bytes32' },\n      Hash.keccak256(encodeData({ data: value, primaryType: type, types })),\n    ]\n\n  if (type === 'bytes') {\n    const prepend = value.length % 2 ? '0' : ''\n    value = `0x${prepend + value.slice(2)}`\n    return [{ type: 'bytes32' }, Hash.keccak256(value, { as: 'Hex' })]\n  }\n\n  if (type === 'string')\n    return [\n      { type: 'bytes32' },\n      Hash.keccak256(Bytes.fromString(value), { as: 'Hex' }),\n    ]\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    const parsedType = type.slice(0, type.lastIndexOf('['))\n    const typeValuePairs = (value as [AbiParameters.Parameter, any][]).map(\n      (item) =>\n        encodeField({\n          name,\n          type: parsedType,\n          types,\n          value: item,\n        }),\n    )\n    return [\n      { type: 'bytes32' },\n      Hash.keccak256(\n        AbiParameters.encode(\n          typeValuePairs.map(([t]) => t),\n          typeValuePairs.map(([, v]) => v),\n        ),\n      ),\n    ]\n  }\n\n  return [{ type }, value]\n}\n\n/** @internal */\nexport declare namespace encodeField {\n  type ErrorType =\n    | AbiParameters.encode.ErrorType\n    | Hash.keccak256.ErrorType\n    | Bytes.fromString.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function findTypeDependencies(\n  value: {\n    primaryType: string\n    types: TypedData\n  },\n  results: Set<string> = new Set(),\n): Set<string> {\n  const { primaryType: primaryType_, types } = value\n  const match = primaryType_.match(/^\\w*/u)\n  const primaryType = match?.[0]!\n  if (results.has(primaryType) || types[primaryType] === undefined)\n    return results\n\n  results.add(primaryType)\n\n  for (const field of types[primaryType])\n    findTypeDependencies({ primaryType: field.type, types }, results)\n  return results\n}\n\n/** @internal */\nexport declare namespace findTypeDependencies {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/** @internal */\nfunction validateReference(type: string) {\n  // Struct type must not be a Solidity type.\n  if (\n    type === 'address' ||\n    type === 'bool' ||\n    type === 'string' ||\n    type.startsWith('bytes') ||\n    type.startsWith('uint') ||\n    type.startsWith('int')\n  )\n    throw new InvalidStructTypeError({ type })\n}\n", "import { UserOperation } from 'ox/erc4337'\n\nexport const toUserOperation = UserOperation.from\n", "import {\n  bytesToHex as bytesToHex_noble,\n  hexToBytes as hexToBytes_noble,\n} from '@noble/hashes/utils'\nimport type { Hex } from './types.js'\n\nexport function bytesToHex(bytes: Uint8Array): Hex {\n  return `0x${bytesToHex_noble(bytes)}`\n}\n\nexport function hexToBytes(value: Hex): Uint8Array {\n  return hexToBytes_noble(value.slice(2))\n}\n\nexport function base64UrlToBytes(base64Url: string): Uint8Array {\n  const base64 = base64UrlToBase64(base64Url)\n  const utf8 = base64ToUtf8(base64)\n  return Uint8Array.from(utf8, (c) => c.charCodeAt(0))\n}\n\nexport function bytesToBase64Url(bytes: Uint8Array): string {\n  const base64 = utf8ToBase64(String.fromCharCode(...bytes))\n  return base64ToBase64Url(base64)\n}\n\nexport function base64UrlToBase64(base64Url: string): string {\n  return base64Url.replaceAll('-', '+').replaceAll('_', '/')\n}\n\nexport function base64ToBase64Url(base64: string): string {\n  return base64.replaceAll('+', '-').replaceAll('/', '_')\n}\n\nexport function base64ToUtf8(base64: string): string {\n  return atob(base64)\n}\n\nexport function utf8ToBase64(base64: string): string {\n  return btoa(base64)\n}\n\nexport async function bytesToCryptoKey(bytes: Uint8Array): Promise<any> {\n  return await crypto.subtle.importKey(\n    'spki',\n    bytes,\n    {\n      name: 'ECDSA',\n      namedCurve: 'P-256',\n      hash: 'SHA-256',\n    },\n    true,\n    ['verify'],\n  )\n}\n\nexport async function cryptoKeyToBytes(key: CryptoKey): Promise<Uint8Array> {\n  return new Uint8Array(await crypto.subtle.exportKey('raw', key))\n}\n", "import { keccak_256 } from '@noble/hashes/sha3'\nimport { toBytes } from '@noble/hashes/utils'\n\nimport { parseCredentialPublicKey, serializePublicKey } from './publicKey.js'\nimport type {\n  Credential,\n  OneOf,\n  P256Credential,\n  Prettify,\n  PublicKeyCredential,\n  PublicKeyCredentialCreationOptions,\n} from './types.js'\nimport { base64UrlToBytes } from './utils.js'\n\n// Challenge for credential creation – random 16 bytes.\nexport const createChallenge = Uint8Array.from([\n  105, 171, 180, 181, 160, 222, 75, 198, 42, 42, 32, 31, 141, 37, 186, 233,\n])\n\nexport type CreateCredentialParameters =\n  GetCredentialCreationOptionsParameters & {\n    /**\n     * Credential creation function. Useful for environments that do not support\n     * the WebAuthn API natively (i.e. React Native or testing environments).\n     *\n     * @default window.navigator.credentials.create\n     */\n    createFn?:\n      | ((\n          options?: CredentialCreationOptions | undefined,\n        ) => Promise<Credential | null>)\n      | undefined\n  }\n\nexport type CreateCredentialReturnType = Prettify<P256Credential>\n\n/**\n * Creates a new credential, which can be stored and later used for signing.\n *\n * @example\n * ```ts\n * const credential = await createCredential({ name: 'Example' })\n * ```\n */\nexport async function createCredential(\n  parameters: CreateCredentialParameters,\n): Promise<CreateCredentialReturnType> {\n  const {\n    createFn = window.navigator.credentials.create.bind(\n      window.navigator.credentials,\n    ),\n    ...rest\n  } = parameters\n  const options = getCredentialCreationOptions(rest)\n  try {\n    const credential = (await createFn(options)) as PublicKeyCredential\n    if (!credential) throw new Error('credential creation failed.')\n    const publicKey = await parseCredentialPublicKey(\n      new Uint8Array((credential.response as any).getPublicKey()),\n    )\n    return {\n      id: credential.id,\n      publicKey: serializePublicKey(publicKey, { compressed: true }),\n      raw: credential,\n    }\n  } catch (error) {\n    throw new Error('credential creation failed.', { cause: error })\n  }\n}\n\nexport type GetCredentialCreationOptionsParameters = {\n  /**\n   * A string specifying the relying party's preference for how the attestation statement\n   * (i.e., provision of verifiable evidence of the authenticity of the authenticator and its data)\n   * is conveyed during credential creation.\n   */\n  attestation?: PublicKeyCredentialCreationOptions['attestation'] | undefined\n  /**\n   * An object whose properties are criteria used to filter out the potential authenticators\n   * for the credential creation operation.\n   */\n  authenticatorSelection?:\n    | PublicKeyCredentialCreationOptions['authenticatorSelection']\n    | undefined\n  /**\n   * An `ArrayBuffer`, `TypedArray`, or `DataView` used as a cryptographic challenge.\n   */\n  challenge?: PublicKeyCredentialCreationOptions['challenge'] | undefined\n  /**\n   * List of credential IDs to exclude from the creation. This property can be used\n   * to prevent creation of a credential if it already exists.\n   */\n  excludeCredentialIds?: readonly string[] | undefined\n  /**\n   * An object describing the relying party that requested the credential creation\n   */\n  rp?:\n    | {\n        id: string\n        name: string\n      }\n    | undefined\n  /**\n   * A numerical hint, in milliseconds, which indicates the time the calling web app is willing to wait for the creation operation to complete.\n   */\n  timeout?: PublicKeyCredentialCreationOptions['timeout'] | undefined\n} & OneOf<\n  | {\n      /** Name for the credential (user.name). */\n      name: string\n    }\n  | {\n      /**\n       * An object describing the user account for which the credential is generated.\n       */\n      user: {\n        displayName?: string\n        id?: BufferSource\n        name: string\n      }\n    }\n>\n\nexport type GetCredentialCreationOptionsReturnType = CredentialCreationOptions\n\n/**\n * Returns the creation options for a P256 WebAuthn Credential with a Passkey authenticator.\n *\n * @example\n * ```ts\n * const options = getCredentialCreationOptions({ name: 'Example' })\n * const credentials = window.navigator.credentials.create(options)\n * ```\n */\nexport function getCredentialCreationOptions(\n  parameters: GetCredentialCreationOptionsParameters,\n): GetCredentialCreationOptionsReturnType {\n  const {\n    attestation = 'none',\n    authenticatorSelection = {\n      authenticatorAttachment: 'platform',\n      residentKey: 'preferred',\n      requireResidentKey: false,\n      userVerification: 'required',\n    },\n    challenge = createChallenge,\n    excludeCredentialIds,\n    name: name_,\n    rp = {\n      id: window.location.hostname,\n      name: window.document.title,\n    },\n    user,\n  } = parameters\n  const name = (user?.name ?? name_)!\n  return {\n    publicKey: {\n      attestation,\n      authenticatorSelection,\n      challenge,\n      ...(excludeCredentialIds\n        ? {\n            excludeCredentials: excludeCredentialIds?.map((id) => ({\n              id: base64UrlToBytes(id),\n              type: 'public-key',\n            })),\n          }\n        : {}),\n      pubKeyCredParams: [\n        {\n          type: 'public-key',\n          alg: -7, // p256\n        },\n      ],\n      rp,\n      user: {\n        id: user?.id ?? keccak_256(toBytes(name)),\n        name,\n        displayName: user?.displayName ?? name,\n      },\n    },\n  } as CredentialCreationOptions\n}\n", "import { numberToBytesBE } from '@noble/curves/abstract/utils'\nimport { p256 } from '@noble/curves/p256'\nimport type { Credential, Hex, Signature, WebAuthnData } from './types.js'\nimport {\n  base64UrlToBytes,\n  bytesToBase64Url,\n  bytesToHex,\n  hexToBytes,\n} from './utils.js'\n\nexport type SignParameters = GetCredentialSignRequestOptionsParameters & {\n  /**\n   * Credential request function. Useful for environments that do not support\n   * the WebAuthn API natively (i.e. React Native or testing environments).\n   *\n   * @default window.navigator.credentials.get\n   */\n  getFn?:\n    | ((\n        options?: CredentialRequestOptions | undefined,\n      ) => Promise<Credential | null>)\n    | undefined\n}\n\nexport type SignReturnType = {\n  signature: Hex\n  webauthn: WebAuthnData\n}\n\n/**\n * Signs a hash using a stored credential. If no credential is provided,\n * a prompt will be displayed for the user to select an existing credential\n * that was previously registered.\n *\n * @example\n * ```ts\n * import { credential } from './credential'\n *\n * const signature = await sign({\n *   credentialId: credential.id,\n *   hash: '0x...',\n * })\n * ```\n */\nexport async function sign(\n  parameters: SignParameters,\n): Promise<SignReturnType> {\n  const {\n    getFn = window.navigator.credentials.get.bind(window.navigator.credentials),\n    ...rest\n  } = parameters\n  const options = getCredentialSignRequestOptions(rest)\n  try {\n    const credential = (await getFn(options)) as PublicKeyCredential\n    if (!credential) throw new Error('credential request failed.')\n    const response = credential.response as AuthenticatorAssertionResponse\n\n    const clientDataJSON = String.fromCharCode(\n      ...new Uint8Array(response.clientDataJSON),\n    )\n    const challengeIndex = clientDataJSON.indexOf('\"challenge\"')\n    const typeIndex = clientDataJSON.indexOf('\"type\"')\n\n    const signature = parseAsn1Signature(\n      base64UrlToBytes(bytesToBase64Url(new Uint8Array(response.signature))),\n    )\n\n    return {\n      signature: serializeSignature(signature),\n      webauthn: {\n        authenticatorData: bytesToHex(\n          new Uint8Array(response.authenticatorData),\n        ),\n        clientDataJSON,\n        challengeIndex,\n        typeIndex,\n        userVerificationRequired:\n          options.publicKey!.userVerification === 'required',\n      },\n    }\n  } catch (error) {\n    throw new Error('credential request failed.', { cause: error })\n  }\n}\n\nexport type GetCredentialSignRequestOptionsParameters = {\n  credentialId?: string | undefined\n  hash: Hex\n  /**\n   * The relying party identifier to use.\n   */\n  rpId?: PublicKeyCredentialRequestOptions['rpId'] | undefined\n}\nexport type GetCredentialSignRequestOptionsReturnType = CredentialRequestOptions\n\n/**\n * Returns the request options to sign a hash using a stored credential\n * with a P256 public key.\n *\n * @example\n * ```ts\n * const options = getCredentialSignRequestOptions({ hash: '0x...' })\n * const credentials = window.navigator.credentials.get(options)\n * ```\n */\nexport function getCredentialSignRequestOptions(\n  parameters: GetCredentialSignRequestOptionsParameters,\n): GetCredentialSignRequestOptionsReturnType {\n  const { credentialId, hash, rpId = window.location.hostname } = parameters\n  const challenge = base64UrlToBytes(bytesToBase64Url(hexToBytes(hash)))\n  return {\n    publicKey: {\n      ...(credentialId\n        ? {\n            allowCredentials: [\n              {\n                id: base64UrlToBytes(credentialId),\n                type: 'public-key',\n              },\n            ],\n          }\n        : {}),\n      challenge,\n      rpId,\n      userVerification: 'required',\n    },\n  }\n}\n\n/**\n * @internal\n * Parses an ASN.1 signature into a r and s value.\n */\nexport function parseAsn1Signature(bytes: Uint8Array) {\n  const r_start = bytes[4] === 0 ? 5 : 4\n  const r_end = r_start + 32\n  const s_start = bytes[r_end + 2] === 0 ? r_end + 3 : r_end + 2\n\n  const r = BigInt(bytesToHex(bytes.slice(r_start, r_end)))\n  const s = BigInt(bytesToHex(bytes.slice(s_start)))\n  const n = p256.CURVE.n\n\n  return {\n    r,\n    s: s > n / 2n ? n - s : s,\n  }\n}\n\n/**\n * Parses a serialized signature into r and s values.\n */\nexport function parseSignature(signature: Hex | Uint8Array): Signature {\n  const bytes =\n    typeof signature === 'string' ? hexToBytes(signature) : signature\n  const r = bytes.slice(0, 32)\n  const s = bytes.slice(32, 64)\n  return {\n    r: BigInt(bytesToHex(r)),\n    s: BigInt(bytesToHex(s)),\n  }\n}\n\nexport type SerializeSignatureOptions<to extends 'hex' | 'bytes' = 'hex'> = {\n  to?: to | 'bytes' | 'hex' | undefined\n}\n\n/**\n * Serializes a signature into a hex string or bytes.\n */\nexport function serializeSignature<to extends 'hex' | 'bytes' = 'hex'>(\n  signature: Signature,\n  options: SerializeSignatureOptions<to> = {},\n): to extends 'hex' ? Hex : Uint8Array {\n  const { to = 'hex' } = options\n  const result = new Uint8Array([\n    ...numberToBytesBE(signature.r, 32),\n    ...numberToBytesBE(signature.s, 32),\n  ])\n  return (to === 'hex' ? bytesToHex(result) : result) as any\n}\n", "export * from '@metamask/delegation-deployments';\nexport * from '@metamask/delegation-abis';\nexport * from './executions';\nexport * from './blockchain';\nexport * from './caveats';\nexport * from './constants';\nexport * from './data';\nexport * from './delegation';\nexport * from './delegatorEnvironment';\nexport * from './rpcError';\nexport * from './types';\nexport * from './userOp';\nexport * from './webAuthn';\nexport * from './caveatBuilder';\nexport * from './write';\nexport { BalanceChangeType } from './caveatBuilder/types';\nexport { aggregateSignature, type PartialSignature } from './signatures';\nexport { signUserOperation } from './userOp';\n", "import { type Hex, encodeAbiParameters, encodePacked, zeroAddress } from 'viem';\n\nexport type ExecutionStruct = {\n  target: Hex;\n  value: bigint;\n  callData: Hex;\n};\n\n/**\n * Creates an execution data structure.\n * @param target The address to invoke some calldata on.\n * @param value ETH to send to the address.\n * @param callData The calldata to invoke on the address.\n * @returns The created execution data structure.\n */\nexport const createExecution = (\n  target: Hex = zeroAddress,\n  value: bigint = 0n,\n  callData: Hex = '0x',\n): ExecutionStruct => ({\n  target,\n  value,\n  callData,\n});\n\n// Encoded modes\n// https://github.com/erc7579/erc7579-implementation/blob/main/src/lib/ModeLib.sol\nexport const SINGLE_DEFAULT_MODE =\n  '0x0000000000000000000000000000000000000000000000000000000000000000';\nexport const SINGLE_TRY_MODE =\n  '0x0001000000000000000000000000000000000000000000000000000000000000';\nexport const BATCH_DEFAULT_MODE =\n  '0x0100000000000000000000000000000000000000000000000000000000000000';\nexport const BATCH_TRY_MODE =\n  '0x0101000000000000000000000000000000000000000000000000000000000000';\n\nexport type ExecutionMode =\n  | typeof SINGLE_DEFAULT_MODE\n  | typeof SINGLE_TRY_MODE\n  | typeof BATCH_DEFAULT_MODE\n  | typeof BATCH_TRY_MODE;\n\n/**\n * The ABI type components of an Execution.\n */\nexport const EXECUTION_ABI_TYPE_COMPONENTS = [\n  { type: 'address', name: 'target' },\n  { type: 'uint256', name: 'value' },\n  { type: 'bytes', name: 'callData' },\n];\n\n/**\n * Encodes a single Execution. Used for executing a single Execution in a DeleGator SCA.\n * @param execution the execution to encode\n * @returns the encoded execution\n */\nexport const encodeSingleExecution = (execution: ExecutionStruct): Hex => {\n  return encodePacked(\n    ['address', 'uint256', 'bytes'],\n    [execution.target, execution.value, execution.callData],\n  );\n};\n\n/**\n * Encodes a batch of Executions. Used for executing a batch of Executions in a DeleGator SCA.\n * @dev If there's only a single execution, the contracts expect the `encodeSingleExecution` format.\n * @param executions the executions to encode\n * @returns the encoded executions\n */\nexport const encodeBatchExecution = (executions: ExecutionStruct[]): Hex => {\n  return encodeAbiParameters(\n    [\n      {\n        components: EXECUTION_ABI_TYPE_COMPONENTS,\n        name: 'executions',\n        type: 'tuple[]',\n      },\n    ],\n    [executions],\n  );\n};\n\n/**\n * Encodes the calldata for interacting with the advanced `execute` DeleGator method. Dynamically selects between single and batch execution based on the number of executions.\n * @param executions the execution(s) to encode\n * @returns the encoded execution(s)\n */\nexport const encodeExecutionCalldata = (executions: ExecutionStruct[]): Hex => {\n  if (executions.length == 0) {\n    throw new Error(\n      `Error while getting the execution calldatas, executions is empty`,\n    );\n  }\n  if (executions.length == 1) {\n    const execution = executions[0]!;\n    return encodeSingleExecution(execution);\n  }\n\n  return encodeBatchExecution(executions);\n};\n\n/**\n * Encodes the calldata for interacting with `redeemDelegations`. Encodes each batch of executions individually, dynamically selecting between single and batch execution based on the number of executions.\n * @param executionsBatch the executions to encode\n * @returns the encoded executions\n */\nexport const encodeExecutionCalldatas = (\n  executionsBatch: ExecutionStruct[][],\n): Hex[] => {\n  if (executionsBatch.length == 0) {\n    throw new Error(\n      `Error while getting the execution calldatas, executionsBatch is empty`,\n    );\n  }\n  return executionsBatch.map(encodeExecutionCalldata);\n};\n", "import { CHAIN_ID } from '@metamask/delegation-deployments';\n\nexport const getExplorerAddressLink = (chainId: number, address: string) => {\n  const prefix = getExplorerLink(chainId);\n  return `${prefix}/address/${address}`;\n};\n\nexport const getExplorerTransactionLink = (chainId: number, hash: string) => {\n  const prefix = getExplorerLink(chainId);\n  return `${prefix}/tx/${hash}`;\n};\n\nconst CHAIN_EXPLORERS = {\n  [CHAIN_ID.mainnet]: 'https://etherscan.io',\n  [CHAIN_ID.optimism]: 'https://optimistic.etherscan.io',\n  [CHAIN_ID.polygon]: 'https://polygonscan.com',\n  [CHAIN_ID.base]: 'https://basescan.org',\n  [CHAIN_ID.arbitrum]: 'https://arbiscan.io',\n  [CHAIN_ID.linea]: 'https://lineascan.build',\n  [CHAIN_ID.sepolia]: 'https://sepolia.etherscan.io',\n  [CHAIN_ID.lineaSepolia]: 'https://sepolia.lineascan.build',\n};\n\nconst getExplorerLink = (chainId: number) => {\n  const url = CHAIN_EXPLORERS[chainId];\n  if (!url) {\n    throw new Error(`Unsupported chainId: ${chainId}`);\n  }\n  return url;\n};\n\nexport const shortenHash = (address: string | undefined) =>\n  !!address ? address.slice(0, 6) + '...' : '';\n\nexport const getInfuraRpcUrl = (chainId: number, apiKey?: string) => {\n  if (!apiKey) throw new Error('Infura API key is required');\n  switch (chainId) {\n    case CHAIN_ID.mainnet:\n      return `https://mainnet.infura.io/v3/${apiKey}`;\n    case CHAIN_ID.optimism:\n      return `https://optimism-mainnet.infura.io/v3/${apiKey}`;\n    case CHAIN_ID.polygon:\n      return `https://polygon-mainnet.infura.io/v3/${apiKey}`;\n    case CHAIN_ID.arbitrum:\n      return `https://arbitrum-mainnet.infura.io/v3/${apiKey}`;\n    case CHAIN_ID.linea:\n      return `https://linea-mainnet.infura.io/v3/${apiKey}`;\n    case CHAIN_ID.sepolia:\n      return `https://sepolia.infura.io/v3/${apiKey}`;\n    case CHAIN_ID.lineaSepolia:\n      return `https://linea-sepolia.infura.io/v3/${apiKey}`;\n    default:\n      throw new Error(`Unsupported chainId: ${chainId}`);\n  }\n};\n", "import {\n  type Hex,\n  encodePacked,\n  encodeAbiParameters,\n  parseAbiParameters,\n  keccak256,\n  toHex,\n} from 'viem';\n\nexport const CAVEAT_ABI_TYPE_COMPONENTS = [\n  { type: 'address', name: 'enforcer' },\n  { type: 'bytes', name: 'terms' },\n  { type: 'bytes', name: 'args' },\n];\n\nexport type Caveat = {\n  enforcer: Hex;\n  terms: Hex;\n  args: Hex;\n};\n\nexport const CAVEAT_TYPEHASH: Hex = keccak256(\n  toHex('Caveat(address enforcer,bytes terms)'),\n);\n\n/**\n * Calculates the hash of an array of Caveats.\n * @param input The array of Caveats.\n * @return The keccak256 hash of the encoded Caveat array packet.\n */\nexport const getCaveatArrayPacketHash = (input: Caveat[]): Hex => {\n  let encoded: Hex = '0x';\n\n  for (let i = 0; i < input.length; ++i) {\n    const caveatPacketHash = getCaveatPacketHash(input[i] as Caveat);\n    encoded = encodePacked(['bytes', 'bytes32'], [encoded, caveatPacketHash]);\n  }\n  return keccak256(encoded);\n};\n\n/**\n * Calculates the hash of a single Caveat.\n * @param input The Caveat data.\n * @return The keccak256 hash of the encoded Caveat packet.\n */\nexport const getCaveatPacketHash = (input: Caveat): Hex => {\n  const encoded = encodeAbiParameters(\n    parseAbiParameters('bytes32, address, bytes32'),\n    [CAVEAT_TYPEHASH, input.enforcer, keccak256(input.terms)],\n  );\n  return keccak256(encoded);\n};\n\n/**\n * Creates a caveat.\n * @param enforcer The contract that guarantees the caveat is upheld.\n * @param terms The data that the enforcer will use to verify the caveat (unique per enforcer).\n * @returns A Caveat.\n */\nexport const createCaveat = (\n  enforcer: Hex,\n  terms: Hex,\n  args: Hex = '0x',\n): Caveat => ({\n  enforcer,\n  terms,\n  args,\n});\n", "/**\n * To be used in sdk methods to call Implementation specific code\n * @type {Implementation}\n */\nexport enum Implementation {\n  MultiSig,\n  Hybrid,\n}\n", "import { type Hex, isHex, toHex } from 'viem';\n\n/**\n * Checks if two hexadecimal strings are equal, ignoring case sensitivity.\n * @param a - The first hexadecimal string.\n * @param b - The second hexadecimal string.\n * @returns True if the hexadecimal strings are equal, false otherwise.\n */\nexport function isEqualHex(a: Hex, b: Hex): boolean {\n  return isHex(a) && a.toLowerCase() === b.toLowerCase();\n}\n\n/*\n * hexlify all members of object, recursively\n */\nexport function deepHexlify(obj: any): any {\n  if (typeof obj === 'function') {\n    return undefined;\n  }\n\n  if (obj == null || typeof obj === 'string' || typeof obj === 'boolean') {\n    return obj;\n  }\n\n  if (typeof obj === 'bigint') {\n    return toHex(obj);\n  }\n\n  if (obj._isBigNumber != null || typeof obj !== 'object') {\n    return toHex(obj).replace(/^0x0/, '0x');\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map((member) => deepHexlify(member));\n  }\n\n  return Object.keys(obj).reduce(\n    (set, key) =>\n      Object.assign(Object.assign({}, set), {\n        [key]: deepHexlify(obj[key]),\n      }),\n    {},\n  );\n}\n", "import {\n  type Hex,\n  encodeAbiParameters,\n  parseAbiParameters,\n  keccak256,\n  hashMessage,\n  toBytes,\n  toHex,\n  TypedData,\n  AbiParameter,\n  Address,\n  WalletClient,\n  Account,\n  Chain,\n  Transport,\n  getAddress,\n} from 'viem';\nimport {\n  CAVEAT_ABI_TYPE_COMPONENTS,\n  Caveat,\n  getCaveatArrayPacketHash,\n} from './caveats';\nimport { type Caveats, resolveCaveats } from './caveatBuilder';\n\n/**\n * Converts a Delegation to a DelegationStruct.\n * The DelegationStruct is the format used in the Delegation Framework.\n * @param delegation the delegation to format\n * @returns\n */\nexport const toDelegationStruct = (\n  delegation: Delegation,\n): DelegationStruct => {\n  const caveats = delegation.caveats.map((caveat) => ({\n    enforcer: getAddress(caveat.enforcer),\n    terms: caveat.terms,\n    args: caveat.args,\n  }));\n\n  const salt = delegation.salt === '0x' ? 0n : BigInt(delegation.salt);\n\n  return {\n    delegate: getAddress(delegation.delegate),\n    delegator: getAddress(delegation.delegator),\n    authority:\n      delegation.authority === undefined\n        ? ROOT_AUTHORITY\n        : delegation.authority,\n    caveats,\n    salt,\n    signature: delegation.signature,\n  };\n};\n\n/**\n * Represents a delegation that grants permissions from a delegator to a delegate.\n *\n * @property delegate - The address of the entity receiving the delegation.\n * @property delegator - The address of the entity granting the delegation.\n * @property authority - The authority under which this delegation is granted. For root delegations, this is ROOT_AUTHORITY.\n * @property caveats - An array of restrictions or conditions applied to this delegation.\n * @property salt - A unique value to prevent replay attacks and ensure uniqueness of the delegation.\n * @property signature - The cryptographic signature validating this delegation.\n */\nexport type Delegation = {\n  delegate: Hex;\n  delegator: Hex;\n  authority: Hex;\n  caveats: Caveat[];\n  salt: Hex;\n  signature: Hex;\n};\n\n/**\n * Represents a DelegationStruct as defined in the Delegation Framework.\n * This is distinguished from the Delegation type by requiring the salt to be a bigint\n * instead of a Hex string, which is useful for on-chain operations and EIP-712 signing.\n */\nexport type DelegationStruct = Omit<Delegation, 'salt'> & {\n  salt: bigint;\n};\n\n/**\n * ABI Encodes a delegation.\n * @param delegations\n * @returns\n */\nexport const encodeDelegation = (delegations: Delegation[]) => {\n  const delegationStructs = delegations.map(toDelegationStruct);\n\n  return encodeAbiParameters(\n    [\n      {\n        components: DELEGATION_ABI_TYPE_COMPONENTS,\n        name: 'delegations',\n        type: 'tuple[]',\n      },\n    ],\n    [delegationStructs],\n  );\n};\n\n/**\n * ABI Encodes the delegation chains to generate the encoded permissions contexts.\n * @param permissionContexts\n * @returns\n */\nexport const encodePermissionContexts = (delegations: Delegation[][]) => {\n  const encodedDelegations = delegations.map((delegationChain) =>\n    encodeDelegation(delegationChain),\n  );\n  return encodedDelegations;\n};\n\n/**\n * To be used on a delegation as the root authority.\n */\nexport const ROOT_AUTHORITY =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\n\n/**\n * To be used in the allowList field of a gas delegation so as not to restrict who can redeem the gas delegation.\n */\nexport const ANY_BENEFICIARY = '0x0000000000000000000000000000000000000a11';\n\n/**\n * To be used when generating a delegation hash to be signed\n * NOTE: signature is omitted from the Delegation typehash\n */\nexport const DELEGATION_TYPEHASH = keccak256(\n  toHex(\n    'Delegation(address delegate,address delegator,bytes32 authority,Caveat[] caveats,uint256 salt)Caveat(address enforcer,bytes terms)',\n  ),\n);\n\n/**\n * The ABI type components of a Delegation.\n */\nexport const DELEGATION_ABI_TYPE_COMPONENTS = [\n  { type: 'address', name: 'delegate' },\n  { type: 'address', name: 'delegator' },\n  { type: 'bytes32', name: 'authority' },\n  { type: 'tuple[]', name: 'caveats', components: CAVEAT_ABI_TYPE_COMPONENTS },\n  { type: 'uint256', name: 'salt' },\n  { type: 'bytes', name: 'signature' },\n];\n\n/**\n * TypedData to be used when signing a Delegation. Delegation value for `signature` and Caveat values for `args` are omitted as they cannot be known at signing time.\n */\nexport const SIGNABLE_DELEGATION_TYPED_DATA: TypedData = {\n  Caveat: [\n    { name: 'enforcer', type: 'address' },\n    { name: 'terms', type: 'bytes' },\n  ],\n  Delegation: [\n    { name: 'delegate', type: 'address' },\n    { name: 'delegator', type: 'address' },\n    { name: 'authority', type: 'bytes32' },\n    { name: 'caveats', type: 'Caveat[]' },\n    { name: 'salt', type: 'uint256' },\n  ],\n} as const;\n\n/**\n * The ABI type for a full delegation.\n */\nexport const DELEGATION_ARRAY_ABI_TYPE: AbiParameter = {\n  type: 'tuple[]',\n  components: DELEGATION_ABI_TYPE_COMPONENTS,\n} as const;\n\n/**\n * Encodes an array of Delegations for use in a contract call.\n * @param delegations The array of Delegations to encode.\n * @returns The encoded Delegations as abi parameters.\n */\nexport const encodeDelegations = (delegations: Delegation[]) =>\n  encodeAbiParameters([DELEGATION_ARRAY_ABI_TYPE], [delegations]);\n\n/**\n * get ethSignedMessageHash hex string to allow signing with passkey\n * @param delegationHash to be signed\n */\nexport const prepDelegationHashForPasskeySign = (delegationHash: Hex) => {\n  return hashMessage({\n    raw: toBytes(delegationHash),\n  });\n};\n\n/**\n * This function is used to get the hash of the Delegation parameters.\n * @param input The Delegation parameters to be hashed.\n * @return Returns the hash of the Delegation parameters.\n */\nexport const getDelegationHashOffchain = (input: Delegation): Hex => {\n  const delegationStruct = toDelegationStruct(input);\n\n  const encoded = encodeAbiParameters(\n    parseAbiParameters('bytes32, address, address, bytes32, bytes32, uint'),\n    [\n      DELEGATION_TYPEHASH,\n      delegationStruct.delegate,\n      delegationStruct.delegator,\n      delegationStruct.authority,\n      getCaveatArrayPacketHash(delegationStruct.caveats),\n      delegationStruct.salt,\n    ],\n  );\n\n  return keccak256(encoded);\n};\n\ntype BaseCreateDelegationOptions = {\n  from: Hex;\n  caveats: Caveats;\n  parentDelegation?: Delegation | Hex;\n};\n\n/**\n * Options for creating a specific delegation\n */\nexport type CreateDelegationOptions = BaseCreateDelegationOptions & {\n  to: Hex;\n};\n\n/**\n * Options for creating an open delegation\n */\nexport type CreateOpenDelegationOptions = BaseCreateDelegationOptions;\n\n/**\n * Resolves the authority for a delegation based on the parent delegation\n * @param parentDelegation The parent delegation or its hash\n * @returns The resolved authority hash\n */\nexport const resolveAuthority = (parentDelegation?: Delegation | Hex): Hex => {\n  if (!parentDelegation) {\n    return ROOT_AUTHORITY;\n  }\n\n  if (typeof parentDelegation === 'string') {\n    return parentDelegation;\n  }\n\n  return getDelegationHashOffchain(parentDelegation);\n};\n\n/**\n * Creates a delegation with specific delegate\n * @param options The options for creating the delegation\n * @returns The created delegation data structure\n */\nexport const createDelegation = (\n  options: CreateDelegationOptions,\n): Delegation => {\n  return {\n    delegate: options.to,\n    delegator: options.from,\n    authority: resolveAuthority(options.parentDelegation),\n    caveats: resolveCaveats(options.caveats),\n    salt: '0x',\n    signature: '0x',\n  };\n};\n\n/**\n * Creates an open delegation that can be redeemed by any delegate\n * @param options The options for creating the open delegation\n * @returns The created delegation data structure\n */\nexport const createOpenDelegation = (\n  options: CreateOpenDelegationOptions,\n): Delegation => {\n  return {\n    delegate: ANY_BENEFICIARY,\n    delegator: options.from,\n    authority: resolveAuthority(options.parentDelegation),\n    caveats: resolveCaveats(options.caveats),\n    salt: '0x',\n    signature: '0x',\n  };\n};\n\n/**\n * Signs a delegation using the wallet client.\n * @param walletClient - The wallet client to sign the delegation with.\n * @param delegation - The delegation to sign.\n * @param delegationManager - The address of the delegation manager.\n * @param chainId - The chain ID that the delegation manager is deployed on.\n * @param name - The name of the domain of the delegation manager.\n * @param version - The version of the domain of the delegation manager.\n * @returns The signature.\n */\nexport const signDelegation = async ({\n  signer,\n  delegation,\n  delegationManager,\n  chainId,\n  name = 'DelegationManager',\n  version = '1',\n}: {\n  signer: WalletClient<Transport, Chain, Account>;\n  delegation: Omit<Delegation, 'signature'>;\n  delegationManager: Address;\n  chainId: number;\n  name?: string;\n  version?: string;\n}) => {\n  const delegationStruct = toDelegationStruct({\n    ...delegation,\n    signature: '0x',\n  });\n\n  return signer.signTypedData({\n    account: signer.account,\n    domain: {\n      chainId,\n      name,\n      version,\n      verifyingContract: delegationManager,\n    },\n    types: SIGNABLE_DELEGATION_TYPED_DATA,\n    primaryType: 'Delegation',\n    message: delegationStruct,\n  });\n};\n", "import type { Caveat, DeleGatorEnvironment } from '..';\nimport { type Hex, isHex, concat, toFunctionSelector, AbiFunction } from 'viem';\n\nexport const allowedMethods = 'allowedMethods';\n\nexport type MethodSelector = Hex | string | AbiFunction;\n\n// length of function selector in chars, _including_ 0x prefix\nconst FUNCTION_SELECTOR_STRING_LENGTH = 10;\n\n/**\n * Builds a caveat struct for the AllowedMethodsEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param selectors - The allowed function selectors.\n * @returns The Caveat.\n * @throws Error if no selectors are provided or if any selector is invalid.\n */\nexport const allowedMethodsBuilder = (\n  environment: DeleGatorEnvironment,\n  selectors: MethodSelector[],\n): Caveat => {\n  if (selectors.length === 0) {\n    throw new Error('Invalid selectors: must provide at least one selector');\n  }\n\n  const parsedSelectors = selectors.map(parseSelector);\n\n  const terms = concat(parsedSelectors);\n\n  const {\n    caveatEnforcers: { AllowedMethodsEnforcer },\n  } = environment;\n\n  return {\n    enforcer: AllowedMethodsEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n\nfunction parseSelector(selector: MethodSelector) {\n  if (isHex(selector)) {\n    if (selector.length !== FUNCTION_SELECTOR_STRING_LENGTH) {\n      throw new Error(\n        'Invalid selector: must be a 4 byte hex string, abi function signature, or AbiFunction',\n      );\n    } else {\n      return selector;\n    }\n  }\n\n  try {\n    return toFunctionSelector(selector);\n  } catch (rootError: any) {\n    throw new Error(\n      'Invalid selector: must be a 4 byte hex string, abi function signature, or AbiFunction',\n      { cause: rootError },\n    );\n  }\n}\n", "import type { Caveat, DeleGatorEnvironment } from '..';\nimport { concat, isAddress, type Address } from 'viem';\n\nexport const allowedTargets = 'allowedTargets';\n\n/**\n * Builds a caveat struct for AllowedTargetsEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param targets - The array of allowed target addresses.\n * @returns The Caveat.\n * @throws Error if no targets are provided or if any of the addresses are invalid.\n */\nexport const allowedTargetsBuilder = (\n  environment: DeleGatorEnvironment,\n  targets: Address[],\n): Caveat => {\n  if (targets.length === 0) {\n    throw new Error(\n      'Invalid targets: must provide at least one target address',\n    );\n  }\n\n  // we check that the address is valid, but doesn't need to be checksummed\n  const invalidAddresses = targets.filter(\n    (target) => !isAddress(target, { strict: false }),\n  );\n\n  if (invalidAddresses.length > 0) {\n    throw new Error('Invalid targets: must be valid addresses');\n  }\n\n  const terms = concat(targets);\n\n  const {\n    caveatEnforcers: { AllowedTargetsEnforcer },\n  } = environment;\n\n  return {\n    enforcer: AllowedTargetsEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { Caveat, DeleGatorEnvironment } from '..';\n\nexport type Caveats = CaveatBuilder | Caveat[];\n\ntype CaveatWithOptionalArgs = Omit<Caveat, 'args'> & {\n  args?: Caveat['args'];\n};\n\n/**\n * Resolve the array of Caveat from a Caveats argument.\n * Caveats may be a CaveatBuilder or an array of Caveat.\n *\n * @param caveats - the caveats to be resolved\n * @returns - the resolved caveats array\n */\nexport const resolveCaveats = (caveats: Caveats) => {\n  if (Array.isArray(caveats)) {\n    return caveats;\n  }\n  return caveats.build();\n};\n\ntype RemoveFirst<T extends any[]> = T extends [any, ...infer Rest]\n  ? Rest\n  : never;\n\ntype CaveatBuilderMap = {\n  [key: string]: (\n    environment: DeleGatorEnvironment,\n    ...args: [...any]\n  ) => Caveat;\n};\n\nexport type CaveatBuilderConfig = {\n  allowEmptyCaveats?: boolean;\n};\n\n/**\n * Represents a builder for creating caveats.\n *\n * @template TCaveatBuilderMap - The type of the caveat builder map.\n */\nexport class CaveatBuilder<TCaveatBuilderMap extends CaveatBuilderMap = {}> {\n  private results: Caveat[] = [];\n  private hasBeenBuilt = false;\n\n  constructor(\n    private readonly environment: DeleGatorEnvironment,\n    private readonly config: CaveatBuilderConfig = {},\n    private readonly enforcerBuilders: TCaveatBuilderMap = {} as TCaveatBuilderMap,\n    builtCaveats: Caveat[] = [] as Caveat[],\n  ) {\n    this.results = builtCaveats;\n  }\n\n  /**\n   * Extends the CaveatBuilder with a new enforcer function.\n   *\n   * @template TEnforcerName - The name of the enforcer.\n   * @template TFunction - The type of the enforcer function.\n   * @param name - The name of the enforcer.\n   * @param fn - The enforcer function.\n   * @returns The extended CaveatBuilder instance.\n   */\n  extend<\n    TEnforcerName extends string,\n    TFunction extends (\n      environment: DeleGatorEnvironment,\n      ...args: [...any]\n    ) => Caveat,\n  >(\n    name: TEnforcerName,\n    fn: TFunction,\n  ): CaveatBuilder<TCaveatBuilderMap & Record<TEnforcerName, TFunction>> {\n    return new CaveatBuilder<\n      TCaveatBuilderMap & Record<TEnforcerName, TFunction>\n    >(\n      this.environment,\n      this.config,\n      { ...this.enforcerBuilders, [name]: fn },\n      this.results,\n    );\n  }\n\n  /**\n   * Adds a caveat directly using a Caveat object.\n   *\n   * @param caveat - The caveat to add\n   * @returns The CaveatBuilder instance for chaining\n   */\n  addCaveat(caveat: CaveatWithOptionalArgs): CaveatBuilder<TCaveatBuilderMap>;\n\n  /**\n   * Adds a caveat using a named enforcer function.\n   *\n   * @param name - The name of the enforcer function to use\n   * @param args - The arguments to pass to the enforcer function\n   * @returns The CaveatBuilder instance for chaining\n   */\n  addCaveat<TEnforcerName extends keyof TCaveatBuilderMap>(\n    name: TEnforcerName,\n    ...args: RemoveFirst<Parameters<TCaveatBuilderMap[TEnforcerName]>>\n  ): CaveatBuilder<TCaveatBuilderMap>;\n\n  addCaveat<TEnforcerName extends keyof TCaveatBuilderMap>(\n    nameOrCaveat: TEnforcerName | CaveatWithOptionalArgs,\n    ...args: typeof nameOrCaveat extends CaveatWithOptionalArgs\n      ? []\n      : RemoveFirst<Parameters<TCaveatBuilderMap[TEnforcerName]>>\n  ): CaveatBuilder<TCaveatBuilderMap> {\n    if (typeof nameOrCaveat === 'object') {\n      const caveat = {\n        args: '0x' as const, // defaults to \"0x\"\n        ...nameOrCaveat,\n      };\n\n      this.results = [...this.results, caveat];\n\n      return this;\n    } else {\n      const name = nameOrCaveat;\n\n      const func = this.enforcerBuilders[name];\n      if (typeof func === 'function') {\n        const result = func(this.environment, ...args);\n\n        this.results = [...this.results, result];\n\n        return this;\n      }\n      throw new Error(`Function \"${String(name)}\" does not exist.`);\n    }\n  }\n\n  /**\n   * Returns the caveats that have been built using this CaveatBuilder.\n   *\n   * @returns The array of built caveats.\n   */\n  build(): Caveat[] {\n    if (this.hasBeenBuilt) {\n      throw new Error('This CaveatBuilder has already been built.');\n    }\n\n    if (this.results.length === 0 && !this.config.allowEmptyCaveats) {\n      throw new Error(\n        'No caveats found. If you definitely want to create an empty caveat collection, set `allowEmptyCaveats`.',\n      );\n    }\n\n    this.hasBeenBuilt = true;\n\n    return this.results;\n  }\n}\n", "import type { Caveat, DeleGatorEnvironment } from '..';\nimport { concat, isAddress, isHex, pad, type Address, type Hex } from 'viem';\n\nexport const deployed = 'deployed';\n\n/**\n * Builds a caveat struct for a DeployedEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param contractAddress - The address of the contract that must be deployed.\n * @param salt - The address of the factory contract.\n * @param bytecode - The bytecode of the contract to be deployed.\n * @returns The Caveat.\n * @throws Error if the contract address, factory address, or bytecode is invalid.\n */\nexport const deployedBuilder = (\n  environment: DeleGatorEnvironment,\n  contractAddress: Address,\n  salt: Hex,\n  bytecode: Hex,\n): Caveat => {\n  // we check that the addresses are valid, but don't need to be checksummed\n  if (!isAddress(contractAddress, { strict: false })) {\n    throw new Error(\n      `Invalid contractAddress: must be a valid Ethereum address`,\n    );\n  }\n\n  if (!isHex(salt)) {\n    throw new Error('Invalid salt: must be a valid hexadecimal string');\n  }\n\n  if (!isHex(bytecode)) {\n    throw new Error('Invalid bytecode: must be a valid hexadecimal string');\n  }\n\n  const terms = concat([contractAddress, pad(salt, { size: 32 }), bytecode]);\n\n  const {\n    caveatEnforcers: { DeployedEnforcer },\n  } = environment;\n\n  return {\n    enforcer: DeployedEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { Caveat, DeleGatorEnvironment } from '..';\nimport { type Hex, concat, isHex, toHex } from 'viem';\n\nexport const allowedCalldata = 'allowedCalldata';\n\n/**\n * Builds a caveat struct for AllowedCalldataEnforcer.\n *\n * @param environment - The DeleGator environment.\\\n * @param startIndex - The start index of the subset of calldata bytes.\n * @param value - The expected value for the subset of calldata.\n * @returns The Caveat.\n * @throws Error if the value is not a valid hex string, if startIndex is negative, or if startIndex is not a whole number.\n */\nexport const allowedCalldataBuilder = (\n  environment: DeleGatorEnvironment,\n  startIndex: number,\n  value: Hex,\n): Caveat => {\n  if (!isHex(value)) {\n    throw new Error('Invalid value: must be a valid hex string');\n  }\n\n  if (startIndex < 0) {\n    throw new Error('Invalid startIndex: must be zero or positive');\n  }\n\n  if (!Number.isInteger(startIndex)) {\n    throw new Error('Invalid startIndex: must be a whole number');\n  }\n\n  const startIndexHex = toHex(startIndex, { size: 32 });\n\n  const terms = concat([startIndexHex, value]);\n\n  const {\n    caveatEnforcers: { AllowedCalldataEnforcer },\n  } = environment;\n\n  return {\n    enforcer: AllowedCalldataEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { DeleGatorEnvironment, Caveat } from '..';\nimport { type Address, isAddress, encodePacked } from 'viem';\nimport { BalanceChangeType } from './types';\n\nexport const erc20BalanceChange = 'erc20BalanceChange';\n\n/**\n * Builds a caveat struct for the ERC20BalanceChangeEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param tokenAddress - The tokenAddress of the ERC20 token.\n * @param balance - The minimum balance amount required.\n * @param changeType - Whether the balance should increase or decrease.\n * @returns The Caveat.\n * @throws Error if the token address is invalid, the amount is not a positive number, or the change type is invalid.\n */\nexport const erc20BalanceChangeBuilder = (\n  environment: DeleGatorEnvironment,\n  tokenAddress: Address,\n  recipient: Address,\n  balance: bigint,\n  changeType: BalanceChangeType,\n): Caveat => {\n  if (!isAddress(tokenAddress, { strict: false })) {\n    throw new Error('Invalid tokenAddress: must be a valid address');\n  }\n\n  if (balance <= 0n) {\n    throw new Error('Invalid balance: must be a positive number');\n  }\n\n  if (\n    changeType !== BalanceChangeType.Increase &&\n    changeType !== BalanceChangeType.Decrease\n  ) {\n    throw new Error('Invalid changeType: must be either Increase or Decrease');\n  }\n\n  const terms = encodePacked(\n    ['uint8', 'address', 'address', 'uint256'],\n    [changeType, tokenAddress, recipient, balance],\n  );\n\n  const {\n    caveatEnforcers: { ERC20BalanceChangeEnforcer },\n  } = environment;\n\n  return {\n    enforcer: ERC20BalanceChangeEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "export enum BalanceChangeType {\n  Increase = 0x0,\n  Decrease = 0x1,\n}\n", "import type { Caveat, DeleGatorEnvironment } from '..';\nimport { concat, toHex } from 'viem';\n\nexport const valueLte = 'valueLte';\n\n/**\n * Builds a caveat struct for ValueLteEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param maxValue - The maximum value allowed for the transaction.\n * @returns The Caveat.\n * @throws Error if the maxValue is not a positive number.\n */\nexport const valueLteBuilder = (\n  environment: DeleGatorEnvironment,\n  maxValue: bigint,\n): Caveat => {\n  if (maxValue < 0n) {\n    throw new Error('Invalid maxValue: must be greater than zero');\n  }\n\n  const terms = concat([toHex(maxValue, { size: 32 })]);\n\n  const {\n    caveatEnforcers: { ValueLteEnforcer },\n  } = environment;\n\n  return {\n    enforcer: ValueLteEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { DeleGatorEnvironment, Caveat } from '..';\nimport { type Hex, toHex, pad } from 'viem';\n\nexport const limitedCalls = 'limitedCalls';\n\n/**\n * Builds a caveat struct for the LimitedCallsEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param limit - The maximum number of calls allowed.\n * @returns The Caveat.\n * @throws Error if the limit is not a positive integer.\n */\nexport const limitedCallsBuilder = (\n  environment: DeleGatorEnvironment,\n  limit: number,\n): Caveat => {\n  if (!Number.isInteger(limit)) {\n    throw new Error('Invalid limit: must be an integer');\n  }\n\n  if (limit <= 0) {\n    throw new Error('Invalid limit: must be a positive integer');\n  }\n\n  const terms: Hex = pad(toHex(limit), { size: 32 });\n\n  const {\n    caveatEnforcers: { LimitedCallsEnforcer },\n  } = environment;\n\n  return {\n    enforcer: LimitedCallsEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { DeleGatorEnvironment, Caveat } from '..';\nimport { toHex } from 'viem';\n\nexport const id = 'id';\n\n/**\n * Builds a caveat struct for the IdEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param id - The id to be enforced.\n * @returns The Caveat.\n * @throws Error if the provided id is not a number, not an integer, or is > 32 bytes.\n */\nexport const idBuilder = (\n  environment: DeleGatorEnvironment,\n  id: number,\n): Caveat => {\n  if (typeof id !== 'number') {\n    throw new Error('Invalid id: must be a number');\n  }\n\n  if (!Number.isInteger(id)) {\n    throw new Error('Invalid id: must be an integer');\n  }\n\n  if (id >= 2 ** 32) {\n    throw new Error('Invalid id: must be 32 bytes or fewer in length');\n  }\n\n  const terms = toHex(id, { size: 32 });\n\n  const {\n    caveatEnforcers: { IdEnforcer },\n  } = environment;\n\n  return {\n    enforcer: IdEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { DeleGatorEnvironment, Caveat } from '..';\nimport { type Hex, isHex, pad } from 'viem';\n\nexport const nonce = 'nonce';\n\n// char length of 32 byte hex string\nconst MAX_NONCE_STRING_LENGTH = 66;\n\n/**\n * Builds a caveat struct for the NonceEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param nonce - The nonce value as a hexadecimal string.\n * @returns The Caveat.\n * @throws Error if the nonce is invalid.\n */\nexport const nonceBuilder = (\n  environment: DeleGatorEnvironment,\n  nonce: Hex,\n): Caveat => {\n  if (!nonce || nonce === '0x') {\n    throw new Error('Invalid nonce: must be a non-empty hex string');\n  }\n\n  if (!isHex(nonce)) {\n    throw new Error('Invalid nonce: must be a valid hex string');\n  }\n\n  if (nonce.length > MAX_NONCE_STRING_LENGTH) {\n    throw new Error('Invalid nonce: must be 32 bytes or less in length');\n  }\n\n  const {\n    caveatEnforcers: { NonceEnforcer },\n  } = environment;\n\n  return {\n    enforcer: NonceEnforcer!,\n    terms: pad(nonce, { size: 32 }),\n    args: '0x',\n  };\n};\n", "import type { Caveat, DeleGatorEnvironment } from '..';\nimport { type Hex, concat, toHex } from 'viem';\nimport { TIMESTAMP_UPPER_BOUND_SECONDS } from './shared';\n\nexport const timestamp = 'timestamp';\n\n/**\n * Builds a caveat struct for the TimestampEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param timestampAfterThreshold - The timestamp (in seconds) after which the delegation can be used.\n * @param timestampBeforeThreshold - The timestamp (in seconds) before which the delegation can be used.\n * @returns The Caveat.\n * @throws Error if the timestamps are invalid.\n */\nexport const timestampBuilder = (\n  environment: DeleGatorEnvironment,\n  timestampAfterThreshold: number,\n  timestampBeforeThreshold: number,\n): Caveat => {\n  if (timestampAfterThreshold < 0) {\n    throw new Error(\n      'Invalid timestampAfterThreshold: must be zero or positive',\n    );\n  }\n\n  if (timestampBeforeThreshold < 0) {\n    throw new Error(\n      'Invalid timestampBeforeThreshold: must be zero or positive',\n    );\n  }\n\n  if (timestampBeforeThreshold > TIMESTAMP_UPPER_BOUND_SECONDS) {\n    throw new Error(\n      'Invalid timestampBeforeThreshold: must be less than or equal to 253402300799',\n    );\n  }\n\n  if (timestampAfterThreshold > TIMESTAMP_UPPER_BOUND_SECONDS) {\n    throw new Error(\n      'Invalid timestampAfterThreshold: must be less than or equal to 253402300799',\n    );\n  }\n\n  if (\n    timestampBeforeThreshold !== 0 &&\n    timestampAfterThreshold >= timestampBeforeThreshold\n  ) {\n    throw new Error(\n      'Invalid thresholds: timestampBeforeThreshold must be greater than timestampAfterThreshold when both are specified',\n    );\n  }\n\n  const afterThresholdHex = toHex(timestampAfterThreshold, { size: 16 });\n  const beforeThresholdHex = toHex(timestampBeforeThreshold, { size: 16 });\n\n  const terms: Hex = concat([afterThresholdHex, beforeThresholdHex]);\n\n  const {\n    caveatEnforcers: { TimestampEnforcer },\n  } = environment;\n\n  return {\n    enforcer: TimestampEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "export const TIMESTAMP_UPPER_BOUND_SECONDS = 253402300799; // 9999-12-31 23:59:59 UTC\n", "import type { DeleGatorEnvironment, Caveat } from '..';\nimport { concat, toHex } from 'viem';\n\nexport const blockNumber = 'blockNumber';\n\n/**\n * Builds a caveat struct for the BlockNumberEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param blockAfterThreshold - The earliest block number after which the delegation can be used.\n * @param blockBeforeThreshold - The latest block number before which the delegation can be used.\n * @returns The Caveat.\n * @throws Error if both thresholds are zero, if blockAfterThreshold is greater than or equal to blockBeforeThreshold, or if BlockNumberEnforcer is not available in the environment.\n */\nexport const blockNumberBuilder = (\n  environment: DeleGatorEnvironment,\n  blockAfterThreshold: bigint,\n  blockBeforeThreshold: bigint,\n): Caveat => {\n  if (blockAfterThreshold === 0n && blockBeforeThreshold === 0n) {\n    throw new Error(\n      'Invalid thresholds: At least one of blockAfterThreshold or blockBeforeThreshold must be specified',\n    );\n  }\n\n  if (\n    blockBeforeThreshold !== 0n &&\n    blockAfterThreshold >= blockBeforeThreshold\n  ) {\n    throw new Error(\n      'Invalid thresholds: blockAfterThreshold must be less than blockBeforeThreshold if both are specified',\n    );\n  }\n\n  const terms = concat([\n    toHex(blockAfterThreshold, {\n      size: 16,\n    }),\n    toHex(blockBeforeThreshold, {\n      size: 16,\n    }),\n  ]);\n\n  const {\n    caveatEnforcers: { BlockNumberEnforcer },\n  } = environment;\n\n  return {\n    enforcer: BlockNumberEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { Caveat, DeleGatorEnvironment } from '..';\nimport { concat, isAddress, toHex, Address } from 'viem';\n\nexport const erc20TransferAmount = 'erc20TransferAmount';\n\n/**\n * Builds a caveat struct for ERC20TransferAmountEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param tokenAddress - The address of the ERC20 token contract.\n * @param maxAmount - The maximum amount of tokens that can be transferred.\n * @returns The Caveat.\n * @throws Error if the token address is invalid or if the max amount is not a positive number.\n */\nexport const erc20TransferAmountBuilder = (\n  environment: DeleGatorEnvironment,\n  tokenAddress: Address,\n  maxAmount: bigint,\n): Caveat => {\n  if (!isAddress(tokenAddress, { strict: false })) {\n    throw new Error('Invalid tokenAddress: must be a valid address');\n  }\n\n  if (maxAmount <= 0n) {\n    throw new Error('Invalid maxAmount: must be a positive number');\n  }\n\n  const terms = concat([tokenAddress, toHex(maxAmount, { size: 32 })]);\n\n  const {\n    caveatEnforcers: { ERC20TransferAmountEnforcer },\n  } = environment;\n\n  return {\n    enforcer: ERC20TransferAmountEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { DeleGatorEnvironment, Caveat } from '..';\nimport { type Address, isAddress, encodePacked } from 'viem';\nimport { TIMESTAMP_UPPER_BOUND_SECONDS } from './shared';\n\nexport const erc20Streaming = 'erc20Streaming';\n\n/**\n * Builds a caveat struct for the ERC20StreamingEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param tokenAddress - The tokenAddress of the ERC20 token.\n * @param initialAmount - The initial amount of tokens to release at start time.\n * @param maxAmount - The maxium amount of tokens that can be released.\n * @param amountPerSecond - The rate at which the allowance increases per second.\n * @param startTime The timestamp from which the allowance streaming begins\n * @returns The Caveat.\n * @throws Error if the token address is invalid.\n * @throws Error if the initial amount is a negative number.\n * @throws Error if the max amount is not greater than 0.\n * @throws Error if the max amount is less than the initial amount.\n * @throws Error if the amount per second is not a positive number.\n * @throws Error if the start time is not a positive number.\n */\nexport const erc20StreamingBuilder = (\n  environment: DeleGatorEnvironment,\n  tokenAddress: Address,\n  initialAmount: bigint,\n  maxAmount: bigint,\n  amountPerSecond: bigint,\n  startTime: number,\n): Caveat => {\n  if (!isAddress(tokenAddress, { strict: false })) {\n    throw new Error('Invalid tokenAddress: must be a valid address');\n  }\n\n  if (initialAmount < 0n) {\n    throw new Error('Invalid initialAmount: must be greater than zero');\n  }\n\n  if (maxAmount <= 0n) {\n    throw new Error('Invalid maxAmount: must be a positive number');\n  }\n\n  if (maxAmount < initialAmount) {\n    throw new Error('Invalid maxAmount: must be greater than initialAmount');\n  }\n\n  if (amountPerSecond <= 0n) {\n    throw new Error('Invalid amountPerSecond: must be a positive number');\n  }\n\n  if (startTime <= 0) {\n    throw new Error('Invalid startTime: must be a positive number');\n  }\n\n  if (startTime > TIMESTAMP_UPPER_BOUND_SECONDS) {\n    throw new Error(\n      'Invalid startTime: must be less than or equal to 253402300799',\n    );\n  }\n\n  const terms = encodePacked(\n    ['address', 'uint256', 'uint256', 'uint256', 'uint256'],\n    [\n      tokenAddress,\n      initialAmount,\n      maxAmount,\n      amountPerSecond,\n      BigInt(startTime),\n    ],\n  );\n\n  const {\n    caveatEnforcers: { ERC20StreamingEnforcer },\n  } = environment;\n\n  return {\n    enforcer: ERC20StreamingEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { DeleGatorEnvironment, Caveat } from '..';\nimport { encodePacked } from 'viem';\nimport { TIMESTAMP_UPPER_BOUND_SECONDS } from './shared';\n\nexport const nativeTokenStreaming = 'nativeTokenStreaming';\n\n/**\n * Builds a caveat struct for the NativeTokenStreamingEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param initialAmount - The initial amount of tokens to release at start time.\n * @param maxAmount - The maxium amount of tokens that can be released.\n * @param amountPerSecond - The rate at which the allowance increases per second.\n * @param startTime The timestamp from which the allowance streaming begins\n * @returns The Caveat.\n * @throws Error if the initial amount is a negative number.\n * @throws Error if the max amount is not greater than 0.\n * @throws Error if the max amount is less than the initial amount.\n * @throws Error if the amount per second is not a positive number.\n * @throws Error if the start time is not a positive number.\n */\nexport const nativeTokenStreamingBuilder = (\n  environment: DeleGatorEnvironment,\n  initialAmount: bigint,\n  maxAmount: bigint,\n  amountPerSecond: bigint,\n  startTime: number,\n): Caveat => {\n  if (initialAmount < 0n) {\n    throw new Error('Invalid initialAmount: must be greater than zero');\n  }\n\n  if (maxAmount <= 0n) {\n    throw new Error('Invalid maxAmount: must be a positive number');\n  }\n\n  if (maxAmount < initialAmount) {\n    throw new Error('Invalid maxAmount: must be greater than initialAmount');\n  }\n\n  if (amountPerSecond <= 0n) {\n    throw new Error('Invalid amountPerSecond: must be a positive number');\n  }\n\n  if (startTime <= 0) {\n    throw new Error('Invalid startTime: must be a positive number');\n  }\n\n  if (startTime > TIMESTAMP_UPPER_BOUND_SECONDS) {\n    throw new Error(\n      'Invalid startTime: must be less than or equal to 253402300799',\n    );\n  }\n\n  const terms = encodePacked(\n    ['uint256', 'uint256', 'uint256', 'uint256'],\n    [initialAmount, maxAmount, amountPerSecond, BigInt(startTime)],\n  );\n\n  const {\n    caveatEnforcers: { NativeTokenStreamingEnforcer },\n  } = environment;\n\n  return {\n    enforcer: NativeTokenStreamingEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { Caveat, DeleGatorEnvironment } from '..';\nimport { encodePacked } from 'viem';\n\nexport const nativeTokenTransferAmount = 'nativeTokenTransferAmount';\n\n/**\n * Builds a caveat struct for the NativeTokenTransferAmountEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param allowance - The maximum amount of native tokens allowed (in wei).\n * @returns The Caveat.\n * @throws Error if the maxAmount is invalid.\n */\nexport const nativeTokenTransferAmountBuilder = (\n  environment: DeleGatorEnvironment,\n  allowance: bigint,\n): Caveat => {\n  if (allowance < 0n) {\n    throw new Error('Invalid allowance: must be zero or positive');\n  }\n\n  const terms = encodePacked(['uint256'], [allowance]);\n\n  const {\n    caveatEnforcers: { NativeTokenTransferAmountEnforcer },\n  } = environment;\n\n  return {\n    enforcer: NativeTokenTransferAmountEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { DeleGatorEnvironment, Caveat } from '..';\nimport { type Address, isAddress, encodePacked } from 'viem';\nimport { BalanceChangeType } from './types';\n\nexport const nativeBalanceChange = 'nativeBalanceChange';\n\n/**\n * Builds a caveat struct for the NativeBalanceChangeEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param recipient - The address that should receive the balance change.\n * @param balance - The minimum balance amount required.\n * @param changeType - Whether the balance should increase or decrease.\n * @returns The Caveat.\n * @throws Error if the recipient address is invalid or the amount is not a positive number.\n */\nexport const nativeBalanceChangeBuilder = (\n  environment: DeleGatorEnvironment,\n  recipient: Address,\n  balance: bigint,\n  changeType: BalanceChangeType,\n): Caveat => {\n  if (!isAddress(recipient)) {\n    throw new Error('Invalid recipient: must be a valid Address');\n  }\n\n  if (balance <= 0n) {\n    throw new Error('Invalid balance: must be a positive number');\n  }\n\n  if (\n    changeType !== BalanceChangeType.Increase &&\n    changeType !== BalanceChangeType.Decrease\n  ) {\n    throw new Error('Invalid changeType: must be either Increase or Decrease');\n  }\n\n  const terms = encodePacked(\n    ['uint8', 'address', 'uint256'],\n    [changeType, recipient, balance],\n  );\n\n  const {\n    caveatEnforcers: { NativeBalanceChangeEnforcer },\n  } = environment;\n\n  return {\n    enforcer: NativeBalanceChangeEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { Caveat, DeleGatorEnvironment } from '..';\nimport { type Address, concat, isAddress } from 'viem';\n\nexport const redeemer = 'redeemer';\n\n/**\n * Builds a caveat struct for the RedeemerEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param redeemer[] - The addresses which will be allowed as the redeemer.\n * @returns The Caveat.\n * @throws Error if the redeemer address is invalid.\n */\nexport const redeemerBuilder = (\n  environment: DeleGatorEnvironment,\n  redeemers: Address[],\n): Caveat => {\n  if (redeemers.length === 0) {\n    throw new Error(\n      'Invalid redeemers: must specify at least one redeemer address',\n    );\n  }\n\n  for (let i = 0; i < redeemers.length; i++) {\n    if (!isAddress(redeemers[i]!)) {\n      throw new Error('Invalid redeemers: must be a valid address');\n    }\n  }\n\n  const terms = concat(redeemers);\n\n  const {\n    caveatEnforcers: { RedeemerEnforcer },\n  } = environment;\n\n  return {\n    enforcer: RedeemerEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { Caveat, DeleGatorEnvironment } from '..';\nimport { type Hex, encodePacked, isAddress } from 'viem';\n\nexport const nativeTokenPayment = 'nativeTokenPayment';\n\n/**\n * Builds a caveat struct for the NativeTokenPaymentEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param recipient - The address of the recipient of the payment.\n * @param amount - The amount of native tokens required for the payment.\n * @returns The Caveat.\n * @throws Error if the amount is invalid or the recipient address is invalid.\n */\nexport const nativeTokenPaymentBuilder = (\n  environment: DeleGatorEnvironment,\n  recipient: Hex,\n  amount: bigint,\n): Caveat => {\n  if (amount <= 0n) {\n    throw new Error('Invalid amount: must be positive');\n  }\n\n  if (!isAddress(recipient)) {\n    throw new Error('Invalid recipient: must be a valid address');\n  }\n\n  const terms = encodePacked(['address', 'uint256'], [recipient, amount]);\n\n  const {\n    caveatEnforcers: { NativeTokenPaymentEnforcer },\n  } = environment;\n\n  return {\n    enforcer: NativeTokenPaymentEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { DeleGatorEnvironment, Caveat } from '..';\nimport { type Hex, isHex } from 'viem';\n\nexport const argsEqualityCheck = 'argsEqualityCheck';\n\n/**\n * Builds a caveat struct for the ArgsEqualityCheckEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param args - The expected value for args.\n * @returns The Caveat.\n * @throws Error if the args is invalid.\n */\nexport const argsEqualityCheckBuilder = (\n  environment: DeleGatorEnvironment,\n  args: Hex,\n): Caveat => {\n  if (!isHex(args)) {\n    throw new Error('Invalid args: must be a valid hex string');\n  }\n\n  const terms = args;\n\n  const {\n    caveatEnforcers: { ArgsEqualityCheckEnforcer },\n  } = environment;\n\n  return {\n    enforcer: ArgsEqualityCheckEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { DeleGatorEnvironment, Caveat } from '..';\nimport { type Address, isAddress, encodePacked } from 'viem';\nimport { BalanceChangeType } from './types';\n\nexport const erc1155BalanceChange = 'erc1155BalanceChange';\n\n/**\n * Builds a caveat struct for the ERC1155BalanceChangeEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param tokenAddress - The tokenAddress of the ERC1155 token.\n * @param recipient - The address of the recipient whose balance must change.\n * @param tokenId - The ID of the ERC1155 token.\n * @param balance - The amount by which the recipient's balance must change.\n * @param changeType - The type of balance change (increase or decrease).\n * @returns The Caveat.\n * @throws Error if the token address is invalid, the recipient address is invalid, or the amount is not a positive number.\n */\nexport const erc1155BalanceChangeBuilder = (\n  environment: DeleGatorEnvironment,\n  tokenAddress: Address,\n  recipient: Address,\n  tokenId: bigint,\n  balance: bigint,\n  changeType: BalanceChangeType,\n): Caveat => {\n  if (!isAddress(tokenAddress, { strict: false })) {\n    throw new Error('Invalid tokenAddress: must be a valid address');\n  }\n\n  if (!isAddress(recipient, { strict: false })) {\n    throw new Error('Invalid recipient: must be a valid address');\n  }\n\n  if (balance <= 0n) {\n    throw new Error('Invalid balance: must be a positive number');\n  }\n\n  if (tokenId < 0) {\n    throw new Error('Invalid tokenId: must be a non-negative number');\n  }\n\n  if (\n    changeType !== BalanceChangeType.Increase &&\n    changeType !== BalanceChangeType.Decrease\n  ) {\n    throw new Error('Invalid changeType: must be either Increase or Decrease');\n  }\n\n  const terms = encodePacked(\n    ['uint8', 'address', 'address', 'uint256', 'uint256'],\n    [changeType, tokenAddress, recipient, tokenId, balance],\n  );\n\n  const {\n    caveatEnforcers: { ERC1155BalanceChangeEnforcer },\n  } = environment;\n\n  return {\n    enforcer: ERC1155BalanceChangeEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { DeleGatorEnvironment, Caveat } from '..';\nimport { type Address, isAddress, encodePacked } from 'viem';\nimport { BalanceChangeType } from './types';\n\nexport const erc721BalanceChange = 'erc721BalanceChange';\n\n/**\n * Builds a caveat struct for the ERC721BalanceChangeEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param tokenAddress - The tokenAddress of the ERC721 token.\n * @param recipient - The address of the recipient whose balance must change.\n * @param amount - The amount by which the recipient's balance must change.\n * @param changeType - The type of balance change (increase or decrease).\n * @returns The Caveat.\n * @throws Error if the token address is invalid, the recipient address is invalid, or the amount is not a positive number.\n */\nexport const erc721BalanceChangeBuilder = (\n  environment: DeleGatorEnvironment,\n  tokenAddress: Address,\n  recipient: Address,\n  amount: bigint,\n  changeType: BalanceChangeType,\n): Caveat => {\n  if (!isAddress(tokenAddress, { strict: false })) {\n    throw new Error('Invalid tokenAddress: must be a valid address');\n  }\n\n  if (!isAddress(recipient, { strict: false })) {\n    throw new Error('Invalid recipient: must be a valid address');\n  }\n\n  if (amount <= 0) {\n    throw new Error('Invalid balance: must be a positive number');\n  }\n\n  if (\n    changeType !== BalanceChangeType.Increase &&\n    changeType !== BalanceChangeType.Decrease\n  ) {\n    throw new Error('Invalid changeType: must be either Increase or Decrease');\n  }\n\n  const terms = encodePacked(\n    ['uint8', 'address', 'address', 'uint256'],\n    [changeType, tokenAddress, recipient, amount],\n  );\n\n  const {\n    caveatEnforcers: { ERC721BalanceChangeEnforcer },\n  } = environment;\n\n  return {\n    enforcer: ERC721BalanceChangeEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { DeleGatorEnvironment, Caveat } from '..';\nimport { type Address, isAddress, toHex, concat } from 'viem';\n\nexport const erc721Transfer = 'erc721Transfer';\n\n/**\n * Builds a caveat struct for the ERC721TransferEnforcer.\n *\n * @param environment - The DeleGator environment.\n * @param permittedContract - The permitted contract address for the ERC721 token.\n * @param permittedTokenId - The permitted token ID as a bigint.\n * @returns The Caveat representing the caveat for ERC721 transfer.\n * @throws Error if the permitted contract address is invalid.\n */\nexport const erc721TransferBuilder = (\n  environment: DeleGatorEnvironment,\n  permittedContract: Address,\n  permittedTokenId: bigint,\n): Caveat => {\n  if (!isAddress(permittedContract, { strict: false })) {\n    throw new Error('Invalid tokenAddress: must be a valid address');\n  }\n\n  if (permittedTokenId < 0) {\n    throw new Error('Invalid permittedTokenId: must be a non-negative number');\n  }\n\n  const terms = concat([\n    permittedContract,\n    toHex(permittedTokenId, { size: 32 }),\n  ]);\n\n  const {\n    caveatEnforcers: { ERC721TransferEnforcer },\n  } = environment;\n\n  return {\n    enforcer: ERC721TransferEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { Caveat, DeleGatorEnvironment } from '..';\nimport { concat, isAddress, toHex, type Address, type Hex } from 'viem';\n\nexport const specificActionERC20TransferBatch =\n  'specificActionERC20TransferBatch';\n\n/**\n * Builds a caveat struct for SpecificActionERC20TransferBatchEnforcer.\n * This enforcer validates a batch of exactly 2 transactions where:\n * 1. First transaction must match specific target, method and calldata\n * 2. Second transaction must be an ERC20 transfer with specific parameters\n *\n * @param environment - The DeleGator environment.\n * @param tokenAddress - The address of the ERC20 token contract.\n * @param recipient - The address that will receive the tokens.\n * @param amount - The amount of tokens to transfer.\n * @param firstTarget - The target address for the first transaction.\n * @param firstCalldata - The calldata for the first transaction.\n * @returns The Caveat.\n * @throws Error if any of the addresses are invalid or if the amount is not a positive number.\n */\nexport const specificActionERC20TransferBatchBuilder = (\n  environment: DeleGatorEnvironment,\n  tokenAddress: Address,\n  recipient: Address,\n  amount: bigint,\n  firstTarget: Address,\n  firstCalldata: Hex,\n): Caveat => {\n  if (!isAddress(tokenAddress, { strict: false })) {\n    throw new Error('Invalid tokenAddress: must be a valid address');\n  }\n\n  if (!isAddress(recipient, { strict: false })) {\n    throw new Error('Invalid recipient: must be a valid address');\n  }\n\n  if (!isAddress(firstTarget, { strict: false })) {\n    throw new Error('Invalid firstTarget: must be a valid address');\n  }\n\n  if (amount <= 0n) {\n    throw new Error('Invalid amount: must be a positive number');\n  }\n\n  const terms = concat([\n    tokenAddress,\n    recipient,\n    toHex(amount, { size: 32 }),\n    firstTarget,\n    firstCalldata,\n  ]);\n\n  const {\n    caveatEnforcers: { SpecificActionERC20TransferBatchEnforcer },\n  } = environment;\n\n  return {\n    enforcer: SpecificActionERC20TransferBatchEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { Caveat } from '../caveats';\nimport type { DeleGatorEnvironment } from '../types';\nimport { concat, isAddress, toHex } from 'viem';\nimport type { Address } from 'viem';\n\nexport const erc20PeriodTransfer = 'erc20PeriodTransfer';\n\n/**\n * Builds a caveat struct for ERC20PeriodTransferEnforcer.\n * This enforcer validates that ERC20 token transfers do not exceed a specified amount\n * within a given time period. The transferable amount resets at the beginning of each period,\n * and any unused tokens are forfeited once the period ends.\n *\n * @param environment - The DeleGator environment.\n * @param tokenAddress - The address of the ERC20 token contract.\n * @param periodAmount - The maximum amount of tokens that can be transferred per period.\n * @param periodDuration - The duration of each period in seconds.\n * @param startDate - The timestamp when the first period begins.\n * @returns The Caveat.\n * @throws Error if the token address is invalid or if any of the numeric parameters are invalid.\n */\nexport const erc20PeriodTransferBuilder = (\n  environment: DeleGatorEnvironment,\n  tokenAddress: Address,\n  periodAmount: bigint,\n  periodDuration: number,\n  startDate: number,\n): Caveat => {\n  if (!isAddress(tokenAddress)) {\n    throw new Error('Invalid tokenAddress: must be a valid address');\n  }\n\n  if (periodAmount <= 0n) {\n    throw new Error('Invalid periodAmount: must be a positive number');\n  }\n\n  if (periodDuration <= 0) {\n    throw new Error('Invalid periodDuration: must be a positive number');\n  }\n\n  if (startDate <= 0) {\n    throw new Error('Invalid startDate: must be a positive number');\n  }\n\n  const terms = concat([\n    tokenAddress,\n    toHex(periodAmount, { size: 32 }),\n    toHex(periodDuration, { size: 32 }),\n    toHex(startDate, { size: 32 }),\n  ]);\n\n  return {\n    enforcer: environment.caveatEnforcers.ERC20PeriodTransferEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { Caveat, DeleGatorEnvironment } from '..';\nimport { concat, toHex } from 'viem';\n\nexport const nativeTokenPeriodTransfer = 'nativeTokenPeriodTransfer';\n\n/**\n * Builds a caveat struct for NativeTokenPeriodTransferEnforcer.\n * This enforcer validates that native token (ETH) transfers do not exceed a specified amount\n * within a given time period. The transferable amount resets at the beginning of each period,\n * and any unused ETH is forfeited once the period ends.\n *\n * @param environment - The DeleGator environment.\n * @param periodAmount - The maximum amount of ETH (in wei) that can be transferred per period.\n * @param periodDuration - The duration of each period in seconds.\n * @param startDate - The timestamp when the first period begins.\n * @returns The Caveat.\n * @throws Error if any of the numeric parameters are invalid.\n */\nexport const nativeTokenPeriodTransferBuilder = (\n  environment: DeleGatorEnvironment,\n  periodAmount: bigint,\n  periodDuration: number,\n  startDate: number,\n): Caveat => {\n  if (periodAmount <= 0n) {\n    throw new Error('Invalid periodAmount: must be a positive number');\n  }\n\n  if (periodDuration <= 0) {\n    throw new Error('Invalid periodDuration: must be a positive number');\n  }\n\n  if (startDate <= 0) {\n    throw new Error('Invalid startDate: must be a positive number');\n  }\n\n  const terms = concat([\n    toHex(periodAmount, { size: 32 }),\n    toHex(periodDuration, { size: 32 }),\n    toHex(startDate, { size: 32 }),\n  ]);\n\n  const {\n    caveatEnforcers: { NativeTokenPeriodTransferEnforcer },\n  } = environment;\n\n  return {\n    enforcer: NativeTokenPeriodTransferEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { Caveat, DeleGatorEnvironment } from '..';\nimport {\n  concat,\n  encodeAbiParameters,\n  isAddress,\n  parseAbiParameters,\n  toHex,\n} from 'viem';\nimport type { ExecutionStruct } from '../executions';\n\nexport const exactCalldataBatch = 'exactCalldataBatch';\n\n/**\n * Builds a caveat struct for ExactCalldataBatchEnforcer.\n * This enforcer ensures that the provided batch execution calldata matches exactly\n * the expected calldata for each execution.\n *\n * @param environment - The DeleGator environment.\n * @param executions - Array of expected executions, each containing target address, value, and calldata.\n * @returns The Caveat.\n * @throws Error if any of the executions have invalid parameters.\n */\nexport const exactCalldataBatchBuilder = (\n  environment: DeleGatorEnvironment,\n  executions: ExecutionStruct[],\n): Caveat => {\n  if (executions.length === 0) {\n    throw new Error('Invalid executions: array cannot be empty');\n  }\n\n  // Validate each execution\n  for (const execution of executions) {\n    if (!isAddress(execution.target, { strict: false })) {\n      throw new Error('Invalid target: must be a valid address');\n    }\n\n    if (execution.value < 0n) {\n      throw new Error('Invalid value: must be a non-negative number');\n    }\n\n    if (!execution.callData.startsWith('0x')) {\n      throw new Error(\n        'Invalid callData: must be a hex string starting with 0x',\n      );\n    }\n  }\n\n  // Encode the executions using the approach implemented in ExecutionLib.sol encodeBatch()\n  const terms = encodeAbiParameters(\n    [\n      {\n        type: 'tuple[]',\n        components: [\n          { type: 'address', name: 'target' },\n          { type: 'uint256', name: 'value' },\n          { type: 'bytes', name: 'callData' },\n        ],\n      },\n    ],\n    [executions],\n  );\n\n  const {\n    caveatEnforcers: { ExactCalldataBatchEnforcer },\n  } = environment;\n\n  return {\n    enforcer: ExactCalldataBatchEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { Caveat, DeleGatorEnvironment } from '..';\n\nexport const exactCalldata = 'exactCalldata';\n\n/**\n * Builds a caveat struct for ExactCalldataEnforcer.\n * This enforcer ensures that the provided execution calldata matches exactly\n * the expected calldata.\n *\n * @param environment - The DeleGator environment.\n * @param callData - The expected calldata to match against.\n * @returns The Caveat.\n * @throws Error if the callData is invalid.\n */\nexport const exactCalldataBuilder = (\n  environment: DeleGatorEnvironment,\n  callData: `0x${string}`,\n): Caveat => {\n  if (!callData.startsWith('0x')) {\n    throw new Error('Invalid callData: must be a hex string starting with 0x');\n  }\n\n  const {\n    caveatEnforcers: { ExactCalldataEnforcer },\n  } = environment;\n\n  return {\n    enforcer: ExactCalldataEnforcer!,\n    terms: callData,\n    args: '0x',\n  };\n};\n", "import type { Caveat, DeleGatorEnvironment } from '..';\nimport { isAddress, concat, toHex } from 'viem';\nimport type { ExecutionStruct } from '../executions';\n\nexport const exactExecution = 'exactExecution';\n\n/**\n * Builds a caveat struct for ExactExecutionEnforcer.\n * This enforcer ensures that the provided execution matches exactly\n * with the expected execution (target, value, and calldata).\n *\n * @param environment - The DeleGator environment.\n * @param execution - The expected execution to match against.\n * @returns The Caveat.\n * @throws Error if any of the execution parameters are invalid.\n */\nexport const exactExecutionBuilder = (\n  environment: DeleGatorEnvironment,\n  execution: ExecutionStruct,\n): Caveat => {\n  if (!isAddress(execution.target, { strict: false })) {\n    throw new Error('Invalid target: must be a valid address');\n  }\n\n  if (execution.value < 0n) {\n    throw new Error('Invalid value: must be a non-negative number');\n  }\n\n  if (!execution.callData.startsWith('0x')) {\n    throw new Error('Invalid callData: must be a hex string starting with 0x');\n  }\n\n  const terms = concat([\n    execution.target,\n    toHex(execution.value, { size: 32 }),\n    execution.callData,\n  ]);\n\n  const {\n    caveatEnforcers: { ExactExecutionEnforcer },\n  } = environment;\n\n  return {\n    enforcer: ExactExecutionEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { Caveat, DeleGatorEnvironment } from '..';\nimport { concat, encodeAbiParameters, isAddress, toHex } from 'viem';\nimport type { ExecutionStruct } from '../executions';\n\nexport const exactExecutionBatch = 'exactExecutionBatch';\n\n/**\n * Builds a caveat struct for ExactExecutionBatchEnforcer.\n * This enforcer ensures that each execution in the batch matches exactly\n * with the expected execution (target, value, and calldata).\n *\n * @param environment - The DeleGator environment.\n * @param executions - Array of expected executions to match against.\n * @returns The Caveat.\n * @throws Error if any of the execution parameters are invalid.\n */\nexport const exactExecutionBatchBuilder = (\n  environment: DeleGatorEnvironment,\n  executions: ExecutionStruct[],\n): Caveat => {\n  if (executions.length === 0) {\n    throw new Error('Invalid executions: array cannot be empty');\n  }\n\n  // Validate each execution\n  for (const execution of executions) {\n    if (!isAddress(execution.target, { strict: false })) {\n      throw new Error('Invalid target: must be a valid address');\n    }\n\n    if (execution.value < 0n) {\n      throw new Error('Invalid value: must be a non-negative number');\n    }\n\n    if (!execution.callData.startsWith('0x')) {\n      throw new Error(\n        'Invalid callData: must be a hex string starting with 0x',\n      );\n    }\n  }\n\n  // Encode the executions using the approach implemented in ExecutionLib.sol encodeBatch()\n  const terms = encodeAbiParameters(\n    [\n      {\n        type: 'tuple[]',\n        components: [\n          { type: 'address', name: 'target' },\n          { type: 'uint256', name: 'value' },\n          { type: 'bytes', name: 'callData' },\n        ],\n      },\n    ],\n    [executions],\n  );\n\n  const {\n    caveatEnforcers: { ExactExecutionBatchEnforcer },\n  } = environment;\n\n  return {\n    enforcer: ExactExecutionBatchEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import { concat, Hex, isAddress, pad, toHex } from 'viem';\nimport type { DeleGatorEnvironment, Caveat } from '..';\n\nexport type TokenPeriodConfig = {\n  token: Hex;\n  periodAmount: bigint;\n  periodDuration: number;\n  startDate: number;\n};\n\nexport const multiTokenPeriod = 'multiTokenPeriod';\n\n/**\n * Creates a caveat for the MultiTokenPeriodEnforcer.\n * This enforcer allows setting periodic transfer limits for multiple tokens.\n * Each token can have its own period amount, duration, and start date.\n *\n * @param environment - The DeleGator environment\n * @param configs - Array of token period configurations\n * @returns The caveat object for the MultiTokenPeriodEnforcer\n */\nexport const multiTokenPeriodBuilder = (\n  environment: DeleGatorEnvironment,\n  configs: TokenPeriodConfig[],\n): Caveat => {\n  if (!configs || configs.length === 0) {\n    throw new Error('MultiTokenPeriodBuilder: configs array cannot be empty');\n  }\n\n  configs.forEach((config) => {\n    if (!isAddress(config.token)) {\n      throw new Error(`Invalid token address: ${config.token}`);\n    }\n\n    if (config.periodAmount <= 0) {\n      throw new Error('Invalid period amount: must be greater than 0');\n    }\n\n    if (config.periodDuration <= 0) {\n      throw new Error('Invalid period duration: must be greater than 0');\n    }\n  });\n\n  // Each config requires 116 bytes:\n  // - 20 bytes for token address\n  // - 32 bytes for periodAmount\n  // - 32 bytes for periodDuration\n  // - 32 bytes for startDate\n  const termsArray = configs.reduce<Hex[]>(\n    (acc, { token, periodAmount, periodDuration, startDate }) => [\n      ...acc,\n      pad(token, { size: 20 }),\n      toHex(periodAmount, { size: 32 }),\n      toHex(periodDuration, { size: 32 }),\n      toHex(startDate, { size: 32 }),\n    ],\n    [],\n  );\n\n  const terms = concat(termsArray);\n\n  const {\n    caveatEnforcers: { MultiTokenPeriodEnforcer },\n  } = environment;\n\n  return {\n    enforcer: MultiTokenPeriodEnforcer!,\n    terms,\n    args: '0x',\n  };\n};\n", "import type { DeleGatorEnvironment } from '..';\n\nimport { allowedMethods, allowedMethodsBuilder } from './allowedMethodsBuilder';\nimport { allowedTargets, allowedTargetsBuilder } from './allowedTargetsBuilder';\nimport { CaveatBuilder, CaveatBuilderConfig } from './caveatBuilder';\nimport { deployed, deployedBuilder } from './deployedBuilder';\nimport {\n  allowedCalldata,\n  allowedCalldataBuilder,\n} from './allowedCalldataBuilder';\nimport {\n  erc20BalanceChange,\n  erc20BalanceChangeBuilder,\n} from './erc20BalanceChangeBuilder';\nimport { valueLte, valueLteBuilder } from './valueLteBuilder';\nimport { limitedCalls, limitedCallsBuilder } from './limitedCallsBuilder';\nimport { id, idBuilder } from './idBuilder';\nimport { nonce, nonceBuilder } from './nonceBuilder';\nimport { timestamp, timestampBuilder } from './timestampBuilder';\nimport { blockNumber, blockNumberBuilder } from './blockNumberBuilder';\nimport {\n  erc20TransferAmount,\n  erc20TransferAmountBuilder,\n} from './erc20TransferAmountBuilder';\nimport { erc20Streaming, erc20StreamingBuilder } from './erc20StreamingBuilder';\nimport {\n  nativeTokenStreaming,\n  nativeTokenStreamingBuilder,\n} from './nativeTokenStreamingBuilder';\nimport {\n  nativeTokenTransferAmount,\n  nativeTokenTransferAmountBuilder,\n} from './nativeTokenTransferAmountBuilder';\nimport {\n  nativeBalanceChange,\n  nativeBalanceChangeBuilder,\n} from './nativeBalanceChangeBuilder';\nimport { redeemer, redeemerBuilder } from './redeemerBuilder';\nimport {\n  nativeTokenPayment,\n  nativeTokenPaymentBuilder,\n} from './nativeTokenPaymentBuilder';\nimport {\n  argsEqualityCheck,\n  argsEqualityCheckBuilder,\n} from './argsEqualityCheckBuilder';\nimport {\n  erc1155BalanceChange,\n  erc1155BalanceChangeBuilder,\n} from './erc1155BalanceChangeBuilder';\nimport {\n  erc721BalanceChange,\n  erc721BalanceChangeBuilder,\n} from './erc721BalanceChangeBuilder';\nimport { erc721Transfer, erc721TransferBuilder } from './erc721TransferBuilder';\nimport {\n  specificActionERC20TransferBatch,\n  specificActionERC20TransferBatchBuilder,\n} from './specificActionERC20TransferBatchBuilder';\nimport {\n  erc20PeriodTransfer,\n  erc20PeriodTransferBuilder,\n} from './erc20PeriodTransferBuilder';\nimport {\n  nativeTokenPeriodTransfer,\n  nativeTokenPeriodTransferBuilder,\n} from './nativeTokenPeriodTransferBuilder';\nimport {\n  exactCalldataBatch,\n  exactCalldataBatchBuilder,\n} from './exactCalldataBatchBuilder';\nimport { exactCalldata, exactCalldataBuilder } from './exactCalldataBuilder';\nimport { exactExecution, exactExecutionBuilder } from './exactExecutionBuilder';\nimport {\n  exactExecutionBatch,\n  exactExecutionBatchBuilder,\n} from './exactExecutionBatchBuilder';\nimport {\n  multiTokenPeriod,\n  multiTokenPeriodBuilder,\n} from './multiTokenPeriodBuilder';\nimport { BalanceChangeType } from './types';\n\nexport { resolveCaveats } from './caveatBuilder';\nexport type { Caveats, CaveatBuilderConfig } from './caveatBuilder';\nexport { CaveatBuilder } from './caveatBuilder';\nexport { BalanceChangeType } from './types';\nexport { nativeBalanceChange } from './nativeBalanceChangeBuilder';\nexport { erc721BalanceChange } from './erc721BalanceChangeBuilder';\nexport { erc1155BalanceChange } from './erc1155BalanceChangeBuilder';\n\nexport const createCaveatBuilder = (\n  environment: DeleGatorEnvironment,\n  config?: CaveatBuilderConfig,\n) => {\n  const caveatBuilder = new CaveatBuilder(environment, config)\n    .extend(allowedMethods, allowedMethodsBuilder)\n    .extend(allowedTargets, allowedTargetsBuilder)\n    .extend(deployed, deployedBuilder)\n    .extend(allowedCalldata, allowedCalldataBuilder)\n    .extend(erc20BalanceChange, erc20BalanceChangeBuilder)\n    .extend(erc721BalanceChange, erc721BalanceChangeBuilder)\n    .extend(erc1155BalanceChange, erc1155BalanceChangeBuilder)\n    .extend(valueLte, valueLteBuilder)\n    .extend(limitedCalls, limitedCallsBuilder)\n    .extend(id, idBuilder)\n    .extend(nonce, nonceBuilder)\n    .extend(timestamp, timestampBuilder)\n    .extend(blockNumber, blockNumberBuilder)\n    .extend(erc20TransferAmount, erc20TransferAmountBuilder)\n    .extend(erc20Streaming, erc20StreamingBuilder)\n    .extend(nativeTokenStreaming, nativeTokenStreamingBuilder)\n    .extend(erc721Transfer, erc721TransferBuilder)\n    .extend(nativeTokenTransferAmount, nativeTokenTransferAmountBuilder)\n    .extend(nativeBalanceChange, nativeBalanceChangeBuilder)\n    .extend(redeemer, redeemerBuilder)\n    .extend(nativeTokenPayment, nativeTokenPaymentBuilder)\n    .extend(argsEqualityCheck, argsEqualityCheckBuilder)\n    .extend(\n      specificActionERC20TransferBatch,\n      specificActionERC20TransferBatchBuilder,\n    )\n    .extend(erc20PeriodTransfer, erc20PeriodTransferBuilder)\n    .extend(nativeTokenPeriodTransfer, nativeTokenPeriodTransferBuilder)\n    .extend(exactCalldataBatch, exactCalldataBatchBuilder)\n    .extend(exactCalldata, exactCalldataBuilder)\n    .extend(exactExecution, exactExecutionBuilder)\n    .extend(exactExecutionBatch, exactExecutionBatchBuilder)\n    .extend(multiTokenPeriod, multiTokenPeriodBuilder);\n\n  return caveatBuilder;\n};\n\nexport type CoreCaveatBuilder = ReturnType<typeof createCaveatBuilder>;\n", "import type { Chain, Hex, PublicClient, WalletClient } from 'viem';\nimport { DELEGATOR_CONTRACTS } from '@metamask/delegation-deployments';\nimport { ContractMetaData, DeleGatorEnvironment } from './types';\nimport {\n  EntryPoint,\n  SimpleFactory,\n  DelegationManager,\n  MultiSigDeleGator,\n  HybridDeleGator,\n  SCL_RIP7212,\n  AllowedTargetsEnforcer,\n  AllowedMethodsEnforcer,\n  DeployedEnforcer,\n  TimestampEnforcer,\n  NonceEnforcer,\n  AllowedCalldataEnforcer,\n  BlockNumberEnforcer,\n  LimitedCallsEnforcer,\n  ERC20BalanceChangeEnforcer,\n  ERC20StreamingEnforcer,\n  IdEnforcer,\n  ERC20TransferAmountEnforcer,\n  ValueLteEnforcer,\n  NativeTokenTransferAmountEnforcer,\n  NativeBalanceChangeEnforcer,\n  NativeTokenStreamingEnforcer,\n  NativeTokenPaymentEnforcer,\n  RedeemerEnforcer,\n  ArgsEqualityCheckEnforcer,\n  ERC721BalanceChangeEnforcer,\n  ERC721TransferEnforcer,\n  ERC1155BalanceChangeEnforcer,\n  OwnershipTransferEnforcer,\n  SpecificActionERC20TransferBatchEnforcer,\n  ERC20PeriodTransferEnforcer,\n  NativeTokenPeriodTransferEnforcer,\n  ExactCalldataBatchEnforcer,\n  ExactCalldataEnforcer,\n  ExactExecutionEnforcer,\n  ExactExecutionBatchEnforcer,\n  MultiTokenPeriodEnforcer,\n} from '@metamask/delegation-abis';\nimport { deployContract } from './write';\n\ntype SupportedVersion = '1.0.0' | '1.1.0' | '1.2.0' | '1.3.0';\nexport const PREFERRED_VERSION: SupportedVersion = '1.3.0';\n\ntype DeployedEnvironments = Record<\n  SupportedVersion,\n  Record<number, DeleGatorEnvironment>\n>;\n\nconst contractOverrides: DeployedEnvironments = {\n  '1.0.0': {},\n  '1.1.0': {},\n  '1.2.0': {},\n  '1.3.0': {},\n};\n\nexport function overrideDeployedEnvironment(\n  chainId: number,\n  version: SupportedVersion,\n  environment: DeleGatorEnvironment,\n) {\n  contractOverrides[version][chainId] = environment;\n}\n\n// Utilities to parse a \"DeleGator Environment\" from the store of delegation contracts given a chainId and version number.\n// Version numbers are tied to GitHub tags on the Delegation Framework Repository.\n// ABIs and interfaces are tightly coupled with the versions set below.\nexport function getDeleGatorEnvironment(\n  chainId: number,\n  version: SupportedVersion = PREFERRED_VERSION,\n) {\n  const override = contractOverrides[version][chainId];\n  if (override) {\n    return override;\n  }\n\n  const c = DELEGATOR_CONTRACTS[version]?.[chainId];\n  if (!c) {\n    throw new Error(\n      `No contracts found for version ${version} chain ${chainId}`,\n    );\n  }\n  return getDeleGatorEnvironment_v1(c);\n}\n\nexport function getDeleGatorEnvironment_v1(c: { [contract: string]: Hex }) {\n  return {\n    DelegationManager: c.DelegationManager,\n    EntryPoint: c.EntryPoint,\n    SimpleFactory: c.SimpleFactory,\n    implementations: {\n      MultiSigDeleGatorImpl: c.MultiSigDeleGatorImpl,\n      HybridDeleGatorImpl: c.HybridDeleGatorImpl,\n    },\n    caveatEnforcers: {\n      AllowedCalldataEnforcer: c.AllowedCalldataEnforcer,\n      AllowedMethodsEnforcer: c.AllowedMethodsEnforcer,\n      AllowedTargetsEnforcer: c.AllowedTargetsEnforcer,\n      ArgsEqualityCheckEnforcer: c.ArgsEqualityCheckEnforcer,\n      BlockNumberEnforcer: c.BlockNumberEnforcer,\n      DeployedEnforcer: c.DeployedEnforcer,\n      ERC20BalanceChangeEnforcer: c.ERC20BalanceChangeEnforcer,\n      ERC20TransferAmountEnforcer: c.ERC20TransferAmountEnforcer,\n      ERC20StreamingEnforcer: c.ERC20StreamingEnforcer,\n      ERC721BalanceChangeEnforcer: c.ERC721BalanceChangeEnforcer,\n      ERC721TransferEnforcer: c.ERC721TransferEnforcer,\n      ERC1155BalanceChangeEnforcer: c.ERC1155BalanceChangeEnforcer,\n      IdEnforcer: c.IdEnforcer,\n      LimitedCallsEnforcer: c.LimitedCallsEnforcer,\n      NonceEnforcer: c.NonceEnforcer,\n      TimestampEnforcer: c.TimestampEnforcer,\n      ValueLteEnforcer: c.ValueLteEnforcer,\n      NativeTokenTransferAmountEnforcer: c.NativeTokenTransferAmountEnforcer,\n      NativeBalanceChangeEnforcer: c.NativeBalanceChangeEnforcer,\n      NativeTokenStreamingEnforcer: c.NativeTokenStreamingEnforcer,\n      NativeTokenPaymentEnforcer: c.NativeTokenPaymentEnforcer,\n      OwnershipTransferEnforcer: c.OwnershipTransferEnforcer,\n      RedeemerEnforcer: c.RedeemerEnforcer,\n      SpecificActionERC20TransferBatchEnforcer:\n        c.SpecificActionERC20TransferBatchEnforcer,\n      ERC20PeriodTransferEnforcer: c.ERC20PeriodTransferEnforcer,\n      NativeTokenPeriodTransferEnforcer: c.NativeTokenPeriodTransferEnforcer,\n      ExactCalldataBatchEnforcer: c.ExactCalldataBatchEnforcer,\n      ExactCalldataEnforcer: c.ExactCalldataEnforcer,\n      ExactExecutionEnforcer: c.ExactExecutionEnforcer,\n      ExactExecutionBatchEnforcer: c.ExactExecutionBatchEnforcer,\n      MultiTokenPeriodEnforcer: c.MultiTokenPeriodEnforcer,\n    },\n  } as DeleGatorEnvironment;\n}\n\nexport type DeployedContract = {\n  name: string;\n  address: string;\n};\n\n/**\n * Deploys the contracts needed for the Delegation Framework and DeleGator SCA to be functional as well as all Caveat Enforcers.\n * @param walletClient\n * @param publicClient\n * @param chain\n */\nexport async function deployDeleGatorEnvironment(\n  walletClient: WalletClient,\n  publicClient: PublicClient,\n  chain: Chain,\n  deployedContracts: { [contract: string]: Hex } = {},\n) {\n  const deployContractCurried = async (\n    name: string,\n    contract: ContractMetaData,\n    params: any[] = [],\n  ) => {\n    if (deployedContracts[name]) {\n      return {\n        address: deployedContracts[name],\n        name,\n      };\n    }\n\n    const deployedContract = await deployContract(\n      walletClient,\n      publicClient,\n      chain,\n      contract,\n      params,\n    );\n\n    deployedContracts[name] = deployedContract.address as Hex;\n\n    return { ...deployedContract, name };\n  };\n\n  // Deploy v1.3.0 DeleGator contracts\n  // - deploy standalone contracts\n  const standaloneContracts = {\n    SimpleFactory,\n    AllowedCalldataEnforcer,\n    AllowedTargetsEnforcer,\n    AllowedMethodsEnforcer,\n    ArgsEqualityCheckEnforcer,\n    DeployedEnforcer,\n    TimestampEnforcer,\n    BlockNumberEnforcer,\n    LimitedCallsEnforcer,\n    ERC20BalanceChangeEnforcer,\n    ERC20TransferAmountEnforcer,\n    ERC20StreamingEnforcer,\n    ERC721BalanceChangeEnforcer,\n    ERC721TransferEnforcer,\n    ERC1155BalanceChangeEnforcer,\n    IdEnforcer,\n    NonceEnforcer,\n    ValueLteEnforcer,\n    NativeTokenTransferAmountEnforcer,\n    NativeBalanceChangeEnforcer,\n    NativeTokenStreamingEnforcer,\n    OwnershipTransferEnforcer,\n    RedeemerEnforcer,\n    SpecificActionERC20TransferBatchEnforcer,\n    ERC20PeriodTransferEnforcer,\n    NativeTokenPeriodTransferEnforcer,\n    ExactCalldataBatchEnforcer,\n    ExactCalldataEnforcer,\n    ExactExecutionEnforcer,\n    ExactExecutionBatchEnforcer,\n    MultiTokenPeriodEnforcer,\n  };\n  for (const [name, contract] of Object.entries(standaloneContracts)) {\n    await deployContractCurried(name, contract);\n  }\n\n  // - deploy dependencies\n  const delegationManager = await deployContractCurried(\n    'DelegationManager',\n    DelegationManager,\n    [walletClient.account?.address],\n  );\n\n  // - NativeTokenPaymentEnforcer DelegationManager and ArgsEqualityCheckEnforcer as constructor args\n  await deployContractCurried(\n    'NativeTokenPaymentEnforcer',\n    NativeTokenPaymentEnforcer,\n    [delegationManager.address, deployedContracts['ArgsEqualityCheckEnforcer']],\n  );\n\n  const entryPoint = await deployContractCurried('EntryPoint', EntryPoint);\n\n  // This is a hack to work around the SCL_RIP7212 being deployed as a library.\n  // Forge handles this gracefully, but in the tests we need to manually link\n  // the library.\n  // We don't use the curried function here because we don't need it added to\n  // the environment.\n  const { address: sclRIP7212 } = await deployContract(\n    walletClient,\n    publicClient,\n    chain,\n    SCL_RIP7212,\n    [],\n  );\n\n  // replace linked library address in bytecode https://docs.soliditylang.org/en/latest/using-the-compiler.html#library-linking\n  const hybridDeleGatorWithLinkedLibrary = {\n    ...HybridDeleGator,\n    bytecode: HybridDeleGator.bytecode.replace(\n      /__\\$b8f96b288d4d0429e38b8ed50fd423070f\\$__/g,\n      sclRIP7212.slice(2),\n    ) as Hex,\n  };\n\n  // - deploy DeleGator implementations\n  await deployContractCurried(\n    'HybridDeleGatorImpl',\n    hybridDeleGatorWithLinkedLibrary,\n    [delegationManager.address, entryPoint.address],\n  );\n\n  await deployContractCurried('MultiSigDeleGatorImpl', MultiSigDeleGator, [\n    delegationManager.address,\n    entryPoint.address,\n  ]);\n\n  // Format deployments\n  return getDeleGatorEnvironment_v1(deployedContracts);\n}\n", "import type { Address, Chain, Hex, PublicClient, WalletClient } from 'viem';\nimport { SimpleFactory, DelegationManager } from '@metamask/delegation-abis';\nimport { Delegation, encodePermissionContexts } from './delegation';\nimport {\n  ExecutionStruct,\n  encodeExecutionCalldatas,\n  ExecutionMode,\n} from './executions';\nimport type { ContractMetaData, Redemption } from './types';\n\n/**\n * Deploys a contract using the SimpleFactory contract.\n * @param walletClient\n * @param publicClient\n * @param simpleFactoryAddress\n * @param creationCode\n * @param salt\n * @returns\n */\nexport const deployWithSimpleFactory = async (\n  walletClient: WalletClient,\n  publicClient: PublicClient,\n  simpleFactoryAddress: Address,\n  creationCode: Hex,\n  salt: Hex,\n) => {\n  const { request } = await publicClient.simulateContract({\n    account: walletClient.account,\n    address: simpleFactoryAddress,\n    abi: SimpleFactory.abi,\n    functionName: 'deploy',\n    args: [creationCode, salt],\n  });\n  return await walletClient.writeContract(request);\n};\n\n/**\n * Redeems a delegation and executes the provided execution.\n * @param walletClient the wallet to redeem with\n * @param publicClient the public client to use\n * @param delegationManagerAddress the address of the DelegationManager that the delegation is linked with\n * @param redemptions Contains the permissionContext, executions and execution mode.\n * @returns\n */\nexport const redeemDelegations = async (\n  walletClient: WalletClient,\n  publicClient: PublicClient,\n  delegationManagerAddress: Address,\n  redemptions: Redemption[],\n) => {\n  if (redemptions.length === 0) {\n    throw new Error(`RedeemDelegations invalid zero redemptions`);\n  }\n\n  const permissionContexts: Delegation[][] = [];\n  const executionsBatch: ExecutionStruct[][] = [];\n  const executionModes: ExecutionMode[] = [];\n\n  // Iterate over the Redemption array and extract the values\n  redemptions.forEach((redemption) => {\n    permissionContexts.push(redemption.permissionContext);\n    executionsBatch.push(redemption.executions);\n    executionModes.push(redemption.mode);\n  });\n\n  const encodedPermissionContexts =\n    encodePermissionContexts(permissionContexts);\n  const executionCalldatas = encodeExecutionCalldatas(executionsBatch);\n\n  // Simulate the redemption to validate the call succeeds, rather than failing\n  // in the transaction and spending gas\n  const { request } = await publicClient.simulateContract({\n    account: walletClient.account,\n    address: delegationManagerAddress,\n    abi: DelegationManager.abi,\n    functionName: 'redeemDelegations',\n    args: [encodedPermissionContexts, executionModes, executionCalldatas],\n  });\n  return await walletClient.writeContract(request);\n};\n\n/**\n *\n * @param walletClient The wallet to deploy with\n * @param publicClient Access to the public chain\n * @param chain The chain to deploy on\n * @param contractMetadata The metadata of the contract to deploy\n * @param args\n * @returns\n */\nexport async function deployContract(\n  walletClient: WalletClient,\n  publicClient: PublicClient,\n  chain: Chain,\n  { bytecode, abi }: ContractMetaData,\n  args: any[] = [],\n) {\n  const hash = await walletClient.deployContract({\n    abi,\n    bytecode,\n    args,\n    account: walletClient.account!,\n    chain,\n  });\n  const receipt = await publicClient.waitForTransactionReceipt({\n    hash,\n  });\n  const address = (await receipt).contractAddress!;\n\n  return { address, hash, receipt };\n}\n", "export type JSONRPCError = { message: string; code: number; data?: any };\n\nexport class RpcError extends Error {\n  public readonly code: number;\n\n  public readonly data?: object;\n\n  public static INVALID_PARAMETERS = -32602;\n\n  public static INTERNAL_ERROR = -32603;\n\n  public static METHOD_NOT_SUPPORTED = -32601;\n\n  // implementation-defined server-error\n  public static CONNECTION_CLOSED = -32001;\n\n  public static from(error: RpcError | Error | string): RpcError {\n    if (error instanceof RpcError) {\n      return error;\n    }\n\n    const errorMessage = error instanceof Error ? error.message : error;\n\n    return new RpcError(errorMessage, RpcError.INTERNAL_ERROR);\n  }\n\n  public toJSONRPCError(): JSONRPCError {\n    const { message, code, data } = this;\n\n    return {\n      message,\n      code,\n      data,\n    };\n  }\n\n  constructor(message: string, code: number, data?: object) {\n    super(message);\n\n    // https://www.typescriptlang.org/docs/handbook/2/classes.html#inheriting-built-in-types\n    Object.setPrototypeOf(this, RpcError.prototype);\n\n    this.code = code;\n    this.data = data;\n  }\n}\n", "import { concat, encodeAbiParameters, keccak256, pad, toHex } from 'viem';\nimport type {\n  Account,\n  Address,\n  Chain,\n  Hex,\n  Transport,\n  TypedData,\n  WalletClient,\n} from 'viem';\nimport type { OptionalUserOpProps, PackedUserOperationStruct } from './types';\nimport { toPackedUserOperation } from 'viem/account-abstraction';\n\n// v7 off-chain user operation, hexlified incoming data from rpc call\nexport type UserOperationV07Hexlify = {\n  sender: Hex;\n  nonce: Hex;\n  factory?: Hex;\n  factoryData?: Hex;\n  callData: Hex;\n  callGasLimit: Hex;\n\n  verificationGasLimit: Hex;\n  preVerificationGas: Hex;\n  maxFeePerGas: Hex;\n  maxPriorityFeePerGas: Hex;\n\n  paymaster?: Hex;\n  paymasterVerificationGasLimit?: Hex;\n  paymasterPostOpGasLimit?: Hex;\n  paymasterData?: Hex;\n\n  signature: Hex;\n};\n\n// v7 off-chain user operation with BigInt fields\nexport type UserOperationV07 = {\n  sender: Hex;\n  nonce: bigint;\n  factory?: Hex;\n  factoryData?: Hex;\n  callData: Hex;\n\n  callGasLimit: bigint;\n  verificationGasLimit: bigint;\n  preVerificationGas: bigint;\n  maxFeePerGas: bigint;\n  maxPriorityFeePerGas: bigint;\n\n  paymaster?: Hex;\n  paymasterVerificationGasLimit?: bigint;\n  paymasterPostOpGasLimit?: bigint;\n  paymasterData?: Hex;\n\n  signature: Hex;\n};\n\n/**\n * Creates a raw user operation data structure.\n * @param sender The smart account taking some action.\n * @param nonce A nonce, ideally fetched from the Entry Point.\n * @param callData Calldata to invoke on some contract.\n * @param options Optional properties for the user operation including:\n * - initCode bytecode to initialize a contract if necessary\n * - accountGasLimits Packed gas limits for validateUserOp and gas limit passed to the callData method call.\n * - preVerificationGas Gas not calculated by the handleOps method, but added to the gas paid.\n * - paymasterAndData If set, this field holds the paymaster address, verification gas limit, postOp gas limit and paymaster-specific extra data\n *  The paymaster will pay for the transaction instead of the sender.\n * @returns The created raw user operation data structure.\n */\nexport const createRawUserOp = (\n  sender: Hex,\n  nonce: bigint,\n  callData: Hex,\n  signature: Hex = '0x',\n  options?: OptionalUserOpProps,\n): UserOperationV07 => ({\n  sender,\n  nonce,\n  callData,\n  factory: options?.factory,\n  factoryData: options?.factoryData,\n  callGasLimit: options?.callGasLimit ?? 0n,\n  verificationGasLimit: options?.verificationGasLimit ?? 0n,\n  preVerificationGas: options?.preVerificationGas ?? 0n,\n  maxFeePerGas: options?.maxFeePerGas ?? 0n,\n  maxPriorityFeePerGas: options?.maxPriorityFeePerGas ?? 0n,\n  paymaster: options?.paymaster,\n  paymasterVerificationGasLimit: options?.paymasterVerificationGasLimit,\n  paymasterPostOpGasLimit: options?.paymasterPostOpGasLimit,\n  paymasterData: options?.paymasterData,\n  signature,\n});\n\n////////////////////////////////////////////////////////////////////////////////////////\n\n// TODO: These userOp functions are duplicated in ./apps/ew-client/src/utils/userOpBuilder.ts. We should move them to a shared location along with test(./apps/ew-client/test/UserOpBuilder.test.ts) to avoid duplication\n/**\n * Generates a salt value for address derivation, using a default value if none is provided.\n * @param salt - Optional salt value.\n * @returns The chosen salt value.\n */\nexport const getSalt = (salt?: Hex) => {\n  if (!salt) {\n    salt = '0x0';\n  }\n  return salt;\n};\n\nexport const getPaymasterAndData = (userOp: UserOperationV07): Hex => {\n  let paymasterAndData: Hex;\n  if (userOp.paymaster) {\n    paymasterAndData = concat([\n      userOp.paymaster,\n      pad(toHex(userOp.paymasterVerificationGasLimit || 0n), {\n        size: 16,\n      }),\n      pad(toHex(userOp.paymasterPostOpGasLimit || 0n), {\n        size: 16,\n      }),\n      userOp.paymasterData || ('0x' as Hex),\n    ]);\n  } else {\n    paymasterAndData = '0x';\n  }\n\n  return paymasterAndData;\n};\n\nexport const getInitCode = (userOp: UserOperationV07): Hex => {\n  return userOp.factory\n    ? concat([userOp.factory, userOp.factoryData ?? ('0x' as Hex)])\n    : '0x';\n};\n\nexport const getAccountGasLimits = (userOp: UserOperationV07): Hex => {\n  return concat([\n    pad(toHex(userOp.verificationGasLimit), {\n      size: 16,\n    }),\n    pad(toHex(userOp.callGasLimit), { size: 16 }),\n  ]);\n};\n\nexport const getGasFees = (userOp: UserOperationV07): Hex => {\n  return concat([\n    pad(toHex(userOp.maxPriorityFeePerGas), {\n      size: 16,\n    }),\n    pad(toHex(userOp.maxFeePerGas), { size: 16 }),\n  ]);\n};\n\n/**\n * Packs a user operation into a `PackedUserOperationStruct` object.\n *\n * @param userOp - The user operation to pack.\n * @returns The packed user operation.\n */\nexport const packUserOp = (\n  userOp: UserOperationV07,\n): PackedUserOperationStruct => {\n  const packedOp = {\n    sender: userOp.sender,\n    nonce: BigInt(userOp.nonce),\n    initCode: getInitCode(userOp),\n    callData: userOp.callData,\n    accountGasLimits: getAccountGasLimits(userOp),\n    preVerificationGas: BigInt(userOp.preVerificationGas),\n    gasFees: getGasFees(userOp),\n    paymasterAndData: getPaymasterAndData(userOp),\n    signature: userOp.signature,\n  };\n\n  return packedOp;\n};\n\n/*\n * Calculates the user operation hash for a given packed user operation.\n * @param packedOp - The packed user operation.\n * @param entryPoint - The entry point address.\n * @param chainId - The chain ID.\n * @returns The user operation hash.\n */\nexport const createUserOpHashV07 = (\n  packedOp: PackedUserOperationStruct,\n  entryPoint: Hex,\n  chainId: bigint,\n) => {\n  const hash = keccak256(\n    encodeAbiParameters(\n      [\n        {\n          name: 'sender',\n          type: 'address',\n        },\n        {\n          name: 'nonce',\n          type: 'uint256',\n        },\n        {\n          name: 'initCodeHash',\n          type: 'bytes32',\n        },\n        {\n          name: 'callDataHash',\n          type: 'bytes32',\n        },\n        {\n          name: 'accountGasLimits',\n          type: 'bytes32',\n        },\n        {\n          name: 'preVerificationGas',\n          type: 'uint256',\n        },\n        {\n          name: 'gasFees',\n          type: 'bytes32',\n        },\n        {\n          name: 'paymasterAndDataHash',\n          type: 'bytes32',\n        },\n      ],\n      [\n        packedOp.sender,\n        packedOp.nonce,\n        keccak256(packedOp.initCode),\n        keccak256(packedOp.callData),\n        packedOp.accountGasLimits,\n        packedOp.preVerificationGas,\n        packedOp.gasFees,\n        keccak256(packedOp.paymasterAndData),\n      ],\n    ),\n  );\n\n  return keccak256(\n    encodeAbiParameters(\n      [\n        {\n          name: 'userOpHash',\n          type: 'bytes32',\n        },\n        {\n          name: 'entryPointAddress',\n          type: 'address',\n        },\n        {\n          name: 'chainId',\n          type: 'uint256',\n        },\n      ],\n      [hash, entryPoint, chainId],\n    ),\n  );\n};\n\nexport const SIGNABLE_USER_OP_TYPED_DATA: TypedData = {\n  PackedUserOperation: [\n    { name: 'sender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'initCode', type: 'bytes' },\n    { name: 'callData', type: 'bytes' },\n    { name: 'accountGasLimits', type: 'bytes32' },\n    { name: 'preVerificationGas', type: 'uint256' },\n    { name: 'gasFees', type: 'bytes32' },\n    { name: 'paymasterAndData', type: 'bytes' },\n    { name: 'entryPoint', type: 'address' },\n  ],\n} as const;\n\n/**\n * Signs a user operation using the provided signatory.\n * @param params - The parameters for signing the user operation\n * @param params.signer - The signatory to use for signing\n * @param params.userOp - The user operation to sign\n * @param params.address - The address of the smart account\n * @param params.entryPoint - The entry point contract address\n * @param params.chainId - The chain ID that the entry point is deployed on\n * @param params.name - The name of the domain of the implementation contract\n * @param params.version - The version of the domain of the implementation contract\n * @returns The signature of the user operation\n */\nexport const signUserOperation = async ({\n  signer,\n  userOperation,\n  entryPoint,\n  chainId,\n  name,\n  address,\n  version = '1',\n}: {\n  signer: WalletClient<Transport, Chain, Account>;\n  userOperation: Omit<UserOperationV07, 'signature'>;\n  entryPoint: { address: Address };\n  chainId: number;\n  address: Address;\n  name: 'HybridDeleGator' | 'MultiSigDeleGator';\n  version?: string;\n}) => {\n  const packedUserOp = toPackedUserOperation({\n    ...userOperation,\n    signature: '0x',\n  });\n\n  return signer.signTypedData({\n    account: signer.account,\n    domain: {\n      chainId,\n      name,\n      version,\n      verifyingContract: address,\n    },\n    types: SIGNABLE_USER_OP_TYPED_DATA,\n    primaryType: 'PackedUserOperation',\n    message: { ...packedUserOp, entryPoint: entryPoint.address },\n  });\n};\n", "import { parseSignature } from 'webauthn-p256';\nimport {\n  parseAbiParameters,\n  encodeAbiParameters,\n  type Hex,\n  encodePacked,\n  keccak256,\n  concat,\n} from 'viem';\n\nexport const FIELD_MODULUS =\n  115792089210356248762697446949407573529996955224135760342422259061068512044369n;\nexport const MALLEABILITY_THRESHOLD = FIELD_MODULUS / 2n;\n\nexport const SIGNATURE_ABI_PARAMS = parseAbiParameters(\n  'bytes32, uint256, uint256, bytes, bool, string, string, uint256',\n);\n\n/**\n * This function is used to convert the client data returned from the credentials API\n * into a format that can be consumed by the DeleGator contracts.\n * ClientData looks like this:\n * {\n *  \"type\": \"webauthn.create\" | \"webauthn.get\",\n *   \"challenge\": \"{userOpHash}\",\n *   \"origin\": \"{Domain}\",\n *   \"crossOrigin\": boolean\n * }\n * We need the flattend JSON strings before and after the userOpHash/challenge.\n * This function provides those two client data string slices.\n * @param clientDataJson ClientData\n * @returns Returns [clientDataJSONPrefix and clientDataJSONSuffix]\n * ClientDataJSONPrefix contains the client data till the challengeHash\n * ClientDataJSONSuffix contains the client data after the challengeHash.\n */\nexport const splitOnChallenge = (\n  clientDataJson: string,\n): [clientDataJSONPrefix: string, clientDataJSONSuffix: string] => {\n  try {\n    const { challenge } = JSON.parse(clientDataJson);\n    if (challenge === undefined) {\n      throw new Error('No \"challenge\" found in the input string');\n    }\n    return clientDataJson.split(challenge) as [string, string];\n  } catch (error) {\n    throw new Error('No \"challenge\" found in the input string', {\n      cause: error,\n    });\n  }\n};\n\n/**\n * This function returns the index of '\"type\":' in the ClientData\n * @param clientDataJson Stringified ClientDataJSON\n */\nexport const getResponseTypeLocation = (clientDataJson: string): bigint => {\n  try {\n    // Find the index of the `\"type\":` key in the JSON string directly\n    const typeIndex = clientDataJson.indexOf('\"type\":');\n\n    if (typeIndex === -1)\n      throw new Error('No \"type\" found in the input string');\n    // Return the index of the `\"type\":` key\n    return BigInt(typeIndex);\n  } catch (error) {\n    // Handle any errors that occur during the search\n    throw new Error('No \"type\" found in the input string', {\n      cause: error,\n    });\n  }\n};\n\n/**\n * Encodes a signature to a hexadecimal signature that will be accepted\n * by the DeleGator contracts.\n *\n * @param keyId - The key used for the signature, represented as a hexadecimal string.\n * @param signature - The signature to convert, as Hex\n * @param clientData - The client data used in the creation of the signature.\n * @param authenticatorData - The authenticator data used in the creation of the\n * signature, represented as a hexadecimal string.\n * @returns The signature as a valid DeleGator signature encoded as Hexadecimal\n * string.\n */\nexport function encodeDeleGatorSignature(\n  keyId: string,\n  signature: Hex,\n  clientDataJSON: string,\n  authenticatorData: Hex,\n): Hex {\n  const keyIdHash = keccak256(encodePacked(['string'], [keyId]));\n\n  let { r, s } = parseSignature(signature);\n\n  while (s > MALLEABILITY_THRESHOLD) {\n    s = FIELD_MODULUS - s;\n  }\n\n  const [clientDataComponent1, clientDataComponent2] =\n    splitOnChallenge(clientDataJSON);\n\n  const { userVerified } = parseAuthenticatorFlags(authenticatorData);\n\n  const responseTypeLocation = getResponseTypeLocation(clientDataJSON);\n\n  const encodedSignature = encodeAbiParameters(SIGNATURE_ABI_PARAMS, [\n    keyIdHash,\n    r,\n    s,\n    authenticatorData,\n    userVerified,\n    clientDataComponent1,\n    clientDataComponent2,\n    responseTypeLocation,\n  ]);\n  return encodedSignature;\n}\n\n/**\n * Checks if a given string is a valid base64 or base64url encoded string.\n *\n * @param {string} base64 - The string to be checked.\n * @returns {boolean} Returns `true` if the string is a valid base64 or base64url encoded string, `false` otherwise.\n */\nfunction isBase64(base64: string): boolean {\n  const base64Regex =\n    /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}(==)?|[A-Za-z0-9+/]{3}=?|[A-Za-z0-9-_]{4})*(?:[A-Za-z0-9-_]{2}(==)?|[A-Za-z0-9-_]{3}=?)?$/gi;\n\n  return base64Regex.test(base64);\n}\n\nconst AUTHENTICATOR_DATA_FLAGS_OFFSET = 32;\n// We have all of the flag bits defined here for completeness, even though we only extract the userVerified flag.\nenum AUTHENTICATOR_DATA_FLAG_BIT_INDEX {\n  USER_PRESENCE = 0,\n  // reserved for future use: 1,\n  USER_VERIFIED = 2,\n  BACKUP_ELIGIBILITY = 3,\n  BACKUP_STATE = 4,\n  // reserved for future use: 5,\n  ATTESTED_CREDENTIAL_DATA = 6,\n  EXTENSION_DATA = 7,\n}\n\nexport type AuthenticatorFlags = {\n  userVerified: boolean;\n};\n\n/**\n * Parses the authenticator data from a base64 string and returns an\n * `AuthenticatorFlags` containing only the `userVerified` flag.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Authenticator_data\n *\n * @param {string} authenticatorDataBase64 - The base64 string representation of\n * the authenticator data.\n * @returns {AuthenticatorFlags} An object representing the parsed authenticator\n * flags.\n */\nexport function parseAuthenticatorFlags(\n  authenticatorData: Hex,\n): AuthenticatorFlags {\n  const authenticatorDataBuffer = Buffer.from(\n    authenticatorData.slice(2),\n    'hex',\n  );\n  const flags = authenticatorDataBuffer.readUInt8(\n    AUTHENTICATOR_DATA_FLAGS_OFFSET,\n  );\n\n  // Bit 0 is the least significant bit in the flags byte, so we left shift 0b1 by the bit index\n  const bitMask = 0b1 << AUTHENTICATOR_DATA_FLAG_BIT_INDEX.USER_VERIFIED;\n\n  return {\n    userVerified: (flags & bitMask) !== 0x0,\n  };\n}\n\n/**\n * Creates a dummy signature.\n *\n * This must meet all early-failure conditions of the real signature, but does not need to be a valid signature.\n *\n * See the tests for each of the early-failure conditions.\n *\n * @returns The encoded signature.\n */\nexport const createDummyWebAuthnSignature = (keyId: Hex) => {\n  // https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Authenticator_data#data_structure\n  const rpIdHash = keccak256(encodePacked(['string'], ['AuthenticatorData']));\n  const flags = '0x05';\n  const signCount = '0x00000000';\n  const authenticatorData = concat([rpIdHash, flags, signCount]);\n\n  const keyIdHash = keccak256(encodePacked(['string'], [keyId]));\n  const rs =\n    57896044605178124381348723474703786764998477612067880171211129530534256022184n;\n  const userVerification = true;\n  const clientDataPrefix = '{\"type\":\"webauthn.get\",\"challenge\":\"';\n  const clientDataSuffix = '\",\"origin\":\"passkey-domain\",\"crossOrigin\":false}';\n  const responseTypeLocation = 1n;\n\n  const encodedSignature = encodeAbiParameters(SIGNATURE_ABI_PARAMS, [\n    keyIdHash,\n    rs,\n    rs,\n    authenticatorData,\n    userVerification,\n    clientDataPrefix,\n    clientDataSuffix,\n    responseTypeLocation,\n  ]);\n\n  return encodedSignature;\n};\n", "import { Address, concat, type Hex } from 'viem';\n\nconst signatureTypes = ['ECDSA'] as const;\n\nexport type SignatureType = (typeof signatureTypes)[number];\n\nexport type PartialSignature = {\n  signer: Address;\n  signature: Hex;\n  type: SignatureType;\n};\n\n/**\n * Aggregates signatures into a single signature as expected by the MultiSig implementation\n * @param signatures - The signatures to aggregate\n * @returns The aggregated signature\n */\nexport const aggregateSignature = ({\n  signatures,\n}: {\n  signatures: PartialSignature[];\n}): Hex => {\n  if (signatures.length === 0) {\n    return '0x';\n  }\n\n  for (const { type } of signatures) {\n    if (!signatureTypes.includes(type)) {\n      throw new Error(`Invalid signature type: ${type}`);\n    }\n  }\n\n  // Sort signatures by signer address as required by MutliSig implementation\n  const sortedSignatures = [...signatures].sort((a, b) =>\n    a.signer.localeCompare(b.signer),\n  );\n\n  // Concatenate all signatures\n  return concat(sortedSignatures.map(({ signature }) => signature));\n};\n", "// Re-export the contents of the delegation-utils package\nexport * from '@metamask/delegation-utils';\n\nexport * from './toMetaMaskSmartAccount';\nexport * from './signatory';\n\n// Types\nexport type * from './types';\n\n// Delegation Framework\nexport * from './DelegationFramework';\n", "import { type Address, type Hex } from 'viem';\nimport {\n  entryPoint07Abi,\n  toPackedUserOperation,\n  toSmartAccount,\n} from 'viem/account-abstraction';\nimport {\n  getDeleGatorEnvironment,\n  Implementation,\n  HybridDeleGator,\n  MultiSigDeleGator,\n  SIGNABLE_USER_OP_TYPED_DATA,\n  SIGNABLE_DELEGATION_TYPED_DATA,\n  toDelegationStruct,\n} from '@metamask/delegation-utils';\n\nimport { resolveSignatory } from './signatory';\nimport { getCounterfactualAccountData } from './counterfactualAccountData';\nimport { encodeCallsForCaller } from './encodeCalls';\nimport type {\n  Call,\n  ToMetaMaskSmartAccountParameters,\n  ToMetaMaskSmartAccountReturnType,\n  SignDelegationParams,\n  SignUserOperationParams,\n} from './types';\nimport { entryPointGetNonce as _getNonce } from './DelegationFramework/EntryPoint/read';\n\nconst ENTRYPOINT_VERSION = '0.7' as const;\n\n/**\n * Creates a MetaMask DeleGator smart account instance.\n *\n * @template TImplementation - The type of implementation, extending Implementation.\n * @param params - The parameters for creating the smart account.\n * @resolves to a MetaMask DeleGator smart account instance.\n *\n * @remarks\n * This function sets up a MetaMask DeleGator smart account with the specified implementation.\n * It handles both deployed accounts, and counterfactual accounts.\n * A caller may specify a DeleGator environment, otherwise the environment will be inferred from the chain.\n */\nexport async function toMetaMaskSmartAccount<\n  TImplementation extends Implementation,\n>(\n  params: ToMetaMaskSmartAccountParameters<TImplementation>,\n): Promise<ToMetaMaskSmartAccountReturnType<TImplementation>> {\n  const {\n    client,\n    client: { chain },\n    implementation,\n  } = params;\n\n  if (!chain) {\n    throw new Error('Chain not specified');\n  }\n\n  const signatory = resolveSignatory({\n    implementation,\n    signatory: params.signatory,\n  });\n\n  const environment = params.environment ?? getDeleGatorEnvironment(chain.id);\n\n  const implementationContractName =\n    implementation === Implementation.Hybrid\n      ? 'HybridDeleGator'\n      : 'MultiSigDeleGator';\n\n  let address: Address, factoryData: Hex | undefined;\n\n  if (params.address) {\n    factoryData = undefined;\n    address = params.address;\n  } else {\n    const accountData = await getCounterfactualAccountData({\n      factory: environment.SimpleFactory,\n      implementations: environment.implementations,\n      implementation,\n      deployParams: params.deployParams,\n      deploySalt: params.deploySalt,\n    });\n\n    address = accountData.address;\n    factoryData = accountData.factoryData;\n  }\n\n  const entryPoint = {\n    abi: entryPoint07Abi,\n    address: environment.EntryPoint,\n    version: ENTRYPOINT_VERSION,\n  } as const;\n\n  const getFactoryArgs = async () => {\n    if (factoryData === undefined) {\n      throw new Error(\n        'Deploy params were not provided, so factory args cannot be inferred',\n      );\n    }\n    return {\n      factoryData,\n      factory: environment.SimpleFactory,\n    };\n  };\n\n  const signDelegation = (params: SignDelegationParams) => {\n    const { delegation, chainId } = params;\n\n    const delegationStruct = toDelegationStruct({\n      ...delegation,\n      signature: '0x',\n    });\n\n    const signature = signatory.signTypedData({\n      domain: {\n        chainId: chainId || chain.id,\n        name: 'DelegationManager',\n        version: '1',\n        verifyingContract: environment.DelegationManager,\n      },\n      types: SIGNABLE_DELEGATION_TYPED_DATA,\n      primaryType: 'Delegation',\n      message: delegationStruct,\n    });\n\n    return signature;\n  };\n\n  const signUserOperation = async (params: SignUserOperationParams) => {\n    const { chainId } = params;\n\n    const packedUserOp = toPackedUserOperation({\n      sender: address,\n      ...params,\n      signature: '0x',\n    });\n\n    const signature = await signatory.signTypedData({\n      domain: {\n        chainId: chainId || chain.id,\n        name: implementationContractName,\n        version: '1',\n        verifyingContract: address,\n      },\n      types: SIGNABLE_USER_OP_TYPED_DATA,\n      primaryType: 'PackedUserOperation',\n      message: { ...packedUserOp, entryPoint: entryPoint.address },\n    });\n\n    return signature;\n  };\n\n  // todo: instead of the Abi this should be the encoder namespace from utils\n  const delegatorAbi = (\n    implementation === Implementation.Hybrid\n      ? HybridDeleGator.abi\n      : MultiSigDeleGator.abi\n  ) as TImplementation extends Implementation.Hybrid\n    ? typeof HybridDeleGator.abi\n    : typeof MultiSigDeleGator.abi;\n\n  const getAddress = async () => address;\n\n  const getNonce = () =>\n    _getNonce({\n      client,\n      entryPoint: environment.EntryPoint,\n      contractAddress: address,\n      key: 0n,\n    });\n\n  const encodeCalls = async (calls: readonly Call[]) =>\n    encodeCallsForCaller(address, calls);\n\n  const smartAccount = await toSmartAccount({\n    abi: delegatorAbi,\n    client,\n    entryPoint,\n    environment,\n    getAddress,\n    getFactoryArgs,\n    encodeCalls,\n    getNonce,\n    signUserOperation,\n    signDelegation,\n    ...signatory,\n  });\n\n  return smartAccount;\n}\n", "import {\n  Address,\n  concat,\n  type SignableMessage,\n  type TypedData,\n  type TypedDataDefinition,\n} from 'viem';\n\nimport type { SignReturnType as WebAuthnSignReturnType } from 'webauthn-p256';\nimport {\n  createDummyWebAuthnSignature,\n  encodeDeleGatorSignature,\n  Implementation,\n  aggregateSignature,\n} from '@metamask/delegation-utils';\nimport {\n  AccountSignatoryConfig,\n  HybridSignatoryConfig,\n  InternalSignatory,\n  MultiSigSignatoryConfig,\n  SignatoryConfigByImplementation,\n  WalletSignatoryConfig,\n} from './types';\n\nconst EOA_STUB_SIGNATURE =\n  '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000' as const;\n\nexport const resolveSignatory = <\n  TImplementation extends Implementation,\n>(config: {\n  implementation: TImplementation;\n  signatory: SignatoryConfigByImplementation<TImplementation>;\n}): InternalSignatory => {\n  const { implementation } = config;\n\n  if (implementation === Implementation.Hybrid) {\n    return resolveHybridSignatory(config.signatory as HybridSignatoryConfig);\n  } else if (implementation === Implementation.MultiSig) {\n    return resolveMultiSigSignatory(\n      config.signatory as MultiSigSignatoryConfig,\n    );\n  } else {\n    throw new Error(`Implementation type '${implementation}' not supported`);\n  }\n};\n\nconst resolveSignatoryFromWalletConfig = (\n  config: WalletSignatoryConfig,\n): InternalSignatory => {\n  return {\n    signMessage: config.walletClient.signMessage,\n    signTypedData: (typedData) => {\n      //todo: figure out this type so that we don't need the type assertion\n      return config.walletClient.signTypedData(typedData as any);\n    },\n    getStubSignature: async () => EOA_STUB_SIGNATURE,\n  };\n};\n\nconst resolveSignatoryFromAccountConfig = (config: AccountSignatoryConfig) => {\n  return {\n    signMessage: config.account.signMessage,\n    signTypedData: config.account.signTypedData,\n    getStubSignature: async () => EOA_STUB_SIGNATURE,\n  };\n};\n\nconst resolveHybridSignatory = (\n  config: HybridSignatoryConfig,\n): InternalSignatory => {\n  if ('walletClient' in config) {\n    return resolveSignatoryFromWalletConfig(config);\n  } else if ('account' in config) {\n    const { signMessage, signTypedData, getStubSignature } =\n      resolveSignatoryFromAccountConfig(config);\n    if (!signMessage) {\n      throw new Error('Account does not support signMessage');\n    }\n    if (!signTypedData) {\n      throw new Error('Account does not support signTypedData');\n    }\n    return {\n      signMessage,\n      signTypedData,\n      getStubSignature,\n    };\n  } else {\n    const { keyId, webAuthnAccount } = config;\n\n    if (webAuthnAccount.type !== 'webAuthn') {\n      throw new Error('Account is not a webAuthn account');\n    }\n\n    const encodeSignature = ({ signature, webauthn }: WebAuthnSignReturnType) =>\n      encodeDeleGatorSignature(\n        keyId,\n        signature,\n        webauthn.clientDataJSON,\n        webauthn.authenticatorData,\n      );\n\n    const signMessage = async (args: { message: SignableMessage }) =>\n      webAuthnAccount.signMessage(args).then(encodeSignature);\n    const signTypedData = async <\n      const typedData extends TypedData | Record<string, unknown>,\n      primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n    >(\n      typedDataDefinition: TypedDataDefinition<typedData, primaryType>,\n    ) =>\n      webAuthnAccount.signTypedData(typedDataDefinition).then(encodeSignature);\n\n    const getStubSignature = async () => createDummyWebAuthnSignature(keyId);\n\n    return {\n      signMessage,\n      signTypedData,\n      getStubSignature,\n    };\n  }\n};\n\nconst resolveMultiSigSignatory = (\n  config: MultiSigSignatoryConfig,\n): InternalSignatory => {\n  const resolvedSignatories = config.map((signatory) => {\n    let individualSignMessage: InternalSignatory['signMessage'];\n    let individualSignTypedData: InternalSignatory['signTypedData'];\n    let address: Address;\n    if ('walletClient' in signatory) {\n      const { signMessage, signTypedData } =\n        resolveSignatoryFromWalletConfig(signatory);\n      individualSignMessage = signMessage;\n      individualSignTypedData = signTypedData;\n\n      address = signatory.walletClient.account.address;\n    } else {\n      const { signMessage, signTypedData } =\n        resolveSignatoryFromAccountConfig(signatory);\n      if (!signMessage) {\n        throw new Error('Account does not support signMessage');\n      }\n      if (!signTypedData) {\n        throw new Error('Account does not support signTypedData');\n      }\n\n      individualSignMessage = signMessage;\n      individualSignTypedData = signTypedData;\n\n      address = signatory.account.address;\n    }\n    return {\n      address,\n      individualSignMessage,\n      individualSignTypedData,\n    };\n  });\n\n  const signMessage = async (args: { message: SignableMessage }) => {\n    const addressAndSignatures = resolvedSignatories.map(\n      async ({ individualSignMessage, address }) => ({\n        signature: await individualSignMessage(args),\n        signer: address,\n        type: 'ECDSA' as const,\n      }),\n    );\n\n    const signatures = await Promise.all(addressAndSignatures);\n\n    return aggregateSignature({\n      signatures,\n    });\n  };\n\n  const signTypedData = async <\n    const typedData extends TypedData | Record<string, unknown>,\n    primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n  >(\n    typedDataDefinition: TypedDataDefinition<typedData, primaryType>,\n  ) => {\n    const addressAndSignatures = resolvedSignatories.map(\n      async ({ individualSignTypedData, address }) => ({\n        signature: await individualSignTypedData(typedDataDefinition),\n        signer: address,\n        type: 'ECDSA' as const,\n      }),\n    );\n\n    const signatures = await Promise.all(addressAndSignatures);\n\n    return aggregateSignature({\n      signatures,\n    });\n  };\n\n  const getStubSignature = async () =>\n    concat(resolvedSignatories.map(() => EOA_STUB_SIGNATURE));\n\n  return {\n    signMessage,\n    signTypedData,\n    getStubSignature,\n  };\n};\n", "import {\n  DeleGatorEnvironment,\n  HybridDeleGatorDeployParams,\n  Implementation,\n  MultiSigDeleGatorDeployParams,\n} from '@metamask/delegation-utils';\nimport { DeployParams } from 'src/types';\nimport { Address, getContractAddress, Hex, pad } from 'viem';\nimport { initializeHybridDeleGator } from './DelegationFramework/HybridDeleGator/encode';\nimport { initializeMultiSigDeleGator } from './DelegationFramework/MultiSigDeleGator/encode';\nimport { create2Deploy as encodeCreate2Deploy } from './DelegationFramework/SimpleFactory/encode';\nimport { encodeProxyCreationCode } from './DelegationFramework/utils';\n\n/**\n * Infers counterfactual account data for a DeleGator smart account.\n *\n * @template TImplementation - The type of implementation, extending Implementation.\n * @template TDeployParams - The type of deployment parameters, defaults to DeployParams<Implementation>.\n *\n * @param environment - The DeleGator environment configuration.\n * @param implementation - The specific implementation of the smart account.\n * @param deployParams - The parameters required for deployment.\n * @param deploySalt - A hexadecimal value used as salt for deterministic address generation.\n *\n * @resolves to CounterfactualAccountData, containing the address and factory arguments.\n */\nexport const getCounterfactualAccountData = async <\n  TImplementation extends Implementation,\n>({\n  factory,\n  implementations,\n  implementation,\n  deployParams,\n  deploySalt,\n}: {\n  factory: Address;\n  implementations: DeleGatorEnvironment['implementations'];\n  implementation: TImplementation;\n  deployParams: DeployParams<TImplementation>;\n  deploySalt: Hex;\n}) => {\n  let implementationAddress: Address, initcode: Hex;\n\n  switch (implementation) {\n    case Implementation.Hybrid:\n      const [owner, keyIds, xValues, yValues] =\n        deployParams as HybridDeleGatorDeployParams;\n      implementationAddress = implementations.HybridDeleGatorImpl!;\n      const p256Owners = keyIds.map((keyId, index) => ({\n        keyId: keyId!,\n        x: xValues[index]!,\n        y: yValues[index]!,\n      }));\n      initcode = initializeHybridDeleGator({ eoaOwner: owner, p256Owners });\n      break;\n    case Implementation.MultiSig:\n      const [owners, threshold] = deployParams as MultiSigDeleGatorDeployParams;\n      implementationAddress = implementations.MultiSigDeleGatorImpl!;\n      initcode = initializeMultiSigDeleGator({ owners, threshold });\n      break;\n    default:\n      throw new Error(`Implementation type '${implementation}' not supported`);\n  }\n\n  const salt = pad(deploySalt, { dir: 'left', size: 32 });\n\n  const proxyCreationCode = encodeProxyCreationCode({\n    implementationAddress,\n    initcode,\n  });\n\n  const address = getContractAddress({\n    bytecode: proxyCreationCode,\n    from: factory,\n    opcode: 'CREATE2',\n    salt,\n  });\n\n  const factoryData = encodeCreate2Deploy(proxyCreationCode, salt);\n\n  return {\n    factoryData,\n    address,\n  };\n};\n", "import { encode as addKey } from './methods/addKey';\nimport { encode as initializeHybridDeleGator } from './methods/initialize';\nimport { encode as reinitializeHybridDeleGator } from './methods/reinitialize';\nimport { encode as removeKey } from './methods/removeKey';\nimport { encode as updateSigners } from './methods/updateSigners';\n\nexport {\n  addKey,\n  initializeHybridDeleGator,\n  reinitializeHybridDeleGator,\n  removeKey,\n  updateSigners,\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { HybridDeleGator } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { P256Owner, InitializedClient } from '../../types';\n\nexport type EncodeAddKeyParameters = {\n  p256Owner: P256Owner;\n};\n\nexport type SimulateAddKeyParameters = {\n  client: Client;\n  hybridDeleGatorAddress: Address;\n} & EncodeAddKeyParameters;\n\nexport type ExecuteAddKeyParameters = {\n  client: InitializedClient;\n  hybridDeleGatorAddress: Address;\n} & EncodeAddKeyParameters;\n\nexport const simulate = ({\n  client,\n  hybridDeleGatorAddress,\n  p256Owner,\n}: SimulateAddKeyParameters) => {\n  return simulateContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'addKey',\n    args: [p256Owner.keyId, p256Owner.x, p256Owner.y],\n  });\n};\n\nexport const execute = async ({\n  client,\n  hybridDeleGatorAddress,\n  p256Owner,\n}: ExecuteAddKeyParameters) => {\n  const { request } = await simulate({\n    client,\n    hybridDeleGatorAddress,\n    p256Owner,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({ p256Owner }: EncodeAddKeyParameters) => {\n  return encodeFunctionData({\n    abi: HybridDeleGator.abi,\n    functionName: 'addKey',\n    args: [p256Owner.keyId, p256Owner.x, p256Owner.y],\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { HybridDeleGator } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { P256Owner, InitializedClient } from '../../types';\n\nexport type EncodeInitializeParameters = {\n  eoaOwner: Address;\n  p256Owners: P256Owner[];\n};\n\nexport type SimulateInitializeParameters = {\n  client: Client;\n  hybridDeleGatorAddress: Address;\n} & EncodeInitializeParameters;\n\nexport type ExecuteInitializeParameters = {\n  client: InitializedClient;\n  hybridDeleGatorAddress: Address;\n} & EncodeInitializeParameters;\n\nexport const simulate = ({\n  client,\n  hybridDeleGatorAddress,\n  eoaOwner,\n  p256Owners,\n}: SimulateInitializeParameters) => {\n  return simulateContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'initialize',\n    args: [\n      eoaOwner,\n      p256Owners.map((p256Owner) => p256Owner.keyId),\n      p256Owners.map((p256Owner) => p256Owner.x),\n      p256Owners.map((p256Owner) => p256Owner.y),\n    ],\n  });\n};\n\nexport const execute = async ({\n  client,\n  hybridDeleGatorAddress,\n  eoaOwner,\n  p256Owners,\n}: ExecuteInitializeParameters) => {\n  const { request } = await simulate({\n    client,\n    hybridDeleGatorAddress,\n    eoaOwner,\n    p256Owners,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({\n  eoaOwner,\n  p256Owners,\n}: EncodeInitializeParameters) => {\n  return encodeFunctionData({\n    abi: HybridDeleGator.abi,\n    functionName: 'initialize',\n    args: [\n      eoaOwner,\n      p256Owners.map((p256Owner) => p256Owner.keyId),\n      p256Owners.map((p256Owner) => p256Owner.x),\n      p256Owners.map((p256Owner) => p256Owner.y),\n    ],\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { HybridDeleGator } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { P256Owner, InitializedClient } from '../../types';\n\nexport type EncodeReinitializeParameters = {\n  version: number;\n  eoaOwner: Address;\n  p256Owners: P256Owner[];\n  removeExistingP256Owners: boolean;\n};\n\nexport type SimulateReinitializeParameters = {\n  client: Client;\n  hybridDeleGatorAddress: Address;\n} & EncodeReinitializeParameters;\n\nexport type ExecuteReinitializeParameters = {\n  client: InitializedClient;\n  hybridDeleGatorAddress: Address;\n} & EncodeReinitializeParameters;\n\nexport const simulate = ({\n  client,\n  hybridDeleGatorAddress,\n  version,\n  eoaOwner,\n  p256Owners,\n  removeExistingP256Owners,\n}: SimulateReinitializeParameters) => {\n  return simulateContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'reinitialize',\n    args: [\n      version,\n      eoaOwner,\n      p256Owners.map((p256Owner) => p256Owner.keyId),\n      p256Owners.map((p256Owner) => p256Owner.x),\n      p256Owners.map((p256Owner) => p256Owner.y),\n      removeExistingP256Owners,\n    ],\n  });\n};\n\nexport const execute = async ({\n  client,\n  hybridDeleGatorAddress,\n  version,\n  eoaOwner,\n  p256Owners,\n  removeExistingP256Owners,\n}: ExecuteReinitializeParameters) => {\n  const { request } = await simulate({\n    client,\n    hybridDeleGatorAddress,\n    version,\n    eoaOwner,\n    p256Owners,\n    removeExistingP256Owners,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({\n  version,\n  eoaOwner,\n  p256Owners,\n  removeExistingP256Owners,\n}: EncodeReinitializeParameters) => {\n  return encodeFunctionData({\n    abi: HybridDeleGator.abi,\n    functionName: 'reinitialize',\n    args: [\n      version,\n      eoaOwner,\n      p256Owners.map((p256Owner) => p256Owner.keyId),\n      p256Owners.map((p256Owner) => p256Owner.x),\n      p256Owners.map((p256Owner) => p256Owner.y),\n      removeExistingP256Owners,\n    ],\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { HybridDeleGator } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { InitializedClient } from '../../types';\n\nexport type EncodeRemoveKeyParameters = {\n  keyId: string;\n};\n\nexport type SimulateRemoveKeyParameters = {\n  client: Client;\n  hybridDeleGatorAddress: Address;\n} & EncodeRemoveKeyParameters;\n\nexport type ExecuteRemoveKeyParameters = {\n  client: InitializedClient;\n  hybridDeleGatorAddress: Address;\n} & EncodeRemoveKeyParameters;\n\nexport const simulate = ({\n  client,\n  hybridDeleGatorAddress,\n  keyId,\n}: SimulateRemoveKeyParameters) => {\n  return simulateContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'removeKey',\n    args: [keyId],\n  });\n};\n\nexport const execute = async ({\n  client,\n  hybridDeleGatorAddress,\n  keyId,\n}: ExecuteRemoveKeyParameters) => {\n  const { request } = await simulate({\n    client,\n    hybridDeleGatorAddress,\n    keyId,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({ keyId }: EncodeRemoveKeyParameters) => {\n  return encodeFunctionData({\n    abi: HybridDeleGator.abi,\n    functionName: 'removeKey',\n    args: [keyId],\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { HybridDeleGator } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { P256Owner, InitializedClient } from '../../types';\n\nexport type EncodeUpdateSignersParameters = {\n  eoaOwner: Address;\n  p256Owners: P256Owner[];\n};\n\nexport type SimulateUpdateSignersParameters = {\n  client: Client;\n  hybridDeleGatorAddress: Address;\n} & EncodeUpdateSignersParameters;\n\nexport type ExecuteUpdateSignersParameters = {\n  client: InitializedClient;\n  hybridDeleGatorAddress: Address;\n} & EncodeUpdateSignersParameters;\n\nexport const simulate = ({\n  client,\n  hybridDeleGatorAddress,\n  eoaOwner,\n  p256Owners,\n}: SimulateUpdateSignersParameters) => {\n  return simulateContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'updateSigners',\n    args: [\n      eoaOwner,\n      p256Owners.map((p256Owner) => p256Owner.keyId),\n      p256Owners.map((p256Owner) => p256Owner.x),\n      p256Owners.map((p256Owner) => p256Owner.y),\n    ],\n  });\n};\n\nexport const execute = async ({\n  client,\n  hybridDeleGatorAddress,\n  eoaOwner,\n  p256Owners,\n}: ExecuteUpdateSignersParameters) => {\n  const { request } = await simulate({\n    client,\n    hybridDeleGatorAddress,\n    eoaOwner,\n    p256Owners,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({\n  eoaOwner,\n  p256Owners,\n}: EncodeUpdateSignersParameters) => {\n  return encodeFunctionData({\n    abi: HybridDeleGator.abi,\n    functionName: 'updateSigners',\n    args: [\n      eoaOwner,\n      p256Owners.map((p256Owner) => p256Owner.keyId),\n      p256Owners.map((p256Owner) => p256Owner.x),\n      p256Owners.map((p256Owner) => p256Owner.y),\n    ],\n  });\n};\n", "import { encode as addSigner } from './methods/addSigner';\nimport { encode as initializeMultiSigDeleGator } from './methods/initialize';\nimport { encode as reinitializeMultiSigDeleGator } from './methods/reinitialize';\nimport { encode as removeSigner } from './methods/removeSigner';\nimport { encode as replaceSigner } from './methods/replaceSigner';\nimport { encode as updateThreshold } from './methods/updateThreshold';\nimport { encode as updateMultiSigParameters } from './methods/updateMultiSigParameters';\n\nexport {\n  addSigner,\n  initializeMultiSigDeleGator,\n  reinitializeMultiSigDeleGator,\n  removeSigner,\n  replaceSigner,\n  updateThreshold,\n  updateMultiSigParameters,\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { MultiSigDeleGator } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { InitializedClient } from '../../types';\n\nexport type EncodeAddSignerParameters = {\n  signer: Address;\n};\n\nexport type SimulateAddSignerParameters = {\n  client: Client;\n  multiSigDeleGatorAddress: Address;\n} & EncodeAddSignerParameters;\n\nexport type ExecuteAddSignerParameters = {\n  client: InitializedClient;\n  multiSigDeleGatorAddress: Address;\n} & EncodeAddSignerParameters;\n\nexport const simulate = ({\n  client,\n  multiSigDeleGatorAddress,\n  signer,\n}: SimulateAddSignerParameters) => {\n  return simulateContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'addSigner',\n    args: [signer],\n  });\n};\n\nexport const execute = async ({\n  client,\n  multiSigDeleGatorAddress,\n  signer,\n}: ExecuteAddSignerParameters) => {\n  const { request } = await simulate({\n    client,\n    multiSigDeleGatorAddress,\n    signer,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({ signer }: EncodeAddSignerParameters) => {\n  return encodeFunctionData({\n    abi: MultiSigDeleGator.abi,\n    functionName: 'addSigner',\n    args: [signer],\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { MultiSigDeleGator } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { InitializedClient } from '../../types';\n\nexport type EncodeInitializeParameters = {\n  owners: Address[];\n  threshold: bigint;\n};\n\nexport type SimulateInitializeParameters = {\n  client: Client;\n  multiSigDeleGatorAddress: Address;\n} & EncodeInitializeParameters;\n\nexport type ExecuteInitializeParameters = {\n  client: InitializedClient;\n  multiSigDeleGatorAddress: Address;\n} & EncodeInitializeParameters;\n\nexport const simulate = ({\n  client,\n  multiSigDeleGatorAddress,\n  owners,\n  threshold,\n}: SimulateInitializeParameters) => {\n  return simulateContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'initialize',\n    args: [owners, threshold],\n  });\n};\n\nexport const execute = async ({\n  client,\n  multiSigDeleGatorAddress,\n  owners,\n  threshold,\n}: ExecuteInitializeParameters) => {\n  const { request } = await simulate({\n    client,\n    multiSigDeleGatorAddress,\n    owners,\n    threshold,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({ owners, threshold }: EncodeInitializeParameters) => {\n  return encodeFunctionData({\n    abi: MultiSigDeleGator.abi,\n    functionName: 'initialize',\n    args: [owners, threshold],\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { MultiSigDeleGator } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { InitializedClient } from '../../types';\n\nexport type EncodeReinitializeParameters = {\n  version: bigint;\n  owners: Address[];\n  threshold: bigint;\n  removeExistingOwners: boolean;\n};\n\nexport type SimulateReinitializeParameters = {\n  client: Client;\n  multiSigDeleGatorAddress: Address;\n} & EncodeReinitializeParameters;\n\nexport type ExecuteReinitializeParameters = {\n  client: InitializedClient;\n  multiSigDeleGatorAddress: Address;\n} & EncodeReinitializeParameters;\n\nexport const simulate = ({\n  client,\n  multiSigDeleGatorAddress,\n  version,\n  owners,\n  threshold,\n  removeExistingOwners,\n}: SimulateReinitializeParameters) => {\n  return simulateContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'reinitialize',\n    args: [version, owners, threshold, removeExistingOwners],\n  });\n};\n\nexport const execute = async ({\n  client,\n  multiSigDeleGatorAddress,\n  version,\n  owners,\n  threshold,\n  removeExistingOwners,\n}: ExecuteReinitializeParameters) => {\n  const { request } = await simulate({\n    client,\n    multiSigDeleGatorAddress,\n    version,\n    owners,\n    threshold,\n    removeExistingOwners,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({\n  version,\n  owners,\n  threshold,\n  removeExistingOwners,\n}: EncodeReinitializeParameters) => {\n  return encodeFunctionData({\n    abi: MultiSigDeleGator.abi,\n    functionName: 'reinitialize',\n    args: [version, owners, threshold, removeExistingOwners],\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { MultiSigDeleGator } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { InitializedClient } from '../../types';\n\nexport type EncodeRemoveSignerParameters = {\n  signer: Address;\n};\n\nexport type SimulateRemoveSignerParameters = {\n  client: Client;\n  multiSigDeleGatorAddress: Address;\n} & EncodeRemoveSignerParameters;\n\nexport type ExecuteRemoveSignerParameters = {\n  client: InitializedClient;\n  multiSigDeleGatorAddress: Address;\n} & EncodeRemoveSignerParameters;\n\nexport const simulate = ({\n  client,\n  multiSigDeleGatorAddress,\n  signer,\n}: SimulateRemoveSignerParameters) => {\n  return simulateContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'removeSigner',\n    args: [signer],\n  });\n};\n\nexport const execute = async ({\n  client,\n  multiSigDeleGatorAddress,\n  signer,\n}: ExecuteRemoveSignerParameters) => {\n  const { request } = await simulate({\n    client,\n    multiSigDeleGatorAddress,\n    signer,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({ signer }: EncodeRemoveSignerParameters) => {\n  return encodeFunctionData({\n    abi: MultiSigDeleGator.abi,\n    functionName: 'removeSigner',\n    args: [signer],\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { MultiSigDeleGator } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { InitializedClient } from '../../types';\n\nexport type EncodeReplaceSignerParameters = {\n  oldSigner: Address;\n  newSigner: Address;\n};\n\nexport type SimulateReplaceSignerParameters = {\n  client: Client;\n  multiSigDeleGatorAddress: Address;\n} & EncodeReplaceSignerParameters;\n\nexport type ExecuteReplaceSignerParameters = {\n  client: InitializedClient;\n  multiSigDeleGatorAddress: Address;\n} & EncodeReplaceSignerParameters;\n\nexport const simulate = ({\n  client,\n  multiSigDeleGatorAddress,\n  oldSigner,\n  newSigner,\n}: SimulateReplaceSignerParameters) => {\n  return simulateContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'replaceSigner',\n    args: [oldSigner, newSigner],\n  });\n};\n\nexport const execute = async ({\n  client,\n  multiSigDeleGatorAddress,\n  oldSigner,\n  newSigner,\n}: ExecuteReplaceSignerParameters) => {\n  const { request } = await simulate({\n    client,\n    multiSigDeleGatorAddress,\n    oldSigner,\n    newSigner,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({\n  oldSigner,\n  newSigner,\n}: EncodeReplaceSignerParameters) => {\n  return encodeFunctionData({\n    abi: MultiSigDeleGator.abi,\n    functionName: 'replaceSigner',\n    args: [oldSigner, newSigner],\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { MultiSigDeleGator } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { InitializedClient } from '../../types';\n\nexport type EncodeUpdateThresholdParameters = {\n  threshold: bigint;\n};\n\nexport type SimulateUpdateThresholdParameters = {\n  client: Client;\n  multiSigDeleGatorAddress: Address;\n} & EncodeUpdateThresholdParameters;\n\nexport type ExecuteUpdateThresholdParameters = {\n  client: InitializedClient;\n  multiSigDeleGatorAddress: Address;\n} & EncodeUpdateThresholdParameters;\n\nexport const simulate = ({\n  client,\n  multiSigDeleGatorAddress,\n  threshold,\n}: SimulateUpdateThresholdParameters) => {\n  return simulateContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'updateThreshold',\n    args: [threshold],\n  });\n};\n\nexport const execute = async ({\n  client,\n  multiSigDeleGatorAddress,\n  threshold,\n}: ExecuteUpdateThresholdParameters) => {\n  const { request } = await simulate({\n    client,\n    multiSigDeleGatorAddress,\n    threshold,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({ threshold }: EncodeUpdateThresholdParameters) => {\n  return encodeFunctionData({\n    abi: MultiSigDeleGator.abi,\n    functionName: 'updateThreshold',\n    args: [threshold],\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { MultiSigDeleGator } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { InitializedClient } from '../../types';\n\nexport type EncodeUpdateMultiSigParametersParameters = {\n  owners: Address[];\n  threshold: bigint;\n  removeExistingOwners: boolean;\n};\n\nexport type SimulateUpdateMultiSigParametersParameters = {\n  client: Client;\n  multiSigDeleGatorAddress: Address;\n} & EncodeUpdateMultiSigParametersParameters;\n\nexport type ExecuteUpdateMultiSigParametersParameters = {\n  client: InitializedClient;\n  multiSigDeleGatorAddress: Address;\n} & EncodeUpdateMultiSigParametersParameters;\n\nexport const simulate = ({\n  client,\n  multiSigDeleGatorAddress,\n  owners,\n  threshold,\n  removeExistingOwners,\n}: SimulateUpdateMultiSigParametersParameters) => {\n  return simulateContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'updateMultiSigParameters',\n    args: [owners, threshold, removeExistingOwners],\n  });\n};\n\nexport const execute = async ({\n  client,\n  multiSigDeleGatorAddress,\n  owners,\n  threshold,\n  removeExistingOwners,\n}: ExecuteUpdateMultiSigParametersParameters) => {\n  const { request } = await simulate({\n    client,\n    multiSigDeleGatorAddress,\n    owners,\n    threshold,\n    removeExistingOwners,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({\n  owners,\n  threshold,\n  removeExistingOwners,\n}: EncodeUpdateMultiSigParametersParameters) => {\n  return encodeFunctionData({\n    abi: MultiSigDeleGator.abi,\n    functionName: 'updateMultiSigParameters',\n    args: [owners, threshold, removeExistingOwners],\n  });\n};\n", "import { encode as create2Deploy } from './methods/create2Deploy';\n\nexport { create2Deploy };\n", "import { Address, Hex, Client, encodeFunctionData } from 'viem';\nimport { SimpleFactory } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport { InitializedClient } from '../../types';\n\nexport type SimulateCreate2DeployParameters = {\n  client: Client;\n  factoryAddress: Address;\n  creationCode: Hex;\n  salt: Hex;\n};\n\nexport type ExecuteCreate2DeployParameters = {\n  client: InitializedClient;\n  factoryAddress: Address;\n  creationCode: Hex;\n  salt: Hex;\n};\n\nexport const simulate = ({\n  client,\n  factoryAddress,\n  creationCode,\n  salt,\n}: SimulateCreate2DeployParameters) => {\n  return simulateContract(client, {\n    address: factoryAddress,\n    abi: SimpleFactory.abi,\n    functionName: 'deploy',\n    args: [creationCode, salt],\n  });\n};\n\nexport const encode = (creationCode: Hex, salt: Hex) => {\n  return encodeFunctionData({\n    abi: SimpleFactory.abi,\n    functionName: 'deploy',\n    args: [creationCode, salt],\n  });\n};\n\nexport const execute = async ({\n  client,\n  factoryAddress,\n  creationCode,\n  salt,\n}: ExecuteCreate2DeployParameters) => {\n  const { request } = await simulate({\n    client,\n    factoryAddress,\n    creationCode,\n    salt,\n  });\n  return writeContract(client, request);\n};\n", "import { Abi, Address, Client, encodeDeployData, Hex } from 'viem';\nimport { ERC1967Proxy } from '@metamask/delegation-utils';\n\nimport { getProxyImplementation } from './DeleGatorCore/read';\nimport { getCode } from 'viem/actions';\n\n// Where a function signature is duplicated across contracts, we need to narrow\n// the ABI type passed as the `simulateContract` generic argument. Without this,\n// the `simulate()` return type would not match, despite being functionally\n// identical.\nexport type NarrowAbiToFunction<\n  TAbi extends Abi,\n  FunctionName extends string,\n> = [\n  Extract<\n    TAbi[number],\n    {\n      type: 'function';\n      name: FunctionName;\n    }\n  >[],\n];\n\nexport async function isContractDeployed({\n  client,\n  contractAddress,\n}: {\n  client: Client;\n  contractAddress: Address;\n}) {\n  const code = await getCode(client, {\n    address: contractAddress,\n  });\n  return !!code && code !== '0x';\n}\n\nexport async function isImplementationExpected({\n  client,\n  contractAddress,\n  expectedImplementationAddress,\n}: {\n  client: Client;\n  contractAddress: Address;\n  expectedImplementationAddress: Address;\n}) {\n  if (!(await isContractDeployed({ client, contractAddress }))) return false;\n\n  const implementationAddress = await getProxyImplementation({\n    client,\n    contractAddress,\n  });\n\n  return implementationAddress === expectedImplementationAddress;\n}\n\n/**\n * Encodes the \"creation code\" for an ERC1967Proxy contract that will be deployed via CREATE2 with the given implementation and initialization code.\n *\n * @param implementationAddress The address of the implementation contract for the proxy to use.\n * @param initcode The calldata for the initialization function of the implementation contract.\n * @returns The encoded creation code for the proxy.\n */\nexport const encodeProxyCreationCode = ({\n  implementationAddress,\n  initcode,\n}: {\n  implementationAddress: Address;\n  initcode: Hex;\n}) =>\n  encodeDeployData({\n    abi: ERC1967Proxy.abi,\n    args: [implementationAddress, initcode],\n    bytecode: ERC1967Proxy.bytecode,\n  });\n", "import { read as getDelegationManager } from './methods/getDelegationManager';\nimport { read as getDeposit } from './methods/getDeposit';\nimport { read as getEntryPoint } from './methods/getEntryPoint';\nimport { read as getNonce } from './methods/getNonce';\nimport { read as getProxyImplementation } from './methods/getProxyImplementation';\nimport { read as getProxyVersion } from './methods/getProxyVersion';\nimport { read as isValidSignature } from './methods/isValidSignature';\n\nexport {\n  getDelegationManager,\n  getDeposit,\n  getEntryPoint,\n  getNonce,\n  getProxyImplementation,\n  getProxyVersion,\n  isValidSignature,\n};\n", "import { DeleGatorCore } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetDelegationManagerParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetDelegationManagerParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'delegationManager',\n  });\n", "import { DeleGatorCore } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetDepositParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetDepositParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'getDeposit',\n  });\n", "import { DeleGatorCore } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetEntryPointParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetEntryPointParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'entryPoint',\n  });\n", "import { DeleGatorCore } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetNonceParameters = {\n  client: Client;\n  contractAddress: Address;\n  key?: bigint;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n  key,\n}: ReadGetNonceParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'getNonce',\n    args: key ? [key] : undefined,\n  });\n", "import { DeleGatorCore } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetProxyImplementationParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetProxyImplementationParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'getImplementation',\n  });\n", "import { DeleGatorCore } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetProxyVersionParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetProxyVersionParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'getInitializedVersion',\n  });\n", "import { DeleGatorCore } from '@metamask/delegation-abis';\nimport { Address, Hex, Client, encodeFunctionData } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type IsValidSignatureParameters = {\n  client: Client;\n  contractAddress: Address;\n  hash: Hex;\n  signature: Hex;\n};\n\nexport type EncodeIsValidSignatureParameters = {\n  hash: Hex;\n  signature: Hex;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n  hash,\n  signature,\n}: IsValidSignatureParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'isValidSignature',\n    args: [hash, signature],\n  });\n\nexport const encode = ({\n  hash,\n  signature,\n}: EncodeIsValidSignatureParameters) => {\n  return encodeFunctionData({\n    abi: DeleGatorCore.abi,\n    functionName: 'isValidSignature',\n    args: [hash, signature],\n  });\n};\n", "import { Address, encodeFunctionData, type Hex } from 'viem';\nimport { Call } from './types';\nimport {\n  BATCH_DEFAULT_MODE,\n  createExecution,\n  SINGLE_DEFAULT_MODE,\n  encodeExecutionCalldatas,\n  DelegationManager,\n} from '@metamask/delegation-utils';\nimport {\n  execute,\n  executeWithMode,\n} from './DelegationFramework/DeleGatorCore/encode';\nimport { DelegatedCall } from './experimental/erc7710RedeemDelegationAction';\n\n/**\n * Encodes calls for execution by a DeleGator smart contract.\n *\n * @param caller - The address of the DeleGator contract.\n * @param calls - An array of Call objects, each containing 'to', optional 'data', and optional 'value'.\n * @returns A promise that resolves to the encoded function data as a hexadecimal string.\n *\n * @remarks\n * - If there's a single call directly to the delegator, it returns the call data directly.\n * - For multiple calls or calls to other addresses, it creates executions and encodes them for the DeleGator's execute function.\n * - The execution mode is set to SINGLE_DEFAULT_MODE for a single call, or BATCH_DEFAULT_MODE for multiple calls.\n *\n * todo: This doesn't fully expose the flexibility of the DeleGator's execute function, but it's a start.\n * maybe we add a mechanism where individual calls passed to this function can be encoded batches.\n */\nexport const encodeCallsForCaller = async (\n  caller: Address,\n  calls: readonly Call[],\n): Promise<Hex> => {\n  if (calls.length === 1) {\n    const call = calls[0]!;\n\n    if (call.to === caller && !isDelegatedCall(call)) {\n      // if there's a single call, and it's to the delegator, we can just return the calldata directly.\n      return call.data || '0x';\n    }\n  }\n  return encodeCalls(calls);\n};\n\n/**\n * If there's a single call, encode the shorthand `execute` function. Otherwise, encode the `executeWithMode` function. Execution type will always be \"default\".\n *\n * TODO: Make this more flexible to allow for more granular control over the execution type. If execution type is \"try\" we cannot use the gas efficient `execute` function.\n *\n * @param calls the calls to execute\n * @returns the encoded calldata for the DeleGator to execute the calls\n */\nexport const encodeCalls = (calls: readonly Call[]) => {\n  if (calls.length === 1 && !isDelegatedCall(calls[0]!)) {\n    const { to, value, data } = calls[0]!;\n    const execution = createExecution(to, value, data);\n    return execute({ execution });\n  }\n\n  const executions = calls.map((call) => {\n    if (isDelegatedCall(call)) {\n      const { permissionsContext, delegationManager } = call;\n      const redeemCalldata = encodeFunctionData({\n        abi: DelegationManager.abi,\n        functionName: 'redeemDelegations',\n        args: [\n          [permissionsContext!],\n          [SINGLE_DEFAULT_MODE],\n          encodeExecutionCalldatas([\n            [createExecution(call.to, call.value, call.data)],\n          ]),\n        ],\n      });\n      return createExecution(delegationManager, 0n, redeemCalldata);\n    } else {\n      const { to, value, data } = call;\n      return createExecution(to, value, data);\n    }\n  });\n\n  const mode = calls.length === 1 ? SINGLE_DEFAULT_MODE : BATCH_DEFAULT_MODE;\n  return executeWithMode({ mode, executions });\n};\n\nconst isDelegatedCall = (call: Call): call is DelegatedCall => {\n  return 'permissionsContext' in call && 'delegationManager' in call;\n};\n", "import { encode as disableDelegation } from './methods/disableDelegation';\nimport { encode as enableDelegation } from './methods/enableDelegation';\nimport { encode as execute } from './methods/execute';\nimport { encode as executeWithMode } from './methods/executeWithMode';\nimport { encode as upgradeToAndCall } from './methods/upgradeToAndCall';\nimport { encode as isValidSignature } from './methods/isValidSignature';\n\nexport {\n  disableDelegation,\n  enableDelegation,\n  execute,\n  executeWithMode,\n  upgradeToAndCall,\n  isValidSignature,\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { DeleGatorCore } from '@metamask/delegation-abis';\nimport { Delegation, toDelegationStruct } from '@metamask/delegation-utils';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { NarrowAbiToFunction } from '../../utils';\nimport { InitializedClient } from '../../types';\n\nexport type SimulateDisableDelegationParameters = {\n  client: Client;\n  delegationManagerAddress: Address;\n  delegation: Delegation;\n};\n\nexport type EncodeDisableDelegationParameters = {\n  delegation: Delegation;\n};\n\nexport type ExecuteDisableDelegationParameters = {\n  client: InitializedClient;\n  delegationManagerAddress: Address;\n  delegation: Delegation;\n};\n\nexport const simulate = ({\n  client,\n  delegationManagerAddress,\n  delegation,\n}: SimulateDisableDelegationParameters) => {\n  const abi = DeleGatorCore.abi as any as NarrowAbiToFunction<\n    typeof DeleGatorCore.abi,\n    'disableDelegation'\n  >;\n\n  const delegationStruct = toDelegationStruct(delegation);\n\n  return simulateContract(client, {\n    address: delegationManagerAddress,\n    abi,\n    functionName: 'disableDelegation',\n    args: [delegationStruct],\n  });\n};\n\nexport const execute = async ({\n  client,\n  delegationManagerAddress,\n  delegation,\n}: ExecuteDisableDelegationParameters) => {\n  const { request } = await simulate({\n    client,\n    delegationManagerAddress,\n    delegation,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({ delegation }: EncodeDisableDelegationParameters) => {\n  const delegationStruct = toDelegationStruct(delegation);\n\n  return encodeFunctionData({\n    abi: DeleGatorCore.abi,\n    functionName: 'disableDelegation',\n    args: [delegationStruct],\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { DeleGatorCore } from '@metamask/delegation-abis';\nimport { Delegation, toDelegationStruct } from '@metamask/delegation-utils';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { NarrowAbiToFunction } from '../../utils';\nimport { InitializedClient } from '../../types';\n\nexport type SimulateEnableDelegationParameters = {\n  client: Client;\n  delegationManagerAddress: Address;\n  delegation: Delegation;\n};\n\nexport type EncodeEnableDelegationParameters = {\n  delegation: Delegation;\n};\n\nexport type ExecuteEnableDelegationParameters = {\n  client: InitializedClient;\n  delegationManagerAddress: Address;\n  delegation: Delegation;\n};\n\nexport const simulate = ({\n  client,\n  delegationManagerAddress,\n  delegation,\n}: SimulateEnableDelegationParameters) => {\n  const abi = DeleGatorCore.abi as any as NarrowAbiToFunction<\n    typeof DeleGatorCore.abi,\n    'enableDelegation'\n  >;\n\n  const delegationStruct = toDelegationStruct(delegation);\n\n  return simulateContract(client, {\n    address: delegationManagerAddress,\n    abi,\n    functionName: 'enableDelegation',\n    args: [delegationStruct],\n  });\n};\n\nexport const execute = async ({\n  client,\n  delegationManagerAddress,\n  delegation,\n}: ExecuteEnableDelegationParameters) => {\n  const { request } = await simulate({\n    client,\n    delegationManagerAddress,\n    delegation,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({ delegation }: EncodeEnableDelegationParameters) => {\n  const delegationStruct = toDelegationStruct(delegation);\n\n  return encodeFunctionData({\n    abi: DeleGatorCore.abi,\n    functionName: 'enableDelegation',\n    args: [delegationStruct],\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { DeleGatorCore } from '@metamask/delegation-abis';\nimport { ExecutionStruct } from '@metamask/delegation-utils';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { InitializedClient } from '../../types';\n\nexport type SimulateExecuteParameters = {\n  client: Client;\n  contractAddress: Address;\n  execution: ExecutionStruct;\n};\n\nexport type EncodeExecuteParameters = {\n  execution: ExecutionStruct;\n};\n\nexport type ExecuteExecuteParameters = {\n  client: InitializedClient;\n  contractAddress: Address;\n  execution: ExecutionStruct;\n};\n\nexport const simulate = ({\n  client,\n  contractAddress,\n  execution,\n}: SimulateExecuteParameters) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'execute',\n    args: [execution],\n  });\n};\n\nexport const execute = async ({\n  client,\n  contractAddress,\n  execution,\n}: ExecuteExecuteParameters) => {\n  const { request } = await simulate({\n    client,\n    contractAddress,\n    execution,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({ execution }: EncodeExecuteParameters) => {\n  return encodeFunctionData({\n    abi: DeleGatorCore.abi,\n    functionName: 'execute',\n    args: [execution],\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { DeleGatorCore } from '@metamask/delegation-abis';\nimport {\n  encodeExecutionCalldata,\n  ExecutionStruct,\n  ExecutionMode,\n} from '@metamask/delegation-utils';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { InitializedClient } from '../../types';\n\nexport type SimulateExecuteWithModeParameters = {\n  client: Client;\n  contractAddress: Address;\n} & EncodeExecuteWithModeParameters;\nexport type EncodeExecuteWithModeParameters = {\n  mode: ExecutionMode;\n  executions: ExecutionStruct[];\n};\n\nexport type ExecuteExecuteWithModeParameters = {\n  client: InitializedClient;\n  contractAddress: Address;\n} & EncodeExecuteWithModeParameters;\n\nexport const simulate = ({\n  client,\n  contractAddress,\n  mode,\n  executions,\n}: SimulateExecuteWithModeParameters) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'execute',\n    args: [mode, encodeExecutionCalldata(executions)],\n  });\n};\n\nexport const execute = async ({\n  client,\n  contractAddress,\n  mode,\n  executions,\n}: ExecuteExecuteWithModeParameters) => {\n  const { request } = await simulate({\n    client,\n    contractAddress,\n    mode,\n    executions,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({\n  mode,\n  executions,\n}: EncodeExecuteWithModeParameters) => {\n  return encodeFunctionData({\n    abi: DeleGatorCore.abi,\n    functionName: 'execute',\n    args: [mode, encodeExecutionCalldata(executions)],\n  });\n};\n", "import { Address, Hex, Client, encodeFunctionData } from 'viem';\nimport { DeleGatorCore } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { InitializedClient } from '../../types';\n\nexport type SimulateUpgradeToAndCallParameters = {\n  client: Client;\n  contractAddress: Address;\n} & EncodeUpgradeToAndCallParameters;\n\nexport type EncodeUpgradeToAndCallParameters = {\n  implementation: Address;\n  data: Hex;\n};\n\nexport type ExecuteUpgradeToAndCallParameters = {\n  client: InitializedClient;\n  contractAddress: Address;\n} & EncodeUpgradeToAndCallParameters;\n\nexport const simulate = ({\n  client,\n  contractAddress,\n  implementation,\n  data,\n}: SimulateUpgradeToAndCallParameters) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: DeleGatorCore.abi,\n    functionName: 'upgradeToAndCall',\n    args: [implementation, data],\n  });\n};\n\nexport const execute = async ({\n  client,\n  contractAddress,\n  implementation,\n  data,\n}: ExecuteUpgradeToAndCallParameters) => {\n  const { request } = await simulate({\n    client,\n    contractAddress,\n    implementation,\n    data,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({\n  implementation,\n  data,\n}: EncodeUpgradeToAndCallParameters) => {\n  return encodeFunctionData({\n    abi: DeleGatorCore.abi,\n    functionName: 'upgradeToAndCall',\n    args: [implementation, data],\n  });\n};\n", "import { read as entryPointGetNonce } from './methods/getNonce';\n\nexport { entryPointGetNonce };\n", "import { EntryPoint } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetNonceParameters = {\n  client: Client;\n  entryPoint: Address;\n  contractAddress: Address;\n  key: bigint;\n};\n\nexport const read = async ({\n  client,\n  entryPoint,\n  contractAddress,\n  key,\n}: ReadGetNonceParameters) =>\n  await readContract(client, {\n    address: entryPoint,\n    abi: EntryPoint.abi,\n    functionName: 'getNonce',\n    args: [contractAddress, key],\n  });\n", "import { encode as disableDelegation } from './methods/disableDelegation';\nimport { encode as enableDelegation } from './methods/enableDelegation';\nimport { encode as redeemDelegations } from './methods/redeemDelegations';\n\nexport { disableDelegation, enableDelegation, redeemDelegations };\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { DelegationManager } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { Delegation } from '@metamask/delegation-utils';\nimport { InitializedClient } from '../../types';\nimport { NarrowAbiToFunction } from '../../utils';\nimport { toDelegationStruct } from '@metamask/delegation-utils';\n\nexport type EncodeDisableDelegationParameters = {\n  delegation: Delegation;\n};\n\nexport type SimulateDisableDelegationParameters = {\n  client: Client;\n  delegationManagerAddress: Address;\n} & EncodeDisableDelegationParameters;\n\nexport type ExecuteDisableDelegationParameters = {\n  client: InitializedClient;\n  delegationManagerAddress: Address;\n} & EncodeDisableDelegationParameters;\n\nexport const simulate = ({\n  client,\n  delegationManagerAddress,\n  delegation,\n}: SimulateDisableDelegationParameters) => {\n  const abi = DelegationManager.abi as any as NarrowAbiToFunction<\n    typeof DelegationManager.abi,\n    'disableDelegation'\n  >;\n\n  const delegationStruct = toDelegationStruct(delegation);\n\n  return simulateContract(client, {\n    address: delegationManagerAddress,\n    abi,\n    functionName: 'disableDelegation',\n    args: [delegationStruct],\n  });\n};\n\nexport const execute = async ({\n  client,\n  delegationManagerAddress,\n  delegation,\n}: ExecuteDisableDelegationParameters) => {\n  const { request } = await simulate({\n    client,\n    delegationManagerAddress,\n    delegation,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({ delegation }: EncodeDisableDelegationParameters) => {\n  const delegationStruct = toDelegationStruct(delegation);\n\n  return encodeFunctionData({\n    abi: DelegationManager.abi,\n    functionName: 'disableDelegation',\n    args: [delegationStruct],\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { DelegationManager } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport { Delegation } from '@metamask/delegation-utils';\nimport { InitializedClient } from '../../types';\nimport { NarrowAbiToFunction } from '../../utils';\nimport { toDelegationStruct } from '@metamask/delegation-utils';\n\nexport type EncodeEnableDelegationParameters = {\n  delegation: Delegation;\n};\n\nexport type SimulateEnableDelegationParameters = {\n  client: Client;\n  delegationManagerAddress: Address;\n} & EncodeEnableDelegationParameters;\n\nexport type ExecuteEnableDelegationParameters = {\n  client: InitializedClient;\n  delegationManagerAddress: Address;\n} & EncodeEnableDelegationParameters;\n\nexport const simulate = ({\n  client,\n  delegationManagerAddress,\n  delegation,\n}: SimulateEnableDelegationParameters) => {\n  const abi = DelegationManager.abi as any as NarrowAbiToFunction<\n    typeof DelegationManager.abi,\n    'enableDelegation'\n  >;\n\n  const delegationStruct = toDelegationStruct(delegation);\n\n  return simulateContract(client, {\n    address: delegationManagerAddress,\n    abi,\n    functionName: 'enableDelegation',\n    args: [delegationStruct],\n  });\n};\n\nexport const execute = async ({\n  client,\n  delegationManagerAddress,\n  delegation,\n}: ExecuteEnableDelegationParameters) => {\n  const { request } = await simulate({\n    client,\n    delegationManagerAddress,\n    delegation,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({ delegation }: EncodeEnableDelegationParameters) => {\n  const delegationStruct = toDelegationStruct(delegation);\n\n  return encodeFunctionData({\n    abi: DelegationManager.abi,\n    functionName: 'enableDelegation',\n    args: [delegationStruct],\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { DelegationManager } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\nimport {\n  Delegation,\n  encodePermissionContexts,\n  ExecutionMode,\n  ExecutionStruct,\n  encodeExecutionCalldatas,\n} from '@metamask/delegation-utils';\nimport { InitializedClient } from '../../types';\nimport { NarrowAbiToFunction } from '../../utils';\nimport { toDelegationStruct } from '@metamask/delegation-utils';\n\nexport type EncodeRedeemDelegationsParameters = {\n  delegations: Delegation[][];\n  modes: ExecutionMode[];\n  executions: ExecutionStruct[][];\n};\n\nexport type SimulateRedeemDelegationsParameters = {\n  client: Client;\n  delegationManagerAddress: Address;\n} & EncodeRedeemDelegationsParameters;\n\nexport type ExecuteRedeemDelegationsParameters = {\n  client: InitializedClient;\n  delegationManagerAddress: Address;\n} & EncodeRedeemDelegationsParameters;\n\nexport const simulate = ({\n  client,\n  delegationManagerAddress,\n  delegations,\n  modes,\n  executions,\n}: SimulateRedeemDelegationsParameters) => {\n  const abi = DelegationManager.abi as any as NarrowAbiToFunction<\n    typeof DelegationManager.abi,\n    'redeemDelegations'\n  >;\n\n  return simulateContract(client, {\n    address: delegationManagerAddress,\n    abi,\n    functionName: 'redeemDelegations',\n    args: [\n      encodePermissionContexts(delegations),\n      modes,\n      encodeExecutionCalldatas(executions),\n    ],\n  });\n};\n\nexport const execute = async ({\n  client,\n  delegationManagerAddress,\n  delegations,\n  modes,\n  executions,\n}: ExecuteRedeemDelegationsParameters) => {\n  const { request } = await simulate({\n    client,\n    delegationManagerAddress,\n    delegations,\n    modes,\n    executions,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({\n  delegations,\n  modes,\n  executions,\n}: EncodeRedeemDelegationsParameters) => {\n  return encodeFunctionData({\n    abi: DelegationManager.abi,\n    functionName: 'redeemDelegations',\n    args: [\n      encodePermissionContexts(delegations),\n      modes,\n      encodeExecutionCalldatas(executions),\n    ],\n  });\n};\n", "import { execute as disableDelegation } from './methods/disableDelegation';\nimport { execute as enableDelegation } from './methods/enableDelegation';\nimport { execute as redeemDelegations } from './methods/redeemDelegations';\n\nexport { disableDelegation, enableDelegation, redeemDelegations };\n", "import { read as getAnyDelegate } from './methods/getAnyDelegate';\nimport { read as getRootAuthority } from './methods/getRootAuthority';\n\nexport { getAnyDelegate, getRootAuthority };\n", "import { DelegationManager } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetAnyDelegateParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetAnyDelegateParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DelegationManager.abi,\n    functionName: 'ANY_DELEGATE',\n  });\n", "import { DelegationManager } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetRootAuthorityParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetRootAuthorityParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DelegationManager.abi,\n    functionName: 'ROOT_AUTHORITY',\n  });\n", "import { simulate as disableDelegation } from './methods/disableDelegation';\nimport { simulate as enableDelegation } from './methods/enableDelegation';\nimport { simulate as redeemDelegations } from './methods/redeemDelegations';\n\nexport { disableDelegation, enableDelegation, redeemDelegations };\n", "export const NAME = 'DelegationManager';\nexport const VERSION = '1.3.0';\nexport const DOMAIN_VERSION = '1';\nexport const ROOT_AUTHORITY =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\nexport const ANY_DELEGATE = '0x0000000000000000000000000000000000000a11';\n", "import { execute as disableDelegation } from './methods/disableDelegation';\nimport { execute as enableDelegation } from './methods/enableDelegation';\nimport { execute } from './methods/execute';\nimport { execute as executeWithMode } from './methods/executeWithMode';\nimport { execute as upgradeToAndCall } from './methods/upgradeToAndCall';\n\nexport {\n  disableDelegation,\n  enableDelegation,\n  execute,\n  executeWithMode,\n  upgradeToAndCall,\n};\n", "import { simulate as disableDelegation } from './methods/disableDelegation';\nimport { simulate as enableDelegation } from './methods/enableDelegation';\nimport { simulate as execute } from './methods/execute';\nimport { simulate as executeWithMode } from './methods/executeWithMode';\nimport { simulate as upgradeToAndCall } from './methods/upgradeToAndCall';\n\nexport {\n  disableDelegation,\n  enableDelegation,\n  execute,\n  executeWithMode,\n  upgradeToAndCall,\n};\n", "import { read as getContractName } from './methods/getContractName';\nimport { read as getContractVersion } from './methods/getContractVersion';\nimport { read as getDomainVersion } from './methods/getDomainVersion';\n\nexport { getContractName, getContractVersion, getDomainVersion };\n", "import { Client, Address } from 'viem';\nimport { readContract } from 'viem/actions';\n\n// NOTE: ABIs have been extracted and minimized for reuse across contracts. These methods are included in our contracts but are not a part of the EIP712 standard itself.\n\nexport type ReadGetContractNameParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetContractNameParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: [\n      {\n        type: 'function',\n        name: 'NAME',\n        inputs: [],\n        outputs: [\n          {\n            name: '',\n            type: 'string',\n            internalType: 'string',\n          },\n        ],\n        stateMutability: 'view',\n      },\n    ],\n    functionName: 'NAME',\n  });\n", "import { Client, Address } from 'viem';\nimport { readContract } from 'viem/actions';\n\n// NOTE: ABIs have been extracted and minimized for reuse across contracts. These methods are included in our contracts but are not a part of the EIP712 standard itself.\n\nexport type ReadGetContractVersionParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetContractVersionParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: [\n      {\n        type: 'function',\n        name: 'VERSION',\n        inputs: [],\n        outputs: [\n          {\n            name: '',\n            type: 'string',\n            internalType: 'string',\n          },\n        ],\n        stateMutability: 'view',\n      },\n    ],\n    functionName: 'VERSION',\n  });\n", "import { Client, Address } from 'viem';\nimport { readContract } from 'viem/actions';\n\n// NOTE: ABIs have been extracted and minimized for reuse across contracts. These methods are included in our contracts but are not a part of the EIP712 standard itself.\n\nexport type ReadGetDomainVersionParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetDomainVersionParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: [\n      {\n        type: 'function',\n        name: 'DOMAIN_VERSION',\n        inputs: [],\n        outputs: [\n          {\n            name: '',\n            type: 'string',\n            internalType: 'string',\n          },\n        ],\n        stateMutability: 'view',\n      },\n    ],\n    functionName: 'DOMAIN_VERSION',\n  });\n", "import { read as getKey } from './methods/getKey';\nimport { read as getKeyIdHashes } from './methods/getKeyIdHashes';\nimport { read as getKeyIdHashesCount } from './methods/getKeyIdHashesCount';\n\nexport { getKey, getKeyIdHashes, getKeyIdHashesCount };\n", "import { HybridDeleGator } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetKeyParameters = {\n  client: Client;\n  hybridDeleGatorAddress: Address;\n  keyId: string;\n};\n\nexport const read = async ({\n  client,\n  hybridDeleGatorAddress,\n  keyId,\n}: ReadGetKeyParameters) =>\n  await readContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'getKey',\n    args: [keyId],\n  });\n", "import { HybridDeleGator } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetKeyIdHashesParameters = {\n  client: Client;\n  hybridDeleGatorAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  hybridDeleGatorAddress,\n}: ReadGetKeyIdHashesParameters) =>\n  await readContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'getKeyIdHashes',\n  });\n", "import { HybridDeleGator } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetKeyIdHashesCountParameters = {\n  client: Client;\n  hybridDeleGatorAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  hybridDeleGatorAddress,\n}: ReadGetKeyIdHashesCountParameters) =>\n  await readContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'getKeyIdHashesCount',\n  });\n", "import { simulate as addKey } from './methods/addKey';\nimport { simulate as initializeHybridDeleGator } from './methods/initialize';\nimport { simulate as reinitializeHybridDeleGator } from './methods/reinitialize';\nimport { simulate as removeKey } from './methods/removeKey';\nimport { simulate as updateSigners } from './methods/updateSigners';\n\nexport {\n  addKey,\n  initializeHybridDeleGator,\n  reinitializeHybridDeleGator,\n  removeKey,\n  updateSigners,\n};\n", "export const NAME = 'HybridDeleGator';\nexport const VERSION = '1.3.0';\nexport const DOMAIN_VERSION = '1';\nexport const ROOT_AUTHORITY =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\nexport const ANY_DELEGATE = '0x0000000000000000000000000000000000000a11';\n", "import { read as getSigners } from './methods/getSigners';\nimport { read as getSignersCount } from './methods/getSignersCount';\nimport { read as getThreshold } from './methods/getThreshold';\nimport { read as isSigner } from './methods/isSigner';\nimport { read as getMaxNumberOfSigners } from './methods/getMaxNumberOfSigners';\n\nexport {\n  getSigners,\n  getSignersCount,\n  getThreshold,\n  isSigner,\n  getMaxNumberOfSigners,\n};\n", "import { MultiSigDeleGator } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetSignersParameters = {\n  client: Client;\n  multiSigDeleGatorAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  multiSigDeleGatorAddress,\n}: ReadGetSignersParameters) =>\n  await readContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'getSigners',\n  });\n", "import { MultiSigDeleGator } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetSignersCountParameters = {\n  client: Client;\n  multiSigDeleGatorAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  multiSigDeleGatorAddress,\n}: ReadGetSignersCountParameters) =>\n  await readContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'getSignersCount',\n  });\n", "import { MultiSigDeleGator } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetThresholdParameters = {\n  client: Client;\n  multiSigDeleGatorAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  multiSigDeleGatorAddress,\n}: ReadGetThresholdParameters) =>\n  await readContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'getThreshold',\n  });\n", "import { MultiSigDeleGator } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadIsSignerParameters = {\n  client: Client;\n  multiSigDeleGatorAddress: Address;\n  signer: Address;\n};\n\nexport const read = async ({\n  client,\n  multiSigDeleGatorAddress,\n  signer,\n}: ReadIsSignerParameters) =>\n  await readContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'isSigner',\n    args: [signer],\n  });\n", "import { MultiSigDeleGator } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetMaxNumberOfSignersParameters = {\n  client: Client;\n  multiSigDeleGatorAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  multiSigDeleGatorAddress,\n}: ReadGetMaxNumberOfSignersParameters) =>\n  await readContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'MAX_NUMBER_OF_SIGNERS',\n  });\n", "import { simulate as addSigner } from './methods/addSigner';\nimport { simulate as initializeMultiSigDeleGator } from './methods/initialize';\nimport { simulate as reinitializeMultiSigDeleGator } from './methods/reinitialize';\nimport { simulate as removeSigner } from './methods/removeSigner';\nimport { simulate as replaceSigner } from './methods/replaceSigner';\nimport { simulate as updateMultiSigParameters } from './methods/updateMultiSigParameters';\nimport { simulate as updateThreshold } from './methods/updateThreshold';\n\nexport {\n  addSigner,\n  initializeMultiSigDeleGator,\n  reinitializeMultiSigDeleGator,\n  removeSigner,\n  replaceSigner,\n  updateMultiSigParameters,\n  updateThreshold,\n};\n", "export const MAX_NUMBER_OF_SIGNERS = 30;\n", "import { read as getPendingOwner } from './methods/getPendingOwner';\nimport { read as getOwner } from './methods/getOwner';\n\nexport { getPendingOwner, getOwner };\n", "import { Ownable2Step } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetPendingOwnerParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetPendingOwnerParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: Ownable2Step.abi,\n    functionName: 'pendingOwner',\n  });\n", "import { Ownable2Step } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetOwnerParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetOwnerParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: Ownable2Step.abi,\n    functionName: 'owner',\n  });\n", "import { execute as transferOwnership } from './methods/transferOwnership';\nimport { execute as renounceOwnership } from './methods/renounceOwnership';\nimport { execute as acceptOwnership } from './methods/acceptOwnership';\n\nexport { transferOwnership, renounceOwnership, acceptOwnership };\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { Ownable2Step } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport { InitializedClient } from '../../types';\n\nexport type SimulateTransferOwnershipParameters = {\n  client: Client;\n  contractAddress: Address;\n  account: Address;\n};\n\nexport type ExecuteTransferOwnershipParameters = {\n  client: InitializedClient;\n  contractAddress: Address;\n  account: Address;\n};\n\nexport const simulate = ({\n  client,\n  contractAddress,\n  account,\n}: SimulateTransferOwnershipParameters) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: Ownable2Step.abi,\n    functionName: 'transferOwnership',\n    args: [account],\n  });\n};\n\nexport const execute = async ({\n  client,\n  contractAddress,\n  account,\n}: ExecuteTransferOwnershipParameters) => {\n  const { request } = await simulate({\n    client,\n    contractAddress,\n    account,\n  });\n  return writeContract(client, request);\n};\n\nexport const encode = (account: Address) => {\n  return encodeFunctionData({\n    abi: Ownable2Step.abi,\n    functionName: 'transferOwnership',\n    args: [account],\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { Ownable2Step } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport { InitializedClient } from '../../types';\n\nexport type SimulateRenounceOwnershipParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport type ExecuteRenounceOwnershipParameters = {\n  client: InitializedClient;\n  contractAddress: Address;\n};\n\nexport const simulate = ({\n  client,\n  contractAddress,\n}: SimulateRenounceOwnershipParameters) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: Ownable2Step.abi,\n    functionName: 'renounceOwnership',\n  });\n};\n\nexport const execute = async ({\n  client,\n  contractAddress,\n}: ExecuteRenounceOwnershipParameters) => {\n  const { request } = await simulate({\n    client,\n    contractAddress,\n  });\n  return writeContract(client, request);\n};\n\nexport const encode = () => {\n  return encodeFunctionData({\n    abi: Ownable2Step.abi,\n    functionName: 'renounceOwnership',\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { Ownable2Step } from '@metamask/delegation-abis';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport { InitializedClient } from '../../types';\n\nexport type SimulateAcceptOwnershipParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport type ExecuteAcceptOwnershipParameters = {\n  client: InitializedClient;\n  contractAddress: Address;\n};\n\nexport const simulate = ({\n  client,\n  contractAddress,\n}: SimulateAcceptOwnershipParameters) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: Ownable2Step.abi,\n    functionName: 'acceptOwnership',\n  });\n};\n\nexport const execute = async ({\n  client,\n  contractAddress,\n}: ExecuteAcceptOwnershipParameters) => {\n  const { request } = await simulate({\n    client,\n    contractAddress,\n  });\n  return writeContract(client, request);\n};\n\nexport const encode = () => {\n  return encodeFunctionData({\n    abi: Ownable2Step.abi,\n    functionName: 'acceptOwnership',\n  });\n};\n", "import { encode as transferOwnership } from './methods/transferOwnership';\nimport { encode as renounceOwnership } from './methods/renounceOwnership';\nimport { encode as acceptOwnership } from './methods/acceptOwnership';\n\nexport { transferOwnership, renounceOwnership, acceptOwnership };\n", "import { simulate as transferOwnership } from './methods/transferOwnership';\nimport { simulate as renounceOwnership } from './methods/renounceOwnership';\nimport { simulate as acceptOwnership } from './methods/acceptOwnership';\n\nexport { transferOwnership, renounceOwnership, acceptOwnership };\n", "import { read as isPaused } from './methods/isPaused';\n\nexport { isPaused };\n", "import { Pausable } from '@metamask/delegation-abis';\nimport { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadIsPausedParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadIsPausedParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: Pausable.abi,\n    functionName: 'paused',\n  });\n", "import { execute as pause } from './methods/pause';\nimport { execute as unpause } from './methods/unpause';\n\nexport { pause, unpause };\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport { InitializedClient } from '../../types';\n\nconst PauseAbi = [\n  {\n    type: 'function',\n    name: 'pause',\n    inputs: [],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n];\n\nexport type SimulatePauseParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport type ExecutePauseParameters = {\n  client: InitializedClient;\n  contractAddress: Address;\n};\n\nexport const simulate = ({\n  client,\n  contractAddress,\n}: SimulatePauseParameters) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: PauseAbi,\n    functionName: 'pause',\n  });\n};\n\nexport const execute = async ({\n  client,\n  contractAddress,\n}: ExecutePauseParameters) => {\n  const { request } = await simulate({\n    client,\n    contractAddress,\n  });\n  return writeContract(client, request);\n};\n\nexport const encode = () => {\n  return encodeFunctionData({\n    abi: PauseAbi,\n    functionName: 'pause',\n  });\n};\n", "import { Address, Client, encodeFunctionData } from 'viem';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport { InitializedClient } from '../../types';\n\nconst UnpauseAbi = [\n  {\n    type: 'function',\n    name: 'unpause',\n    inputs: [],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n];\n\nexport type SimulateUnpauseParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport type ExecuteUnpauseParameters = {\n  client: InitializedClient;\n  contractAddress: Address;\n};\n\nexport const simulate = ({\n  client,\n  contractAddress,\n}: SimulateUnpauseParameters) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: UnpauseAbi,\n    functionName: 'unpause',\n  });\n};\n\nexport const execute = async ({\n  client,\n  contractAddress,\n}: ExecuteUnpauseParameters) => {\n  const { request } = await simulate({\n    client,\n    contractAddress,\n  });\n  return writeContract(client, request);\n};\n\nexport const encode = () => {\n  return encodeFunctionData({\n    abi: UnpauseAbi,\n    functionName: 'unpause',\n  });\n};\n", "import { encode as pause } from './methods/pause';\nimport { encode as unpause } from './methods/unpause';\n\nexport { pause, unpause };\n", "import { simulate as pause } from './methods/pause';\nimport { simulate as unpause } from './methods/unpause';\n\nexport { pause, unpause };\n", "import { read as getCreate2Address } from './methods/getCreate2Address';\n\nexport { getCreate2Address };\n", "import { Address, Client, Hex } from 'viem';\nimport { SimpleFactory } from '@metamask/delegation-abis';\nimport { readContract } from 'viem/actions';\n\nexport const read = (\n  client: Client,\n  factoryAddress: Address,\n  creationCode: Hex,\n  salt: Hex,\n) => {\n  return readContract(client, {\n    address: factoryAddress,\n    abi: SimpleFactory.abi,\n    functionName: 'computeAddress',\n    args: [creationCode, salt],\n  });\n};\n", "import { simulate as create2Deploy } from './methods/create2Deploy';\n\nexport { create2Deploy };\n", "import { execute as create2Deploy } from './methods/create2Deploy';\n\nexport { create2Deploy };\n", "import * as DelegationManager from './DelegationManager';\nimport * as DeleGatorCore from './DeleGatorCore';\nimport * as EIP712 from './EIP712';\nimport * as EntryPoint from './EntryPoint';\nimport * as HybridDeleGator from './HybridDeleGator';\nimport * as MultiSigDeleGator from './MultiSigDeleGator';\nimport * as Ownable2Step from './Ownable2Step';\nimport * as Pausable from './Pausable';\nimport * as SimpleFactory from './SimpleFactory';\nimport * as utils from './utils';\n\n// NOTE: Unfortunately due to the nested namespaces we have to manually merge them here to ensure type generation works.\n\nconst encode: typeof HybridDeleGator.encode &\n  typeof MultiSigDeleGator.encode &\n  typeof DelegationManager.encode &\n  typeof DeleGatorCore.encode &\n  typeof Ownable2Step.encode &\n  typeof Pausable.encode &\n  typeof SimpleFactory.encode = {\n  ...HybridDeleGator.encode,\n  ...MultiSigDeleGator.encode,\n  ...DelegationManager.encode,\n  ...DeleGatorCore.encode,\n  ...Ownable2Step.encode,\n  ...Pausable.encode,\n  ...SimpleFactory.encode,\n};\n\nconst execute: typeof DelegationManager.execute &\n  typeof Ownable2Step.execute &\n  typeof Pausable.execute &\n  typeof SimpleFactory.execute &\n  typeof DeleGatorCore.execute = {\n  ...DelegationManager.execute,\n  ...Ownable2Step.execute,\n  ...Pausable.execute,\n  ...SimpleFactory.execute,\n  ...DeleGatorCore.execute,\n};\n\nconst read: typeof HybridDeleGator.read &\n  typeof MultiSigDeleGator.read &\n  typeof DeleGatorCore.read &\n  typeof HybridDeleGator.read &\n  typeof DelegationManager.read &\n  typeof EntryPoint.read &\n  typeof EIP712.read &\n  typeof Ownable2Step.read &\n  typeof Pausable.read &\n  typeof SimpleFactory.read = {\n  ...HybridDeleGator.read,\n  ...MultiSigDeleGator.read,\n  ...DeleGatorCore.read,\n  ...DelegationManager.read,\n  ...EntryPoint.read,\n  ...EIP712.read,\n  ...Ownable2Step.read,\n  ...Pausable.read,\n  ...SimpleFactory.read,\n};\n\nconst simulate: typeof HybridDeleGator.simulate &\n  typeof MultiSigDeleGator.simulate &\n  typeof DelegationManager.simulate &\n  typeof DeleGatorCore.simulate &\n  typeof Ownable2Step.simulate &\n  typeof Pausable.simulate &\n  typeof SimpleFactory.simulate = {\n  ...HybridDeleGator.simulate,\n  ...MultiSigDeleGator.simulate,\n  ...DelegationManager.simulate,\n  ...DeleGatorCore.simulate,\n  ...Ownable2Step.simulate,\n  ...Pausable.simulate,\n  ...SimpleFactory.simulate,\n};\n\nconst constants: {\n  DelegationManager: typeof DelegationManager.constants;\n  HybridDeleGator: typeof HybridDeleGator.constants;\n  MultiSigDeleGator: typeof MultiSigDeleGator.constants;\n} = {\n  DelegationManager: DelegationManager.constants,\n  HybridDeleGator: HybridDeleGator.constants,\n  MultiSigDeleGator: MultiSigDeleGator.constants,\n};\n\n/**\n * Delegation Framework\n *\n * A suite of utility methods for interacting with the Delegation Framework contracts.\n */\nexport const DelegationFramework = {\n  encode,\n  execute,\n  read,\n  simulate,\n  constants,\n  utils,\n};\n"],
  "mappings": "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M,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA+/DlnB,MAAM,IAAI;;;AC//DR,IAAMC,YAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA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",
  "names": ["__export", "__export", "abi", "bytecode", "abi", "id", "abi", "id", "abi", "docsPath", "err", "hash", "secp256k1", "yParityOrV", "recoveryBit", "hash", "encode", "nonce", "hash", "docsPath", "chain", "nonce", "docsPath", "cause", "blockNumber", "blockNumber", "chain", "chain", "blockNumber", "sha256", "sha256", "sha256", "size", "hash", "size", "chain", "nonce", "nonceManager", "getBlock", "getChainId", "chainId", "block", "blockNumber", "nonce", "abi", "docsPath", "abi", "abi", "abiItem", "eventName", "isEqual", "index", "value", "input", "event", "abi", "abi", "abi", "listeners", "cleanup", "poll", "cacheKey", "id", "abi", "blockNumber", "transport", "eventName", "args", "docsPath", "chain", "docsPath", "cause", "chain", "nonce", "hash", "e", "writeContract", "abi", "abi", "client", "shouldRetry", "chain", "id", "call", "id", "chainId", "receipts", "hash", "status", "statusCode", "id", "result", "size", "chain", "key", "hash", "hash", "blockNumber", "chain", "custom", "res", "blockNumber", "chain", "blockNumber", "blockNumber", "chain", "blockNumber", "chain", "blockNumber", "id", "event", "id", "id", "blockNumber", "blockNumber", "blockNumber", "hex", "abi", "blockNumber", "types", "size", "from", "nonce", "hash", "nonce", "blobs", "commitments", "proofs", "v", "nonce", "promiseCache", "id", "uid", "chain", "hash", "K", "nonce", "body", "response", "getSocket", "id", "key", "error", "types", "types", "struct", "types", "assert", "from", "validate", "LruMap", "size", "LruMap", "keccak256", "from", "validate", "fromHex", "fromBytes", "x", "slice", "prefix", "toHex", "concat", "BaseError", "stringify", "size", "from", "assert", "InvalidAddressError", "checksum", "hash", "keccak256", "from", "toHex", "validate", "assert", "InvalidAddressError", "BaseError", "arrayRegex", "bytesRegex", "integerRegex", "maxUint256", "checksumAddress", "checksum", "wrap", "slice", "length", "consumed", "value", "size", "integerRegex", "encode", "concat", "assert", "BytesSizeMismatchError", "BaseError", "fromString", "index", "PositionOutOfBoundsError", "size", "BaseError", "checksumAddress", "size", "data", "encode", "encodePacked", "types", "concat", "assert", "fromString", "integerRegex", "bytesRegex", "BytesSizeMismatchError", "arrayRegex", "from", "BaseError", "size", "BytesSizeMismatchError", "from", "getEncodable", "fromHex", "hex", "from", "getEncodable", "getEncodableList", "getEncodableBytes", "getSizeOfLength", "encode", "BaseError", "assert", "maxUint256", "fromBytes", "fromHex", "InvalidSerializedSizeError", "slice", "yParity", "extract", "from", "yParity", "toHex", "assert", "concat", "trimLeft", "InvalidSerializedSizeError", "BaseError", "size", "from", "stringify", "from", "fromRpc", "nonce", "extract", "keccak256", "concat", "fromHex", "toTuple", "toTuple", "nonce", "extract", "recoverAddress", "recoverPublicKey", "from", "from", "assert", "slice", "toNumber", "recoverAddress", "encode", "size", "concat", "validate", "BaseError", "blockNumber", "blockNumber", "blockNumber", "hash", "index", "hash", "blockNumber", "hash", "blockNumber", "abi", "result", "blockNumber", "block", "call", "abi", "result", "error", "BaseError", "validate", "index", "types", "from", "abi", "validate", "abiItem", "slice", "index", "formatAbiItem", "keccak256", "fromString", "BaseError", "encode", "abi", "options", "fromAbi", "bytecode", "concat", "from", "fromAbi", "abi", "item", "encodeData", "abi", "args", "fromAbi", "abiFunction", "getSelector", "encode", "concat", "from", "fromAbi", "abi", "getSelector", "blockNumber", "encode", "from", "encodeData", "call", "InvalidWrappedSignatureError", "assert", "from", "magicBytes", "unwrap", "validate", "wrap", "magicBytes", "assert", "slice", "InvalidWrappedSignatureError", "from", "unwrap", "wrap", "concat", "encode", "validate", "BaseError", "verifyHash", "hash", "signature", "blockNumber", "verifyMessage", "hash", "verifyHash", "verifyTypedData", "types", "hash", "verifyHash", "blockNumber", "transport", "hash", "blockNumber", "from", "nonce", "block", "transport", "blockNumber", "transport", "event", "args", "hash", "nonce", "nonce", "hash", "verifyHash", "verifyHash", "verifyMessage", "verifyTypedData", "chain", "id", "abi", "bytecode", "chainId", "nonce", "chain", "supportsWalletNamespace", "chain", "nonce", "hash", "e", "id", "chain", "types", "id", "uid", "chain", "fetch", "transport", "transports_", "sample", "chain", "wait", "body", "chain", "createHasher", "nonce", "nonce", "packedUserOp", "deployed", "nonce", "isBytes", "id", "wrap", "encode", "decode", "from", "padding", "checksum", "alphabet", "sha256", "checksum", "encode", "isBytes", "decode", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "ExecutionRevertedError", "nonce", "entryPoint07Address", "from", "fromRpc", "getSignPayload", "hash", "toRpc", "assert", "types", "value", "integerRegex", "validate", "InvalidAddressError", "bytesRegex", "size", "BytesSizeMismatchError", "struct", "validateReference", "InvalidDomainError", "InvalidPrimaryTypeError", "encode", "types", "assert", "hashDomain", "hashStruct", "concat", "encodeType", "findTypeDependencies", "getSignPayload", "keccak256", "encodeData", "BytesSizeMismatchError", "BaseError", "InvalidDomainError", "stringify", "InvalidPrimaryTypeError", "types", "InvalidStructTypeError", "encodeData", "hashType", "value", "encodeField", "encode", "fromString", "encodeType", "keccak256", "findTypeDependencies", "validateReference", "from", "toHex", "fromRpc", "rpc", "getSignPayload", "hash", "nonce", "encode", "keccak256", "concat", "slice", "factory", "factoryData", "size", "paymaster", "paymasterVerificationGasLimit", "paymasterPostOpGasLimit", "paymasterData", "toRpc", "toTypedData", "bytesToHex", "hexToBytes", "createChallenge", "parseSignature", "hexToBytes", "bytesToHex", "hash", "encodePacked", "encodeAbiParameters", "Implementation", "toHex", "AllowedMethodsEnforcer", "isHex", "concat", "AllowedTargetsEnforcer", "bytecode", "isAddress", "DeployedEnforcer", "AllowedCalldataEnforcer", "BalanceChangeType", "ERC20BalanceChangeEnforcer", "ValueLteEnforcer", "pad", "LimitedCallsEnforcer", "id", "IdEnforcer", "nonce", "NonceEnforcer", "TimestampEnforcer", "BlockNumberEnforcer", "ERC20TransferAmountEnforcer", "ERC20StreamingEnforcer", "NativeTokenStreamingEnforcer", "NativeTokenTransferAmountEnforcer", "NativeBalanceChangeEnforcer", "RedeemerEnforcer", "NativeTokenPaymentEnforcer", "ArgsEqualityCheckEnforcer", "ERC1155BalanceChangeEnforcer", "ERC721BalanceChangeEnforcer", "ERC721TransferEnforcer", "SpecificActionERC20TransferBatchEnforcer", "NativeTokenPeriodTransferEnforcer", "ExactCalldataBatchEnforcer", "ExactCalldataEnforcer", "ExactExecutionEnforcer", "ExactExecutionBatchEnforcer", "MultiTokenPeriodEnforcer", "keccak256", "parseAbiParameters", "deployContract", "chain", "abi", "SimpleFactory", "DelegationManager", "RpcError", "getInitCode", "parseSignature", "signMessage", "signTypedData", "__export", "encode", "simulate", "simulateContract", "HybridDeleGator", "encodeFunctionData", "encode_exports", "MultiSigDeleGator", "writeContract", "read", "readContract", "DeleGatorCore", "hash", "Implementation", "index", "abi", "execute", "toDelegationStruct", "call", "read_exports", "chain", "signDelegation", "params", "signUserOperation", "getAddress", "encodeCalls", "DelegationManager", "encodeExecutionCalldatas", "ROOT_AUTHORITY", "execute_exports", "simulate_exports", "constants_exports", "ANY_DELEGATE", "DOMAIN_VERSION", "NAME", "VERSION", "Ownable2Step", "SimpleFactory"]
}
