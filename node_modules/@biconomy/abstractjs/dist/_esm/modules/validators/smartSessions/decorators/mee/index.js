import { SMART_SESSIONS_ADDRESS } from "../../../../../constants/index.js";
import { grantMeePermissionPersonalSign, grantMeePermissionTypedDataSign } from "./grantMeePermission.js";
import { prepareForPermissions } from "./prepareForPermissions.js";
import { useMeePermission } from "./useMeePermission.js";
/**
 * Creates an instance of MEE actions using the provided client
 * @param meeClient - Base MEE client instance
 * @returns Object containing all MEE actions
 */
export const meeSessionActions = (meeClient) => {
    return {
        prepareForPermissions: (params) => prepareForPermissions(meeClient, params),
        grantPermissionPersonalSign: (params) => grantMeePermissionPersonalSign(meeClient, params),
        grantPermissionTypedDataSign: (params) => grantMeePermissionTypedDataSign(meeClient, params),
        usePermission: (params) => useMeePermission(meeClient, params),
        isPermissionEnabled: (params) => isPermissionEnabled(meeClient, params),
        checkEnabledPermissions: (params) => checkEnabledPermissions(meeClient, params)
    };
};
export { grantMeePermissionPersonalSign, grantMeePermissionTypedDataSign } from "./grantMeePermission.js";
export { useMeePermission } from "./useMeePermission.js";
export { prepareForPermissions } from "./prepareForPermissions.js";
/**
 * Checks if a permission is enabled for a given chain for this MEE client
 * assumes the PermissionId is known
 * @param meeClient - The MEE client
 * @param params - The parameters for the isPermissionEnabled function
 * @returns The result of the call to SmartSessions.isPermissionEnabled function
 */
export const isPermissionEnabled = async (meeClient, params) => {
    const deployment = meeClient.account.deploymentOn(params.chainId, true);
    const chainClient = deployment.client;
    return await chainClient.readContract({
        address: SMART_SESSIONS_ADDRESS,
        abi: [
            {
                inputs: [
                    {
                        name: "permissionId",
                        type: "bytes32",
                        internalType: "PermissionId"
                    },
                    { name: "account", type: "address", internalType: "address" }
                ],
                name: "isPermissionEnabled",
                outputs: [{ name: "", type: "bool", internalType: "bool" }],
                stateMutability: "view",
                type: "function"
            }
        ],
        functionName: "isPermissionEnabled",
        args: [params.permissionId, deployment.address]
    });
};
/**
 * For all the permissions from the grantMeePermissionPayload,
 * checks if they are enabled or not.
 * Facilitates checking the whole return object of the grantMeePermission function.
 * So the developer doesn't need to parse and know permissionId(s) for each chain.
 * Detects the permissions that were expected to be enabled on each chain
 * and checks if they are enabled or not.
 * @param meeClient - The MEE client
 * @param params - The return data of the grantMeePermission function
 * @returns A mapping of permissionId => chainId => isEnabled
 */
export const checkEnabledPermissions = async (meeClient, params) => {
    const enabledPermissions = await Promise.all(params.map(async (permission) => {
        const chainId = Number(permission.enableSessionData.enableSession.sessionToEnable.chainId);
        return {
            permissionId: permission.permissionId,
            chainId,
            enabled: await isPermissionEnabled(meeClient, {
                permissionId: permission.permissionId,
                chainId
            })
        };
    }));
    return enabledPermissions.reduce((acc, permission) => {
        acc[permission.permissionId] = {
            [permission.chainId]: permission.enabled
        };
        return acc;
    }, {});
};
//# sourceMappingURL=index.js.map