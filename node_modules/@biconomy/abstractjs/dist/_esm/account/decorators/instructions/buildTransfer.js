import { encodeFunctionData } from "viem";
import { TokenWithPermitAbi } from "../../../constants/abi/TokenWithPermitAbi.js";
import { isComposableCallRequired, isRuntimeComposableValue } from "../../../modules/utils/composabilityCalls.js";
import { getFunctionContextFromAbi } from "../../../modules/utils/runtimeAbiEncoding.js";
import { buildComposableCall } from "./buildComposable.js";
/**
 * Builds an instruction for transferring tokens. This function creates the necessary
 * instruction for a standard ERC20 transfer.
 *
 * @param baseParams - Base configuration for the instruction
 * @param baseParams.account - The account that will execute the transfer
 * @param baseParams.currentInstructions - Optional array of existing instructions to append to
 * @param parameters - Parameters for the transfer
 * @param parameters.chainId - Chain ID where the transfer will be executed
 * @param parameters.tokenAddress - Address of the token to transfer
 * @param parameters.amount - Amount to transfer
 * @param [parameters.gasLimit] - Optional gas limit for the transfer
 * @param [parameters.recipient] - Optional recipient address
 *
 * @returns Promise resolving to array of instructions
 *
 * @example
 * ```typescript
 * const instructions = await buildTransfer(
 *   { accountAddress: '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' },
 *   {
 *     chainId: 1,
 *     tokenAddress: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48", // USDC
 *     amount: 1000000n, // 1 USDC
 *     gasLimit: 65000n,
 *     recipient: "0x742d35Cc6634C0532925a3b844Bc454e4438f44e"
 *   }
 * );
 * ```
 */
export const buildTransfer = async (baseParams, parameters, composabilityParams) => {
    const { currentInstructions = [], accountAddress } = baseParams;
    const { chainId, tokenAddress, amount, gasLimit, recipient, metadata } = parameters;
    const { forceComposableEncoding } = composabilityParams ?? {
        forceComposableEncoding: false
    };
    const abi = TokenWithPermitAbi;
    const functionSig = "transfer";
    const args = [
        recipient,
        amount
    ];
    const functionContext = getFunctionContextFromAbi(functionSig, abi);
    // Check for the runtime arguments and detect the need for composable call
    const isComposableCall = forceComposableEncoding
        ? true
        : isComposableCallRequired(functionContext, args);
    let triggerCalls;
    // If the composable call is detected ? The call needs to composed with runtime encoding
    if (isComposableCall) {
        if (!composabilityParams) {
            throw new Error("Composability params are required to build a composable call");
        }
        const composableCallParams = {
            to: tokenAddress,
            functionName: functionSig,
            args: args,
            abi,
            chainId,
            ...(gasLimit ? { gasLimit } : {})
        };
        triggerCalls = await buildComposableCall(composableCallParams, composabilityParams);
    }
    else {
        triggerCalls = [
            {
                to: tokenAddress,
                data: encodeFunctionData({
                    abi,
                    functionName: functionSig,
                    args: args
                }),
                ...(gasLimit ? { gasLimit } : {})
            }
        ];
    }
    const defaultMetadata = [
        {
            type: "TRANSFER",
            tokenAddress: isRuntimeComposableValue(tokenAddress)
                ? "RUNTIME_VALUE"
                : tokenAddress,
            fromAddress: accountAddress,
            toAddress: recipient,
            amount: isRuntimeComposableValue(amount)
                ? "RUNTIME_VALUE"
                : amount,
            chainId
        }
    ];
    return [
        ...currentInstructions,
        {
            calls: triggerCalls,
            chainId,
            isComposable: isComposableCall,
            metadata: metadata || defaultMetadata
        }
    ];
};
export default buildTransfer;
//# sourceMappingURL=buildTransfer.js.map