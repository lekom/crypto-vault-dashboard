import { addressEquals } from "../../../account/utils/Utils.js";
import { getGasToken } from "./getGasToken.js";
/**
 * Retrieves detailed information about a specific payment token on a given chain.
 * This function validates if the token is supported for gas payments and returns its configuration.
 *
 * @param client - The Mee client instance
 * @param parameters - Query parameters for the token
 * @param parameters.chainId - The blockchain chain ID
 * @param parameters.tokenAddress - The token contract address to query
 *
 * @returns Promise resolving to the payment token configuration
 *
 * @example
 * ```typescript
 * const tokenInfo = await getSupportedFeeToken(client, {
 *   chainId: 1,
 *   tokenAddress: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48" // USDC
 * });
 * // Returns:
 * // {
 * //   isArbitraryFeeTokensSupported: true,
 * //   supportedFeeToken: {
 * //     name: "USD Coin",
 * //     address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
 * //     symbol: "USDC",
 * //     decimals: 6,
 * //     permitEnabled: true
 * //   }
 * // }
 * ```
 *
 * @throws Will throw an error if:
 * - The token is not supported on the specified chain
 * - The chain ID is not supported
 */
export const getSupportedFeeToken = async (client, parameters) => {
    const gasToken = await getGasToken(client, {
        chainId: parameters.chainId,
        address: parameters.tokenAddress
    });
    const supportedFeeToken = gasToken.paymentTokens.find((supportedFeeToken) => addressEquals(supportedFeeToken.address, parameters.tokenAddress));
    return {
        isArbitraryFeeTokensSupported: gasToken.isArbitraryFeeTokensSupported,
        supportedFeeToken
    };
};
export default getSupportedFeeToken;
//# sourceMappingURL=getSupportedFeeToken.js.map