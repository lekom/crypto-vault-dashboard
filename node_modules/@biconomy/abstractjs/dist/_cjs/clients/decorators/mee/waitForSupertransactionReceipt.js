"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitForSupertransactionReceipt = exports.DEFAULT_POLLING_INTERVAL = void 0;
const parseTransactionStatus_1 = require("../../../account/utils/parseTransactionStatus.js");
const getSupertransactionReceipt_1 = require("./getSupertransactionReceipt.js");
exports.DEFAULT_POLLING_INTERVAL = 1000;
const txHashMapByMeeUserOpHash = new Map();
const waitForSupertransactionReceipt = async (client, parameters) => {
    const pollingInterval = client.pollingInterval ?? exports.DEFAULT_POLLING_INTERVAL;
    const paramsWithWait = { ...parameters, waitForReceipts: true };
    const explorerResponse = await (0, getSupertransactionReceipt_1.default)(client, paramsWithWait);
    const userOps = explorerResponse.userOps || [];
    for (const userOp of userOps) {
        const meeUserOpHash = userOp.meeUserOpHash.toLowerCase();
        if (userOp.executionData) {
            const latestTxHash = userOp.executionData.toLowerCase();
            const prevTxHash = txHashMapByMeeUserOpHash.get(meeUserOpHash);
            if (prevTxHash) {
                if (prevTxHash.toLowerCase() !== latestTxHash) {
                    parameters?.onTransactionReplaced?.({
                        meeUserOpHash: meeUserOpHash,
                        txHash: latestTxHash
                    });
                    txHashMapByMeeUserOpHash.set(meeUserOpHash, latestTxHash);
                }
            }
            else {
                txHashMapByMeeUserOpHash.set(meeUserOpHash, latestTxHash);
            }
        }
    }
    const statusResult = await (0, parseTransactionStatus_1.parseTransactionStatus)(userOps, parameters.mode);
    explorerResponse.transactionStatus = statusResult.status;
    if (statusResult.status === "FAILED" ||
        statusResult.status === "MINED_FAIL") {
        throw new Error(statusResult.message || "Transaction failed");
    }
    if (!statusResult.isFinalised) {
        await new Promise((resolve) => setTimeout(resolve, pollingInterval));
        return await (0, exports.waitForSupertransactionReceipt)(client, parameters);
    }
    return explorerResponse;
};
exports.waitForSupertransactionReceipt = waitForSupertransactionReceipt;
exports.default = exports.waitForSupertransactionReceipt;
//# sourceMappingURL=waitForSupertransactionReceipt.js.map