"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.signPermitQuote = exports.formatSignedPermitQuotePayload = exports.prepareSignablePermitQuotePayload = void 0;
const viem_1 = require("viem");
const actions_1 = require("viem/actions");
const constants_1 = require("../../../constants/index.js");
const TokenWithPermitAbi_1 = require("../../../constants/abi/TokenWithPermitAbi.js");
const PERMIT_PREFIX = "0x177eee02";
const prepareSignablePermitQuotePayload = async (quoteParams, owner, spender, publicClient) => {
    const { quote, trigger } = quoteParams;
    if (trigger.call) {
        throw new Error("Custom triggers are not supported for permit quotes");
    }
    if (!trigger.amount)
        throw new Error("Amount is required to sign a permit quote");
    if (trigger.approvalAmount &&
        trigger.amount !== undefined &&
        trigger.approvalAmount < trigger.amount) {
        throw new Error(`Approval amount must be bigger or equal with the amount from the trigger (triggerAmount: ${trigger.amount} amount: ${trigger.approvalAmount})`);
    }
    const amount = trigger.approvalAmount ?? trigger.amount;
    const values = await (0, actions_1.multicall)(publicClient, {
        contracts: [
            {
                address: trigger.tokenAddress,
                abi: TokenWithPermitAbi_1.TokenWithPermitAbi,
                functionName: "nonces",
                args: [owner]
            },
            {
                address: trigger.tokenAddress,
                abi: TokenWithPermitAbi_1.TokenWithPermitAbi,
                functionName: "name"
            },
            {
                address: trigger.tokenAddress,
                abi: TokenWithPermitAbi_1.TokenWithPermitAbi,
                functionName: "version"
            },
            {
                address: trigger.tokenAddress,
                abi: TokenWithPermitAbi_1.TokenWithPermitAbi,
                functionName: "DOMAIN_SEPARATOR"
            },
            {
                address: trigger.tokenAddress,
                abi: TokenWithPermitAbi_1.TokenWithPermitAbi,
                functionName: "eip712Domain"
            }
        ]
    });
    const [nonce, name, version, domainSeparator, eip712Domain] = values.map((value, i) => {
        const key = [
            "nonce",
            "name",
            "version",
            "domainSeparator",
            "eip712Domain"
        ][i];
        if (value.status === "success") {
            return value.result;
        }
        if (value.status === "failure") {
            if (key === "nonce") {
                throw new Error("Permit signing failed: Token does not implement nonces(). This function is required for EIP-2612 compliance.");
            }
            if (key === "domainSeparator") {
                throw new Error("Permit signing failed: Token does not implement DOMAIN_SEPARATOR(). This function is required for EIP-712 domain separation.");
            }
            if (key === "name" || key === "version") {
                return undefined;
            }
            if (key === "eip712Domain") {
                return [];
            }
        }
        return undefined;
    });
    const [, name_, version_] = eip712Domain;
    const defaultVersion = "1";
    if (version?.length >= 0 && version_?.length >= 0) {
        if (version !== version_)
            console.warn("Warning: Mismatch between token version() and eip712Domain().version. This may cause permit signature verification to fail.");
    }
    if (name?.length >= 0 && name_?.length >= 0) {
        if (name !== name_)
            console.warn("Warning: Mismatch between token name() and eip712Domain().name. This may cause permit signature verification to fail.");
    }
    if (name === undefined && name_ === undefined) {
        throw new Error("Permit signing failed: Token name is missing. Neither name() nor eip712Domain().name is available.");
    }
    const signablePermitQuotePayload = {
        domain: {
            name: name_ ?? name,
            version: version_ ?? version ?? defaultVersion,
            chainId: trigger.chainId,
            verifyingContract: trigger.tokenAddress
        },
        types: {
            Permit: [
                { name: "owner", type: "address" },
                { name: "spender", type: "address" },
                { name: "value", type: "uint256" },
                { name: "nonce", type: "uint256" },
                { name: "deadline", type: "uint256" }
            ]
        },
        primaryType: "Permit",
        message: {
            owner: owner,
            spender: spender,
            value: amount,
            nonce,
            deadline: BigInt(quote.hash)
        }
    };
    return {
        signablePayload: signablePermitQuotePayload,
        metadata: {
            nonce,
            name: name_ ?? name,
            version: version_ ?? version ?? defaultVersion,
            domainSeparator,
            owner,
            spender,
            amount
        }
    };
};
exports.prepareSignablePermitQuotePayload = prepareSignablePermitQuotePayload;
const formatSignedPermitQuotePayload = (quoteParams, metadata, signature) => {
    const { quote, trigger } = quoteParams;
    const sigComponents = (0, viem_1.parseSignature)(signature);
    const encodedSignature = (0, viem_1.encodeAbiParameters)([
        { name: "token", type: "address" },
        { name: "spender", type: "address" },
        { name: "domainSeparator", type: "bytes32" },
        { name: "permitTypehash", type: "bytes32" },
        { name: "amount", type: "uint256" },
        { name: "chainId", type: "uint256" },
        { name: "nonce", type: "uint256" },
        { name: "v", type: "uint256" },
        { name: "r", type: "bytes32" },
        { name: "s", type: "bytes32" }
    ], [
        trigger.tokenAddress,
        metadata.spender,
        metadata.domainSeparator,
        constants_1.PERMIT_TYPEHASH,
        metadata.amount,
        BigInt(trigger.chainId),
        metadata.nonce,
        sigComponents.v,
        sigComponents.r,
        sigComponents.s
    ]);
    return { ...quote, signature: (0, viem_1.concatHex)([PERMIT_PREFIX, encodedSignature]) };
};
exports.formatSignedPermitQuotePayload = formatSignedPermitQuotePayload;
const signPermitQuote = async (client, parameters) => {
    const { companionAccount: account_ = client.account, fusionQuote: { trigger } } = parameters;
    const signer = account_.signer;
    const { walletClient, address: spender } = account_.deploymentOn(trigger.chainId, true);
    const owner = signer.address;
    const { signablePayload, metadata } = await (0, exports.prepareSignablePermitQuotePayload)(parameters.fusionQuote, owner, spender, walletClient);
    const signature = await walletClient.signTypedData({
        ...signablePayload,
        account: walletClient.account
    });
    return (0, exports.formatSignedPermitQuotePayload)(parameters.fusionQuote, metadata, signature);
};
exports.signPermitQuote = signPermitQuote;
exports.default = exports.signPermitQuote;
//# sourceMappingURL=signPermitQuote.js.map