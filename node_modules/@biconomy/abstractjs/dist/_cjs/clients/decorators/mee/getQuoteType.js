"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getQuoteType = exports.isPermitTokenInfo = void 0;
const modules_1 = require("../../../modules/index.js");
const getSupportedFeeToken_1 = require("./getSupportedFeeToken.js");
const isPermitTokenInfo = async (client, trigger) => {
    let permitEnabled = false;
    const supportedFeeTokenInfo = await (0, getSupportedFeeToken_1.getSupportedFeeToken)(client, {
        tokenAddress: trigger.tokenAddress,
        chainId: trigger.chainId
    });
    if (supportedFeeTokenInfo.supportedFeeToken) {
        permitEnabled =
            supportedFeeTokenInfo.supportedFeeToken.permitEnabled || false;
    }
    else {
        const { walletClient } = client.account.deploymentOn(trigger.chainId, true);
        permitEnabled = await (0, modules_1.isPermitSupported)(walletClient, trigger.tokenAddress);
    }
    return permitEnabled;
};
exports.isPermitTokenInfo = isPermitTokenInfo;
const isNormalQuote = (payload) => {
    const isTriggerAvailable = "trigger" in payload;
    return !isTriggerAvailable;
};
const isPermitQuote = async (client, payload) => {
    const isTriggerAvailable = "trigger" in payload;
    if (!isTriggerAvailable)
        return false;
    const trigger = payload.trigger;
    if ("call" in trigger) {
        return false;
    }
    const permitEnabled = await (0, exports.isPermitTokenInfo)(client, trigger);
    return permitEnabled;
};
const isOnChainQuote = async (client, payload) => {
    const isTriggerAvailable = "trigger" in payload;
    if (!isTriggerAvailable)
        return false;
    const trigger = payload.trigger;
    if ("call" in trigger) {
        return true;
    }
    const permitEnabled = await (0, exports.isPermitTokenInfo)(client, trigger);
    return !permitEnabled;
};
const getQuoteType = async (client, quoteParams) => {
    if (isNormalQuote(quoteParams)) {
        return "simple";
    }
    if (await isPermitQuote(client, quoteParams)) {
        return "permit";
    }
    if (await isOnChainQuote(client, quoteParams)) {
        return "onchain";
    }
    throw new Error("Invalid quote, can't determine quote type");
};
exports.getQuoteType = getQuoteType;
//# sourceMappingURL=getQuoteType.js.map