"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildApprove = void 0;
const viem_1 = require("viem");
const composabilityCalls_1 = require("../../../modules/utils/composabilityCalls.js");
const runtimeAbiEncoding_1 = require("../../../modules/utils/runtimeAbiEncoding.js");
const buildComposable_1 = require("./buildComposable.js");
const buildApprove = async (baseParams, parameters, composabilityParams) => {
    const { currentInstructions = [], accountAddress } = baseParams;
    const { chainId, tokenAddress, amount, gasLimit, spender, metadata } = parameters;
    const { forceComposableEncoding } = composabilityParams ?? {
        forceComposableEncoding: false
    };
    const abi = viem_1.erc20Abi;
    const functionSig = "approve";
    const args = [
        spender,
        amount
    ];
    const functionContext = (0, runtimeAbiEncoding_1.getFunctionContextFromAbi)(functionSig, abi);
    const isComposableCall = forceComposableEncoding
        ? true
        : (0, composabilityCalls_1.isComposableCallRequired)(functionContext, args);
    let approvalCall;
    if (isComposableCall) {
        if (!composabilityParams) {
            throw new Error("Composability params are required to build a composable call");
        }
        const composableCallParams = {
            to: tokenAddress,
            functionName: functionSig,
            args: args,
            abi,
            chainId,
            ...(gasLimit ? { gasLimit } : {})
        };
        approvalCall = await (0, buildComposable_1.buildComposableCall)(composableCallParams, composabilityParams);
    }
    else {
        approvalCall = [
            {
                to: tokenAddress,
                data: (0, viem_1.encodeFunctionData)({
                    abi,
                    functionName: functionSig,
                    args: args
                }),
                ...(gasLimit ? { gasLimit } : {})
            }
        ];
    }
    const defaultMetadata = [
        {
            type: "APPROVE",
            tokenAddress: (0, composabilityCalls_1.isRuntimeComposableValue)(tokenAddress)
                ? "RUNTIME_VALUE"
                : tokenAddress,
            fromAddress: accountAddress,
            toAddress: spender,
            amount: (0, composabilityCalls_1.isRuntimeComposableValue)(amount)
                ? "RUNTIME_VALUE"
                : amount,
            chainId
        }
    ];
    return [
        ...currentInstructions,
        {
            calls: approvalCall,
            chainId,
            isComposable: isComposableCall,
            metadata: metadata || defaultMetadata
        }
    ];
};
exports.buildApprove = buildApprove;
exports.default = exports.buildApprove;
//# sourceMappingURL=buildApprove.js.map