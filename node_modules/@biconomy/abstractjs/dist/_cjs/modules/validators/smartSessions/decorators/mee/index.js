"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkEnabledPermissions = exports.isPermissionEnabled = exports.prepareForPermissions = exports.useMeePermission = exports.grantMeePermissionTypedDataSign = exports.grantMeePermissionPersonalSign = exports.meeSessionActions = void 0;
const constants_1 = require("../../../../../constants/index.js");
const grantMeePermission_1 = require("./grantMeePermission.js");
const prepareForPermissions_1 = require("./prepareForPermissions.js");
const useMeePermission_1 = require("./useMeePermission.js");
const meeSessionActions = (meeClient) => {
    return {
        prepareForPermissions: (params) => (0, prepareForPermissions_1.prepareForPermissions)(meeClient, params),
        grantPermissionPersonalSign: (params) => (0, grantMeePermission_1.grantMeePermissionPersonalSign)(meeClient, params),
        grantPermissionTypedDataSign: (params) => (0, grantMeePermission_1.grantMeePermissionTypedDataSign)(meeClient, params),
        usePermission: (params) => (0, useMeePermission_1.useMeePermission)(meeClient, params),
        isPermissionEnabled: (params) => (0, exports.isPermissionEnabled)(meeClient, params),
        checkEnabledPermissions: (params) => (0, exports.checkEnabledPermissions)(meeClient, params)
    };
};
exports.meeSessionActions = meeSessionActions;
var grantMeePermission_2 = require("./grantMeePermission.js");
Object.defineProperty(exports, "grantMeePermissionPersonalSign", { enumerable: true, get: function () { return grantMeePermission_2.grantMeePermissionPersonalSign; } });
Object.defineProperty(exports, "grantMeePermissionTypedDataSign", { enumerable: true, get: function () { return grantMeePermission_2.grantMeePermissionTypedDataSign; } });
var useMeePermission_2 = require("./useMeePermission.js");
Object.defineProperty(exports, "useMeePermission", { enumerable: true, get: function () { return useMeePermission_2.useMeePermission; } });
var prepareForPermissions_2 = require("./prepareForPermissions.js");
Object.defineProperty(exports, "prepareForPermissions", { enumerable: true, get: function () { return prepareForPermissions_2.prepareForPermissions; } });
const isPermissionEnabled = async (meeClient, params) => {
    const deployment = meeClient.account.deploymentOn(params.chainId, true);
    const chainClient = deployment.client;
    return await chainClient.readContract({
        address: constants_1.SMART_SESSIONS_ADDRESS,
        abi: [
            {
                inputs: [
                    {
                        name: "permissionId",
                        type: "bytes32",
                        internalType: "PermissionId"
                    },
                    { name: "account", type: "address", internalType: "address" }
                ],
                name: "isPermissionEnabled",
                outputs: [{ name: "", type: "bool", internalType: "bool" }],
                stateMutability: "view",
                type: "function"
            }
        ],
        functionName: "isPermissionEnabled",
        args: [params.permissionId, deployment.address]
    });
};
exports.isPermissionEnabled = isPermissionEnabled;
const checkEnabledPermissions = async (meeClient, params) => {
    const enabledPermissions = await Promise.all(params.map(async (permission) => {
        const chainId = Number(permission.enableSessionData.enableSession.sessionToEnable.chainId);
        return {
            permissionId: permission.permissionId,
            chainId,
            enabled: await (0, exports.isPermissionEnabled)(meeClient, {
                permissionId: permission.permissionId,
                chainId
            })
        };
    }));
    return enabledPermissions.reduce((acc, permission) => {
        acc[permission.permissionId] = {
            [permission.chainId]: permission.enabled
        };
        return acc;
    }, {});
};
exports.checkEnabledPermissions = checkEnabledPermissions;
//# sourceMappingURL=index.js.map