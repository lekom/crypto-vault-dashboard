"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMeePermission = void 0;
const constants_1 = require("../../../../../constants/index.js");
const useMeePermission = async (meeClient_, parameters) => {
    const { sessionDetails: sessionDetailsArray, simulation, mode: mode_, instructions, batch = true, verificationGasLimit } = parameters;
    const meeClient = meeClient_;
    const mode = mode_ === "ENABLE_AND_USE"
        ? constants_1.SmartSessionMode.UNSAFE_ENABLE
        : constants_1.SmartSessionMode.USE;
    const quote = await meeClient.getQuote({
        instructions,
        moduleAddress: constants_1.SMART_SESSIONS_ADDRESS,
        shortEncodingSuperTxn: true,
        sessionDetails: sessionDetailsArray,
        smartSessionMode: mode_,
        batch,
        simulation,
        verificationGasLimit,
        ...(parameters.sponsorship
            ? {
                sponsorship: parameters.sponsorship,
                sponsorshipOptions: parameters.sponsorshipOptions
            }
            : { feeToken: parameters.feeToken })
    });
    const signedQuote = await meeClient.signQuote({ quote });
    const processedChains = new Set();
    const startIndex = signedQuote.paymentInfo.sponsored ? 1 : 0;
    for (const [index, userOpEntry] of signedQuote.userOps.entries()) {
        if (index < startIndex)
            continue;
        const chainId = String(userOpEntry.chainId);
        const isFirstTimeForChain = !processedChains.has(chainId);
        const relevantIndex = sessionDetailsArray.findIndex(({ enableSessionData }) => enableSessionData?.enableSession?.sessionToEnable?.chainId ===
            BigInt(userOpEntry.chainId));
        if (relevantIndex === -1) {
            throw new Error(`No session details found for chainId ${userOpEntry.chainId}`);
        }
        const dynamicMode = isFirstTimeForChain ? mode : constants_1.SmartSessionMode.USE;
        userOpEntry.sessionDetails = {
            ...sessionDetailsArray[relevantIndex],
            mode: dynamicMode
        };
        processedChains.add(chainId);
    }
    return await meeClient.executeSignedQuote({ signedQuote });
};
exports.useMeePermission = useMeePermission;
//# sourceMappingURL=useMeePermission.js.map