"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareForPermissions = void 0;
const build_1 = require("../../../../../account/decorators/build.js");
const installModule_1 = require("../../../../../clients/decorators/erc7579/installModule.js");
const isModuleInstalled_1 = require("../../../../../clients/decorators/erc7579/isModuleInstalled.js");
const execute_1 = require("../../../../../clients/decorators/mee/execute.js");
const executeFusionQuote_1 = require("../../../../../clients/decorators/mee/executeFusionQuote.js");
const getFusionQuote_1 = require("../../../../../clients/decorators/mee/getFusionQuote.js");
const prepareForPermissions = async (client, parameters) => {
    const meeVersions = client.account.deployments.map(({ version, chain }) => ({
        chainId: chain.id,
        version
    }));
    const installInstructions = await Promise.all(client.account.deployments.map(async (deployment) => {
        const chainId = deployment.client.chain?.id;
        if (!chainId) {
            throw new Error("Chain ID is not set");
        }
        const isModuleInstalled_ = (await deployment.isDeployed())
            ? await (0, isModuleInstalled_1.isModuleInstalled)(undefined, {
                account: deployment,
                module: {
                    address: parameters.smartSessionsValidator.address,
                    initData: "0x",
                    type: parameters.smartSessionsValidator.type
                }
            })
            : false;
        if (!isModuleInstalled_) {
            return (0, build_1.build)({ accountAddress: client.account.signer.address, meeVersions }, {
                type: "default",
                data: {
                    calls: (await (0, installModule_1.toInstallWithSafeSenderCalls)(deployment, {
                        address: parameters.smartSessionsValidator.address,
                        initData: "0x",
                        type: parameters.smartSessionsValidator.type
                    })),
                    chainId,
                    metadata: [
                        {
                            type: "CUSTOM",
                            description: "Install smart sessions module",
                            chainId
                        }
                    ]
                }
            });
        }
        return undefined;
    }));
    const hasInstallInstructions = installInstructions.some(Boolean);
    if (hasInstallInstructions ||
        parameters.additionalInstructions ||
        parameters.trigger) {
        if (!parameters.feeToken) {
            throw new Error("Fee token is required");
        }
        const cleanedInstallInstructions = installInstructions.filter(Boolean);
        const completeInstructionsList = parameters.additionalInstructions
            ? [...cleanedInstallInstructions, ...parameters.additionalInstructions]
            : cleanedInstallInstructions;
        if (parameters.trigger) {
            const quote = await (0, getFusionQuote_1.getFusionQuote)(client, {
                ...parameters,
                instructions: completeInstructionsList,
                batch: parameters.batch || true,
                feeToken: parameters.feeToken,
                trigger: parameters.trigger,
                simulation: parameters.simulation
            });
            return await (0, executeFusionQuote_1.executeFusionQuote)(client, {
                fusionQuote: quote,
                companionAccount: client.account
            });
        }
        return await (0, execute_1.execute)(client, {
            ...parameters,
            instructions: completeInstructionsList,
            feeToken: parameters.feeToken,
            trigger: parameters.trigger,
            simulation: parameters.simulation
        });
    }
    return undefined;
};
exports.prepareForPermissions = prepareForPermissions;
//# sourceMappingURL=prepareForPermissions.js.map