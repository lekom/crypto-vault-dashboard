import type { MetaMaskSmartAccount } from "@metamask/delegation-toolkit";
import type { BaseMeeClient } from "../../createMeeClient";
import { type GetQuotePayload } from "./getQuote";
import type { GetQuoteParams } from "./getQuote";
import type { TokenTrigger, Trigger } from "./signPermitQuote";
export declare const DEFAULT_VERIFICATION_GAS_LIMIT_FOR_MM_DTK = 200000n;
/**
 * Response payload for a MM DTK quote request.
 * Combines the standard quote payload with MM DTK-specific trigger information.
 */
export type GetMmDtkQuotePayload = {
    quote: GetQuotePayload;
} & {
    /**
     * Trigger information containing payment token details and total amount
     * (including both the original amount and gas fees)
     * @see {@link Trigger}
     */
    trigger: Trigger;
};
/**
 * Parameters for requesting a permit-enabled quote
 */
export type GetMmDtkQuoteParams = GetQuoteParams & {
    /**
     * Trigger information for the MM DTK transaction
     * @see {@link Trigger}
     */
    trigger: TokenTrigger;
    /**
     * The MetaMask smart account to use for signing
     * the delegation
     */
    delegatorSmartAccount: MetaMaskSmartAccount;
    /** For fusion mode, batching will be always true by default */
    batch?: boolean;
    feePayer?: undefined;
};
/**
 * Gets a quote for a permit-enabled transaction from the MEE service.
 * This method is used when the payment token supports ERC20Permit, allowing for
 * gasless approvals and more efficient transactions.
 *
 * @param client - The base MEE client instance
 * @param parameters - Parameters for the permit quote request
 * @param parameters.trigger - Payment token and amount information
 * @param parameters.instructions - Array of transaction instructions to execute
 * @param [parameters.account] - Optional account to use (defaults to client.account)
 *
 * @returns Promise resolving to quote payload with permit-specific trigger information
 *
 *
 * @throws Will throw an error if:
 * - The trigger parameters are invalid
 * - The quote request fails
 */
export declare const getMmDtkQuote: (client: BaseMeeClient, parameters: GetMmDtkQuoteParams) => Promise<GetMmDtkQuotePayload>;
export default getMmDtkQuote;
//# sourceMappingURL=getMmDtkQuote.d.ts.map