import type { Address } from "viem";
export type MetadataAmountType = bigint | "RUNTIME_VALUE";
export type MetadataAddressType = Address | "RUNTIME_VALUE";
export interface TokenTransferMetadata {
    type: "TRANSFER";
    tokenAddress: MetadataAddressType;
    decimals?: number;
    fromAddress: MetadataAddressType;
    toAddress: MetadataAddressType;
    amount: MetadataAmountType;
    chainId: number;
}
export interface ApproveMetadata {
    type: "APPROVE";
    tokenAddress: MetadataAddressType;
    decimals?: number;
    fromAddress: MetadataAddressType;
    toAddress: MetadataAddressType;
    amount: MetadataAmountType;
    chainId: number;
}
export interface WithdrawMetadata {
    type: "WITHDRAW";
    tokenAddress: MetadataAddressType;
    decimals?: number;
    fromAddress: MetadataAddressType;
    toAddress: MetadataAddressType;
    amount: MetadataAmountType;
    chainId: number;
}
export interface BridgeMetadata {
    type: "BRIDGE";
    fromAddress: MetadataAddressType;
    toAddress: MetadataAddressType;
    fromTokenAddress: MetadataAddressType;
    fromTokenDecimals?: number;
    toTokenAddress: MetadataAddressType;
    toTokenDecimals?: number;
    fromChainId: number;
    toChainId: number;
    amount: MetadataAmountType;
    protocolNames?: string[];
}
export interface SwapMetadata {
    type: "SWAP";
    fromTokenAddress: MetadataAddressType;
    fromTokenDecimals?: number;
    toTokenAddress: MetadataAddressType;
    toTokenDecimals?: number;
    fromAddress: MetadataAddressType;
    toAddress: MetadataAddressType;
    chainId: number;
    amount: MetadataAmountType;
    protocolNames?: string[];
}
export interface AddLiquidityMetadata {
    type: "ADD_LIQUIDITY";
    tokenAddress: MetadataAddressType;
    decimals?: number;
    fromAddress: MetadataAddressType;
    toAddress: MetadataAddressType;
    amount: MetadataAmountType;
    chainId: number;
    protocolNames?: string[];
}
export interface RemoveLiquidityMetadata {
    type: "REMOVE_LIQUIDITY";
    tokenAddress: MetadataAddressType;
    decimals?: number;
    fromAddress: MetadataAddressType;
    toAddress: MetadataAddressType;
    amount: MetadataAmountType;
    chainId: number;
    protocolNames?: string[];
}
export interface StakeMetadata {
    type: "STAKE";
    tokenAddress: MetadataAddressType;
    decimals?: number;
    fromAddress: MetadataAddressType;
    toAddress: MetadataAddressType;
    amount: MetadataAmountType;
    chainId: number;
    protocolNames?: string[];
}
export interface UnstakeMetadata {
    type: "UNSTAKE";
    tokenAddress: MetadataAddressType;
    decimals?: number;
    fromAddress: MetadataAddressType;
    toAddress: MetadataAddressType;
    amount: MetadataAmountType;
    chainId: number;
    protocolNames?: string[];
}
export interface LendMetadata {
    type: "LEND";
    tokenAddress: MetadataAddressType;
    decimals?: number;
    fromAddress: MetadataAddressType;
    toAddress: MetadataAddressType;
    amount: MetadataAmountType;
    chainId: number;
    protocolNames?: string[];
}
export interface BorrowMetadata {
    type: "BORROW";
    tokenAddress: MetadataAddressType;
    decimals?: number;
    fromAddress: MetadataAddressType;
    toAddress: MetadataAddressType;
    amount: MetadataAmountType;
    chainId: number;
    protocolNames?: string[];
}
export interface CustomMetadata {
    type: "CUSTOM";
    description: string;
    chainId: number;
}
export type InstructionMetadata = TokenTransferMetadata | ApproveMetadata | WithdrawMetadata | BridgeMetadata | SwapMetadata | AddLiquidityMetadata | RemoveLiquidityMetadata | StakeMetadata | UnstakeMetadata | LendMetadata | BorrowMetadata | CustomMetadata;
export type InstructionMetadataType = InstructionMetadata["type"];
//# sourceMappingURL=instruction-metadata.type.d.ts.map