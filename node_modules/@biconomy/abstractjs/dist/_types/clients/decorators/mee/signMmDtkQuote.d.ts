import { type MetaMaskSmartAccount } from "@metamask/delegation-toolkit";
import { type Hex } from "viem";
import type { MultichainSmartAccount } from "../../../account/toMultiChainNexusAccount";
import type { BaseMeeClient } from "../../createMeeClient";
import type { GetPermitQuotePayload } from "./getPermitQuote";
import type { GetQuotePayload } from "./getQuote";
/**
 * Parameters for signing a permit quote
 */
export type SignMmDtkQuoteParams = {
    /**
     * The quote to sign
     * @see {@link GetPermitQuotePayload}
     */
    fusionQuote: GetPermitQuotePayload;
    /**
     * The MetaMask smart account to use for signing
     * the delegation
     */
    delegatorSmartAccount: MetaMaskSmartAccount;
    /**
     * Optional companion smart account to execute the superTxn
     * If not provided, uses the client's default account
     */
    companionAccount?: MultichainSmartAccount;
};
/**
 * Response payload containing the signed permit quote
 */
export type SignMmDtkQuotePayload = GetQuotePayload & {
    /**
     * The signature of the quote, prefixed with '0x177eee02' and concatenated with
     * the encoded permit parameters and signature components
     */
    signature: Hex;
};
/**
 * Signs a permit quote using EIP-2612 permit signatures. This enables gasless
 * approvals for ERC20 tokens that implement the permit extension.
 *
 * @param client - The Mee client instance
 * @param parameters - Parameters for signing the permit quote
 * @param parameters.fusionQuote - The permit quote to sign
 * @param [parameters.account] - Optional account to use for signing
 *
 * @returns Promise resolving to the quote payload with permit signature
 *
 * @example
 * ```typescript
 * const signedMMDtkQuote = await signMMDtkQuote(meeClient, {
 *   fusionQuote: {
 *     quote: quotePayload,
 *     trigger: {
 *       tokenAddress: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
 *       chainId: 1,
 *       amount: 1000000n // 1 USDC
 *     }
 *   },
 *   delegatorSmartAccount: mmDtkAccount
 * });
 * ```
 */
export declare const signMMDtkQuote: (client: BaseMeeClient, parameters: SignMmDtkQuoteParams) => Promise<SignMmDtkQuotePayload>;
export default signMMDtkQuote;
//# sourceMappingURL=signMmDtkQuote.d.ts.map