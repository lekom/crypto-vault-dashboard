import type { GetTransactionReceiptParameters, Hex, TransactionReceipt } from "viem";
import type { MultichainSmartAccount } from "../../../account/toMultiChainNexusAccount";
import type { Url } from "../../createHttpClient";
import type { BaseMeeClient } from "../../createMeeClient";
import type { GetQuotePayload, MeeFilledUserOpDetails } from "./getQuote";
export type StatusFetchMode = "fast-block" | "default";
/**
 * Parameters for waiting for a supertransaction receipt
 */
export type GetSupertransactionReceiptParams = GetTransactionReceiptParameters & {
    /**
     * Fetch mode for supertransaction resceipt
     * fast-block: Fetches the supertransaction status and resolve it with just 1 block confirmations. Suitable for fast response but not reliable (Reorgs/retry can happen in worst case)
     * default: Fetches the status with sufficient block confirmations
     */
    mode?: StatusFetchMode;
    /** Whether to wait for receipts to be mined. Defaults to true. */
    waitForReceipts?: boolean;
    /** The number of confirmations to wait for. Defaults to 3. Only used if waitForReceipts is true. */
    confirmations?: number;
    /** Optional callback to listen to transaction replacement for meeUserOps */
    onTransactionReplaced?: ({ meeUserOpHash, txHash }: {
        meeUserOpHash: Hex;
        txHash: Hex;
    }) => void;
    /**
     * Optional smart account to execute the transaction.
     * If not provided, uses the client's default account
     */
    account?: MultichainSmartAccount;
};
/**
 * The status of a user operation
 * @type UserOpStatus
 */
export type UserOpStatus = {
    executionStatus: "SUCCESS" | "MINING" | "MINED_SUCCESS" | "MINED_FAIL" | "FAILED" | "PENDING";
    executionData: Hex;
    executionError: string;
};
/**
 * Base response payload containing common supertransaction receipt details
 */
export type BaseGetSupertransactionReceiptPayload = Omit<GetQuotePayload, "userOps"> & {
    userOps: (MeeFilledUserOpDetails & UserOpStatus)[];
    explorerLinks: Url[];
    /**
     * The transaction hash
     * @example "0x123..."
     */
    hash: Hex;
    /**
     * Status of the transaction
     * @example "FAILED"
     */
    transactionStatus: UserOpStatus["executionStatus"];
};
/**
 * Response payload with receipts (when waitForReceipts is true)
 */
export type GetSupertransactionReceiptPayloadWithReceipts = BaseGetSupertransactionReceiptPayload & {
    receipts: TransactionReceipt[];
};
/**
 * Response payload without receipts (when waitForReceipts is false)
 */
export type GetSupertransactionReceiptPayloadWithoutReceipts = BaseGetSupertransactionReceiptPayload & {
    receipts: null;
};
/**
 * Combined response payload type that conditionally includes receipts based on waitForReceipts
 */
export type GetSupertransactionReceiptPayload = GetSupertransactionReceiptPayloadWithReceipts | GetSupertransactionReceiptPayloadWithoutReceipts;
/**
 * Get a supertransaction receipt from the MEE node
 *
 * @typeParam T - Type of the return value, determined by waitForReceipts parameter
 * @param client - The Mee client instance
 * @param parameters - Parameters for retrieving the receipt
 * @returns Promise resolving to the supertransaction receipt, with or without chain receipts depending on waitForReceipts
 */
export declare function getSupertransactionReceipt<T extends boolean = true>(client: BaseMeeClient, parameters: GetSupertransactionReceiptParams & {
    waitForReceipts?: T;
}): Promise<T extends true ? GetSupertransactionReceiptPayloadWithReceipts : GetSupertransactionReceiptPayloadWithoutReceipts>;
export default getSupertransactionReceipt;
//# sourceMappingURL=getSupertransactionReceipt.d.ts.map