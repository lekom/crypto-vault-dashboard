import { type Address, type Hex, type OneOf, type PublicClient, type SignTypedDataParameters, type WalletClient } from "viem";
import type { MultichainSmartAccount } from "../../../account/toMultiChainNexusAccount";
import type { BaseMeeClient } from "../../createMeeClient";
import type { GetPermitQuotePayload } from "./getPermitQuote";
import type { AbstractCall, GetQuotePayload } from "./getQuote";
/**
 * Represents the payload for a signable permit quote, omitting the "account" field from SignTypedDataParameters.
 * This type is used for EIP-712 signing of permit quotes by pure or custom signers.
 */
export type SignablePermitPayload = Omit<SignTypedDataParameters, "account">;
/**
 * Metadata required for signing a permit quote.
 * This includes all necessary EIP-2612 domain and permit parameters,
 * as well as the computed domain separator and involved addresses.
 */
export interface PermitMetadata {
    nonce: bigint;
    name: string;
    version: string;
    domainSeparator: Hex;
    owner: Address;
    spender: Address;
    amount: bigint;
}
/**
 * The payload structure for a signable permit quote.
 * Contains the EIP-712 signable payload and associated metadata
 * needed for formatting and encoding the final permit signature.
 */
export interface SignablePermitQuotePayload {
    signablePayload: SignablePermitPayload;
    metadata: PermitMetadata;
}
/**
 * Custom trigger for arbitrary calls
 */
export type CustomTrigger = {
    /**
     * The call to execute
     * @see {@link AbstractCall}
     */
    call: AbstractCall;
    /**
     * The chainId to use
     * @example 1 // Ethereum Mainnet
     */
    chainId: number;
};
/**
 * Parameters for a token trigger
 */
export type TokenTrigger = {
    /**
     * The address of the token to use on the relevant chain
     * @example "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48" // USDC
     */
    tokenAddress: Address;
    /**
     * The chainId to use
     * @example 1 // Ethereum Mainnet
     */
    chainId: number;
    /**
     * Defaults to EOA's Nexus SCA account address. If this is provided, the trigger.amount will be deposited
     * to this address
     * @example "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
     */
    recipientAddress?: Address;
    /**
     * custom gas limit can be added to override the default 50_000 gas limit
     */
    gasLimit?: bigint;
} & OneOf<{
    /**
     * Whether to use max available funds from the EOA wallet to be pulled into SCA after fee deduction.
     * default is false
     */
    useMaxAvailableFunds: true;
} | {
    /**
     * A custom amount to approve as the trigger
     * @example 1000000n // 1 USDC (6 decimals)
     */
    approvalAmount?: bigint;
    /**
     * The amount of the token to use, in the token's smallest unit.
     * @example 1000000n // 1 USDC (6 decimals)
     */
    amount: bigint;
}>;
export type Trigger = OneOf<TokenTrigger | CustomTrigger>;
/**
 * Parameters for signing a permit quote
 */
export type SignPermitQuoteParams = {
    /**
     * The quote to sign
     * @see {@link GetPermitQuotePayload}
     */
    fusionQuote: GetPermitQuotePayload;
    /**
     * Optional companion smart account to execute the superTxn
     * If not provided, uses the client's default account
     */
    companionAccount?: MultichainSmartAccount;
};
/**
 * Response payload containing the signed permit quote
 */
export type SignPermitQuotePayload = GetQuotePayload & {
    /**
     * The signature of the quote, prefixed with '0x177eee02' and concatenated with
     * the encoded permit parameters and signature components
     */
    signature: Hex;
};
/**
 * Prepares the payload required for signing a permit quote.
 * This function validates the trigger, fetches necessary token data (nonce, name, version, domain separator),
 * and constructs the EIP-712 signable payload for an ERC20 permit signature.
 * The returned object contains the signable payload and metadata required for formatting the final signed quote.
 *
 * @param quoteParams - The permit quote parameters, including the quote and trigger
 * @param owner - The address of the token owner (signer)
 * @param spender - The address that will be approved to spend the tokens
 * @param publicClient - The public or wallet client to interact with the token contract
 * @returns Promise resolving to an object containing the signable payload and metadata
 *
 * @example
 * ```typescript
 * const { signablePayload, metadata } = await prepareSignablePermitQuotePayload(
 *   fusionQuote,
 *   ownerAddress,
 *   spenderAddress,
 *   publicClient
 * );
 * // signablePayload: EIP-712 structured data for permit
 * // metadata: { nonce, name, version, domainSeparator, owner, spender, amount }
 * ```
 */
export declare const prepareSignablePermitQuotePayload: (quoteParams: GetPermitQuotePayload, owner: Address, spender: Address, publicClient: PublicClient | WalletClient) => Promise<SignablePermitQuotePayload>;
/**
 * Formats the signed permit quote payload by encoding the signature and permit parameters,
 * and attaching the result to the original quote. The signature is prefixed and concatenated
 * as required by the MEE service for permit quotes.
 * Metadata is used to provide the necessary context for encoding.
 *
 * @param quoteParams - The original permit quote parameters
 * @param metadata - Metadata returned from prepareSignablePermitQuotePayload
 * @param signature - The EIP-712 signature to attach to the quote
 * @returns The signed permit quote payload with the signature field
 *
 * @example
 * ```typescript
 * const signedPermitQuote = formatSignedPermitQuotePayload(
 *   fusionQuote,
 *   metadata,
 *   signature
 * );
 * // signedPermitQuote: { ...quote, signature: '0x177eee02<encodedPermitSignature>' }
 * ```
 */
export declare const formatSignedPermitQuotePayload: (quoteParams: GetPermitQuotePayload, metadata: PermitMetadata, signature: Hex) => SignPermitQuotePayload;
/**
 * Signs a permit quote using EIP-2612 permit signatures. This enables gasless
 * approvals for ERC20 tokens that implement the permit extension.
 *
 * @param client - The Mee client instance
 * @param parameters - Parameters for signing the permit quote
 * @param parameters.fusionQuote - The permit quote to sign
 * @param [parameters.account] - Optional account to use for signing
 *
 * @returns Promise resolving to the quote payload with permit signature
 *
 * @example
 * ```typescript
 * const signedPermitQuote = await signPermitQuote(meeClient, {
 *   fusionQuote: {
 *     quote: quotePayload,
 *     trigger: {
 *       tokenAddress: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
 *       chainId: 1,
 *       amount: 1000000n // 1 USDC
 *     }
 *   },
 *   account: smartAccount // Optional
 * });
 * ```
 */
export declare const signPermitQuote: (client: BaseMeeClient, parameters: SignPermitQuoteParams) => Promise<SignPermitQuotePayload>;
export default signPermitQuote;
//# sourceMappingURL=signPermitQuote.d.ts.map