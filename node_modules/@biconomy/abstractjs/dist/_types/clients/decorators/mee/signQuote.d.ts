import { type Hex } from "viem";
import type { MultichainSmartAccount } from "../../../account/toMultiChainNexusAccount";
import type { BaseMeeClient } from "../../createMeeClient";
import type { AnyData } from "../../../modules";
import type { GetQuotePayload } from "./getQuote";
/**
 * Parameters required for signing a quote from the MEE service
 */
export type SignQuoteParams = {
    /**
     * The quote payload to be signed
     * @see {@link GetQuotePayload}
     */
    quote: GetQuotePayload;
    /**
     * Optional smart account to execute the transaction
     * If not provided, uses the client's default account
     */
    account?: MultichainSmartAccount;
};
/**
 * Response payload containing the signed quote data
 */
export type SignQuotePayload = GetQuotePayload & {
    /**
     * The signature of the quote
     * Prefixed with '0x00' and concatenated with the signed message
     */
    signature: Hex;
};
/**
 * Prepares the payload required for signing a quote.
 * This function extracts the hash from the quote and formats it as a signable message.
 * The returned object contains the signable payload and optional metadata (currently empty, but can be extended).
 *
 * @param quote - The quote payload to be signed
 * @returns An object containing the signable payload and metadata
 *
 * @example
 * ```typescript
 * const { signablePayload, metadata } = prepareSignableQuotePayload(quotePayload);
 * // signablePayload: { message: { raw: quotePayload.hash } }
 * // metadata: {}
 * ```
 */
export declare const prepareSignableQuotePayload: (quote: GetQuotePayload) => {
    signablePayload: {
        message: {
            raw: `0x${string}`;
        };
    };
    metadata: {};
};
/**
 * Formats the signed quote payload by attaching the signature to the original quote.
 * The signature is prefixed and concatenated as required by the MEE service.
 * Metadata is currently unused but reserved for future extensibility.
 *
 * @param quote - The original quote payload
 * @param _metadata - Optional metadata (currently unused)
 * @param signature - The signature to attach to the quote
 * @returns The signed quote payload with the signature field
 *
 * @example
 * ```typescript
 * const signedQuote = formatSignedQuotePayload(quotePayload, {}, signature);
 * // signedQuote: { ...quotePayload, signature: '0x177eee00<signature>' }
 * ```
 */
export declare const formatSignedQuotePayload: (quote: GetQuotePayload, _metadata: Record<string, AnyData>, // This is unused for now. But can be extended in future
signature: Hex) => SignQuotePayload;
/**
 * Signs a quote using the provided account's signer or the client's default account.
 * The signature is required for executing the quote through the MEE service.
 *
 * @param client - The Mee client instance
 * @param params - Parameters for signing the quote
 * @param params.quote - The quote to sign
 * @param [params.account] - Optional account to use for signing
 *
 * @returns Promise resolving to the quote payload with added signature
 *
 * @example
 * ```typescript
 * const signedQuote = await signQuote(meeClient, {
 *   quote: quotePayload,
 *   account: smartAccount // Optional
 * });
 * ```
 */
export declare const signQuote: (client: BaseMeeClient, params: SignQuoteParams) => Promise<SignQuotePayload>;
export default signQuote;
//# sourceMappingURL=signQuote.d.ts.map