import { type Address, type Hex } from "viem";
import type { MEEVersionConfig } from "../../../account";
import type { MultichainSmartAccount } from "../../../account/toMultiChainNexusAccount";
import type { AnyData } from "../../../modules";
import type { BaseMeeClient } from "../../createMeeClient";
import type { GetOnChainQuotePayload } from "./getOnChainQuote";
import type { GetQuotePayload } from "./getQuote";
export declare const FUSION_NATIVE_TRANSFER_PREFIX = "0x150b7a02";
export type SignOnChainQuotePayload = GetQuotePayload & {
    /** The signature of the quote */
    signature: Hex;
};
export type SignOnChainQuoteParams = {
    /** The quote to sign */
    fusionQuote: GetOnChainQuotePayload;
    /** Optional companion smart account to execute the superTxn. If not provided, uses the client's default account */
    companionAccount?: MultichainSmartAccount;
    /** The number of confirmations to wait for. Defaults to 2 */
    confirmations?: number;
};
export declare const ON_CHAIN_PREFIX = "0x177eee01";
/**
 * Prepares the executable payload required for sending an on-chain quote transaction.
 * This function generates the appropriate call data for the trigger (either native or ERC20),
 * appends the quote hash to the call data, and returns the payload ready for execution.
 * The returned object contains the executable payload and optional metadata (currently empty, but can be extended).
 *
 * @param quoteParams - The on-chain quote parameters, including the quote and trigger
 * @param spender - The address that will be used as the spender (for token approvals)
 * @param recipient - The address that will receive the funds (for native transfers)
 * @returns An object containing the executable payload and metadata
 *
 * @example
 * ```typescript
 * const { executablePayload, metadata } = await prepareExecutableOnChainQuotePayload(
 *   fusionQuote,
 *   spenderAddress,
 *   recipientAddress
 * );
 * // executablePayload: { to, data, value } (ready for sendTransaction)
 * // metadata: {}
 * ```
 */
export declare const prepareExecutableOnChainQuotePayload: (quoteParams: GetOnChainQuotePayload, spender: Address, recipient: Address, version: MEEVersionConfig) => Promise<{
    executablePayload: {
        data: `0x${string}`;
        to: Address;
        gasLimit?: bigint;
        value: bigint;
    } | {
        data: `0x${string}`;
        to: Address;
        gasLimit?: bigint;
        value?: bigint | undefined;
    } | {
        data: `0x${string}`;
        to: Address;
        gasLimit?: bigint;
        value: bigint;
    };
    metadata: {};
}>;
/**
 * Formats the signed on-chain quote payload by attaching the transaction hash and chainId,
 * and encoding them as required by the MEE service for on-chain quotes.
 * Metadata is currently unused but reserved for future extensibility.
 *
 * @param quoteParams - The original on-chain quote parameters
 * @param _metadata - Optional metadata (currently unused)
 * @param hash - The transaction hash to attach to the quote
 * @returns The signed on-chain quote payload with the signature field
 *
 * @example
 * ```typescript
 * const signedOnChainQuote = formatSignedOnChainQuotePayload(
 *   fusionQuote,
 *   {},
 *   txHash
 * );
 * // signedOnChainQuote: { ...quote, signature: '0x177eee01<encodedHashAndChainId>' }
 * ```
 */
export declare const formatSignedOnChainQuotePayload: (quoteParams: GetOnChainQuotePayload, _metadata: Record<string, AnyData>, // This is unused for now. But can be extended in future
hash: Hex) => SignOnChainQuotePayload;
/**
 * Signs a fusion quote with a tx send client side.
 *
 * @param client - The Mee client to use
 * @param params - The parameters for the fusion quote
 * @returns The signed quote
 * @example
 * const signedQuote = await signOnChainQuote(meeClient, {
 *   quote: quotePayload,
 *   account: smartAccount
 * })
 */
export declare const signOnChainQuote: (client: BaseMeeClient, params: SignOnChainQuoteParams) => Promise<SignOnChainQuotePayload>;
export default signOnChainQuote;
//# sourceMappingURL=signOnChainQuote.d.ts.map