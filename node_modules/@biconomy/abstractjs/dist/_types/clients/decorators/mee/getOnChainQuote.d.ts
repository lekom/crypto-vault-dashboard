import type { BaseMeeClient } from "../../createMeeClient";
import type { GetQuoteParams } from "./getQuote";
import { type GetQuotePayload } from "./getQuote";
import type { Trigger } from "./signPermitQuote";
/**
 * Payload returned when requesting an on-chain quote.
 * Includes both the standard quote payload and trigger information.
 */
export type GetOnChainQuotePayload = {
    quote: GetQuotePayload;
} & {
    /**
     * Trigger information containing payment token details and amount
     * @see {@link Trigger}
     */
    trigger: Trigger;
};
/**
 * Parameters for requesting an on-chain quote
 */
export type GetOnChainQuoteParams = GetQuoteParams & {
    /**
     * Trigger information for the transaction
     * @see {@link Trigger}
     */
    trigger: Trigger;
    /** For fusion mode, batching will be always true by default */
    batch?: boolean;
    feePayer?: undefined;
};
/**
 * Gets a quote for an on-chain transaction from the MEE service.
 * This method is used when the payment token doesn't support ERC20Permit
 * or when a standard on-chain transaction is preferred.
 *
 * @param client - The base MEE client instance
 * @param parameters - Parameters for the quote request
 * @param parameters.trigger - Payment token and amount information
 * @param parameters.instructions - Array of transaction instructions to execute
 * @param [parameters.account] - Optional account to use (defaults to client.account)
 *
 * @returns Promise resolving to quote payload with trigger information
 *
 * @example
 * ```typescript
 * const quote = await getOnChainQuote(meeClient, {
 *   instructions: [
 *     mcNexus.build({
 *       type: "default",
 *       data: {
 *         calls: [
 *           {
 *             to: "0x0000000000000000000000000000000000000000",
 *             gasLimit: 50000n,
 *             value: 0n
 *           }
 *         ],
 *         chainId: base.id
 *       }
 *     })
 *   ],
 *   trigger: {
 *     tokenAddress: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48", // USDC
 *     amount: "1000000" // 1 USDC (6 decimals)
 *   }
 * });
 * ```
 *
 * @throws Will throw an error if the token does not support ERC20Permit
 */
export declare const getOnChainQuote: (client: BaseMeeClient, parameters: GetOnChainQuoteParams) => Promise<GetOnChainQuotePayload>;
export default getOnChainQuote;
//# sourceMappingURL=getOnChainQuote.d.ts.map