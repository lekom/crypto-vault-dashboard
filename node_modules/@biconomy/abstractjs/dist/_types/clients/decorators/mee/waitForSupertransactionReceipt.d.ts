import type { BaseMeeClient } from "../../createMeeClient";
import { type GetSupertransactionReceiptParams, type GetSupertransactionReceiptPayloadWithReceipts } from "./getSupertransactionReceipt";
export declare const DEFAULT_POLLING_INTERVAL = 1000;
/**
 * Parameters for waiting for a supertransaction receipt
 */
export type WaitForSupertransactionReceiptParams = GetSupertransactionReceiptParams;
/**
 * Response payload containing the supertransaction receipt details
 * This always includes receipts since we're waiting for them
 */
export type WaitForSupertransactionReceiptPayload = GetSupertransactionReceiptPayloadWithReceipts;
/**
 * Waits for a supertransaction receipt to be available. This function polls the MEE service
 * until the transaction is confirmed across all involved chains.
 *
 * @param client - The Mee client instance
 * @param params - Parameters for retrieving the receipt
 * @param params.hash - The supertransaction hash to wait for
 *
 * @returns Promise resolving to the supertransaction receipt with blockchain receipts
 *
 * @example
 * ```typescript
 * const receipt = await waitForSupertransactionReceipt(meeClient, {
 *   hash: "0x123..."
 * });
 * // Returns:
 * // {
 * //   hash: "0x123...",
 * //   status: "success",
 * //   receipts: [{
 * //     chainId: "1",
 * //     hash: "0x456..."
 * //   }]
 * // }
 * ```
 *
 * @throws Will throw an error if:
 * - The transaction fails on any chain
 * - The polling times out
 * - The transaction hash is invalid
 */
export declare const waitForSupertransactionReceipt: (client: BaseMeeClient, parameters: WaitForSupertransactionReceiptParams) => Promise<WaitForSupertransactionReceiptPayload>;
export default waitForSupertransactionReceipt;
//# sourceMappingURL=waitForSupertransactionReceipt.d.ts.map