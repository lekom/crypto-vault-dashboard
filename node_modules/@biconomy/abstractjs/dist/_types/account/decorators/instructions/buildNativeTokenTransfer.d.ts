/**
 * Builds an instruction for transferring native tokens (e.g., ETH) from a smart contract account (SCA)
 * to a recipient address. This function supports both static and runtime-composable parameters,
 *
 * If any of the parameters (`to` or `value`) are runtime-composable, or if `forceComposableEncoding`
 * is set, the instruction will be encoded as a composable call using runtime encoding.
 * Otherwise, a standard instruction is created.
 *
 * @module buildNativeTokenTransfer
 */
import { type Address } from "viem";
import type { Instruction } from "../../../clients/decorators/mee";
import type { InstructionMetadata } from "../../../clients/decorators/mee/types/instruction-metadata.type";
import { type RuntimeValue } from "../../../modules";
import type { BaseInstructionsParams, ComposabilityParams } from "../build";
/**
 * Parameters for building a native token transfer instruction.
 *
 * @property to - The recipient address or a runtime value (for composable calls)
 * @property gasLimit - Optional gas limit for the transfer
 * @property value - Amount of native token to transfer (in wei or as a runtime value)
 * @property chainId - The chain ID where the transfer will be executed
 * @property metadata - Optional custom metadata override for the instruction
 */
export type BuildNativeTokenTransferParameters = {
    to: Address | RuntimeValue;
    gasLimit?: bigint;
    value: bigint | RuntimeValue;
    chainId: number;
    metadata?: InstructionMetadata[];
};
/**
 * Builds an instruction for transferring native tokens (e.g., ETH) from the account to a recipient.
 *
 * @param baseParams - Base configuration for the instruction (account address, current instructions)
 * @param parameters - Parameters for the native token transfer
 * @param composabilityParams - Optional composability configuration (version, force encoding, etc.)
 * @returns Promise resolving to an array of {@link Instruction}
 *
 * @example
 * // Static transfer
 * const instructions = await buildNativeTokenTransfer(
 *   { accountAddress: myAccount.address },
 *   { to: recipient, value: 1_000_000_000_000_000_000n, chainId: 1 }
 * )
 *
 * @example
 * // Composable transfer with runtime value
 * const instructions = await buildNativeTokenTransfer(
 *   { accountAddress: myAccount.address },
 *   { to: { isRuntime: true, ... }, value: { isRuntime: true, ... }, chainId: 1 },
 *   { composabilityVersion: 2 }
 * )
 */
export declare const buildNativeTokenTransfer: (baseParams: BaseInstructionsParams, parameters: BuildNativeTokenTransferParameters, composabilityParams?: ComposabilityParams) => Promise<Instruction[]>;
export default buildNativeTokenTransfer;
//# sourceMappingURL=buildNativeTokenTransfer.d.ts.map