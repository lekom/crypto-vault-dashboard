import type { Instruction, InstructionLike } from "../../../clients/decorators/mee";
import type { BaseInstructionsParams } from "../build";
/**
 * Parameters for building a transfer instruction
 */
export type BuildBatchParameters = {
    instructions: InstructionLike[];
};
/**
 * Parameters for the buildBatch function
 */
export type BuildBatchParams = BaseInstructionsParams & {
    /**
     * Parameters specific to the transfer instruction
     * @see {@link BuildBatchParameters}
     */
    parameters: BuildBatchParameters;
};
/**
 * Builds a batch of instructions for a single userOp to be included in a supertransaction
 * UserOps must be on the same chain for the batch to be valid
 * If a composable call is passed to this method, this call should already be built via
 * one of the buildComposable methods.
 * @param baseParams - Base parameters for the instruction
 * @param parameters - Parameters for the batch instruction
 * @param parameters.instructions - Instructions to be executed in the batch
 * @returns The built instruction
 *
 * @example
 * ```typescript
 * const instructions = await buildBatch(
 *   { accountAddress: '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' },
 *   { instructions: [buildApprove, buildSwap] }
 * )
 * ```
 */
export declare const buildBatch: (baseParams: BaseInstructionsParams, parameters: BuildBatchParameters) => Promise<Instruction[]>;
export default buildBatch;
//# sourceMappingURL=buildBatch.d.ts.map