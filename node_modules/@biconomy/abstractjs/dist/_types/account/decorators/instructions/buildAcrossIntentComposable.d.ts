import { type Address, type Hex } from "viem";
import type { Instruction } from "../../../clients/decorators/mee";
import type { InstructionMetadata } from "../../../clients/decorators/mee/types/instruction-metadata.type";
import { type RuntimeBalanceOfParams } from "../../../modules/utils/composabilityCalls";
import type { BaseInstructionsParams, ComposabilityParams } from "../build";
/**
 * Parameters for building a raw composable instruction
 */
export type BuildAcrossIntentComposableParams = {
    depositor: Address;
    recipient: Address;
    inputToken: Address;
    outputToken: Address;
    inputAmountRuntimeParams: RuntimeBalanceOfParams;
    approximateExpectedInputAmount: bigint;
    originChainId: number;
    destinationChainId: number;
    message?: Hex;
    relayerAddress?: Address;
    pool?: Address;
    gasLimit?: bigint;
    fees?: SuggestedFeesReturnType;
    metadata?: InstructionMetadata[];
};
/**
 * Builds an instruction for across
 */
export declare const buildAcrossIntentComposable: (baseParams: BaseInstructionsParams, parameters: BuildAcrossIntentComposableParams, composabilityParams: ComposabilityParams) => Promise<Instruction[]>;
export default buildAcrossIntentComposable;
/**
 * -------------------------------------------------------------
 *  Across Protocol Quote Service â€” typed with viem
 * -------------------------------------------------------------
 */
export type SuggestedFeesParameters = {
    inputToken: Address;
    outputToken: Address;
    originChainId: number;
    destinationChainId: number;
    amount: bigint;
    depositor?: Address;
    recipient?: Address;
    message?: Hex;
    relayerAddress?: Address;
    referrer?: Address;
};
export type Fee = {
    pct: bigint;
    total: bigint;
};
export type Limits = {
    minDeposit: bigint;
    maxDeposit: bigint;
    maxDepositInstant: bigint;
    maxDepositShortDelay: bigint;
    recommendedDepositInstant: bigint;
};
export type SuggestedFeesReturnType = {
    totalRelayFee: Fee;
    relayerCapitalFee: Fee;
    relayerGasFee: Fee;
    lpFee: Fee;
    timestamp: bigint;
    isAmountTooLow: boolean;
    quoteBlock: bigint;
    spokePoolAddress: Address;
    fillDeadline: bigint;
    limits: Limits;
};
export type GetSuggestedFeesErrorType = Error;
export type AcrossFeesApiResponse = {
    totalRelayFee: {
        pct: string;
        total: string;
    };
    relayerCapitalFee: {
        pct: string;
        total: string;
    };
    relayerGasFee: {
        pct: string;
        total: string;
    };
    lpFee: {
        pct: string;
        total: string;
    };
    timestamp: string;
    isAmountTooLow: boolean;
    quoteBlock: string;
    spokePoolAddress: string;
    expectedFillTimeSec: string;
    fillDeadline: string;
    limits: {
        minDeposit: string;
        maxDeposit: string;
        maxDepositInstant: string;
        maxDepositShortDelay: string;
        recommendedDepositInstant: string;
    };
};
/**
 * Gets suggested fees for Across Protocol bridge transfer
 *
 * @example
 * const fees = await getAcrossSuggestedFees({
 *   inputToken: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
 *   outputToken: '0x4200000000000000000000000000000000000006',
 *   originChainId: 1,
 *   destinationChainId: 10,
 *   amount: parseEther('1')
 * })
 */
export declare function getAcrossSuggestedFees(parameters: SuggestedFeesParameters): Promise<SuggestedFeesReturnType>;
/**
 * Calculates total fees from suggested fees response
 *
 * @example
 * const result = calculateAcrossFees({
 *   fees,
 *   amount: parseEther('1')
 * })
 *
 * console.log(result.totalFees) // 0.005n (example)
 * console.log(result.outputAmount) // 0.995n (example)
 */
export type CalculateAcrossFeesParameters = {
    fees: SuggestedFeesReturnType;
    amount: bigint;
};
export type CalculateAcrossFeesReturnType = {
    totalFees: bigint;
    relayerFees: bigint;
    lpFees: bigint;
    outputAmount: bigint;
};
export declare function calculateAcrossFees(parameters: CalculateAcrossFeesParameters): CalculateAcrossFeesReturnType;
/**
 * Formats Across fee percentage to human readable format
 *
 * @example
 * formatAcrossFeePercentage(376607094864283n) // "0.0376607094864283"
 */
export declare function formatAcrossFeePercentage(pct: bigint): string;
//# sourceMappingURL=buildAcrossIntentComposable.d.ts.map