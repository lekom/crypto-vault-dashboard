import type { OneOf } from "viem";
import type { Instruction } from "../../../clients/decorators/mee";
import type { Call } from "../../utils/Types";
import type { BaseInstructionsParams } from "../build";
import type { BaseMultichainSmartAccount } from "../..";
import type { InstructionMetadata } from "../../../clients/decorators/mee/types/instruction-metadata.type";
import type { AnyData, ModularSmartAccount } from "../../../modules/utils/Types";
export declare const GLOBAL_COMPOSABLE_CALLS: {
    readonly toDisableActionPoliciesCalls: (_: ModularSmartAccount, parameters: {
        permissionId: import("viem").Hex;
        actionId: import("viem").Hex;
        policies: import("viem").Address[];
    }) => Promise<Call[]>;
    readonly toDisableERC1271PoliciesCalls: (_: ModularSmartAccount, parameters: {
        permissionId: import("viem").Hex;
        policies: import("viem").Address[];
        contents: import("@rhinestone/module-sdk").ERC7739Context[];
    }) => Promise<Call[]>;
    readonly toDisableUserOpPoliciesCalls: (_: ModularSmartAccount, parameters: {
        permissionId: import("viem").Hex;
        userOpPolicies: import("viem").Address[];
    }) => Promise<Call[]>;
    readonly toEnableActionPoliciesCalls: (_: ModularSmartAccount, parameters: {
        permissionId: import("viem").Hex;
        actionPolicies: import("@rhinestone/module-sdk").ActionData[];
    }) => Promise<Call[]>;
    readonly toEnableERC1271PoliciesCalls: (_: ModularSmartAccount, parameters: {
        permissionId: import("viem").Hex;
        erc1271Policies: import("@rhinestone/module-sdk").ERC7739Data;
    }) => Promise<Call[]>;
    readonly toEnableUserOpPoliciesCalls: (_: ModularSmartAccount, parameters: {
        permissionId: import("viem").Hex;
        userOpPolicies: import("@rhinestone/module-sdk").PolicyData[];
    }) => Promise<Call[]>;
    readonly toRemoveSessionCalls: (_: ModularSmartAccount, parameters: {
        permissionId: import("viem").Hex;
    }) => Promise<Call[]>;
    readonly toEnableSessionsCalls: (_: ModularSmartAccount, parameters: {
        sessions: import("@rhinestone/module-sdk").Session[];
    }) => Promise<Call[]>;
    readonly toAddOwnerCalls: (account: ModularSmartAccount, parameters: import("../../../modules/validators/ownable/decorators/getAddOwnerTx").GetAddOwnerTxParameters<ModularSmartAccount | undefined>) => Promise<Call[]>;
    readonly toSetThresholdCalls: (account: ModularSmartAccount, parameters: import("../../../modules/validators/ownable/decorators/getSetThresholdTx").GetSetThresholdTxParameters<ModularSmartAccount | undefined>) => Promise<Call[]>;
    readonly toRemoveOwnerCalls: (account: ModularSmartAccount, parameters: import("../../../modules/validators/ownable/decorators/getRemoveOwnerTx").GetRemoveOwnerTxParameters<ModularSmartAccount | undefined>) => Promise<Call[]>;
    readonly toInstallModuleCalls: (account: ModularSmartAccount, { address, initData, type }: import("../../../modules").ModuleMeta) => Promise<Call[]>;
    readonly toUninstallModuleCalls: (account: ModularSmartAccount, { address, deInitData, type }: import("../../../modules").ModuleMeta) => Promise<Call[]>;
    readonly toInstallWithSafeSenderCalls: (account: ModularSmartAccount, { address, initData, type }: import("../../../modules").ModuleMeta) => Promise<Call[]>;
    readonly toSafeSenderCalls: (smartAccount: ModularSmartAccount, { address }: import("../../../modules").ModuleMeta) => Promise<Call[]>;
    readonly toUninstallFallbackCalls: (account: ModularSmartAccount, { address, initData, type }: import("../../../modules").ModuleMeta) => Promise<Call[]>;
};
export type SupportedCall = keyof typeof GLOBAL_COMPOSABLE_CALLS;
type ArgumentTypes<F extends Function> = F extends (account: ModularSmartAccount, args: infer A) => AnyData ? A : never;
export type BuildMultichainInstructionsParameters = {
    account: BaseMultichainSmartAccount;
} & OneOf<{
    calls: Call[];
    metadata?: InstructionMetadata[];
} | {
    type: SupportedCall;
    parameters: ArgumentTypes<(typeof GLOBAL_COMPOSABLE_CALLS)[SupportedCall]>;
    metadata?: InstructionMetadata[];
}>;
export declare const buildMultichainInstructions: (baseParams: BaseInstructionsParams, parameters: BuildMultichainInstructionsParameters) => Promise<Instruction[]>;
export default buildMultichainInstructions;
//# sourceMappingURL=buildMultichainInstructions.d.ts.map