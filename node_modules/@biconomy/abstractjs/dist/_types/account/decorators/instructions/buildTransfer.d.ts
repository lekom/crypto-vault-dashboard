import { type Address } from "viem";
import type { Instruction } from "../../../clients/decorators/mee";
import type { InstructionMetadata } from "../../../clients/decorators/mee/types/instruction-metadata.type";
import type { BaseInstructionsParams, ComposabilityParams, TokenParams } from "../build";
/**
 * Parameters for building a transfer instruction
 */
export type BuildTransferParameters = TokenParams & {
    /**
     * Gas limit for the transfer transaction. Required when using the standard
     * transfer function instead of permit.
     * @example 65000n
     */
    gasLimit?: bigint;
    /**
     * Recipient address.
     * @example "0x742d35Cc6634C0532925a3b844Bc454e4438f44e"
     */
    recipient: Address;
    /** Custom metadata override for instruction */
    metadata?: InstructionMetadata[];
};
/**
 * Parameters for the buildTransfer function
 */
export type BuildTransferParams = BaseInstructionsParams & {
    /**
     * Parameters specific to the transfer instruction
     * @see {@link BuildTransferParameters}
     */
    parameters: BuildTransferParameters;
};
/**
 * Builds an instruction for transferring tokens. This function creates the necessary
 * instruction for a standard ERC20 transfer.
 *
 * @param baseParams - Base configuration for the instruction
 * @param baseParams.account - The account that will execute the transfer
 * @param baseParams.currentInstructions - Optional array of existing instructions to append to
 * @param parameters - Parameters for the transfer
 * @param parameters.chainId - Chain ID where the transfer will be executed
 * @param parameters.tokenAddress - Address of the token to transfer
 * @param parameters.amount - Amount to transfer
 * @param [parameters.gasLimit] - Optional gas limit for the transfer
 * @param [parameters.recipient] - Optional recipient address
 *
 * @returns Promise resolving to array of instructions
 *
 * @example
 * ```typescript
 * const instructions = await buildTransfer(
 *   { accountAddress: '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' },
 *   {
 *     chainId: 1,
 *     tokenAddress: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48", // USDC
 *     amount: 1000000n, // 1 USDC
 *     gasLimit: 65000n,
 *     recipient: "0x742d35Cc6634C0532925a3b844Bc454e4438f44e"
 *   }
 * );
 * ```
 */
export declare const buildTransfer: (baseParams: BaseInstructionsParams, parameters: BuildTransferParameters, composabilityParams?: ComposabilityParams) => Promise<Instruction[]>;
export default buildTransfer;
//# sourceMappingURL=buildTransfer.d.ts.map