import type { BaseMultichainSmartAccount } from "..";
import type { AnyData, ModularSmartAccount } from "../../modules/utils/Types";
import { GLOBAL_COMPOSABLE_READS, type SupportedRead } from "../utils/composableReads";
type ArgumentTypes<F extends Function> = F extends (account: ModularSmartAccount, args: infer A) => AnyData ? A : never;
/**
 * Parameters for performing a multichain read operation.
 * @property type - The type of supported read operation to perform.
 * @property parameters - The arguments required for the selected read type.
 */
export type MultichainReadParameters = {
    type: SupportedRead;
    parameters: ArgumentTypes<(typeof GLOBAL_COMPOSABLE_READS)[SupportedRead]>;
};
/**
 * The payload type returned from a multichain read operation.
 */
export type MultiChainReadPayload<T> = T;
/**
 * Executes a read operation across all deployments in a BaseMultichainSmartAccount.
 *
 * @param account - The multichain smart account containing deployments to read from.
 * @param parameters - {@link MultichainReadParameters} specifying the read type and its parameters.
 * @returns Promise resolving to an array of read payloads, one for each deployment.
 */
export declare const multichainRead: <T>(account: BaseMultichainSmartAccount, parameters: MultichainReadParameters) => Promise<MultiChainReadPayload<T>[]>;
export default multichainRead;
//# sourceMappingURL=multichainRead.d.ts.map