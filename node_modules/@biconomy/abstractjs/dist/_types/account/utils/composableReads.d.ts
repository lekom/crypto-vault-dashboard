export declare const GLOBAL_COMPOSABLE_READS: {
    readonly toGetOwnersReads: typeof import("../../modules/validators/ownable/decorators").getOwners;
    readonly toGetThresholdReads: typeof import("../../modules/validators/ownable/decorators").getThreshold;
    readonly toIsModuleInstalledReads: (account: import("../..").ModularSmartAccount, { address, initData, type }: import("../..").ModuleMeta) => Promise<import("viem").ReadContractParameters<readonly [{
        readonly name: "isModuleInstalled";
        readonly type: "function";
        readonly stateMutability: "view";
        readonly inputs: readonly [{
            readonly type: "uint256";
            readonly name: "moduleTypeId";
        }, {
            readonly type: "address";
            readonly name: "module";
        }, {
            readonly type: "bytes";
            readonly name: "additionalContext";
        }];
        readonly outputs: readonly [{
            readonly type: "bool";
        }];
    }], "isModuleInstalled", [bigint, `0x${string}`, import("viem").Hex]>[]>;
    readonly toGetActiveHookReads: (account: import("../..").ModularSmartAccount) => Promise<import("viem").ReadContractParameters<{
        inputs: never[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    }[], "getActiveHook", []>[]>;
    readonly toGetFallbackBySelectorReads: (account: import("../..").ModularSmartAccount, selector: import("viem").Hex) => Promise<import("viem").ReadContractParameters<{
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    }[], "getFallbackHandlerBySelector", [import("viem").Hex]>[]>;
    readonly toGetInstalledExecutorsReads: (account: import("../..").ModularSmartAccount, { pageSize, cursor }: import("../../clients/decorators/erc7579").GetInstalledExecutorsParameters<import("../..").ModularSmartAccount>) => Promise<import("viem").ReadContractParameters<readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "cursor";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly name: "getExecutorsPaginated";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "array";
            readonly type: "address[]";
        }, {
            readonly internalType: "address";
            readonly name: "next";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }], "getExecutorsPaginated", [import("viem").Hex, bigint]>[]>;
    readonly toGetInstalledValidatorsReads: (account: import("../..").ModularSmartAccount, { pageSize, cursor }: import("../../clients/decorators/erc7579").GetInstalledValidatorsParameters<import("../..").ModularSmartAccount>) => Promise<import("viem").ReadContractParameters<readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "cursor";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly name: "getValidatorsPaginated";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "array";
            readonly type: "address[]";
        }, {
            readonly internalType: "address";
            readonly name: "next";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }], "getValidatorsPaginated", [import("viem").Hex, bigint]>[]>;
    readonly toSupportsExecutionModeReads: (account: import("../..").ModularSmartAccount, { type, revertOnError, selector, data }: import("../../clients/decorators/erc7579").ExecutionMode<import("../../clients/decorators/erc7579").CallType>) => Promise<import("viem").ReadContractParameters<readonly [{
        readonly name: "supportsExecutionMode";
        readonly type: "function";
        readonly stateMutability: "view";
        readonly inputs: readonly [{
            readonly type: "bytes32";
            readonly name: "encodedMode";
        }];
        readonly outputs: readonly [{
            readonly type: "bool";
        }];
    }], "supportsExecutionMode", [import("viem").Hex]>[]>;
    readonly toSupportsModuleReads: <TSmartAccount extends import("viem/_types/account-abstraction").SmartAccount | undefined>(account: import("../..").ModularSmartAccount, { type }: import("../../clients/decorators/erc7579").SupportsModuleParameters<TSmartAccount>) => Promise<import("viem").ReadContractParameters<readonly [{
        readonly name: "supportsModule";
        readonly type: "function";
        readonly stateMutability: "view";
        readonly inputs: readonly [{
            readonly type: "uint256";
            readonly name: "moduleTypeId";
        }];
        readonly outputs: readonly [{
            readonly type: "bool";
        }];
    }], "supportsModule", [bigint]>[]>;
};
export type SupportedRead = keyof typeof GLOBAL_COMPOSABLE_READS;
//# sourceMappingURL=composableReads.d.ts.map