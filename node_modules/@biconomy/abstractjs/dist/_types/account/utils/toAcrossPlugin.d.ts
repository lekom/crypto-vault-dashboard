import { type Address } from "abitype";
import type { BridgingPlugin, BridgingPluginResult, BridgingUserOpParams } from "../decorators/buildBridgeInstructions";
/**
 * Response type for Across bridge relay fee information
 * @interface AcrossRelayFeeResponse
 */
export interface AcrossRelayFeeResponse {
    totalRelayFee: {
        pct: string;
        total: string;
    };
    relayerCapitalFee: {
        pct: string;
        total: string;
    };
    relayerGasFee: {
        pct: string;
        total: string;
    };
    lpFee: {
        pct: string;
        total: string;
    };
    timestamp: string;
    isAmountTooLow: boolean;
    quoteBlock: string;
    spokePoolAddress: Address;
    exclusiveRelayer: Address;
    exclusivityDeadline: string;
}
/**
 * Encodes a bridging operation for the Across protocol into a user operation
 * @param {BridgingUserOpParams} params - Parameters for the bridge operation
 * @param {bigint} params.bridgingAmount - Amount to bridge
 * @param {number} params.fromChainId - Source chain ID
 * @param {Address} params.depositor - Depositor address
 * @param {Address} params.recipient - Recipient address
 * @param {number} params.toChainId - Destination chain ID
 * @param {TokenMapping} params.tokenMapping - Token address mapping across chains
 * @returns {Promise<BridgingPluginResult>} Encoded user operation and bridging details
 * @throws {Error} When depositor or recipient address cannot be found
 */
export declare const acrossEncodeBridgingUserOp: (params: BridgingUserOpParams) => Promise<BridgingPluginResult>;
/**
 * Creates an Across bridging plugin instance
 * @returns {BridgingPlugin} Plugin instance implementing the Across bridge protocol
 *
 * @example
 * const acrossPlugin = toAcrossPlugin()
 * const bridgeResult = await acrossPlugin.encodeBridgeUserOp({
 *   bridgingAmount: 1000000n,
 *   fromChainId: 11155111,
 *   toChainId: 84532,
 *   depositor: "0x00000000000000000000000000000000000a11ce",
 *   recipient: "0x00000000000000000000000000000000000a11ce",
 *   tokenMapping: tokens
 * })
 */
export declare const toAcrossPlugin: () => BridgingPlugin;
//# sourceMappingURL=toAcrossPlugin.d.ts.map