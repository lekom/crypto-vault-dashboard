import { type Address, type Hex } from "viem";
import type { MEEVersionConfig } from "../account/utils/getVersion";
export * from "./abi";
export * from "./tokens";
export * from "./protocols";
/**
 * Supported MEE versions with descriptions.
 */
export declare enum MEEVersion {
    /**
     * Nexus 1.2.1
     * - Composability 1.1.0
     * - 7702 accounts initialization with eoa's signature (relayers' support)
     * - ...
     **/
    V2_2_0 = "2.2.0",
    /** New K1 Mee module introduced that allows ERC-7702-delegated EOAs owning Nexus accounts. */
    V2_1_0 = "2.1.0",
    /** Major release, featuring Nexus 1.2.0 with ERC-7702 support and native composability.
     * MEE K1 Validator is pre-installed as a default validator module.
     */
    V2_0_0 = "2.0.0",
    /** Nexus v1.0.2 release with New Account Factory and MEE K1 Validator v1.0.3
     * This is compiled for chains which only has evm Paris (No PUSH0, no MCOPY, no TSTORE)
     */
    V1_1_0 = "1.1.0",
    /** First release for the MEE contracts suite, based on Nexus 1.0.2
     * Requires installing MEE K1 validator and Composability module explicitly
     */
    V1_0_0 = "1.0.0"
}
export declare enum ComposabilityVersion {
    /** Added native token runtime injection support. */
    V1_1_0 = "1.1.0",
    /** First release for the Composability contracts suite. */
    V1_0_0 = "1.0.0"
}
/** Default version is 2.0.0.
 * Major release, featuring Nexus 1.2.0 with ERC-7702 support and native composability.
 * MEE K1 Validator is pre-installed as a default validator module.
 */
export declare const DEFAULT_MEE_VERSION: MEEVersion;
export declare const ENTRY_POINT_ADDRESS: Address;
export declare const ENTRYPOINT_SIMULATIONS_ADDRESS: Address;
export declare const DEFAULT_CONFIGURATIONS_BY_MEE_VERSION: Record<MEEVersion, MEEVersionConfig>;
export { SMART_SESSIONS_ADDRESS, OWNABLE_VALIDATOR_ADDRESS, OWNABLE_EXECUTOR_ADDRESS, RHINESTONE_ATTESTER_ADDRESS, REGISTRY_ADDRESS, type EnableSessionData, type ActionData, type PolicyData, type Session, SmartSessionMode, encodeSmartSessionSignature, getAddOwnableExecutorOwnerAction, getExecuteOnOwnedAccountAction, getAccount, getOwnableValidatorMockSignature, getOwnableValidatorThreshold, isModuleInstalled as isRhinestoneModuleInstalled, findTrustedAttesters, getTrustAttestersAction, getOwnableValidatorSignature, getAddOwnableValidatorOwnerAction, getOwnableValidatorOwners, getRemoveOwnableValidatorOwnerAction, getSetOwnableValidatorThresholdAction, decodeSmartSessionSignature, encodeValidationData, getEnableSessionDetails, getSmartSessionsValidator, getSudoPolicy, getSpendingLimitsPolicy, getUsageLimitPolicy, getValueLimitPolicy, getOwnableValidator, getUniversalActionPolicy } from "@rhinestone/module-sdk";
export declare const UNIVERSAL_ACTION_POLICY_ADDRESS: Hex;
export declare const TIME_FRAME_POLICY_ADDRESS: Hex;
export declare const VALUE_LIMIT_POLICY_ADDRESS: Hex;
export declare const USAGE_LIMIT_POLICY_ADDRESS: Hex;
export declare const SPENDING_LIMITS_POLICY_ADDRESS: Hex;
export declare const SUDO_POLICY_ADDRESS: Hex;
export declare const PERMIT_TYPEHASH = "0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9";
//# sourceMappingURL=index.d.ts.map