import { type Abi, type AbiParameter, type Hex } from "viem";
import type { AnyData } from "../../modules/utils/Types";
import { type InputParam, type OutputParam } from "./composabilityCalls";
export type FunctionContext = {
    inputs: readonly AbiParameter[];
    outputs: readonly AbiParameter[];
    name: string;
    functionType: "read" | "write";
    functionSig: string;
};
export type RuntimeValue = {
    isRuntime: boolean;
    inputParams: InputParam[];
    outputParams: OutputParam[];
};
type PreparedParam = {
    dynamic: boolean;
    data: (Hex | RuntimeValue)[];
};
export declare const encodeAddress: (value: Hex) => PreparedParam;
export declare const encodeRuntimeFunctionData: (inputs: AbiParameter[], args: Array<AnyData>) => (`0x${string}` | RuntimeValue)[];
export declare const getFunctionContextFromAbi: (functionSig: string, abi: Abi) => FunctionContext;
export declare const getRuntimeValueLength: (inputParams: InputParam[]) => number;
export {};
//# sourceMappingURL=runtimeAbiEncoding.d.ts.map