import type { BaseMeeClient } from "../../../../../clients/createMeeClient";
import type { ExecuteSignedQuotePayload, FeeTokenInfo, Trigger } from "../../../../../clients/decorators/mee";
import type { GetFusionQuoteParams } from "../../../../../clients/decorators/mee/getFusionQuote";
import type { InstructionLike } from "../../../../../clients/decorators/mee/getQuote";
import type { Validator } from "../../../toValidator";
export type PrepareForPermissionsParams = Omit<GetFusionQuoteParams, "instructions" | "feeToken" | "trigger"> & {
    smartSessionsValidator: Validator;
    additionalInstructions?: InstructionLike[];
    feeToken?: FeeTokenInfo;
    trigger?: Trigger;
};
/**
 * Returns undefined if there was no need to prepare the superTx
 */
export type PrepareForPermissionsPayload = ExecuteSignedQuotePayload | undefined;
export declare const prepareForPermissions: (client: BaseMeeClient, parameters: PrepareForPermissionsParams) => Promise<PrepareForPermissionsPayload>;
//# sourceMappingURL=prepareForPermissions.d.ts.map