import type { BaseMeeClient } from "../../../../../clients/createMeeClient";
import type { ModularSmartAccount } from "../../../../utils/Types";
import { type GrantMeePermissionParams, type GrantMeePermissionPayload } from "./grantMeePermission";
import { type PrepareForPermissionsParams, type PrepareForPermissionsPayload } from "./prepareForPermissions";
import { type UseMeePermissionParams, type UseMeePermissionPayload } from "./useMeePermission";
/**
 * Collection of MEE (Multi-chain Execution Environment) actions for transaction handling
 */
export type MeeSessionActions = {
    prepareForPermissions: (params: PrepareForPermissionsParams) => Promise<PrepareForPermissionsPayload>;
    grantPermissionPersonalSign: <TModularSmartAccount extends ModularSmartAccount | undefined>(params: GrantMeePermissionParams<TModularSmartAccount>) => Promise<GrantMeePermissionPayload>;
    grantPermissionTypedDataSign: <TModularSmartAccount extends ModularSmartAccount | undefined>(params: GrantMeePermissionParams<TModularSmartAccount>) => Promise<GrantMeePermissionPayload>;
    usePermission: (params: UseMeePermissionParams) => Promise<UseMeePermissionPayload>;
    isPermissionEnabled: (params: IsPermissionEnabledParams) => Promise<boolean>;
    checkEnabledPermissions: (params: GrantMeePermissionPayload) => Promise<CheckEnabledPermissionsPayload>;
};
/**
 * Creates an instance of MEE actions using the provided client
 * @param meeClient - Base MEE client instance
 * @returns Object containing all MEE actions
 */
export declare const meeSessionActions: (meeClient: BaseMeeClient) => MeeSessionActions;
export { grantMeePermissionPersonalSign, grantMeePermissionTypedDataSign } from "./grantMeePermission";
export { useMeePermission } from "./useMeePermission";
export { prepareForPermissions } from "./prepareForPermissions";
/**
 * Input parameters for the isPermissionEnabled function
 * @param permissionId - The permission ID to check
 * @param chainId - The chain ID to check the permission on
 */
export type IsPermissionEnabledParams = {
    permissionId: `0x${string}`;
    chainId: number;
};
/**
 * Checks if a permission is enabled for a given chain for this MEE client
 * assumes the PermissionId is known
 * @param meeClient - The MEE client
 * @param params - The parameters for the isPermissionEnabled function
 * @returns The result of the call to SmartSessions.isPermissionEnabled function
 */
export declare const isPermissionEnabled: (meeClient: BaseMeeClient, params: IsPermissionEnabledParams) => Promise<boolean>;
/**
 * Output payload for the checkEnabledPermission function
 * It is a mapping of permissionId => chainId => isEnabled
 */
export type CheckEnabledPermissionsPayload = {
    [permissionId: `0x${string}`]: {
        [chainId: number]: boolean;
    };
};
/**
 * For all the permissions from the grantMeePermissionPayload,
 * checks if they are enabled or not.
 * Facilitates checking the whole return object of the grantMeePermission function.
 * So the developer doesn't need to parse and know permissionId(s) for each chain.
 * Detects the permissions that were expected to be enabled on each chain
 * and checks if they are enabled or not.
 * @param meeClient - The MEE client
 * @param params - The return data of the grantMeePermission function
 * @returns A mapping of permissionId => chainId => isEnabled
 */
export declare const checkEnabledPermissions: (meeClient: BaseMeeClient, params: GrantMeePermissionPayload) => Promise<CheckEnabledPermissionsPayload>;
//# sourceMappingURL=index.d.ts.map