import type { Address, Prettify } from "viem";
import type { BaseMeeClient } from "../../../../../clients/createMeeClient";
import type { FeeTokenInfo } from "../../../../../clients/decorators/mee";
import { type ActionData } from "../../../../../constants";
import type { ModularSmartAccount } from "../../../../utils/Types";
import { type GrantPermissionResponse } from "../grantPermission";
export type MultichainActionData = {
    actions: (ActionData & {
        chainId: number;
    })[];
};
/**
 * no feeToken should be provided for the sponsored mode
 */
export type GrantMeePermissionParams<TModularSmartAccount extends ModularSmartAccount | undefined> = Prettify<MultichainActionData & {
    /** Granter Address */
    redeemer: Address;
} & {
    account?: TModularSmartAccount;
} & {
    feeToken?: FeeTokenInfo;
} & {
    maxPaymentAmount?: bigint;
}>;
export type GrantMeePermissionPayload = GrantPermissionResponse;
export declare const grantMeePermissionPersonalSign: <TModularSmartAccount extends ModularSmartAccount | undefined>(baseMeeClient: BaseMeeClient, params: GrantMeePermissionParams<TModularSmartAccount>) => Promise<GrantPermissionResponse>;
export declare const grantMeePermissionTypedDataSign: <TModularSmartAccount extends ModularSmartAccount | undefined>(baseMeeClient: BaseMeeClient, params: GrantMeePermissionParams<TModularSmartAccount>) => Promise<GrantPermissionResponse>;
/**
 * Grants a permission to the redeemer for the actions
 * Automatically adds the payment action policy if a fee token is provided
 * If the superTxn is sponsored, the payment action policy is not added
 * as it is not needed for the sponsored mode
 * If the superTxn is not sponsored, the payment action policy is added
 *
 * @alert Attention: Smart Session actions for the cleanup userOps are not added automatically
 * to the session, and should be provided explicitly in the actions array
 *
 * @alert Despite the fact smart sessions module supports it, please,
 * avoid granting several permissions for the same chain within single `grantMeePermission` usage.
 * Because later you will only be able to enable and use one permission per chain.
 *
 * @param baseMeeClient - The base MeeClient
 * @param params - The parameters for the grantMeePermission function
 * @returns The session details
 */
export declare const grantMeePermission: <TModularSmartAccount extends ModularSmartAccount | undefined>(baseMeeClient: BaseMeeClient, { redeemer, actions, feeToken, maxPaymentAmount, account: _account }: GrantMeePermissionParams<TModularSmartAccount>, mode: "PERSONAL_SIGN" | "TYPED_DATA_SIGN") => Promise<GrantMeePermissionPayload>;
//# sourceMappingURL=grantMeePermission.d.ts.map