import { type Account, type ActionData, type ERC7739Data, type PolicyData, type Session, type getEnableSessionDetails } from "@rhinestone/module-sdk";
import type { Address, Chain, Client, Hex, LocalAccount, Prettify, PublicClient, RequiredBy, Transport } from "viem";
import type { ModularSmartAccount } from "../../../utils/Types";
export type PrettifiedSession = {
    sessionValidator?: Address;
    sessionValidatorInitData?: Hex;
    salt?: Hex;
    permitERC4337Paymaster?: boolean;
    actions: ActionData[];
    chainId?: bigint;
    userOpPolicies?: PolicyData[];
    erc7739Policies?: ERC7739Data;
};
export type RequiredSessionParams = RequiredBy<Partial<PrettifiedSession>, "actions">;
export type GrantPermissionParameterEntry<TModularSmartAccount extends ModularSmartAccount | undefined> = Prettify<Partial<PrettifiedSession> & RequiredSessionParams & {
    /** Granter Address */
    redeemer: Address;
} & {
    account?: TModularSmartAccount;
}>;
export type GrantPermissionParameters<TModularSmartAccount extends ModularSmartAccount | undefined> = GrantPermissionParameterEntry<TModularSmartAccount>[];
export type GrantPermissionResponseEntry = Prettify<Omit<Awaited<ReturnType<typeof getEnableSessionDetails>>, "permissionEnableHash">>;
export type GrantPermissionResponse = GrantPermissionResponseEntry[];
/**
 * Grants the permission signed with personal signature
 */
export declare function grantPermissionPersonalSign<TModularSmartAccount extends ModularSmartAccount | undefined>(nexusClient: Client<Transport, Chain | undefined, TModularSmartAccount>, parameters: GrantPermissionParameters<TModularSmartAccount>): Promise<GrantPermissionResponse>;
/**
 * Grants the permission signed with typed data signature
 */
export declare function grantPermissionTypedDataSign<TModularSmartAccount extends ModularSmartAccount | undefined>(nexusClient: Client<Transport, Chain | undefined, TModularSmartAccount>, parameters: GrantPermissionParameters<TModularSmartAccount>): Promise<GrantPermissionResponse>;
/**
 * Prepare for granting permission
 */
export type PrepareForGrantingPermissionResponse = {
    sessions: Session[];
    accountsAndChainIds: AccountAndChainId[];
    clients: PublicClient[];
    signer: LocalAccount;
};
export type AccountAndChainId = {
    account: Account;
    chainId: bigint;
};
//# sourceMappingURL=grantPermission.d.ts.map