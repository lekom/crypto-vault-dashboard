import { Address, Hex, PublicClient } from 'viem';
import { Execution } from '../../account';
import { Account } from '../../account';
import { moduleTypeIds } from '../types';
type Params = {
    waitPeriod: number;
};
export declare const getColdStorageSetWaitPeriodAction: ({ waitPeriod, }: Params) => Execution;
export declare const getColdStorageExecutionTime: ({ account, client, executionHash, }: {
    account: Account;
    client: PublicClient;
    executionHash: Hex;
}) => Promise<Number>;
type RequestTimelockedExecutionParams = {
    execution: Execution;
    additionalWait: number;
};
export declare const getRequestTimelockedExecution: ({ execution, additionalWait, }: RequestTimelockedExecutionParams) => Execution;
type RequestTimelockedModuleConfigParams = {
    moduleTypeId: (typeof moduleTypeIds)[keyof typeof moduleTypeIds];
    module: Address;
    data: Hex;
    isInstall: boolean;
    additionalWait: number;
};
export declare const getRequestTimelockedModuleConfigExecution: ({ moduleTypeId, module, data, isInstall, additionalWait, }: RequestTimelockedModuleConfigParams) => Execution;
export declare const getFlashloanAddAddressAction: ({ addressToAdd, }: {
    addressToAdd: Address;
}) => Execution;
export declare const getFlashloanRemoveAddressAction: ({ client, account, addressToRemove, }: {
    client: PublicClient;
    account: Account;
    addressToRemove: Address;
}) => Promise<Execution>;
export declare const getFlashloanWhitelist: ({ account, client, }: {
    account: Account;
    client: PublicClient;
}) => Promise<Address[]>;
export {};
//# sourceMappingURL=usage.d.ts.map