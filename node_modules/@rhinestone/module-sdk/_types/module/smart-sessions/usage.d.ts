import { Hex, PublicClient, Address } from 'viem';
import { ActionData, ChainSession, EnableSessionData, ERC7739Context, ERC7739Data, PolicyData, Session, SmartSessionModeType } from './types';
import { Account, AccountType, Execution } from '../../account';
export declare const getPermissionId: ({ session }: {
    session: Session;
}) => Hex;
export declare const getActionId: ({ target, selector, }: {
    target: Address;
    selector: Hex;
}) => Promise<`0x${string}`>;
export declare const getSessionNonce: ({ client, account, permissionId, }: {
    client: PublicClient;
    account: Account | Address;
    permissionId: Hex;
}) => Promise<bigint>;
export declare const getVerifySignatureResult: ({ client, account, sender, hash, signature, }: {
    client: PublicClient;
    account: Account;
    sender: Address;
    hash: Hex;
    signature: Hex;
}) => Promise<boolean>;
export declare const getAccountEIP712Domain: ({ client, account, }: {
    client: PublicClient;
    account: Account;
}) => Promise<{
    name: string;
    version: string;
    chainId: bigint;
    verifyingContract: `0x${string}`;
    salt: `0x${string}`;
}>;
export declare const isSessionEnabled: ({ client, account, permissionId, }: {
    client: PublicClient;
    account: Account | Address;
    permissionId: Hex;
}) => Promise<boolean>;
export declare const getSessionDigest: ({ client, account, session, permissionId, mode, }: {
    client: PublicClient;
    account: Account;
    session: Session;
    permissionId: Hex;
    mode: SmartSessionModeType;
}) => Promise<`0x${string}`>;
export declare const encodeSmartSessionSignature: ({ mode, permissionId, signature, enableSessionData, }: {
    mode: SmartSessionModeType;
    permissionId: Hex;
    signature: Hex;
    enableSessionData?: EnableSessionData;
}) => `0x${string}`;
export declare const encodeUseOrEnableSmartSessionSignature: ({ account, client, permissionId, signature, enableSessionData, }: {
    account: Account;
    client: PublicClient;
    permissionId: Hex;
    signature: Hex;
    enableSessionData: EnableSessionData;
}) => Promise<`0x${string}`>;
export declare const decodeSmartSessionSignature: ({ signature, account, }: {
    signature: Hex;
    account?: Account;
}) => {
    mode: `0x${string}`;
    permissionId: `0x${string}`;
    signature: `0x${string}`;
    enableSessionData?: undefined;
} | {
    mode: `0x${string}`;
    permissionId: `0x${string}`;
    signature: `0x${string}`;
    enableSessionData: EnableSessionData;
};
export declare const hashChainSessions: (chainSessions: ChainSession[]) => Hex;
export declare const formatPermissionEnableSig: ({ signature, validator, accountType, }: {
    signature: Hex;
    validator: Address;
    accountType: AccountType;
}) => `0x${string}`;
export declare const getEnableSessionsAction: ({ sessions, }: {
    sessions: Session[];
}) => Execution;
export declare const getRemoveSessionAction: ({ permissionId, }: {
    permissionId: Hex;
}) => Execution;
export declare const getEnableUserOpPoliciesAction: ({ permissionId, userOpPolicies, }: {
    permissionId: Hex;
    userOpPolicies: PolicyData[];
}) => Execution;
export declare const getDisableUserOpPoliciesAction: ({ permissionId, userOpPolicies, }: {
    permissionId: Hex;
    userOpPolicies: Address[];
}) => Execution;
export declare const getEnableERC1271PoliciesAction: ({ permissionId, erc1271Policies, }: {
    permissionId: Hex;
    erc1271Policies: ERC7739Data;
}) => Execution;
export declare const getDisableERC1271PoliciesAction: ({ permissionId, policies, contents, }: {
    permissionId: Hex;
    policies: Address[];
    contents: ERC7739Context[];
}) => Execution;
export declare const getEnableActionPoliciesAction: ({ permissionId, actionPolicies, }: {
    permissionId: Hex;
    actionPolicies: ActionData[];
}) => Execution;
export declare const getDisableActionPoliciesAction: ({ permissionId, actionId, policies, }: {
    permissionId: Hex;
    actionId: Hex;
    policies: Address[];
}) => Execution;
export declare const getEnableSessionDetails: ({ sessions, sessionIndex, enableMode, account, clients, enableValidatorAddress, permitGenericPolicy, permitAdminAccess, ignoreSecurityAttestations, }: {
    sessions: Session[];
    sessionIndex?: number;
    enableMode?: SmartSessionModeType;
    account: Account;
    clients: PublicClient[];
    enableValidatorAddress?: Address;
    permitGenericPolicy?: boolean;
    permitAdminAccess?: boolean;
    ignoreSecurityAttestations?: boolean;
}) => Promise<{
    permissionEnableHash: `0x${string}`;
    mode: `0x${string}`;
    permissionId: `0x${string}`;
    signature: Hex;
    enableSessionData: {
        enableSession: {
            chainDigestIndex: number;
            hashesAndChainIds: {
                chainId: bigint;
                sessionDigest: `0x${string}`;
            }[];
            sessionToEnable: Session;
            permissionEnableSig: Hex;
        };
        validator: `0x${string}`;
        accountType: AccountType;
    };
}>;
//# sourceMappingURL=usage.d.ts.map