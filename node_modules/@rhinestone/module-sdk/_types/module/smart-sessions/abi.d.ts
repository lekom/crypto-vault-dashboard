export declare const installSmartSessionsAbi: {
    components: ({
        internalType: string;
        name: string;
        type: string;
        components?: undefined;
    } | {
        components: ({
            internalType: string;
            name: string;
            type: string;
            components?: undefined;
        } | {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        })[];
        internalType: string;
        name: string;
        type: string;
    })[];
    internalType: string;
    name: string;
    type: string;
}[];
export declare const enableSessionAbi: {
    readonly components: readonly [{
        readonly type: "uint8";
        readonly name: "chainDigestIndex";
    }, {
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "chainId";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sessionDigest";
            readonly type: "bytes32";
        }];
        readonly name: "hashesAndChainIds";
    }, {
        readonly components: readonly [{
            readonly internalType: "contract ISessionValidator";
            readonly name: "sessionValidator";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "sessionValidatorInitData";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "salt";
            readonly type: "bytes32";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "policy";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "initData";
                readonly type: "bytes";
            }];
            readonly internalType: "struct PolicyData[]";
            readonly name: "userOpPolicies";
            readonly type: "tuple[]";
        }, {
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "bytes32";
                    readonly name: "appDomainSeparator";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "string[]";
                    readonly name: "contentName";
                    readonly type: "string[]";
                }];
                readonly internalType: "struct ERC7739Context[]";
                readonly name: "allowedERC7739Content";
                readonly type: "tuple[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "policy";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "initData";
                    readonly type: "bytes";
                }];
                readonly internalType: "struct PolicyData[]";
                readonly name: "erc1271Policies";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct ERC7739Data";
            readonly name: "erc7739Policies";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "bytes4";
                readonly name: "actionTargetSelector";
                readonly type: "bytes4";
            }, {
                readonly internalType: "address";
                readonly name: "actionTarget";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "policy";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "initData";
                    readonly type: "bytes";
                }];
                readonly internalType: "struct PolicyData[]";
                readonly name: "actionPolicies";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct ActionData[]";
            readonly name: "actions";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "bool";
            readonly name: "permitERC4337Paymaster";
            readonly type: "bool";
        }];
        readonly internalType: "struct Session";
        readonly name: "sessionToEnable";
        readonly type: "tuple";
    }, {
        readonly type: "bytes";
        readonly name: "permissionEnableSig";
    }];
    readonly internalType: "struct EnableSession";
    readonly name: "enableSession";
    readonly type: "tuple";
};
export declare const encodeEnableSessionSignatureAbi: readonly [{
    readonly components: readonly [{
        readonly type: "uint8";
        readonly name: "chainDigestIndex";
    }, {
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "chainId";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sessionDigest";
            readonly type: "bytes32";
        }];
        readonly name: "hashesAndChainIds";
    }, {
        readonly components: readonly [{
            readonly internalType: "contract ISessionValidator";
            readonly name: "sessionValidator";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "sessionValidatorInitData";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "salt";
            readonly type: "bytes32";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "policy";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "initData";
                readonly type: "bytes";
            }];
            readonly internalType: "struct PolicyData[]";
            readonly name: "userOpPolicies";
            readonly type: "tuple[]";
        }, {
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "bytes32";
                    readonly name: "appDomainSeparator";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "string[]";
                    readonly name: "contentName";
                    readonly type: "string[]";
                }];
                readonly internalType: "struct ERC7739Context[]";
                readonly name: "allowedERC7739Content";
                readonly type: "tuple[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "policy";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "initData";
                    readonly type: "bytes";
                }];
                readonly internalType: "struct PolicyData[]";
                readonly name: "erc1271Policies";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct ERC7739Data";
            readonly name: "erc7739Policies";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "bytes4";
                readonly name: "actionTargetSelector";
                readonly type: "bytes4";
            }, {
                readonly internalType: "address";
                readonly name: "actionTarget";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "policy";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "initData";
                    readonly type: "bytes";
                }];
                readonly internalType: "struct PolicyData[]";
                readonly name: "actionPolicies";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct ActionData[]";
            readonly name: "actions";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "bool";
            readonly name: "permitERC4337Paymaster";
            readonly type: "bool";
        }];
        readonly internalType: "struct Session";
        readonly name: "sessionToEnable";
        readonly type: "tuple";
    }, {
        readonly type: "bytes";
        readonly name: "permissionEnableSig";
    }];
    readonly internalType: "struct EnableSession";
    readonly name: "enableSession";
    readonly type: "tuple";
}, {
    readonly type: "bytes";
}];
export declare const abi: readonly [{
    readonly type: "function";
    readonly name: "areActionsEnabled";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "actions";
        readonly type: "tuple[]";
        readonly internalType: "struct ActionData[]";
        readonly components: readonly [{
            readonly name: "actionTargetSelector";
            readonly type: "bytes4";
            readonly internalType: "bytes4";
        }, {
            readonly name: "actionTarget";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "actionPolicies";
            readonly type: "tuple[]";
            readonly internalType: "struct PolicyData[]";
            readonly components: readonly [{
                readonly name: "policy";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "initData";
                readonly type: "bytes";
                readonly internalType: "bytes";
            }];
        }];
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "areERC1271PoliciesEnabled";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "erc1271Policies";
        readonly type: "tuple[]";
        readonly internalType: "struct PolicyData[]";
        readonly components: readonly [{
            readonly name: "policy";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "initData";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }];
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "areUserOpPoliciesEnabled";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "userOpPolicies";
        readonly type: "tuple[]";
        readonly internalType: "struct PolicyData[]";
        readonly components: readonly [{
            readonly name: "policy";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "initData";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }];
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "disableActionId";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "actionId";
        readonly type: "bytes32";
        readonly internalType: "ActionId";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "disableActionPolicies";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "actionId";
        readonly type: "bytes32";
        readonly internalType: "ActionId";
    }, {
        readonly name: "policies";
        readonly type: "address[]";
        readonly internalType: "address[]";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "disableERC1271Policies";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "policies";
        readonly type: "address[]";
        readonly internalType: "address[]";
    }, {
        readonly name: "contexts";
        readonly type: "tuple[]";
        readonly internalType: "struct ERC7739Context[]";
        readonly components: readonly [{
            readonly name: "appDomainSeparator";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "contentName";
            readonly type: "string[]";
            readonly internalType: "string[]";
        }];
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "disableUserOpPolicies";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "policies";
        readonly type: "address[]";
        readonly internalType: "address[]";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "enableActionPolicies";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "actionPolicies";
        readonly type: "tuple[]";
        readonly internalType: "struct ActionData[]";
        readonly components: readonly [{
            readonly name: "actionTargetSelector";
            readonly type: "bytes4";
            readonly internalType: "bytes4";
        }, {
            readonly name: "actionTarget";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "actionPolicies";
            readonly type: "tuple[]";
            readonly internalType: "struct PolicyData[]";
            readonly components: readonly [{
                readonly name: "policy";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "initData";
                readonly type: "bytes";
                readonly internalType: "bytes";
            }];
        }];
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "enableERC1271Policies";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "erc1271Policies";
        readonly type: "tuple";
        readonly internalType: "struct ERC7739Data";
        readonly components: readonly [{
            readonly name: "allowedERC7739Content";
            readonly type: "tuple[]";
            readonly internalType: "struct ERC7739Context[]";
            readonly components: readonly [{
                readonly name: "appDomainSeparator";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "contentName";
                readonly type: "string[]";
                readonly internalType: "string[]";
            }];
        }, {
            readonly name: "erc1271Policies";
            readonly type: "tuple[]";
            readonly internalType: "struct PolicyData[]";
            readonly components: readonly [{
                readonly name: "policy";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "initData";
                readonly type: "bytes";
                readonly internalType: "bytes";
            }];
        }];
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "enableSessions";
    readonly inputs: readonly [{
        readonly name: "sessions";
        readonly type: "tuple[]";
        readonly internalType: "struct Session[]";
        readonly components: readonly [{
            readonly name: "sessionValidator";
            readonly type: "address";
            readonly internalType: "contract ISessionValidator";
        }, {
            readonly name: "sessionValidatorInitData";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "salt";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "userOpPolicies";
            readonly type: "tuple[]";
            readonly internalType: "struct PolicyData[]";
            readonly components: readonly [{
                readonly name: "policy";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "initData";
                readonly type: "bytes";
                readonly internalType: "bytes";
            }];
        }, {
            readonly name: "erc7739Policies";
            readonly type: "tuple";
            readonly internalType: "struct ERC7739Data";
            readonly components: readonly [{
                readonly name: "allowedERC7739Content";
                readonly type: "tuple[]";
                readonly internalType: "struct ERC7739Context[]";
                readonly components: readonly [{
                    readonly name: "appDomainSeparator";
                    readonly type: "bytes32";
                    readonly internalType: "bytes32";
                }, {
                    readonly name: "contentName";
                    readonly type: "string[]";
                    readonly internalType: "string[]";
                }];
            }, {
                readonly name: "erc1271Policies";
                readonly type: "tuple[]";
                readonly internalType: "struct PolicyData[]";
                readonly components: readonly [{
                    readonly name: "policy";
                    readonly type: "address";
                    readonly internalType: "address";
                }, {
                    readonly name: "initData";
                    readonly type: "bytes";
                    readonly internalType: "bytes";
                }];
            }];
        }, {
            readonly name: "actions";
            readonly type: "tuple[]";
            readonly internalType: "struct ActionData[]";
            readonly components: readonly [{
                readonly name: "actionTargetSelector";
                readonly type: "bytes4";
                readonly internalType: "bytes4";
            }, {
                readonly name: "actionTarget";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actionPolicies";
                readonly type: "tuple[]";
                readonly internalType: "struct PolicyData[]";
                readonly components: readonly [{
                    readonly name: "policy";
                    readonly type: "address";
                    readonly internalType: "address";
                }, {
                    readonly name: "initData";
                    readonly type: "bytes";
                    readonly internalType: "bytes";
                }];
            }];
        }, {
            readonly name: "permitERC4337Paymaster";
            readonly type: "bool";
            readonly internalType: "bool";
        }];
    }];
    readonly outputs: readonly [{
        readonly name: "permissionIds";
        readonly type: "bytes32[]";
        readonly internalType: "PermissionId[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "enableUserOpPolicies";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "userOpPolicies";
        readonly type: "tuple[]";
        readonly internalType: "struct PolicyData[]";
        readonly components: readonly [{
            readonly name: "policy";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "initData";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }];
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "getActionPolicies";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "actionId";
        readonly type: "bytes32";
        readonly internalType: "ActionId";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address[]";
        readonly internalType: "address[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getERC1271Policies";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address[]";
        readonly internalType: "address[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getEnabledActions";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32[]";
        readonly internalType: "bytes32[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getEnabledERC7739Content";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }];
    readonly outputs: readonly [{
        readonly name: "enabledERC7739ContentHashes";
        readonly type: "tuple[]";
        readonly internalType: "struct ERC7739ContextHashes[]";
        readonly components: readonly [{
            readonly name: "appDomainSeparator";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "contentNameHashes";
            readonly type: "bytes32[]";
            readonly internalType: "bytes32[]";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getNonce";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getPermissionIDs";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "permissionIds";
        readonly type: "bytes32[]";
        readonly internalType: "PermissionId[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getPermissionId";
    readonly inputs: readonly [{
        readonly name: "session";
        readonly type: "tuple";
        readonly internalType: "struct Session";
        readonly components: readonly [{
            readonly name: "sessionValidator";
            readonly type: "address";
            readonly internalType: "contract ISessionValidator";
        }, {
            readonly name: "sessionValidatorInitData";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "salt";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "userOpPolicies";
            readonly type: "tuple[]";
            readonly internalType: "struct PolicyData[]";
            readonly components: readonly [{
                readonly name: "policy";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "initData";
                readonly type: "bytes";
                readonly internalType: "bytes";
            }];
        }, {
            readonly name: "erc7739Policies";
            readonly type: "tuple";
            readonly internalType: "struct ERC7739Data";
            readonly components: readonly [{
                readonly name: "allowedERC7739Content";
                readonly type: "tuple[]";
                readonly internalType: "struct ERC7739Context[]";
                readonly components: readonly [{
                    readonly name: "appDomainSeparator";
                    readonly type: "bytes32";
                    readonly internalType: "bytes32";
                }, {
                    readonly name: "contentName";
                    readonly type: "string[]";
                    readonly internalType: "string[]";
                }];
            }, {
                readonly name: "erc1271Policies";
                readonly type: "tuple[]";
                readonly internalType: "struct PolicyData[]";
                readonly components: readonly [{
                    readonly name: "policy";
                    readonly type: "address";
                    readonly internalType: "address";
                }, {
                    readonly name: "initData";
                    readonly type: "bytes";
                    readonly internalType: "bytes";
                }];
            }];
        }, {
            readonly name: "actions";
            readonly type: "tuple[]";
            readonly internalType: "struct ActionData[]";
            readonly components: readonly [{
                readonly name: "actionTargetSelector";
                readonly type: "bytes4";
                readonly internalType: "bytes4";
            }, {
                readonly name: "actionTarget";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actionPolicies";
                readonly type: "tuple[]";
                readonly internalType: "struct PolicyData[]";
                readonly components: readonly [{
                    readonly name: "policy";
                    readonly type: "address";
                    readonly internalType: "address";
                }, {
                    readonly name: "initData";
                    readonly type: "bytes";
                    readonly internalType: "bytes";
                }];
            }];
        }, {
            readonly name: "permitERC4337Paymaster";
            readonly type: "bool";
            readonly internalType: "bool";
        }];
    }];
    readonly outputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "getSessionDigest";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "data";
        readonly type: "tuple";
        readonly internalType: "struct Session";
        readonly components: readonly [{
            readonly name: "sessionValidator";
            readonly type: "address";
            readonly internalType: "contract ISessionValidator";
        }, {
            readonly name: "sessionValidatorInitData";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "salt";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "userOpPolicies";
            readonly type: "tuple[]";
            readonly internalType: "struct PolicyData[]";
            readonly components: readonly [{
                readonly name: "policy";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "initData";
                readonly type: "bytes";
                readonly internalType: "bytes";
            }];
        }, {
            readonly name: "erc7739Policies";
            readonly type: "tuple";
            readonly internalType: "struct ERC7739Data";
            readonly components: readonly [{
                readonly name: "allowedERC7739Content";
                readonly type: "tuple[]";
                readonly internalType: "struct ERC7739Context[]";
                readonly components: readonly [{
                    readonly name: "appDomainSeparator";
                    readonly type: "bytes32";
                    readonly internalType: "bytes32";
                }, {
                    readonly name: "contentName";
                    readonly type: "string[]";
                    readonly internalType: "string[]";
                }];
            }, {
                readonly name: "erc1271Policies";
                readonly type: "tuple[]";
                readonly internalType: "struct PolicyData[]";
                readonly components: readonly [{
                    readonly name: "policy";
                    readonly type: "address";
                    readonly internalType: "address";
                }, {
                    readonly name: "initData";
                    readonly type: "bytes";
                    readonly internalType: "bytes";
                }];
            }];
        }, {
            readonly name: "actions";
            readonly type: "tuple[]";
            readonly internalType: "struct ActionData[]";
            readonly components: readonly [{
                readonly name: "actionTargetSelector";
                readonly type: "bytes4";
                readonly internalType: "bytes4";
            }, {
                readonly name: "actionTarget";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "actionPolicies";
                readonly type: "tuple[]";
                readonly internalType: "struct PolicyData[]";
                readonly components: readonly [{
                    readonly name: "policy";
                    readonly type: "address";
                    readonly internalType: "address";
                }, {
                    readonly name: "initData";
                    readonly type: "bytes";
                    readonly internalType: "bytes";
                }];
            }];
        }, {
            readonly name: "permitERC4337Paymaster";
            readonly type: "bool";
            readonly internalType: "bool";
        }];
    }, {
        readonly name: "mode";
        readonly type: "uint8";
        readonly internalType: "enum SmartSessionMode";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getSessionValidatorAndConfig";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }];
    readonly outputs: readonly [{
        readonly name: "sessionValidator";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "sessionValidatorData";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getUserOpPolicies";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address[]";
        readonly internalType: "address[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "isActionIdEnabled";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "actionId";
        readonly type: "bytes32";
        readonly internalType: "ActionId";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "isActionPolicyEnabled";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "actionId";
        readonly type: "bytes32";
        readonly internalType: "ActionId";
    }, {
        readonly name: "policy";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "isERC1271PolicyEnabled";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "policy";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "isERC7739ContentEnabled";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "appDomainSeparator";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "content";
        readonly type: "string";
        readonly internalType: "string";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "isISessionValidatorSet";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "isInitialized";
    readonly inputs: readonly [{
        readonly name: "smartAccount";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "isModuleType";
    readonly inputs: readonly [{
        readonly name: "typeID";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "isPermissionEnabled";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "isUserOpPolicyEnabled";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "policy";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "isValidSignatureWithSender";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "hash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "signature";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [{
        readonly name: "result";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "onInstall";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "onUninstall";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "removeSession";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "revokeEnableSignature";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "setpermitERC4337Paymaster";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "enabled";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "validateUserOp";
    readonly inputs: readonly [{
        readonly name: "userOp";
        readonly type: "tuple";
        readonly internalType: "struct PackedUserOperation";
        readonly components: readonly [{
            readonly name: "sender";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "nonce";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "initCode";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "callData";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "accountGasLimits";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "preVerificationGas";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "gasFees";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "paymasterAndData";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "signature";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }];
    }, {
        readonly name: "userOpHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly outputs: readonly [{
        readonly name: "vd";
        readonly type: "uint256";
        readonly internalType: "ValidationData";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly name: "ActionIdDisabled";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly indexed: false;
        readonly internalType: "PermissionId";
    }, {
        readonly name: "actionId";
        readonly type: "bytes32";
        readonly indexed: false;
        readonly internalType: "ActionId";
    }, {
        readonly name: "smartAccount";
        readonly type: "address";
        readonly indexed: false;
        readonly internalType: "address";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "NonceIterated";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly indexed: false;
        readonly internalType: "PermissionId";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly indexed: false;
        readonly internalType: "address";
    }, {
        readonly name: "newValue";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "PermissionIdpermitERC4337Paymaster";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly indexed: false;
        readonly internalType: "PermissionId";
    }, {
        readonly name: "smartAccount";
        readonly type: "address";
        readonly indexed: false;
        readonly internalType: "address";
    }, {
        readonly name: "enabled";
        readonly type: "bool";
        readonly indexed: false;
        readonly internalType: "bool";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "PolicyDisabled";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly indexed: false;
        readonly internalType: "PermissionId";
    }, {
        readonly name: "policyType";
        readonly type: "uint8";
        readonly indexed: false;
        readonly internalType: "enum PolicyType";
    }, {
        readonly name: "policy";
        readonly type: "address";
        readonly indexed: false;
        readonly internalType: "address";
    }, {
        readonly name: "smartAccount";
        readonly type: "address";
        readonly indexed: false;
        readonly internalType: "address";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "PolicyEnabled";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly indexed: false;
        readonly internalType: "PermissionId";
    }, {
        readonly name: "policyType";
        readonly type: "uint8";
        readonly indexed: false;
        readonly internalType: "enum PolicyType";
    }, {
        readonly name: "policy";
        readonly type: "address";
        readonly indexed: false;
        readonly internalType: "address";
    }, {
        readonly name: "smartAccount";
        readonly type: "address";
        readonly indexed: false;
        readonly internalType: "address";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "SessionCreated";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly indexed: false;
        readonly internalType: "PermissionId";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly indexed: false;
        readonly internalType: "address";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "SessionRemoved";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly indexed: false;
        readonly internalType: "PermissionId";
    }, {
        readonly name: "smartAccount";
        readonly type: "address";
        readonly indexed: false;
        readonly internalType: "address";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "SessionValidatorDisabled";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly indexed: false;
        readonly internalType: "PermissionId";
    }, {
        readonly name: "sessionValidator";
        readonly type: "address";
        readonly indexed: false;
        readonly internalType: "address";
    }, {
        readonly name: "smartAccount";
        readonly type: "address";
        readonly indexed: false;
        readonly internalType: "address";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "SessionValidatorEnabled";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly indexed: false;
        readonly internalType: "PermissionId";
    }, {
        readonly name: "sessionValidator";
        readonly type: "address";
        readonly indexed: false;
        readonly internalType: "address";
    }, {
        readonly name: "smartAccount";
        readonly type: "address";
        readonly indexed: false;
        readonly internalType: "address";
    }];
    readonly anonymous: false;
}, {
    readonly type: "error";
    readonly name: "AssociatedArray_OutOfBounds";
    readonly inputs: readonly [{
        readonly name: "index";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "ChainIdMismatch";
    readonly inputs: readonly [{
        readonly name: "providedChainId";
        readonly type: "uint64";
        readonly internalType: "uint64";
    }];
}, {
    readonly type: "error";
    readonly name: "ChainIdMismatch";
    readonly inputs: readonly [{
        readonly name: "providedChainId";
        readonly type: "uint64";
        readonly internalType: "uint64";
    }];
}, {
    readonly type: "error";
    readonly name: "ForbiddenValidationData";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "HashIndexOutOfBounds";
    readonly inputs: readonly [{
        readonly name: "index";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "HashMismatch";
    readonly inputs: readonly [{
        readonly name: "providedHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "computedHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "HashMismatch";
    readonly inputs: readonly [{
        readonly name: "providedHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "computedHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "InvalidActionId";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "InvalidCallTarget";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "InvalidData";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "InvalidEnableSignature";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "hash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "InvalidISessionValidator";
    readonly inputs: readonly [{
        readonly name: "sessionValidator";
        readonly type: "address";
        readonly internalType: "contract ISessionValidator";
    }];
}, {
    readonly type: "error";
    readonly name: "InvalidMode";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "InvalidPermissionId";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }];
}, {
    readonly type: "error";
    readonly name: "InvalidSelfCall";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "InvalidSession";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }];
}, {
    readonly type: "error";
    readonly name: "InvalidSessionKeySignature";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "sessionValidator";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "userOpHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "InvalidTarget";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "InvalidUserOpSender";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "NoExecutionsInBatch";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "NoPoliciesSet";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }];
}, {
    readonly type: "error";
    readonly name: "PartlyEnabledActions";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "PartlyEnabledPolicies";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "PaymasterValidationNotEnabled";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }];
}, {
    readonly type: "error";
    readonly name: "PolicyViolation";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "policy";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "SignerNotFound";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "SignerNotFound";
    readonly inputs: readonly [{
        readonly name: "permissionId";
        readonly type: "bytes32";
        readonly internalType: "PermissionId";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "SmartSessionModuleAlreadyInstalled";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "UnsupportedExecutionType";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "UnsupportedPolicy";
    readonly inputs: readonly [{
        readonly name: "policy";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "UnsupportedSmartSessionMode";
    readonly inputs: readonly [{
        readonly name: "mode";
        readonly type: "uint8";
        readonly internalType: "enum SmartSessionMode";
    }];
}];
//# sourceMappingURL=abi.d.ts.map