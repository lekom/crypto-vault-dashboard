import { Execution } from '../../../account/types';
import { Address, Hex, PublicClient } from 'viem';
import { Account } from '../../../account/types';
export type EmailAuthMsg = {
    templateId: bigint;
    commandParams: Hex[];
    skippedCommandPrefix: bigint;
    proof: EmailProof;
};
export type EmailProof = {
    domainName: string;
    publicKeyHash: Hex;
    timestamp: bigint;
    maskedCommand: string;
    emailNullifier: Hex;
    accountSalt: Hex;
    isCodeExist: boolean;
    proof: Hex;
};
export declare const getRecoveryConfig: ({ account, client, }: {
    account: Account;
    client: PublicClient;
}) => Promise<{
    delay: bigint;
    expiry: bigint;
}>;
export declare const getRecoveryRequest: ({ account, client, }: {
    account: Account;
    client: PublicClient;
}) => Promise<readonly [bigint, bigint, bigint, Hex]>;
export declare const getPreviousRecoveryRequest: ({ account, client, }: {
    account: Account;
    client: PublicClient;
}) => Promise<{
    previousGuardianInitiated: Address;
    cancelRecoveryCooldown: bigint;
}>;
export declare const isActivated: ({ account, client, }: {
    account: Account;
    client: PublicClient;
}) => Promise<boolean>;
export declare const canStartRecoveryRequest: ({ account, client, validator, }: {
    account: Account;
    client: PublicClient;
    validator: Address;
}) => Promise<boolean>;
export declare const getAllowValidatorRecoveryAction: ({ client, validator, isInstalledContext, recoverySelector, }: {
    client: PublicClient;
    validator: Address;
    isInstalledContext: Hex;
    recoverySelector: Hex;
}) => Promise<Execution>;
export declare const getDisallowValidatorRecoveryAction: ({ client, validator, prevValidator, recoverySelector, }: {
    client: PublicClient;
    validator: Address;
    prevValidator: Address;
    recoverySelector: Hex;
}) => Promise<Execution>;
export declare const getAllowedValidators: ({ account, client, }: {
    account: Account;
    client: PublicClient;
}) => Promise<readonly Address[]>;
export declare const getAllowedSelectors: ({ account, client, }: {
    account: Account;
    client: PublicClient;
}) => Promise<readonly Hex[]>;
export declare const acceptanceCommandTemplates: ({ client, }: {
    client: PublicClient;
}) => Promise<readonly (readonly string[])[]>;
export declare const recoveryCommandTemplates: ({ client, }: {
    client: PublicClient;
}) => Promise<readonly (readonly string[])[]>;
export declare const extractRecoveredAccountFromAcceptanceCommand: ({ client, commandParams, templateIdx, }: {
    client: PublicClient;
    commandParams: Hex[];
    templateIdx: bigint;
}) => Promise<Address>;
export declare const extractRecoveredAccountFromRecoveryCommand: ({ client, commandParams, templateIdx, }: {
    client: PublicClient;
    commandParams: Hex[];
    templateIdx: bigint;
}) => Promise<Address>;
export declare const computeAcceptanceTemplateId: ({ client, templateIdx, }: {
    client: PublicClient;
    templateIdx: bigint;
}) => Promise<bigint>;
export declare const computeRecoveryTemplateId: ({ client, templateIdx, }: {
    client: PublicClient;
    templateIdx: bigint;
}) => Promise<bigint>;
export declare const getVerifier: ({ client, }: {
    client: PublicClient;
}) => Promise<Address>;
export declare const getDkim: ({ client, }: {
    client: PublicClient;
}) => Promise<Address>;
export declare const getEmailAuthImplementation: ({ client, }: {
    client: PublicClient;
}) => Promise<Address>;
export declare const getUpdateRecoveryConfigAction: ({ client, delay, expiry, }: {
    client: PublicClient;
    delay: bigint;
    expiry: bigint;
}) => Promise<Execution>;
export declare const getHandleAcceptanceAction: ({ client, emailAuthMsg, templateIdx, }: {
    client: PublicClient;
    emailAuthMsg: EmailAuthMsg;
    templateIdx: bigint;
}) => Promise<Execution>;
export declare const getHandleRecoveryAction: ({ client, emailAuthMsg, templateIdx, }: {
    client: PublicClient;
    emailAuthMsg: EmailAuthMsg;
    templateIdx: bigint;
}) => Promise<Execution>;
export declare const getCompleteRecoveryAction: ({ client, account, recoveryData, }: {
    client: PublicClient;
    account: Address;
    recoveryData: Hex;
}) => Promise<Execution>;
export declare const getCancelRecoveryAction: ({ client, }: {
    client: PublicClient;
}) => Promise<Execution>;
export declare const getCancelExpiredRecoveryAction: ({ client, account, }: {
    client: PublicClient;
    account: Address;
}) => Promise<Execution>;
export declare const computeEmailAuthAddress: ({ client, recoveredAccount, accountSalt, }: {
    client: PublicClient;
    recoveredAccount: Address;
    accountSalt: Hex;
}) => Promise<Address>;
export declare const getGuardianConfig: ({ account, client, }: {
    account: Account;
    client: PublicClient;
}) => Promise<{
    guardianCount: bigint;
    totalWeight: bigint;
    acceptedWeight: bigint;
    threshold: bigint;
}>;
export declare const getGuardian: ({ account, client, guardian, }: {
    account: Account;
    client: PublicClient;
    guardian: Address;
}) => Promise<{
    status: number;
    weight: bigint;
}>;
export declare const getAllGuardians: ({ account, client, }: {
    account: Account;
    client: PublicClient;
}) => Promise<readonly Address[]>;
export declare const hasGuardianVoted: ({ account, client, guardian, }: {
    account: Account;
    client: PublicClient;
    guardian: Address;
}) => Promise<boolean>;
export declare const getAddGuardianAction: ({ client, guardian, weight, }: {
    client: PublicClient;
    guardian: Address;
    weight: bigint;
}) => Promise<Execution>;
export declare const getRemoveGuardianAction: ({ client, guardian, }: {
    client: PublicClient;
    guardian: Address;
}) => Promise<Execution>;
export declare const getChangeThresholdAction: ({ client, threshold, }: {
    client: PublicClient;
    threshold: bigint;
}) => Promise<Execution>;
//# sourceMappingURL=usage.d.ts.map