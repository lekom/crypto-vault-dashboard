export declare const abi: readonly [{
    readonly inputs: readonly [];
    readonly name: "AccessDenied";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "AlreadyAttested";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "module";
        readonly type: "address";
    }];
    readonly name: "AlreadyRegistered";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "AlreadyRevoked";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "AttestationNotFound";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "DifferentResolvers";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "ExternalError_ModuleRegistration";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "ExternalError_ResolveAttestation";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "ExternalError_ResolveRevocation";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "ExternalError_SchemaValidation";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "factory";
        readonly type: "address";
    }];
    readonly name: "FactoryCallFailed";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InsufficientAttestations";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidAddress";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidAttestation";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidDeployment";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidExpirationTime";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidModuleType";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidModuleTypes";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IExternalResolver";
        readonly name: "resolver";
        readonly type: "address";
    }];
    readonly name: "InvalidResolver";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "ResolverUID";
        readonly name: "uid";
        readonly type: "bytes32";
    }];
    readonly name: "InvalidResolverUID";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidSalt";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidSchema";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IExternalSchemaValidator";
        readonly name: "validator";
        readonly type: "address";
    }];
    readonly name: "InvalidSchemaValidator";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidSignature";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidThreshold";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "InvalidTrustedAttesterInput";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "moduleAddress";
        readonly type: "address";
    }];
    readonly name: "ModuleAddressIsNotContract";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "module";
        readonly type: "address";
    }];
    readonly name: "ModuleNotFoundInRegistry";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "NoTrustedAttestersFound";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "ResolverAlreadyExists";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "attester";
        readonly type: "address";
    }];
    readonly name: "RevokedAttestation";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "SchemaUID";
        readonly name: "uid";
        readonly type: "bytes32";
    }];
    readonly name: "SchemaAlreadyExists";
    readonly type: "error";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "moduleAddress";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "attester";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "SchemaUID";
        readonly name: "schemaUID";
        readonly type: "bytes32";
    }, {
        readonly indexed: true;
        readonly internalType: "AttestationDataRef";
        readonly name: "sstore2Pointer";
        readonly type: "address";
    }];
    readonly name: "Attested";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "implementation";
        readonly type: "address";
    }];
    readonly name: "ModuleRegistration";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "ResolverUID";
        readonly name: "uid";
        readonly type: "bytes32";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "resolver";
        readonly type: "address";
    }];
    readonly name: "NewResolver";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "ResolverUID";
        readonly name: "uid";
        readonly type: "bytes32";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "newOwner";
        readonly type: "address";
    }];
    readonly name: "NewResolverOwner";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "smartAccount";
        readonly type: "address";
    }];
    readonly name: "NewTrustedAttesters";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "contract IExternalResolver";
        readonly name: "resolver";
        readonly type: "address";
    }];
    readonly name: "ResolverRevocationError";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "moduleAddress";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "revoker";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "SchemaUID";
        readonly name: "schema";
        readonly type: "bytes32";
    }];
    readonly name: "Revoked";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "SchemaUID";
        readonly name: "uid";
        readonly type: "bytes32";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "registerer";
        readonly type: "address";
    }];
    readonly name: "SchemaRegistered";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "SchemaUID";
        readonly name: "schemaUID";
        readonly type: "bytes32";
    }, {
        readonly internalType: "address";
        readonly name: "attester";
        readonly type: "address";
    }, {
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "moduleAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint48";
            readonly name: "expirationTime";
            readonly type: "uint48";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "ModuleType[]";
            readonly name: "moduleTypes";
            readonly type: "uint256[]";
        }];
        readonly internalType: "struct AttestationRequest[]";
        readonly name: "requests";
        readonly type: "tuple[]";
    }, {
        readonly internalType: "bytes";
        readonly name: "signature";
        readonly type: "bytes";
    }];
    readonly name: "attest";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "SchemaUID";
        readonly name: "schemaUID";
        readonly type: "bytes32";
    }, {
        readonly internalType: "address";
        readonly name: "attester";
        readonly type: "address";
    }, {
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "moduleAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint48";
            readonly name: "expirationTime";
            readonly type: "uint48";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "ModuleType[]";
            readonly name: "moduleTypes";
            readonly type: "uint256[]";
        }];
        readonly internalType: "struct AttestationRequest";
        readonly name: "request";
        readonly type: "tuple";
    }, {
        readonly internalType: "bytes";
        readonly name: "signature";
        readonly type: "bytes";
    }];
    readonly name: "attest";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "SchemaUID";
        readonly name: "schemaUID";
        readonly type: "bytes32";
    }, {
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "moduleAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint48";
            readonly name: "expirationTime";
            readonly type: "uint48";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "ModuleType[]";
            readonly name: "moduleTypes";
            readonly type: "uint256[]";
        }];
        readonly internalType: "struct AttestationRequest";
        readonly name: "request";
        readonly type: "tuple";
    }];
    readonly name: "attest";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "SchemaUID";
        readonly name: "schemaUID";
        readonly type: "bytes32";
    }, {
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "moduleAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint48";
            readonly name: "expirationTime";
            readonly type: "uint48";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "ModuleType[]";
            readonly name: "moduleTypes";
            readonly type: "uint256[]";
        }];
        readonly internalType: "struct AttestationRequest[]";
        readonly name: "requests";
        readonly type: "tuple[]";
    }];
    readonly name: "attest";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "attester";
        readonly type: "address";
    }];
    readonly name: "attesterNonce";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "nonce";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "salt";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bytes";
        readonly name: "initCode";
        readonly type: "bytes";
    }];
    readonly name: "calcModuleAddress";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "module";
        readonly type: "address";
    }, {
        readonly internalType: "address[]";
        readonly name: "attesters";
        readonly type: "address[]";
    }, {
        readonly internalType: "uint256";
        readonly name: "threshold";
        readonly type: "uint256";
    }];
    readonly name: "check";
    readonly outputs: readonly [];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "module";
        readonly type: "address";
    }, {
        readonly internalType: "ModuleType";
        readonly name: "moduleType";
        readonly type: "uint256";
    }, {
        readonly internalType: "address[]";
        readonly name: "attesters";
        readonly type: "address[]";
    }, {
        readonly internalType: "uint256";
        readonly name: "threshold";
        readonly type: "uint256";
    }];
    readonly name: "check";
    readonly outputs: readonly [];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "module";
        readonly type: "address";
    }, {
        readonly internalType: "ModuleType";
        readonly name: "moduleType";
        readonly type: "uint256";
    }];
    readonly name: "check";
    readonly outputs: readonly [];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "module";
        readonly type: "address";
    }];
    readonly name: "check";
    readonly outputs: readonly [];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "smartAccount";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "module";
        readonly type: "address";
    }];
    readonly name: "checkForAccount";
    readonly outputs: readonly [];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "smartAccount";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "module";
        readonly type: "address";
    }, {
        readonly internalType: "ModuleType";
        readonly name: "moduleType";
        readonly type: "uint256";
    }];
    readonly name: "checkForAccount";
    readonly outputs: readonly [];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "salt";
        readonly type: "bytes32";
    }, {
        readonly internalType: "ResolverUID";
        readonly name: "resolverUID";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bytes";
        readonly name: "initCode";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes";
        readonly name: "metadata";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes";
        readonly name: "resolverContext";
        readonly type: "bytes";
    }];
    readonly name: "deployModule";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "moduleAddress";
        readonly type: "address";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "factory";
        readonly type: "address";
    }, {
        readonly internalType: "bytes";
        readonly name: "callOnFactory";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes";
        readonly name: "metadata";
        readonly type: "bytes";
    }, {
        readonly internalType: "ResolverUID";
        readonly name: "resolverUID";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bytes";
        readonly name: "resolverContext";
        readonly type: "bytes";
    }];
    readonly name: "deployViaFactory";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "moduleAddress";
        readonly type: "address";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "eip712Domain";
    readonly outputs: readonly [{
        readonly internalType: "bytes1";
        readonly name: "fields";
        readonly type: "bytes1";
    }, {
        readonly internalType: "string";
        readonly name: "name";
        readonly type: "string";
    }, {
        readonly internalType: "string";
        readonly name: "version";
        readonly type: "string";
    }, {
        readonly internalType: "uint256";
        readonly name: "chainId";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "verifyingContract";
        readonly type: "address";
    }, {
        readonly internalType: "bytes32";
        readonly name: "salt";
        readonly type: "bytes32";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "extensions";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "module";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "attester";
        readonly type: "address";
    }];
    readonly name: "findAttestation";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint48";
            readonly name: "time";
            readonly type: "uint48";
        }, {
            readonly internalType: "uint48";
            readonly name: "expirationTime";
            readonly type: "uint48";
        }, {
            readonly internalType: "uint48";
            readonly name: "revocationTime";
            readonly type: "uint48";
        }, {
            readonly internalType: "PackedModuleTypes";
            readonly name: "moduleTypes";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "moduleAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "attester";
            readonly type: "address";
        }, {
            readonly internalType: "AttestationDataRef";
            readonly name: "dataPointer";
            readonly type: "address";
        }, {
            readonly internalType: "SchemaUID";
            readonly name: "schemaUID";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct AttestationRecord";
        readonly name: "attestation";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "module";
        readonly type: "address";
    }, {
        readonly internalType: "address[]";
        readonly name: "attesters";
        readonly type: "address[]";
    }];
    readonly name: "findAttestations";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint48";
            readonly name: "time";
            readonly type: "uint48";
        }, {
            readonly internalType: "uint48";
            readonly name: "expirationTime";
            readonly type: "uint48";
        }, {
            readonly internalType: "uint48";
            readonly name: "revocationTime";
            readonly type: "uint48";
        }, {
            readonly internalType: "PackedModuleTypes";
            readonly name: "moduleTypes";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "moduleAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "attester";
            readonly type: "address";
        }, {
            readonly internalType: "AttestationDataRef";
            readonly name: "dataPointer";
            readonly type: "address";
        }, {
            readonly internalType: "SchemaUID";
            readonly name: "schemaUID";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct AttestationRecord[]";
        readonly name: "attestations";
        readonly type: "tuple[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "moduleAddress";
        readonly type: "address";
    }];
    readonly name: "findModule";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "ResolverUID";
            readonly name: "resolverUID";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "metadata";
            readonly type: "bytes";
        }];
        readonly internalType: "struct ModuleRecord";
        readonly name: "moduleRecord";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "ResolverUID";
        readonly name: "uid";
        readonly type: "bytes32";
    }];
    readonly name: "findResolver";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "contract IExternalResolver";
            readonly name: "resolver";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "resolverOwner";
            readonly type: "address";
        }];
        readonly internalType: "struct ResolverRecord";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "SchemaUID";
        readonly name: "uid";
        readonly type: "bytes32";
    }];
    readonly name: "findSchema";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint48";
            readonly name: "registeredAt";
            readonly type: "uint48";
        }, {
            readonly internalType: "contract IExternalSchemaValidator";
            readonly name: "validator";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "schema";
            readonly type: "string";
        }];
        readonly internalType: "struct SchemaRecord";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "smartAccount";
        readonly type: "address";
    }];
    readonly name: "findTrustedAttesters";
    readonly outputs: readonly [{
        readonly internalType: "address[]";
        readonly name: "attesters";
        readonly type: "address[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "moduleAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint48";
            readonly name: "expirationTime";
            readonly type: "uint48";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "ModuleType[]";
            readonly name: "moduleTypes";
            readonly type: "uint256[]";
        }];
        readonly internalType: "struct AttestationRequest";
        readonly name: "request";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "attester";
        readonly type: "address";
    }];
    readonly name: "getDigest";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "digest";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "moduleAddress";
            readonly type: "address";
        }];
        readonly internalType: "struct RevocationRequest[]";
        readonly name: "requests";
        readonly type: "tuple[]";
    }, {
        readonly internalType: "address";
        readonly name: "attester";
        readonly type: "address";
    }];
    readonly name: "getDigest";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "digest";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "moduleAddress";
            readonly type: "address";
        }];
        readonly internalType: "struct RevocationRequest";
        readonly name: "request";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "attester";
        readonly type: "address";
    }];
    readonly name: "getDigest";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "digest";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "moduleAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint48";
            readonly name: "expirationTime";
            readonly type: "uint48";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "ModuleType[]";
            readonly name: "moduleTypes";
            readonly type: "uint256[]";
        }];
        readonly internalType: "struct AttestationRequest[]";
        readonly name: "requests";
        readonly type: "tuple[]";
    }, {
        readonly internalType: "address";
        readonly name: "attester";
        readonly type: "address";
    }];
    readonly name: "getDigest";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "digest";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "ResolverUID";
        readonly name: "resolverUID";
        readonly type: "bytes32";
    }, {
        readonly internalType: "address";
        readonly name: "moduleAddress";
        readonly type: "address";
    }, {
        readonly internalType: "bytes";
        readonly name: "metadata";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes";
        readonly name: "resolverContext";
        readonly type: "bytes";
    }];
    readonly name: "registerModule";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IExternalResolver";
        readonly name: "resolver";
        readonly type: "address";
    }];
    readonly name: "registerResolver";
    readonly outputs: readonly [{
        readonly internalType: "ResolverUID";
        readonly name: "uid";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "string";
        readonly name: "schema";
        readonly type: "string";
    }, {
        readonly internalType: "contract IExternalSchemaValidator";
        readonly name: "validator";
        readonly type: "address";
    }];
    readonly name: "registerSchema";
    readonly outputs: readonly [{
        readonly internalType: "SchemaUID";
        readonly name: "uid";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "moduleAddress";
            readonly type: "address";
        }];
        readonly internalType: "struct RevocationRequest[]";
        readonly name: "requests";
        readonly type: "tuple[]";
    }];
    readonly name: "revoke";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "attester";
        readonly type: "address";
    }, {
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "moduleAddress";
            readonly type: "address";
        }];
        readonly internalType: "struct RevocationRequest[]";
        readonly name: "requests";
        readonly type: "tuple[]";
    }, {
        readonly internalType: "bytes";
        readonly name: "signature";
        readonly type: "bytes";
    }];
    readonly name: "revoke";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "moduleAddress";
            readonly type: "address";
        }];
        readonly internalType: "struct RevocationRequest";
        readonly name: "request";
        readonly type: "tuple";
    }];
    readonly name: "revoke";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "attester";
        readonly type: "address";
    }, {
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "moduleAddress";
            readonly type: "address";
        }];
        readonly internalType: "struct RevocationRequest";
        readonly name: "request";
        readonly type: "tuple";
    }, {
        readonly internalType: "bytes";
        readonly name: "signature";
        readonly type: "bytes";
    }];
    readonly name: "revoke";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "ResolverUID";
        readonly name: "uid";
        readonly type: "bytes32";
    }, {
        readonly internalType: "contract IExternalResolver";
        readonly name: "resolver";
        readonly type: "address";
    }];
    readonly name: "setResolver";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "ResolverUID";
        readonly name: "uid";
        readonly type: "bytes32";
    }, {
        readonly internalType: "address";
        readonly name: "newOwner";
        readonly type: "address";
    }];
    readonly name: "transferResolverOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint8";
        readonly name: "threshold";
        readonly type: "uint8";
    }, {
        readonly internalType: "address[]";
        readonly name: "attesters";
        readonly type: "address[]";
    }];
    readonly name: "trustAttesters";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}];
//# sourceMappingURL=abi.d.ts.map