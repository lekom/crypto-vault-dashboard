import { Address, Hex, PublicClient } from 'viem';
import { Account, Execution, ERC1271SignatureParams, ERC1271HashParams } from '../types';
import { KernelModule, KernelModuleType } from './types';
export declare class KernelImplementation {
    getInstalledModules: ({ account, client, }: {
        client: PublicClient;
        account: Account;
        moduleTypes?: KernelModuleType[];
    }) => Promise<Address[]>;
    installModule: ({ client, account, module, }: {
        client: PublicClient;
        account: Account;
        module: KernelModule;
    }) => Promise<Execution[]>;
    isModuleInstalled: ({ client, account, module, }: {
        client: PublicClient;
        account: Account;
        module: KernelModule;
    }) => Promise<boolean>;
    uninstallModule: ({ client, account, module, }: {
        client: PublicClient;
        account: Account;
        module: KernelModule;
    }) => Promise<Execution[]>;
    encode1271Signature: ({ account, validator, signature, }: ERC1271SignatureParams) => Hex;
    encode1271Hash: ({ account, chainId, validator, hash, }: ERC1271HashParams) => Hex;
    encodeModuleInstallationData: ({ account, module, }: {
        account: Account;
        module: KernelModule;
    }) => Hex;
    encodeModuleUninstallationData: ({ client, account, module, }: {
        client: PublicClient;
        account: Account;
        module: KernelModule;
    }) => Promise<Hex>;
    encodeValidatorNonce: ({ validator, }: {
        validator: KernelModule | Address;
    }) => bigint;
}
//# sourceMappingURL=index.d.ts.map