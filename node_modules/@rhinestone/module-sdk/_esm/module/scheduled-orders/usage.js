import { encodeAbiParameters, encodeFunctionData, encodePacked, } from 'viem';
import { abi } from './abi.js';
import { getSwapDetails } from '../utils/uniswap.js';
import { GLOBAL_CONSTANTS } from '../../constants.js';
export const getCreateScheduledOrderAction = ({ recurringOrder, }) => {
    const data = encodeFunctionData({
        functionName: 'addOrder',
        abi,
        args: [
            encodePacked(['uint48', 'uint16', 'uint48', 'bytes'], [
                recurringOrder.repeatEvery,
                recurringOrder.numberOfRepeats,
                recurringOrder.startDate,
                getSwapOrderData({ recurringOrder }),
            ]),
        ],
    });
    return {
        to: GLOBAL_CONSTANTS.SCHEDULED_ORDERS_EXECUTOR_ADDRESS,
        target: GLOBAL_CONSTANTS.SCHEDULED_ORDERS_EXECUTOR_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
export const getSwapOrderData = ({ recurringOrder }) => {
    return encodeAbiParameters([
        { name: 'tokenIn', type: 'address' },
        { name: 'tokenOut', type: 'address' },
        { name: 'amountIn', type: 'uint256' },
    ], [
        recurringOrder.buyToken.token_address,
        recurringOrder.sellToken.token_address,
        BigInt(recurringOrder.amount * 10 ** recurringOrder.sellToken.decimals),
    ]);
};
export const getExecuteScheduledOrderAction = ({ jobId, }) => {
    const swapDetails = getSwapDetails();
    const data = encodeFunctionData({
        functionName: 'executeOrder',
        abi,
        args: [
            BigInt(jobId),
            swapDetails.sqrtPriceLimitX96,
            swapDetails.amountOutMin,
            swapDetails.fee,
        ],
    });
    return {
        to: GLOBAL_CONSTANTS.SCHEDULED_ORDERS_EXECUTOR_ADDRESS,
        target: GLOBAL_CONSTANTS.SCHEDULED_ORDERS_EXECUTOR_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
//# sourceMappingURL=usage.js.map