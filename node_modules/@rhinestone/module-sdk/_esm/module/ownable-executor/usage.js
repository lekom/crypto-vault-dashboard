import { encodeFunctionData, getAddress, encodePacked, encodeAbiParameters, } from 'viem';
import { abi } from './abi.js';
import { SENTINEL_ADDRESS } from '../../common/constants.js';
import { GLOBAL_CONSTANTS } from '../../constants.js';
export const getAddOwnableExecutorOwnerAction = async ({ owner, client, account, }) => {
    const owners = await getOwnableExecutorOwners({ account, client });
    const currentOwnerIndex = owners.findIndex((o) => o === owner);
    if (currentOwnerIndex !== -1) {
        throw new Error('Owner already exists');
    }
    const data = encodeFunctionData({
        functionName: 'addOwner',
        abi,
        args: [owner],
    });
    return {
        to: GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
        target: GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
export const getRemoveOwnableExecutorOwnerAction = async ({ client, account, owner, }) => {
    const owners = await getOwnableExecutorOwners({ account, client });
    let prevOwner;
    const currentOwnerIndex = owners.findIndex((o) => o === owner);
    if (currentOwnerIndex === -1) {
        throw new Error('Owner not found');
    }
    else if (currentOwnerIndex === 0) {
        prevOwner = SENTINEL_ADDRESS;
    }
    else {
        prevOwner = getAddress(owners[currentOwnerIndex - 1]);
    }
    const data = encodeFunctionData({
        functionName: 'removeOwner',
        abi,
        args: [prevOwner, owner],
    });
    return {
        to: GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
        target: GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
export const getOwnableExecutorOwners = async ({ account, client, }) => {
    try {
        const owners = (await client.readContract({
            address: GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
            abi,
            functionName: 'getOwners',
            args: [account.address],
        }));
        return owners;
    }
    catch (err) {
        return [];
    }
};
export const getExecuteOnOwnedAccountAction = ({ ownedAccount, execution, }) => {
    const data = encodeFunctionData({
        functionName: 'executeOnOwnedAccount',
        abi,
        args: [
            ownedAccount,
            encodePacked(['address', 'uint256', 'bytes'], [execution.target, BigInt(Number(execution.value)), execution.callData]),
        ],
    });
    return {
        to: GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
        target: GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
export const getExecuteBatchOnOwnedAccountAction = ({ ownedAccount, executions, }) => {
    const data = encodeFunctionData({
        functionName: 'executeBatchOnOwnedAccount',
        abi,
        args: [
            ownedAccount,
            encodeAbiParameters([
                {
                    components: [
                        {
                            name: 'target',
                            type: 'address',
                        },
                        {
                            name: 'value',
                            type: 'uint256',
                        },
                        {
                            name: 'callData',
                            type: 'bytes',
                        },
                    ],
                    name: 'Execution',
                    type: 'tuple[]',
                },
            ], 
            // @ts-ignore
            [executions]),
        ],
    });
    return {
        to: GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
        target: GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
//# sourceMappingURL=usage.js.map