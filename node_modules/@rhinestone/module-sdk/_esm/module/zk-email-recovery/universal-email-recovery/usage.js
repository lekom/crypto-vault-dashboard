import { encodeFunctionData, toHex, zeroAddress, } from 'viem';
import { abi } from './abi.js';
import { GLOBAL_CONSTANTS } from '../../../constants.js';
export const getRecoveryConfig = async ({ account, client, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'getRecoveryConfig',
            args: [account.address],
        });
    }
    catch (err) {
        return { delay: 0n, expiry: 0n };
    }
};
export const getRecoveryRequest = async ({ account, client, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'getRecoveryRequest',
            args: [account.address],
        });
    }
    catch (err) {
        return [0n, 0n, 0n, toHex(0, { size: 32 })];
    }
};
export const getPreviousRecoveryRequest = async ({ account, client, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'getPreviousRecoveryRequest',
            args: [account.address],
        });
    }
    catch (err) {
        return {
            previousGuardianInitiated: zeroAddress,
            cancelRecoveryCooldown: 0n,
        };
    }
};
export const isActivated = async ({ account, client, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'isActivated',
            args: [account.address],
        });
    }
    catch (err) {
        return false;
    }
};
export const canStartRecoveryRequest = async ({ account, client, validator, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'canStartRecoveryRequest',
            args: [account.address, validator],
        });
    }
    catch (err) {
        return false;
    }
};
export const getAllowValidatorRecoveryAction = async ({ client, validator, isInstalledContext, recoverySelector, }) => {
    const data = encodeFunctionData({
        functionName: 'allowValidatorRecovery',
        abi,
        args: [validator, isInstalledContext, recoverySelector],
    });
    return {
        to: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
export const getDisallowValidatorRecoveryAction = async ({ client, validator, prevValidator, recoverySelector, }) => {
    const data = encodeFunctionData({
        functionName: 'disallowValidatorRecovery',
        abi,
        args: [validator, prevValidator, recoverySelector],
    });
    return {
        to: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
export const getAllowedValidators = async ({ account, client, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'getAllowedValidators',
            args: [account.address],
        });
    }
    catch (err) {
        return [];
    }
};
export const getAllowedSelectors = async ({ account, client, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'getAllowedSelectors',
            args: [account.address],
        });
    }
    catch (err) {
        return [];
    }
};
export const acceptanceCommandTemplates = async ({ client, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'acceptanceCommandTemplates',
        });
    }
    catch (err) {
        return [];
    }
};
export const recoveryCommandTemplates = async ({ client, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'recoveryCommandTemplates',
        });
    }
    catch (err) {
        return [];
    }
};
export const extractRecoveredAccountFromAcceptanceCommand = async ({ client, commandParams, templateIdx, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'extractRecoveredAccountFromAcceptanceCommand',
            args: [commandParams, templateIdx],
        });
    }
    catch (err) {
        return zeroAddress;
    }
};
export const extractRecoveredAccountFromRecoveryCommand = async ({ client, commandParams, templateIdx, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'extractRecoveredAccountFromRecoveryCommand',
            args: [commandParams, templateIdx],
        });
    }
    catch (err) {
        return zeroAddress;
    }
};
export const computeAcceptanceTemplateId = async ({ client, templateIdx, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'computeAcceptanceTemplateId',
            args: [templateIdx],
        });
    }
    catch (err) {
        return 0n;
    }
};
export const computeRecoveryTemplateId = async ({ client, templateIdx, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'computeRecoveryTemplateId',
            args: [templateIdx],
        });
    }
    catch (err) {
        return 0n;
    }
};
export const getVerifier = async ({ client, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'verifier',
        });
    }
    catch (err) {
        return zeroAddress;
    }
};
export const getDkim = async ({ client, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'dkim',
        });
    }
    catch (err) {
        return zeroAddress;
    }
};
export const getEmailAuthImplementation = async ({ client, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'emailAuthImplementation',
        });
    }
    catch (err) {
        return zeroAddress;
    }
};
export const getUpdateRecoveryConfigAction = async ({ client, delay, expiry, }) => {
    const data = encodeFunctionData({
        functionName: 'updateRecoveryConfig',
        abi,
        args: [{ delay, expiry }],
    });
    return {
        to: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
export const getHandleAcceptanceAction = async ({ client, emailAuthMsg, templateIdx, }) => {
    const data = encodeFunctionData({
        functionName: 'handleAcceptance',
        abi,
        args: [emailAuthMsg, templateIdx],
    });
    return {
        to: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
export const getHandleRecoveryAction = async ({ client, emailAuthMsg, templateIdx, }) => {
    const data = encodeFunctionData({
        functionName: 'handleRecovery',
        abi,
        args: [emailAuthMsg, templateIdx],
    });
    return {
        to: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
export const getCompleteRecoveryAction = async ({ client, account, recoveryData, }) => {
    const data = encodeFunctionData({
        functionName: 'completeRecovery',
        abi,
        args: [account, recoveryData],
    });
    return {
        to: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
export const getCancelRecoveryAction = async ({ client, }) => {
    const data = encodeFunctionData({
        functionName: 'cancelRecovery',
        abi,
    });
    return {
        to: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
export const getCancelExpiredRecoveryAction = async ({ client, account, }) => {
    const data = encodeFunctionData({
        functionName: 'cancelExpiredRecovery',
        abi,
        args: [account],
    });
    return {
        to: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
export const computeEmailAuthAddress = async ({ client, recoveredAccount, accountSalt, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'computeEmailAuthAddress',
            args: [recoveredAccount, accountSalt],
        });
    }
    catch (err) {
        return zeroAddress;
    }
};
export const getGuardianConfig = async ({ account, client, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'getGuardianConfig',
            args: [account.address],
        });
    }
    catch (err) {
        return {
            guardianCount: 0n,
            totalWeight: 0n,
            acceptedWeight: 0n,
            threshold: 0n,
        };
    }
};
export const getGuardian = async ({ account, client, guardian, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'getGuardian',
            args: [account.address, guardian],
        });
    }
    catch (err) {
        return { status: 0, weight: 0n };
    }
};
export const getAllGuardians = async ({ account, client, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'getAllGuardians',
            args: [account.address],
        });
    }
    catch (err) {
        return [];
    }
};
export const hasGuardianVoted = async ({ account, client, guardian, }) => {
    try {
        return await client.readContract({
            address: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi,
            functionName: 'hasGuardianVoted',
            args: [account.address, guardian],
        });
    }
    catch (err) {
        return false;
    }
};
export const getAddGuardianAction = async ({ client, guardian, weight, }) => {
    const data = encodeFunctionData({
        functionName: 'addGuardian',
        abi,
        args: [guardian, weight],
    });
    return {
        to: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
export const getRemoveGuardianAction = async ({ client, guardian, }) => {
    const data = encodeFunctionData({
        functionName: 'removeGuardian',
        abi,
        args: [guardian],
    });
    return {
        to: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
export const getChangeThresholdAction = async ({ client, threshold, }) => {
    const data = encodeFunctionData({
        functionName: 'changeThreshold',
        abi,
        args: [threshold],
    });
    return {
        to: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
//# sourceMappingURL=usage.js.map