import { encodeFunctionData, encodeAbiParameters, encodePacked, } from 'viem';
import { abi } from './abi.js';
import { GLOBAL_CONSTANTS } from '../../constants.js';
export const getSetMFAThresholdAction = ({ threshold, }) => {
    const data = encodeFunctionData({
        functionName: 'setThreshold',
        abi,
        args: [threshold],
    });
    return {
        to: GLOBAL_CONSTANTS.MULTI_FACTOR_VALIDATOR_ADDRESS,
        target: GLOBAL_CONSTANTS.MULTI_FACTOR_VALIDATOR_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
export const getSetMFAValidatorAction = ({ validatorAddress, validatorId, newValidatorData, }) => {
    const data = encodeFunctionData({
        functionName: 'setValidator',
        abi,
        args: [validatorAddress, validatorId, newValidatorData],
    });
    return {
        to: GLOBAL_CONSTANTS.MULTI_FACTOR_VALIDATOR_ADDRESS,
        target: GLOBAL_CONSTANTS.MULTI_FACTOR_VALIDATOR_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
export const getRemoveMFAValidatorAction = ({ validatorAddress, validatorId, }) => {
    const data = encodeFunctionData({
        functionName: 'removeValidator',
        abi,
        args: [validatorAddress, validatorId],
    });
    return {
        to: GLOBAL_CONSTANTS.MULTI_FACTOR_VALIDATOR_ADDRESS,
        target: GLOBAL_CONSTANTS.MULTI_FACTOR_VALIDATOR_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
export const isMFASubValidator = async ({ account, client, subValidator, validatorId, }) => {
    try {
        return (await client.readContract({
            address: GLOBAL_CONSTANTS.MULTI_FACTOR_VALIDATOR_ADDRESS,
            abi,
            functionName: 'isSubValidator',
            args: [account.address, subValidator, validatorId],
        }));
    }
    catch (err) {
        throw new Error(`Failed to check if ${subValidator} is a sub-validator`);
    }
};
export const getMFAValidatorMockSignature = () => {
    const mockValidators = [
        {
            packedValidatorAndId: encodePacked(['bytes12', 'address'], [
                '0x000000000000000000000000',
                '0xf83d07238a7c8814a48535035602123ad6dbfa63',
            ]),
            // signature
            data: '0xe8b94748580ca0b4993c9a1b86b5be851bfc076ff5ce3a1ff65bf16392acfcb800f9b4f1aef1555c7fce5599fffb17e7c635502154a0333ba21f3ae491839af51c',
        },
    ];
    return encodeAbiParameters([
        {
            components: [
                {
                    internalType: 'bytes32',
                    name: 'packedValidatorAndId',
                    type: 'bytes32',
                },
                { internalType: 'bytes', name: 'data', type: 'bytes' },
            ],
            name: 'validators',
            type: 'tuple[]',
        },
    ], [mockValidators]);
};
//# sourceMappingURL=usage.js.map