import { getSpendingLimitsPolicy } from '../spending-limits-policy/index.js';
import { getTimeFramePolicy } from '../time-frame-policy/index.js';
import { getUsageLimitPolicy } from '../usage-limit-policy/index.js';
import { getValueLimitPolicy } from '../value-limit-policy/index.js';
export const getPermissions = ({ permissions, }) => {
    const userOpPolicies = [];
    const erc7739Policies = {
        allowedERC7739Content: [],
        erc1271Policies: [],
    };
    const actions = [];
    for (const permission of permissions) {
        switch (permission.type) {
            case 'native-token-transfer':
                const valueLimitPolicy = getValueLimitPolicy({
                    limit: permission.data.allowance,
                });
                userOpPolicies.push({
                    policy: valueLimitPolicy.address,
                    initData: valueLimitPolicy.initData,
                });
                break;
            case 'erc20-token-transfer':
                const spendingLimitPolicy = getSpendingLimitsPolicy([
                    { token: permission.data.address, limit: permission.data.allowance },
                ]);
                userOpPolicies.push({
                    policy: spendingLimitPolicy.address,
                    initData: spendingLimitPolicy.initData,
                });
                break;
            case 'usage-limit':
                const usageLimitPolicy = getUsageLimitPolicy({
                    limit: permission.data.limit,
                });
                userOpPolicies.push({
                    policy: usageLimitPolicy.address,
                    initData: usageLimitPolicy.initData,
                });
                break;
            case 'timeframe':
                const timeFramePolicy = getTimeFramePolicy({
                    validUntil: permission.data.validUntil,
                    validAfter: permission.data.validAfter,
                });
                userOpPolicies.push({
                    policy: timeFramePolicy.address,
                    initData: timeFramePolicy.initData,
                });
                break;
        }
    }
    return {
        userOpPolicies: userOpPolicies,
        erc7739Policies: erc7739Policies,
        actions: actions,
    };
};
//# sourceMappingURL=permissions.js.map