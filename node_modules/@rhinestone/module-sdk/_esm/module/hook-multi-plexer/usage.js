import { encodeFunctionData } from 'viem';
import { abi } from './abi.js';
import { GLOBAL_CONSTANTS } from '../../constants.js';
export const getHooks = async ({ account, client, }) => {
    try {
        const hooks = (await client.readContract({
            address: GLOBAL_CONSTANTS.HOOK_MULTI_PLEXER_ADDRESS,
            abi,
            functionName: 'getHooks',
            args: [account.address],
        }));
        return hooks;
    }
    catch (err) {
        console.error(err);
        return [];
    }
};
export const getAddHookAction = ({ hook, hookType, sig, }) => {
    try {
        const data = encodeFunctionData({
            functionName: sig ? 'addSigHook' : 'addHook',
            abi,
            args: sig ? [hook, sig, hookType] : [hook, hookType],
        });
        return {
            to: GLOBAL_CONSTANTS.HOOK_MULTI_PLEXER_ADDRESS,
            target: GLOBAL_CONSTANTS.HOOK_MULTI_PLEXER_ADDRESS,
            value: BigInt(0),
            callData: data,
            data,
        };
    }
    catch {
        throw new Error(`Failed to add hook ${hook}`);
    }
};
export const getRemoveHookAction = ({ hook, hookType, sig, }) => {
    try {
        const data = encodeFunctionData({
            functionName: sig ? 'removeSigHook' : 'removeHook',
            abi,
            args: sig ? [hook, sig, hookType] : [hook, hookType],
        });
        return {
            to: GLOBAL_CONSTANTS.HOOK_MULTI_PLEXER_ADDRESS,
            target: GLOBAL_CONSTANTS.HOOK_MULTI_PLEXER_ADDRESS,
            value: BigInt(0),
            callData: data,
            data,
        };
    }
    catch {
        throw new Error(`Failed to remove hook ${hook}`);
    }
};
//# sourceMappingURL=usage.js.map