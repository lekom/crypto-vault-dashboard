import { parseAbi, zeroAddress } from 'viem';
import { getInstalledModules as getInstalledModulesQuery } from '../../../common/queries/account.js';
import { accountAbi } from '../constants/abis.js';
import { SENTINEL_ADDRESS } from '../../../common/constants.js';
export const getInstalledModules = async ({ account, client, }) => {
    let installedModules = [];
    try {
        installedModules = await getInstalledModulesQuery({
            account,
            client,
        });
    }
    catch (e) { }
    if (installedModules.length === 0) {
        const installedValidators = (await client.readContract({
            address: account.address,
            abi: parseAbi(accountAbi),
            functionName: 'getValidatorsPaginated',
            args: [SENTINEL_ADDRESS, 100],
        }));
        for (const validator of installedValidators) {
            installedModules.push(validator);
        }
        const installedExecutors = (await client.readContract({
            address: account.address,
            abi: parseAbi(accountAbi),
            functionName: 'getExecutorsPaginated',
            args: [SENTINEL_ADDRESS, 100],
        }));
        for (const executor of installedExecutors) {
            installedModules.push(executor);
        }
        const installedHook = (await client.readContract({
            address: account.address,
            abi: parseAbi(accountAbi),
            functionName: 'getActiveHook',
        }));
        if (installedHook != zeroAddress) {
            installedModules.push(installedHook);
        }
    }
    return installedModules;
};
//# sourceMappingURL=getInstalledModules.js.map