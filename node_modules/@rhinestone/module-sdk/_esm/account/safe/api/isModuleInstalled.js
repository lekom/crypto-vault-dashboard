import { encodeAbiParameters, parseAbi, parseAbiParameters, } from 'viem';
import { isContract } from '../../../common/utils.js';
import { accountAbi } from '../constants/abis.js';
import { moduleTypeIds } from '../../../module/types.js';
export const isModuleInstalled = async ({ client, account, module, }) => {
    switch (module.type) {
        case 'validator':
        case 'executor':
            return await _isModuleInstalled({ client, account, module });
        case 'hook':
            if (!module.selector || module.hookType === undefined) {
                throw new Error(`hookType and selector params are required for module type ${module.type}`);
            }
            return await _isModuleInstalled({ client, account, module });
        case 'fallback':
            if (!module.functionSig) {
                throw new Error(`functionSig param is required for module type ${module.type}`);
            }
            return await _isModuleInstalled({ client, account, module });
        default:
            throw new Error(`Unknown module type ${module.type}`);
    }
};
const _isModuleInstalled = async ({ client, account, module, }) => {
    if (await isContract({ client, address: account.address })) {
        return (await client.readContract({
            address: account.address,
            abi: parseAbi(accountAbi),
            functionName: 'isModuleInstalled',
            args: [
                moduleTypeIds[module.type],
                module.module,
                getModuleAdditionalContext(module),
            ],
        }));
    }
    return false;
};
const getModuleAdditionalContext = (module) => {
    switch (module.type) {
        case 'validator':
        case 'executor':
            return '0x';
        case 'hook':
            return encodeAbiParameters(parseAbiParameters('uint8 hookType, bytes4 selector'), [module.hookType, module.selector]);
        case 'fallback':
            return encodeAbiParameters(parseAbiParameters('bytes4 functionSig'), [
                module.functionSig,
            ]);
        default:
            throw new Error(`Unknown module type ${module.type}`);
    }
};
//# sourceMappingURL=isModuleInstalled.js.map