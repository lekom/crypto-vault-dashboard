"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installModule = void 0;
const viem_1 = require("viem");
const isModuleInstalled_1 = require("./isModuleInstalled");
const abis_1 = require("../constants/abis");
const types_1 = require("../types");
const installModule = ({ client, account, module, }) => {
    switch (module.type) {
        case 'validator':
        case 'executor':
            return _installModule({ client, account, module, withHook: true });
        case 'hook':
        case 'policy':
        case 'signer':
            return _installModule({ client, account, module, withHook: false });
        case 'fallback':
            return installFallback({ client, account, module });
        default:
            throw new Error(`Unknown module type ${module.type}`);
    }
};
exports.installModule = installModule;
const _installModule = async ({ client, account, module, withHook = false, }) => {
    const executions = [];
    const isInstalled = await (0, isModuleInstalled_1.isModuleInstalled)({ client, account, module });
    if (!isInstalled) {
        const data = (0, viem_1.encodeFunctionData)({
            functionName: 'installModule',
            abi: (0, viem_1.parseAbi)(abis_1.accountAbi),
            args: [
                BigInt(types_1.kernelModuleTypeIds[module.type]),
                module.module,
                withHook
                    ? (0, viem_1.encodePacked)(['address', 'bytes'], [
                        module.hook ?? viem_1.zeroAddress,
                        (0, viem_1.encodeAbiParameters)([{ type: 'bytes' }, { type: 'bytes' }], [module.initData || '0x', '0x']),
                    ])
                    : module.initData || '0x',
            ],
        });
        executions.push({
            to: account.address,
            target: account.address,
            value: BigInt(0),
            callData: data,
            data,
        });
    }
    return executions;
};
async function installFallback({ client, account, module, }) {
    if (!module.selector || !module.callType) {
        throw new Error(`Hook, selector and callType are required for module type ${module.type}`);
    }
    const executions = [];
    const isInstalled = await (0, isModuleInstalled_1.isModuleInstalled)({
        client,
        account,
        module,
    });
    if (!isInstalled) {
        const data = (0, viem_1.encodeFunctionData)({
            functionName: 'installModule',
            abi: (0, viem_1.parseAbi)(abis_1.accountAbi),
            args: [
                BigInt(types_1.kernelModuleTypeIds[module.type]),
                module.module,
                (0, viem_1.encodePacked)(['bytes4', 'address', 'bytes'], [
                    module.selector,
                    module.hook ?? viem_1.zeroAddress,
                    (0, viem_1.encodeAbiParameters)([{ type: 'bytes' }, { type: 'bytes' }], [
                        (0, viem_1.encodePacked)(['bytes1', 'bytes'], [module.callType, module.initData || '0x']),
                        '0x',
                    ]),
                ]),
            ],
        });
        executions.push({
            to: account.address,
            target: account.address,
            value: BigInt(0),
            callData: data,
            data,
        });
    }
    return executions;
}
//# sourceMappingURL=installModule.js.map