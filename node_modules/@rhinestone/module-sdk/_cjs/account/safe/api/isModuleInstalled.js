"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isModuleInstalled = void 0;
const viem_1 = require("viem");
const utils_1 = require("../../../common/utils");
const abis_1 = require("../constants/abis");
const types_1 = require("../../../module/types");
const isModuleInstalled = async ({ client, account, module, }) => {
    switch (module.type) {
        case 'validator':
        case 'executor':
            return await _isModuleInstalled({ client, account, module });
        case 'hook':
            if (!module.selector || module.hookType === undefined) {
                throw new Error(`hookType and selector params are required for module type ${module.type}`);
            }
            return await _isModuleInstalled({ client, account, module });
        case 'fallback':
            if (!module.functionSig) {
                throw new Error(`functionSig param is required for module type ${module.type}`);
            }
            return await _isModuleInstalled({ client, account, module });
        default:
            throw new Error(`Unknown module type ${module.type}`);
    }
};
exports.isModuleInstalled = isModuleInstalled;
const _isModuleInstalled = async ({ client, account, module, }) => {
    if (await (0, utils_1.isContract)({ client, address: account.address })) {
        return (await client.readContract({
            address: account.address,
            abi: (0, viem_1.parseAbi)(abis_1.accountAbi),
            functionName: 'isModuleInstalled',
            args: [
                types_1.moduleTypeIds[module.type],
                module.module,
                getModuleAdditionalContext(module),
            ],
        }));
    }
    return false;
};
const getModuleAdditionalContext = (module) => {
    switch (module.type) {
        case 'validator':
        case 'executor':
            return '0x';
        case 'hook':
            return (0, viem_1.encodeAbiParameters)((0, viem_1.parseAbiParameters)('uint8 hookType, bytes4 selector'), [module.hookType, module.selector]);
        case 'fallback':
            return (0, viem_1.encodeAbiParameters)((0, viem_1.parseAbiParameters)('bytes4 functionSig'), [
                module.functionSig,
            ]);
        default:
            throw new Error(`Unknown module type ${module.type}`);
    }
};
//# sourceMappingURL=isModuleInstalled.js.map