"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installModule = void 0;
const viem_1 = require("viem");
const isModuleInstalled_1 = require("./isModuleInstalled");
const abis_1 = require("../constants/abis");
const types_1 = require("../../../module/types");
const installModule = ({ client, account, module, }) => {
    switch (module.type) {
        case 'validator':
        case 'executor':
            return _installModule({ client, account, module });
        case 'hook':
            if (!module.selector || module.hookType === undefined) {
                throw new Error(`hookType and selector params are required for module type ${module.type}`);
            }
            return _installModule({ client, account, module });
        case 'fallback':
            if (!module.functionSig || !module.callType) {
                throw new Error(`functionSig and callType params are required for module type ${module.type}`);
            }
            return _installModule({ client, account, module });
        default:
            throw new Error(`Unknown module type ${module.type}`);
    }
};
exports.installModule = installModule;
const _installModule = async ({ client, account, module, }) => {
    const executions = [];
    const isInstalled = await (0, isModuleInstalled_1.isModuleInstalled)({ client, account, module });
    if (!isInstalled) {
        const data = (0, viem_1.encodeFunctionData)({
            functionName: 'installModule',
            abi: (0, viem_1.parseAbi)(abis_1.accountAbi),
            args: [
                BigInt(types_1.moduleTypeIds[module.type]),
                module.module,
                getModuleCalldata(module),
            ],
        });
        executions.push({
            to: account.address,
            target: account.address,
            value: BigInt(0),
            callData: data,
            data,
        });
    }
    return executions;
};
const getModuleCalldata = (module) => {
    switch (module.type) {
        case 'validator':
        case 'executor':
            return module.initData || '0x';
        case 'hook':
            return (0, viem_1.encodeAbiParameters)((0, viem_1.parseAbiParameters)('uint8 hookType, bytes4 selector, bytes memory initData'), [module.hookType, module.selector, module.initData || '0x']);
        case 'fallback':
            return (0, viem_1.encodeAbiParameters)((0, viem_1.parseAbiParameters)('bytes4 functionSig, bytes1 calltype, bytes memory initData'), [module.functionSig, module.callType, module.initData || '0x']);
        default:
            throw new Error(`Unknown module type ${module.type}`);
    }
};
//# sourceMappingURL=installModule.js.map