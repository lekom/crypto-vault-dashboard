"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uninstallModule = void 0;
const viem_1 = require("viem");
const isModuleInstalled_1 = require("./isModuleInstalled");
const abis_1 = require("../constants/abis");
const types_1 = require("../../../module/types");
const getPrevModule_1 = require("../../../common/getPrevModule");
const uninstallModule = ({ client, account, module, }) => {
    switch (module.type) {
        case 'validator':
        case 'executor':
            return _uninstallModule({ client, account, module });
        case 'hook':
            if (!module.selector || module.hookType === undefined) {
                throw new Error(`hookType and selector params are required for module type ${module.type}`);
            }
            return _uninstallModule({ client, account, module });
        case 'fallback':
            if (!module.functionSig) {
                throw new Error(`functionSig param is required for module type ${module.type}`);
            }
            return _uninstallModule({ client, account, module });
        default:
            throw new Error(`Unknown module type ${module.type}`);
    }
};
exports.uninstallModule = uninstallModule;
const _uninstallModule = async ({ client, account, module, }) => {
    const executions = [];
    const isInstalled = await (0, isModuleInstalled_1.isModuleInstalled)({ client, account, module });
    if (isInstalled) {
        let moduleData = getModuleCalldata(module);
        if (module.type === 'validator' || module.type === 'executor') {
            const prev = await (0, getPrevModule_1.getPreviousModule)({ client, account, module });
            moduleData = (0, viem_1.encodeAbiParameters)([
                { name: 'prev', type: 'address' },
                { name: 'moduleInitData', type: 'bytes' },
            ], [prev, moduleData]);
        }
        const data = (0, viem_1.encodeFunctionData)({
            functionName: 'uninstallModule',
            abi: (0, viem_1.parseAbi)(abis_1.accountAbi),
            args: [BigInt(types_1.moduleTypeIds[module.type]), module.module, moduleData],
        });
        executions.push({
            to: account.address,
            target: account.address,
            value: BigInt(0),
            callData: data,
            data,
        });
    }
    return executions;
};
const getModuleCalldata = (module) => {
    switch (module.type) {
        case 'validator':
        case 'executor':
            return module.deInitData;
        case 'hook':
            return (0, viem_1.encodeAbiParameters)((0, viem_1.parseAbiParameters)('uint8 hookType, bytes4 selector, bytes memory deInitData'), [module.hookType, module.selector, module.deInitData]);
        case 'fallback':
            return (0, viem_1.encodeAbiParameters)((0, viem_1.parseAbiParameters)('bytes4 functionSig, bytes memory moduleDeInitData'), [module.functionSig, module.deInitData]);
        default:
            throw new Error(`Unknown module type ${module.type}`);
    }
};
//# sourceMappingURL=uninstallModule.js.map