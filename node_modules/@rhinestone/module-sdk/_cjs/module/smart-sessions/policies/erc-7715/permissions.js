"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPermissions = void 0;
const spending_limits_policy_1 = require("../spending-limits-policy");
const time_frame_policy_1 = require("../time-frame-policy");
const usage_limit_policy_1 = require("../usage-limit-policy");
const value_limit_policy_1 = require("../value-limit-policy");
const getPermissions = ({ permissions, }) => {
    const userOpPolicies = [];
    const erc7739Policies = {
        allowedERC7739Content: [],
        erc1271Policies: [],
    };
    const actions = [];
    for (const permission of permissions) {
        switch (permission.type) {
            case 'native-token-transfer':
                const valueLimitPolicy = (0, value_limit_policy_1.getValueLimitPolicy)({
                    limit: permission.data.allowance,
                });
                userOpPolicies.push({
                    policy: valueLimitPolicy.address,
                    initData: valueLimitPolicy.initData,
                });
                break;
            case 'erc20-token-transfer':
                const spendingLimitPolicy = (0, spending_limits_policy_1.getSpendingLimitsPolicy)([
                    { token: permission.data.address, limit: permission.data.allowance },
                ]);
                userOpPolicies.push({
                    policy: spendingLimitPolicy.address,
                    initData: spendingLimitPolicy.initData,
                });
                break;
            case 'usage-limit':
                const usageLimitPolicy = (0, usage_limit_policy_1.getUsageLimitPolicy)({
                    limit: permission.data.limit,
                });
                userOpPolicies.push({
                    policy: usageLimitPolicy.address,
                    initData: usageLimitPolicy.initData,
                });
                break;
            case 'timeframe':
                const timeFramePolicy = (0, time_frame_policy_1.getTimeFramePolicy)({
                    validUntil: permission.data.validUntil,
                    validAfter: permission.data.validAfter,
                });
                userOpPolicies.push({
                    policy: timeFramePolicy.address,
                    initData: timeFramePolicy.initData,
                });
                break;
        }
    }
    return {
        userOpPolicies: userOpPolicies,
        erc7739Policies: erc7739Policies,
        actions: actions,
    };
};
exports.getPermissions = getPermissions;
//# sourceMappingURL=permissions.js.map