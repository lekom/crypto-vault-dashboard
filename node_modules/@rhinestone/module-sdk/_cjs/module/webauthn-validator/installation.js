"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWebAuthnValidator = void 0;
const viem_1 = require("viem");
const utils_1 = require("./utils");
const constants_1 = require("../../constants");
const getWebAuthnValidator = (webAuthnCredential) => {
    let pubKeyX;
    let pubKeyY;
    if (typeof webAuthnCredential.pubKey === 'string' ||
        webAuthnCredential.pubKey instanceof Uint8Array) {
        const { x, y, prefix } = (0, utils_1.parsePublicKey)(webAuthnCredential.pubKey);
        pubKeyX = x;
        pubKeyY = y;
        if (prefix && prefix !== 4) {
            throw new Error('Only uncompressed public keys are supported');
        }
    }
    else {
        pubKeyX = webAuthnCredential.pubKey.x;
        pubKeyY = webAuthnCredential.pubKey.y;
    }
    return {
        address: constants_1.GLOBAL_CONSTANTS.WEBAUTHN_VALIDATOR_ADDRESS,
        module: constants_1.GLOBAL_CONSTANTS.WEBAUTHN_VALIDATOR_ADDRESS,
        initData: (0, viem_1.encodeAbiParameters)([
            {
                components: [
                    {
                        name: 'pubKeyX',
                        type: 'uint256',
                    },
                    {
                        name: 'pubKeyY',
                        type: 'uint256',
                    },
                ],
                type: 'tuple',
            },
            {
                type: 'bytes32',
                name: 'authenticatorIdHash',
            },
        ], [
            {
                pubKeyX,
                pubKeyY,
            },
            (0, viem_1.keccak256)((0, viem_1.toHex)(webAuthnCredential.authenticatorId)),
        ]),
        deInitData: '0x',
        hook: webAuthnCredential.hook,
        additionalContext: '0x',
        type: 'validator',
    };
};
exports.getWebAuthnValidator = getWebAuthnValidator;
//# sourceMappingURL=installation.js.map