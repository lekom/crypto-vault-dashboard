"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExecuteBatchOnOwnedAccountAction = exports.getExecuteOnOwnedAccountAction = exports.getOwnableExecutorOwners = exports.getRemoveOwnableExecutorOwnerAction = exports.getAddOwnableExecutorOwnerAction = void 0;
const viem_1 = require("viem");
const abi_1 = require("./abi");
const constants_1 = require("../../common/constants");
const constants_2 = require("../../constants");
const getAddOwnableExecutorOwnerAction = async ({ owner, client, account, }) => {
    const owners = await (0, exports.getOwnableExecutorOwners)({ account, client });
    const currentOwnerIndex = owners.findIndex((o) => o === owner);
    if (currentOwnerIndex !== -1) {
        throw new Error('Owner already exists');
    }
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'addOwner',
        abi: abi_1.abi,
        args: [owner],
    });
    return {
        to: constants_2.GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
        target: constants_2.GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
exports.getAddOwnableExecutorOwnerAction = getAddOwnableExecutorOwnerAction;
const getRemoveOwnableExecutorOwnerAction = async ({ client, account, owner, }) => {
    const owners = await (0, exports.getOwnableExecutorOwners)({ account, client });
    let prevOwner;
    const currentOwnerIndex = owners.findIndex((o) => o === owner);
    if (currentOwnerIndex === -1) {
        throw new Error('Owner not found');
    }
    else if (currentOwnerIndex === 0) {
        prevOwner = constants_1.SENTINEL_ADDRESS;
    }
    else {
        prevOwner = (0, viem_1.getAddress)(owners[currentOwnerIndex - 1]);
    }
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'removeOwner',
        abi: abi_1.abi,
        args: [prevOwner, owner],
    });
    return {
        to: constants_2.GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
        target: constants_2.GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
exports.getRemoveOwnableExecutorOwnerAction = getRemoveOwnableExecutorOwnerAction;
const getOwnableExecutorOwners = async ({ account, client, }) => {
    try {
        const owners = (await client.readContract({
            address: constants_2.GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
            abi: abi_1.abi,
            functionName: 'getOwners',
            args: [account.address],
        }));
        return owners;
    }
    catch (err) {
        return [];
    }
};
exports.getOwnableExecutorOwners = getOwnableExecutorOwners;
const getExecuteOnOwnedAccountAction = ({ ownedAccount, execution, }) => {
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'executeOnOwnedAccount',
        abi: abi_1.abi,
        args: [
            ownedAccount,
            (0, viem_1.encodePacked)(['address', 'uint256', 'bytes'], [execution.target, BigInt(Number(execution.value)), execution.callData]),
        ],
    });
    return {
        to: constants_2.GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
        target: constants_2.GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
exports.getExecuteOnOwnedAccountAction = getExecuteOnOwnedAccountAction;
const getExecuteBatchOnOwnedAccountAction = ({ ownedAccount, executions, }) => {
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'executeBatchOnOwnedAccount',
        abi: abi_1.abi,
        args: [
            ownedAccount,
            (0, viem_1.encodeAbiParameters)([
                {
                    components: [
                        {
                            name: 'target',
                            type: 'address',
                        },
                        {
                            name: 'value',
                            type: 'uint256',
                        },
                        {
                            name: 'callData',
                            type: 'bytes',
                        },
                    ],
                    name: 'Execution',
                    type: 'tuple[]',
                },
            ], [executions]),
        ],
    });
    return {
        to: constants_2.GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
        target: constants_2.GLOBAL_CONSTANTS.OWNABLE_EXECUTOR_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
exports.getExecuteBatchOnOwnedAccountAction = getExecuteBatchOnOwnedAccountAction;
//# sourceMappingURL=usage.js.map