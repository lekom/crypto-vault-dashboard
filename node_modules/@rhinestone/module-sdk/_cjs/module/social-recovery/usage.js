"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSocialRecoveryMockSignature = exports.getSocialRecoveryGuardians = exports.getRemoveSocialRecoveryGuardianAction = exports.getAddSocialRecoveryGuardianAction = exports.getSetSocialRecoveryThresholdAction = void 0;
const constants_1 = require("../../common/constants");
const viem_1 = require("viem");
const abi_1 = require("./abi");
const constants_2 = require("../../constants");
const getSetSocialRecoveryThresholdAction = ({ threshold, }) => {
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'setThreshold',
        abi: abi_1.abi,
        args: [BigInt(threshold)],
    });
    return {
        to: constants_2.GLOBAL_CONSTANTS.SOCIAL_RECOVERY_ADDRESS,
        target: constants_2.GLOBAL_CONSTANTS.SOCIAL_RECOVERY_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
exports.getSetSocialRecoveryThresholdAction = getSetSocialRecoveryThresholdAction;
const getAddSocialRecoveryGuardianAction = ({ guardian, }) => {
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'addGuardian',
        abi: abi_1.abi,
        args: [guardian],
    });
    return {
        to: constants_2.GLOBAL_CONSTANTS.SOCIAL_RECOVERY_ADDRESS,
        target: constants_2.GLOBAL_CONSTANTS.SOCIAL_RECOVERY_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
exports.getAddSocialRecoveryGuardianAction = getAddSocialRecoveryGuardianAction;
const getRemoveSocialRecoveryGuardianAction = async ({ client, account, guardian, }) => {
    const guardians = await (0, exports.getSocialRecoveryGuardians)({ account, client });
    let prevGuardian;
    const currentGuardianIndex = guardians.findIndex((g) => g === guardian);
    if (currentGuardianIndex === -1) {
        throw new Error('Guardian not found');
    }
    else if (currentGuardianIndex === 0) {
        prevGuardian = constants_1.SENTINEL_ADDRESS;
    }
    else {
        prevGuardian = (0, viem_1.getAddress)(guardians[currentGuardianIndex - 1]);
    }
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'removeGuardian',
        abi: abi_1.abi,
        args: [prevGuardian, guardian],
    });
    return {
        to: constants_2.GLOBAL_CONSTANTS.SOCIAL_RECOVERY_ADDRESS,
        target: constants_2.GLOBAL_CONSTANTS.SOCIAL_RECOVERY_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
exports.getRemoveSocialRecoveryGuardianAction = getRemoveSocialRecoveryGuardianAction;
const getSocialRecoveryGuardians = async ({ account, client, }) => {
    try {
        const guardians = (await client.readContract({
            address: constants_2.GLOBAL_CONSTANTS.SOCIAL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'getGuardians',
            args: [account.address],
        }));
        return guardians;
    }
    catch (err) {
        console.error(err);
        return [];
    }
};
exports.getSocialRecoveryGuardians = getSocialRecoveryGuardians;
const getSocialRecoveryMockSignature = ({ threshold, }) => {
    const mockSignature = '0xe8b94748580ca0b4993c9a1b86b5be851bfc076ff5ce3a1ff65bf16392acfcb800f9b4f1aef1555c7fce5599fffb17e7c635502154a0333ba21f3ae491839af51c';
    return (0, viem_1.encodePacked)(Array(threshold).fill('bytes'), Array(threshold).fill(mockSignature));
};
exports.getSocialRecoveryMockSignature = getSocialRecoveryMockSignature;
//# sourceMappingURL=usage.js.map