"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChangeThresholdAction = exports.getRemoveGuardianAction = exports.getAddGuardianAction = exports.hasGuardianVoted = exports.getAllGuardians = exports.getGuardian = exports.getGuardianConfig = exports.computeEmailAuthAddress = exports.getCancelExpiredRecoveryAction = exports.getCancelRecoveryAction = exports.getCompleteRecoveryAction = exports.getHandleRecoveryAction = exports.getHandleAcceptanceAction = exports.getUpdateRecoveryConfigAction = exports.getEmailAuthImplementation = exports.getDkim = exports.getVerifier = exports.computeRecoveryTemplateId = exports.computeAcceptanceTemplateId = exports.extractRecoveredAccountFromRecoveryCommand = exports.extractRecoveredAccountFromAcceptanceCommand = exports.recoveryCommandTemplates = exports.acceptanceCommandTemplates = exports.getAllowedSelectors = exports.getAllowedValidators = exports.getDisallowValidatorRecoveryAction = exports.getAllowValidatorRecoveryAction = exports.canStartRecoveryRequest = exports.isActivated = exports.getPreviousRecoveryRequest = exports.getRecoveryRequest = exports.getRecoveryConfig = void 0;
const viem_1 = require("viem");
const abi_1 = require("./abi");
const constants_1 = require("../../../constants");
const getRecoveryConfig = async ({ account, client, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'getRecoveryConfig',
            args: [account.address],
        });
    }
    catch (err) {
        return { delay: 0n, expiry: 0n };
    }
};
exports.getRecoveryConfig = getRecoveryConfig;
const getRecoveryRequest = async ({ account, client, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'getRecoveryRequest',
            args: [account.address],
        });
    }
    catch (err) {
        return [0n, 0n, 0n, (0, viem_1.toHex)(0, { size: 32 })];
    }
};
exports.getRecoveryRequest = getRecoveryRequest;
const getPreviousRecoveryRequest = async ({ account, client, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'getPreviousRecoveryRequest',
            args: [account.address],
        });
    }
    catch (err) {
        return {
            previousGuardianInitiated: viem_1.zeroAddress,
            cancelRecoveryCooldown: 0n,
        };
    }
};
exports.getPreviousRecoveryRequest = getPreviousRecoveryRequest;
const isActivated = async ({ account, client, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'isActivated',
            args: [account.address],
        });
    }
    catch (err) {
        return false;
    }
};
exports.isActivated = isActivated;
const canStartRecoveryRequest = async ({ account, client, validator, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'canStartRecoveryRequest',
            args: [account.address, validator],
        });
    }
    catch (err) {
        return false;
    }
};
exports.canStartRecoveryRequest = canStartRecoveryRequest;
const getAllowValidatorRecoveryAction = async ({ client, validator, isInstalledContext, recoverySelector, }) => {
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'allowValidatorRecovery',
        abi: abi_1.abi,
        args: [validator, isInstalledContext, recoverySelector],
    });
    return {
        to: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
exports.getAllowValidatorRecoveryAction = getAllowValidatorRecoveryAction;
const getDisallowValidatorRecoveryAction = async ({ client, validator, prevValidator, recoverySelector, }) => {
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'disallowValidatorRecovery',
        abi: abi_1.abi,
        args: [validator, prevValidator, recoverySelector],
    });
    return {
        to: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
exports.getDisallowValidatorRecoveryAction = getDisallowValidatorRecoveryAction;
const getAllowedValidators = async ({ account, client, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'getAllowedValidators',
            args: [account.address],
        });
    }
    catch (err) {
        return [];
    }
};
exports.getAllowedValidators = getAllowedValidators;
const getAllowedSelectors = async ({ account, client, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'getAllowedSelectors',
            args: [account.address],
        });
    }
    catch (err) {
        return [];
    }
};
exports.getAllowedSelectors = getAllowedSelectors;
const acceptanceCommandTemplates = async ({ client, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'acceptanceCommandTemplates',
        });
    }
    catch (err) {
        return [];
    }
};
exports.acceptanceCommandTemplates = acceptanceCommandTemplates;
const recoveryCommandTemplates = async ({ client, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'recoveryCommandTemplates',
        });
    }
    catch (err) {
        return [];
    }
};
exports.recoveryCommandTemplates = recoveryCommandTemplates;
const extractRecoveredAccountFromAcceptanceCommand = async ({ client, commandParams, templateIdx, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'extractRecoveredAccountFromAcceptanceCommand',
            args: [commandParams, templateIdx],
        });
    }
    catch (err) {
        return viem_1.zeroAddress;
    }
};
exports.extractRecoveredAccountFromAcceptanceCommand = extractRecoveredAccountFromAcceptanceCommand;
const extractRecoveredAccountFromRecoveryCommand = async ({ client, commandParams, templateIdx, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'extractRecoveredAccountFromRecoveryCommand',
            args: [commandParams, templateIdx],
        });
    }
    catch (err) {
        return viem_1.zeroAddress;
    }
};
exports.extractRecoveredAccountFromRecoveryCommand = extractRecoveredAccountFromRecoveryCommand;
const computeAcceptanceTemplateId = async ({ client, templateIdx, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'computeAcceptanceTemplateId',
            args: [templateIdx],
        });
    }
    catch (err) {
        return 0n;
    }
};
exports.computeAcceptanceTemplateId = computeAcceptanceTemplateId;
const computeRecoveryTemplateId = async ({ client, templateIdx, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'computeRecoveryTemplateId',
            args: [templateIdx],
        });
    }
    catch (err) {
        return 0n;
    }
};
exports.computeRecoveryTemplateId = computeRecoveryTemplateId;
const getVerifier = async ({ client, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'verifier',
        });
    }
    catch (err) {
        return viem_1.zeroAddress;
    }
};
exports.getVerifier = getVerifier;
const getDkim = async ({ client, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'dkim',
        });
    }
    catch (err) {
        return viem_1.zeroAddress;
    }
};
exports.getDkim = getDkim;
const getEmailAuthImplementation = async ({ client, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'emailAuthImplementation',
        });
    }
    catch (err) {
        return viem_1.zeroAddress;
    }
};
exports.getEmailAuthImplementation = getEmailAuthImplementation;
const getUpdateRecoveryConfigAction = async ({ client, delay, expiry, }) => {
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'updateRecoveryConfig',
        abi: abi_1.abi,
        args: [{ delay, expiry }],
    });
    return {
        to: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
exports.getUpdateRecoveryConfigAction = getUpdateRecoveryConfigAction;
const getHandleAcceptanceAction = async ({ client, emailAuthMsg, templateIdx, }) => {
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'handleAcceptance',
        abi: abi_1.abi,
        args: [emailAuthMsg, templateIdx],
    });
    return {
        to: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
exports.getHandleAcceptanceAction = getHandleAcceptanceAction;
const getHandleRecoveryAction = async ({ client, emailAuthMsg, templateIdx, }) => {
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'handleRecovery',
        abi: abi_1.abi,
        args: [emailAuthMsg, templateIdx],
    });
    return {
        to: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
exports.getHandleRecoveryAction = getHandleRecoveryAction;
const getCompleteRecoveryAction = async ({ client, account, recoveryData, }) => {
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'completeRecovery',
        abi: abi_1.abi,
        args: [account, recoveryData],
    });
    return {
        to: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
exports.getCompleteRecoveryAction = getCompleteRecoveryAction;
const getCancelRecoveryAction = async ({ client, }) => {
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'cancelRecovery',
        abi: abi_1.abi,
    });
    return {
        to: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
exports.getCancelRecoveryAction = getCancelRecoveryAction;
const getCancelExpiredRecoveryAction = async ({ client, account, }) => {
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'cancelExpiredRecovery',
        abi: abi_1.abi,
        args: [account],
    });
    return {
        to: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
exports.getCancelExpiredRecoveryAction = getCancelExpiredRecoveryAction;
const computeEmailAuthAddress = async ({ client, recoveredAccount, accountSalt, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'computeEmailAuthAddress',
            args: [recoveredAccount, accountSalt],
        });
    }
    catch (err) {
        return viem_1.zeroAddress;
    }
};
exports.computeEmailAuthAddress = computeEmailAuthAddress;
const getGuardianConfig = async ({ account, client, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'getGuardianConfig',
            args: [account.address],
        });
    }
    catch (err) {
        return {
            guardianCount: 0n,
            totalWeight: 0n,
            acceptedWeight: 0n,
            threshold: 0n,
        };
    }
};
exports.getGuardianConfig = getGuardianConfig;
const getGuardian = async ({ account, client, guardian, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'getGuardian',
            args: [account.address, guardian],
        });
    }
    catch (err) {
        return { status: 0, weight: 0n };
    }
};
exports.getGuardian = getGuardian;
const getAllGuardians = async ({ account, client, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'getAllGuardians',
            args: [account.address],
        });
    }
    catch (err) {
        return [];
    }
};
exports.getAllGuardians = getAllGuardians;
const hasGuardianVoted = async ({ account, client, guardian, }) => {
    try {
        return await client.readContract({
            address: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
            abi: abi_1.abi,
            functionName: 'hasGuardianVoted',
            args: [account.address, guardian],
        });
    }
    catch (err) {
        return false;
    }
};
exports.hasGuardianVoted = hasGuardianVoted;
const getAddGuardianAction = async ({ client, guardian, weight, }) => {
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'addGuardian',
        abi: abi_1.abi,
        args: [guardian, weight],
    });
    return {
        to: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
exports.getAddGuardianAction = getAddGuardianAction;
const getRemoveGuardianAction = async ({ client, guardian, }) => {
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'removeGuardian',
        abi: abi_1.abi,
        args: [guardian],
    });
    return {
        to: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
exports.getRemoveGuardianAction = getRemoveGuardianAction;
const getChangeThresholdAction = async ({ client, threshold, }) => {
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'changeThreshold',
        abi: abi_1.abi,
        args: [threshold],
    });
    return {
        to: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        target: constants_1.GLOBAL_CONSTANTS.UNIVERSAL_EMAIL_RECOVERY_ADDRESS,
        value: 0n,
        callData: data,
        data,
    };
};
exports.getChangeThresholdAction = getChangeThresholdAction;
//# sourceMappingURL=usage.js.map