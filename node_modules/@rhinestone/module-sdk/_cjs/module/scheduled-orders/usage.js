"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExecuteScheduledOrderAction = exports.getSwapOrderData = exports.getCreateScheduledOrderAction = void 0;
const viem_1 = require("viem");
const abi_1 = require("./abi");
const uniswap_1 = require("../utils/uniswap");
const constants_1 = require("../../constants");
const getCreateScheduledOrderAction = ({ recurringOrder, }) => {
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'addOrder',
        abi: abi_1.abi,
        args: [
            (0, viem_1.encodePacked)(['uint48', 'uint16', 'uint48', 'bytes'], [
                recurringOrder.repeatEvery,
                recurringOrder.numberOfRepeats,
                recurringOrder.startDate,
                (0, exports.getSwapOrderData)({ recurringOrder }),
            ]),
        ],
    });
    return {
        to: constants_1.GLOBAL_CONSTANTS.SCHEDULED_ORDERS_EXECUTOR_ADDRESS,
        target: constants_1.GLOBAL_CONSTANTS.SCHEDULED_ORDERS_EXECUTOR_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
exports.getCreateScheduledOrderAction = getCreateScheduledOrderAction;
const getSwapOrderData = ({ recurringOrder }) => {
    return (0, viem_1.encodeAbiParameters)([
        { name: 'tokenIn', type: 'address' },
        { name: 'tokenOut', type: 'address' },
        { name: 'amountIn', type: 'uint256' },
    ], [
        recurringOrder.buyToken.token_address,
        recurringOrder.sellToken.token_address,
        BigInt(recurringOrder.amount * 10 ** recurringOrder.sellToken.decimals),
    ]);
};
exports.getSwapOrderData = getSwapOrderData;
const getExecuteScheduledOrderAction = ({ jobId, }) => {
    const swapDetails = (0, uniswap_1.getSwapDetails)();
    const data = (0, viem_1.encodeFunctionData)({
        functionName: 'executeOrder',
        abi: abi_1.abi,
        args: [
            BigInt(jobId),
            swapDetails.sqrtPriceLimitX96,
            swapDetails.amountOutMin,
            swapDetails.fee,
        ],
    });
    return {
        to: constants_1.GLOBAL_CONSTANTS.SCHEDULED_ORDERS_EXECUTOR_ADDRESS,
        target: constants_1.GLOBAL_CONSTANTS.SCHEDULED_ORDERS_EXECUTOR_ADDRESS,
        value: BigInt(0),
        callData: data,
        data,
    };
};
exports.getExecuteScheduledOrderAction = getExecuteScheduledOrderAction;
//# sourceMappingURL=usage.js.map