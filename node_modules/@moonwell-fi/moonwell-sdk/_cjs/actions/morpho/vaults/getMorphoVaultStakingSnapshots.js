"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMorphoVaultStakingSnapshots = getMorphoVaultStakingSnapshots;
const axios_1 = __importDefault(require("axios"));
const dayjs_1 = __importDefault(require("dayjs"));
const utc_js_1 = __importDefault(require("dayjs/plugin/utc.js"));
const index_js_1 = require("../../../common/index.js");
dayjs_1.default.extend(utc_js_1.default);
async function getMorphoVaultStakingSnapshots(client, args) {
    const environment = (0, index_js_1.getEnvironmentFromArgs)(client, args);
    if (!environment) {
        return [];
    }
    return fetchVaultStakingSnapshots(args
        .vaultAddress, environment);
}
async function fetchVaultStakingSnapshots(vaultAddress, environment) {
    const dailyData = [];
    let hasNextPage = true;
    let endCursor;
    while (hasNextPage) {
        const result = await axios_1.default.post(environment.indexerUrl, {
            query: `
          query {
            vaultStakingDailySnapshots (        
              limit: 365,
              orderBy: "timestamp"
              orderDirection: "desc"
              where: {vaultAddress: "${vaultAddress.toLowerCase()}", chainId: ${environment.chainId}}
              ${endCursor ? `after: "${endCursor}"` : ""}
            ) {
              items {
                  totalStaked
                  totalStakedUSD
                  timestamp
              }
              pageInfo {
                hasNextPage
                endCursor
              }
            }
          }
        `,
        });
        if (result.data.data.vaultStakingDailySnapshots) {
            dailyData.push(...result.data.data.vaultStakingDailySnapshots.items.filter((f) => (0, index_js_1.isStartOfDay)(f.timestamp)));
            hasNextPage =
                result.data.data.vaultStakingDailySnapshots.pageInfo.hasNextPage;
            endCursor =
                result.data.data.vaultStakingDailySnapshots.pageInfo.endCursor;
        }
    }
    if (dailyData.length > 0) {
        return dailyData.map((point) => {
            const staked = Number(point.totalStaked);
            const stakedUsd = Number(point.totalStakedUSD);
            const result = {
                vaultAddress: vaultAddress.toLowerCase(),
                chainId: environment.chainId,
                timestamp: point.timestamp * 1000,
                totalStaked: staked,
                totalStakedUsd: stakedUsd,
            };
            return result;
        });
    }
    else {
        return [];
    }
}
//# sourceMappingURL=getMorphoVaultStakingSnapshots.js.map